
RTOS_Project_FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000128e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013d28  08012a88  08012a88  00013a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080267b0  080267b0  000281dc  2**0
                  CONTENTS
  4 .ARM          00000008  080267b0  080267b0  000277b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080267b8  080267b8  000281dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080267b8  080267b8  000277b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080267bc  080267bc  000277bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080267c0  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009264  200001dc  0802699c  000281dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009440  0802699c  00028440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000281dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025495  00000000  00000000  0002820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005692  00000000  00000000  0004d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  00052d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001654  00000000  00000000  00054ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d652  00000000  00000000  0005612c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002609e  00000000  00000000  0007377e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac754  00000000  00000000  0009981c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  00145f70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009074  00000000  00000000  00146024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014f098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a79  00000000  00000000  0014f0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  00151b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012a70 	.word	0x08012a70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08012a70 	.word	0x08012a70

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <strlen>:
 8000340:	4603      	mov	r3, r0
 8000342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000346:	2a00      	cmp	r2, #0
 8000348:	d1fb      	bne.n	8000342 <strlen+0x2>
 800034a:	1a18      	subs	r0, r3, r0
 800034c:	3801      	subs	r0, #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	@ 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <__aeabi_dmul>:
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006d6:	bf1d      	ittte	ne
 80006d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006dc:	ea94 0f0c 	teqne	r4, ip
 80006e0:	ea95 0f0c 	teqne	r5, ip
 80006e4:	f000 f8de 	bleq	80008a4 <__aeabi_dmul+0x1dc>
 80006e8:	442c      	add	r4, r5
 80006ea:	ea81 0603 	eor.w	r6, r1, r3
 80006ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006fa:	bf18      	it	ne
 80006fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000704:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000708:	d038      	beq.n	800077c <__aeabi_dmul+0xb4>
 800070a:	fba0 ce02 	umull	ip, lr, r0, r2
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000716:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800071a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800071e:	f04f 0600 	mov.w	r6, #0
 8000722:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000726:	f09c 0f00 	teq	ip, #0
 800072a:	bf18      	it	ne
 800072c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000730:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000734:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000738:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800073c:	d204      	bcs.n	8000748 <__aeabi_dmul+0x80>
 800073e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000742:	416d      	adcs	r5, r5
 8000744:	eb46 0606 	adc.w	r6, r6, r6
 8000748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800074c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800075c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000760:	bf88      	it	hi
 8000762:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000766:	d81e      	bhi.n	80007a6 <__aeabi_dmul+0xde>
 8000768:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800076c:	bf08      	it	eq
 800076e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000772:	f150 0000 	adcs.w	r0, r0, #0
 8000776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000780:	ea46 0101 	orr.w	r1, r6, r1
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000790:	bfc2      	ittt	gt
 8000792:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800079a:	bd70      	popgt	{r4, r5, r6, pc}
 800079c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007a0:	f04f 0e00 	mov.w	lr, #0
 80007a4:	3c01      	subs	r4, #1
 80007a6:	f300 80ab 	bgt.w	8000900 <__aeabi_dmul+0x238>
 80007aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ae:	bfde      	ittt	le
 80007b0:	2000      	movle	r0, #0
 80007b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007b6:	bd70      	pople	{r4, r5, r6, pc}
 80007b8:	f1c4 0400 	rsb	r4, r4, #0
 80007bc:	3c20      	subs	r4, #32
 80007be:	da35      	bge.n	800082c <__aeabi_dmul+0x164>
 80007c0:	340c      	adds	r4, #12
 80007c2:	dc1b      	bgt.n	80007fc <__aeabi_dmul+0x134>
 80007c4:	f104 0414 	add.w	r4, r4, #20
 80007c8:	f1c4 0520 	rsb	r5, r4, #32
 80007cc:	fa00 f305 	lsl.w	r3, r0, r5
 80007d0:	fa20 f004 	lsr.w	r0, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea40 0002 	orr.w	r0, r0, r2
 80007dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007e8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ec:	eb42 0106 	adc.w	r1, r2, r6
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 040c 	rsb	r4, r4, #12
 8000800:	f1c4 0520 	rsb	r5, r4, #32
 8000804:	fa00 f304 	lsl.w	r3, r0, r4
 8000808:	fa20 f005 	lsr.w	r0, r0, r5
 800080c:	fa01 f204 	lsl.w	r2, r1, r4
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800081c:	f141 0100 	adc.w	r1, r1, #0
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f205 	lsl.w	r2, r0, r5
 8000834:	ea4e 0e02 	orr.w	lr, lr, r2
 8000838:	fa20 f304 	lsr.w	r3, r0, r4
 800083c:	fa01 f205 	lsl.w	r2, r1, r5
 8000840:	ea43 0302 	orr.w	r3, r3, r2
 8000844:	fa21 f004 	lsr.w	r0, r1, r4
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800084c:	fa21 f204 	lsr.w	r2, r1, r4
 8000850:	ea20 0002 	bic.w	r0, r0, r2
 8000854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f094 0f00 	teq	r4, #0
 8000868:	d10f      	bne.n	800088a <__aeabi_dmul+0x1c2>
 800086a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800086e:	0040      	lsls	r0, r0, #1
 8000870:	eb41 0101 	adc.w	r1, r1, r1
 8000874:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3c01      	subeq	r4, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1a6>
 800087e:	ea41 0106 	orr.w	r1, r1, r6
 8000882:	f095 0f00 	teq	r5, #0
 8000886:	bf18      	it	ne
 8000888:	4770      	bxne	lr
 800088a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	eb43 0303 	adc.w	r3, r3, r3
 8000894:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000898:	bf08      	it	eq
 800089a:	3d01      	subeq	r5, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1c6>
 800089e:	ea43 0306 	orr.w	r3, r3, r6
 80008a2:	4770      	bx	lr
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ac:	bf18      	it	ne
 80008ae:	ea95 0f0c 	teqne	r5, ip
 80008b2:	d00c      	beq.n	80008ce <__aeabi_dmul+0x206>
 80008b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b8:	bf18      	it	ne
 80008ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008be:	d1d1      	bne.n	8000864 <__aeabi_dmul+0x19c>
 80008c0:	ea81 0103 	eor.w	r1, r1, r3
 80008c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	bd70      	pop	{r4, r5, r6, pc}
 80008ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d2:	bf06      	itte	eq
 80008d4:	4610      	moveq	r0, r2
 80008d6:	4619      	moveq	r1, r3
 80008d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008dc:	d019      	beq.n	8000912 <__aeabi_dmul+0x24a>
 80008de:	ea94 0f0c 	teq	r4, ip
 80008e2:	d102      	bne.n	80008ea <__aeabi_dmul+0x222>
 80008e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008e8:	d113      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	d105      	bne.n	80008fc <__aeabi_dmul+0x234>
 80008f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008f4:	bf1c      	itt	ne
 80008f6:	4610      	movne	r0, r2
 80008f8:	4619      	movne	r1, r3
 80008fa:	d10a      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008fc:	ea81 0103 	eor.w	r1, r1, r3
 8000900:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000904:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000908:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	bd70      	pop	{r4, r5, r6, pc}
 8000912:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000916:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800091a:	bd70      	pop	{r4, r5, r6, pc}

0800091c <__aeabi_ddiv>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000922:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800092a:	bf1d      	ittte	ne
 800092c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000930:	ea94 0f0c 	teqne	r4, ip
 8000934:	ea95 0f0c 	teqne	r5, ip
 8000938:	f000 f8a7 	bleq	8000a8a <__aeabi_ddiv+0x16e>
 800093c:	eba4 0405 	sub.w	r4, r4, r5
 8000940:	ea81 0e03 	eor.w	lr, r1, r3
 8000944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000948:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800094c:	f000 8088 	beq.w	8000a60 <__aeabi_ddiv+0x144>
 8000950:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000954:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800095c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000960:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800096c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000970:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000974:	429d      	cmp	r5, r3
 8000976:	bf08      	it	eq
 8000978:	4296      	cmpeq	r6, r2
 800097a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800097e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000982:	d202      	bcs.n	800098a <__aeabi_ddiv+0x6e>
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	1ab6      	subs	r6, r6, r2
 800098c:	eb65 0503 	sbc.w	r5, r5, r3
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800099a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009fc:	d018      	beq.n	8000a30 <__aeabi_ddiv+0x114>
 80009fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a1a:	d1c0      	bne.n	800099e <__aeabi_ddiv+0x82>
 8000a1c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a20:	d10b      	bne.n	8000a3a <__aeabi_ddiv+0x11e>
 8000a22:	ea41 0100 	orr.w	r1, r1, r0
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a2e:	e7b6      	b.n	800099e <__aeabi_ddiv+0x82>
 8000a30:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a34:	bf04      	itt	eq
 8000a36:	4301      	orreq	r1, r0
 8000a38:	2000      	moveq	r0, #0
 8000a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a3e:	bf88      	it	hi
 8000a40:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a44:	f63f aeaf 	bhi.w	80007a6 <__aeabi_dmul+0xde>
 8000a48:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a4c:	bf04      	itt	eq
 8000a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a56:	f150 0000 	adcs.w	r0, r0, #0
 8000a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a6c:	bfc2      	ittt	gt
 8000a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a76:	bd70      	popgt	{r4, r5, r6, pc}
 8000a78:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7c:	f04f 0e00 	mov.w	lr, #0
 8000a80:	3c01      	subs	r4, #1
 8000a82:	e690      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a84:	ea45 0e06 	orr.w	lr, r5, r6
 8000a88:	e68d      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a8e:	ea94 0f0c 	teq	r4, ip
 8000a92:	bf08      	it	eq
 8000a94:	ea95 0f0c 	teqeq	r5, ip
 8000a98:	f43f af3b 	beq.w	8000912 <__aeabi_dmul+0x24a>
 8000a9c:	ea94 0f0c 	teq	r4, ip
 8000aa0:	d10a      	bne.n	8000ab8 <__aeabi_ddiv+0x19c>
 8000aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aa6:	f47f af34 	bne.w	8000912 <__aeabi_dmul+0x24a>
 8000aaa:	ea95 0f0c 	teq	r5, ip
 8000aae:	f47f af25 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	e72c      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000ab8:	ea95 0f0c 	teq	r5, ip
 8000abc:	d106      	bne.n	8000acc <__aeabi_ddiv+0x1b0>
 8000abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ac2:	f43f aefd 	beq.w	80008c0 <__aeabi_dmul+0x1f8>
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4619      	mov	r1, r3
 8000aca:	e722      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ad6:	f47f aec5 	bne.w	8000864 <__aeabi_dmul+0x19c>
 8000ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ade:	f47f af0d 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ae6:	f47f aeeb 	bne.w	80008c0 <__aeabi_dmul+0x1f8>
 8000aea:	e712      	b.n	8000912 <__aeabi_dmul+0x24a>

08000aec <__gedf2>:
 8000aec:	f04f 3cff 	mov.w	ip, #4294967295
 8000af0:	e006      	b.n	8000b00 <__cmpdf2+0x4>
 8000af2:	bf00      	nop

08000af4 <__ledf2>:
 8000af4:	f04f 0c01 	mov.w	ip, #1
 8000af8:	e002      	b.n	8000b00 <__cmpdf2+0x4>
 8000afa:	bf00      	nop

08000afc <__cmpdf2>:
 8000afc:	f04f 0c01 	mov.w	ip, #1
 8000b00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b16:	d01b      	beq.n	8000b50 <__cmpdf2+0x54>
 8000b18:	b001      	add	sp, #4
 8000b1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b1e:	bf0c      	ite	eq
 8000b20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b24:	ea91 0f03 	teqne	r1, r3
 8000b28:	bf02      	ittt	eq
 8000b2a:	ea90 0f02 	teqeq	r0, r2
 8000b2e:	2000      	moveq	r0, #0
 8000b30:	4770      	bxeq	lr
 8000b32:	f110 0f00 	cmn.w	r0, #0
 8000b36:	ea91 0f03 	teq	r1, r3
 8000b3a:	bf58      	it	pl
 8000b3c:	4299      	cmppl	r1, r3
 8000b3e:	bf08      	it	eq
 8000b40:	4290      	cmpeq	r0, r2
 8000b42:	bf2c      	ite	cs
 8000b44:	17d8      	asrcs	r0, r3, #31
 8000b46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b4a:	f040 0001 	orr.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__cmpdf2+0x64>
 8000b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5e:	d107      	bne.n	8000b70 <__cmpdf2+0x74>
 8000b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d1d6      	bne.n	8000b18 <__cmpdf2+0x1c>
 8000b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6e:	d0d3      	beq.n	8000b18 <__cmpdf2+0x1c>
 8000b70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdrcmple>:
 8000b78:	4684      	mov	ip, r0
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4662      	mov	r2, ip
 8000b7e:	468c      	mov	ip, r1
 8000b80:	4619      	mov	r1, r3
 8000b82:	4663      	mov	r3, ip
 8000b84:	e000      	b.n	8000b88 <__aeabi_cdcmpeq>
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdcmpeq>:
 8000b88:	b501      	push	{r0, lr}
 8000b8a:	f7ff ffb7 	bl	8000afc <__cmpdf2>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	bf48      	it	mi
 8000b92:	f110 0f00 	cmnmi.w	r0, #0
 8000b96:	bd01      	pop	{r0, pc}

08000b98 <__aeabi_dcmpeq>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff fff4 	bl	8000b88 <__aeabi_cdcmpeq>
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2001      	moveq	r0, #1
 8000ba4:	2000      	movne	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmplt>:
 8000bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb0:	f7ff ffea 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bb4:	bf34      	ite	cc
 8000bb6:	2001      	movcc	r0, #1
 8000bb8:	2000      	movcs	r0, #0
 8000bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_dcmple>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff ffe0 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bc8:	bf94      	ite	ls
 8000bca:	2001      	movls	r0, #1
 8000bcc:	2000      	movhi	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_dcmpge>:
 8000bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd8:	f7ff ffce 	bl	8000b78 <__aeabi_cdrcmple>
 8000bdc:	bf94      	ite	ls
 8000bde:	2001      	movls	r0, #1
 8000be0:	2000      	movhi	r0, #0
 8000be2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be6:	bf00      	nop

08000be8 <__aeabi_dcmpgt>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff ffc4 	bl	8000b78 <__aeabi_cdrcmple>
 8000bf0:	bf34      	ite	cc
 8000bf2:	2001      	movcc	r0, #1
 8000bf4:	2000      	movcs	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmpun>:
 8000bfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x10>
 8000c06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c0a:	d10a      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x20>
 8000c16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0001 	mov.w	r0, #1
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2iz>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c30:	d215      	bcs.n	8000c5e <__aeabi_d2iz+0x36>
 8000c32:	d511      	bpl.n	8000c58 <__aeabi_d2iz+0x30>
 8000c34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c3c:	d912      	bls.n	8000c64 <__aeabi_d2iz+0x3c>
 8000c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	4770      	bx	lr
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c62:	d105      	bne.n	8000c70 <__aeabi_d2iz+0x48>
 8000c64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	bf08      	it	eq
 8000c6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2uiz>:
 8000c78:	004a      	lsls	r2, r1, #1
 8000c7a:	d211      	bcs.n	8000ca0 <__aeabi_d2uiz+0x28>
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c80:	d211      	bcs.n	8000ca6 <__aeabi_d2uiz+0x2e>
 8000c82:	d50d      	bpl.n	8000ca0 <__aeabi_d2uiz+0x28>
 8000c84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d40e      	bmi.n	8000cac <__aeabi_d2uiz+0x34>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000caa:	d102      	bne.n	8000cb2 <__aeabi_d2uiz+0x3a>
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	4770      	bx	lr
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2f>:
 8000cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000cc0:	bf24      	itt	cs
 8000cc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000cc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000cca:	d90d      	bls.n	8000ce8 <__aeabi_d2f+0x30>
 8000ccc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000cdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cec:	d121      	bne.n	8000d32 <__aeabi_d2f+0x7a>
 8000cee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000cf2:	bfbc      	itt	lt
 8000cf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000cf8:	4770      	bxlt	lr
 8000cfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d02:	f1c2 0218 	rsb	r2, r2, #24
 8000d06:	f1c2 0c20 	rsb	ip, r2, #32
 8000d0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d12:	bf18      	it	ne
 8000d14:	f040 0001 	orrne.w	r0, r0, #1
 8000d18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d24:	ea40 000c 	orr.w	r0, r0, ip
 8000d28:	fa23 f302 	lsr.w	r3, r3, r2
 8000d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d30:	e7cc      	b.n	8000ccc <__aeabi_d2f+0x14>
 8000d32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d36:	d107      	bne.n	8000d48 <__aeabi_d2f+0x90>
 8000d38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d46:	4770      	bxne	lr
 8000d48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a0 	b.w	80010b0 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff ff0b 	bl	8000bac <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc81 	bl	80006c8 <__aeabi_dmul>
 8000dc6:	f7ff ff57 	bl	8000c78 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fc02 	bl	80005d4 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc78 	bl	80006c8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff faba 	bl	8000358 <__aeabi_dsub>
 8000de4:	f7ff ff48 	bl	8000c78 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14e      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e00:	4694      	mov	ip, r2
 8000e02:	458c      	cmp	ip, r1
 8000e04:	4686      	mov	lr, r0
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	d962      	bls.n	8000ed2 <__udivmoddi4+0xde>
 8000e0c:	b14a      	cbz	r2, 8000e22 <__udivmoddi4+0x2e>
 8000e0e:	f1c2 0320 	rsb	r3, r2, #32
 8000e12:	4091      	lsls	r1, r2
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	4319      	orrs	r1, r3
 8000e1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f f68c 	uxth.w	r6, ip
 8000e2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb07 1114 	mls	r1, r7, r4, r1
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb04 f106 	mul.w	r1, r4, r6
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e4a:	f080 8112 	bcs.w	8001072 <__udivmoddi4+0x27e>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 810f 	bls.w	8001072 <__udivmoddi4+0x27e>
 8000e54:	3c02      	subs	r4, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a59      	subs	r1, r3, r1
 8000e5a:	fa1f f38e 	uxth.w	r3, lr
 8000e5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e62:	fb07 1110 	mls	r1, r7, r0, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f606 	mul.w	r6, r0, r6
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x94>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e7a:	f080 80fc 	bcs.w	8001076 <__udivmoddi4+0x282>
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	f240 80f9 	bls.w	8001076 <__udivmoddi4+0x282>
 8000e84:	4463      	add	r3, ip
 8000e86:	3802      	subs	r0, #2
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e8e:	2100      	movs	r1, #0
 8000e90:	b11d      	cbz	r5, 8000e9a <__udivmoddi4+0xa6>
 8000e92:	40d3      	lsrs	r3, r2
 8000e94:	2200      	movs	r2, #0
 8000e96:	e9c5 3200 	strd	r3, r2, [r5]
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d905      	bls.n	8000eae <__udivmoddi4+0xba>
 8000ea2:	b10d      	cbz	r5, 8000ea8 <__udivmoddi4+0xb4>
 8000ea4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e7f5      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000eae:	fab3 f183 	clz	r1, r3
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d146      	bne.n	8000f44 <__udivmoddi4+0x150>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xcc>
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	f0c0 80f0 	bcc.w	80010a0 <__udivmoddi4+0x2ac>
 8000ec0:	1a86      	subs	r6, r0, r2
 8000ec2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d0e6      	beq.n	8000e9a <__udivmoddi4+0xa6>
 8000ecc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ed0:	e7e3      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	f040 8090 	bne.w	8000ff8 <__udivmoddi4+0x204>
 8000ed8:	eba1 040c 	sub.w	r4, r1, ip
 8000edc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee0:	fa1f f78c 	uxth.w	r7, ip
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eee:	fb08 4416 	mls	r4, r8, r6, r4
 8000ef2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef6:	fb07 f006 	mul.w	r0, r7, r6
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x11c>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x11a>
 8000f08:	4298      	cmp	r0, r3
 8000f0a:	f200 80cd 	bhi.w	80010a8 <__udivmoddi4+0x2b4>
 8000f0e:	4626      	mov	r6, r4
 8000f10:	1a1c      	subs	r4, r3, r0
 8000f12:	fa1f f38e 	uxth.w	r3, lr
 8000f16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f22:	fb00 f707 	mul.w	r7, r0, r7
 8000f26:	429f      	cmp	r7, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x148>
 8000f2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f32:	d202      	bcs.n	8000f3a <__udivmoddi4+0x146>
 8000f34:	429f      	cmp	r7, r3
 8000f36:	f200 80b0 	bhi.w	800109a <__udivmoddi4+0x2a6>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	1bdb      	subs	r3, r3, r7
 8000f3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f42:	e7a5      	b.n	8000e90 <__udivmoddi4+0x9c>
 8000f44:	f1c1 0620 	rsb	r6, r1, #32
 8000f48:	408b      	lsls	r3, r1
 8000f4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f54:	fa04 f301 	lsl.w	r3, r4, r1
 8000f58:	ea43 030c 	orr.w	r3, r3, ip
 8000f5c:	40f4      	lsrs	r4, r6
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	0c38      	lsrs	r0, r7, #16
 8000f64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f68:	fbb4 fef0 	udiv	lr, r4, r0
 8000f6c:	fa1f fc87 	uxth.w	ip, r7
 8000f70:	fb00 441e 	mls	r4, r0, lr, r4
 8000f74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f78:	fb0e f90c 	mul.w	r9, lr, ip
 8000f7c:	45a1      	cmp	r9, r4
 8000f7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f82:	d90a      	bls.n	8000f9a <__udivmoddi4+0x1a6>
 8000f84:	193c      	adds	r4, r7, r4
 8000f86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f8a:	f080 8084 	bcs.w	8001096 <__udivmoddi4+0x2a2>
 8000f8e:	45a1      	cmp	r9, r4
 8000f90:	f240 8081 	bls.w	8001096 <__udivmoddi4+0x2a2>
 8000f94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f98:	443c      	add	r4, r7
 8000f9a:	eba4 0409 	sub.w	r4, r4, r9
 8000f9e:	fa1f f983 	uxth.w	r9, r3
 8000fa2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fa6:	fb00 4413 	mls	r4, r0, r3, r4
 8000faa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fb2:	45a4      	cmp	ip, r4
 8000fb4:	d907      	bls.n	8000fc6 <__udivmoddi4+0x1d2>
 8000fb6:	193c      	adds	r4, r7, r4
 8000fb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fbc:	d267      	bcs.n	800108e <__udivmoddi4+0x29a>
 8000fbe:	45a4      	cmp	ip, r4
 8000fc0:	d965      	bls.n	800108e <__udivmoddi4+0x29a>
 8000fc2:	3b02      	subs	r3, #2
 8000fc4:	443c      	add	r4, r7
 8000fc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fca:	fba0 9302 	umull	r9, r3, r0, r2
 8000fce:	eba4 040c 	sub.w	r4, r4, ip
 8000fd2:	429c      	cmp	r4, r3
 8000fd4:	46ce      	mov	lr, r9
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	d351      	bcc.n	800107e <__udivmoddi4+0x28a>
 8000fda:	d04e      	beq.n	800107a <__udivmoddi4+0x286>
 8000fdc:	b155      	cbz	r5, 8000ff4 <__udivmoddi4+0x200>
 8000fde:	ebb8 030e 	subs.w	r3, r8, lr
 8000fe2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fe6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fea:	40cb      	lsrs	r3, r1
 8000fec:	431e      	orrs	r6, r3
 8000fee:	40cc      	lsrs	r4, r1
 8000ff0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	e750      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ff8:	f1c2 0320 	rsb	r3, r2, #32
 8000ffc:	fa20 f103 	lsr.w	r1, r0, r3
 8001000:	fa0c fc02 	lsl.w	ip, ip, r2
 8001004:	fa24 f303 	lsr.w	r3, r4, r3
 8001008:	4094      	lsls	r4, r2
 800100a:	430c      	orrs	r4, r1
 800100c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001010:	fa00 fe02 	lsl.w	lr, r0, r2
 8001014:	fa1f f78c 	uxth.w	r7, ip
 8001018:	fbb3 f0f8 	udiv	r0, r3, r8
 800101c:	fb08 3110 	mls	r1, r8, r0, r3
 8001020:	0c23      	lsrs	r3, r4, #16
 8001022:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001026:	fb00 f107 	mul.w	r1, r0, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x24c>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f100 36ff 	add.w	r6, r0, #4294967295
 8001036:	d22c      	bcs.n	8001092 <__udivmoddi4+0x29e>
 8001038:	4299      	cmp	r1, r3
 800103a:	d92a      	bls.n	8001092 <__udivmoddi4+0x29e>
 800103c:	3802      	subs	r0, #2
 800103e:	4463      	add	r3, ip
 8001040:	1a5b      	subs	r3, r3, r1
 8001042:	b2a4      	uxth	r4, r4
 8001044:	fbb3 f1f8 	udiv	r1, r3, r8
 8001048:	fb08 3311 	mls	r3, r8, r1, r3
 800104c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001050:	fb01 f307 	mul.w	r3, r1, r7
 8001054:	42a3      	cmp	r3, r4
 8001056:	d908      	bls.n	800106a <__udivmoddi4+0x276>
 8001058:	eb1c 0404 	adds.w	r4, ip, r4
 800105c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001060:	d213      	bcs.n	800108a <__udivmoddi4+0x296>
 8001062:	42a3      	cmp	r3, r4
 8001064:	d911      	bls.n	800108a <__udivmoddi4+0x296>
 8001066:	3902      	subs	r1, #2
 8001068:	4464      	add	r4, ip
 800106a:	1ae4      	subs	r4, r4, r3
 800106c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001070:	e739      	b.n	8000ee6 <__udivmoddi4+0xf2>
 8001072:	4604      	mov	r4, r0
 8001074:	e6f0      	b.n	8000e58 <__udivmoddi4+0x64>
 8001076:	4608      	mov	r0, r1
 8001078:	e706      	b.n	8000e88 <__udivmoddi4+0x94>
 800107a:	45c8      	cmp	r8, r9
 800107c:	d2ae      	bcs.n	8000fdc <__udivmoddi4+0x1e8>
 800107e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001082:	eb63 0c07 	sbc.w	ip, r3, r7
 8001086:	3801      	subs	r0, #1
 8001088:	e7a8      	b.n	8000fdc <__udivmoddi4+0x1e8>
 800108a:	4631      	mov	r1, r6
 800108c:	e7ed      	b.n	800106a <__udivmoddi4+0x276>
 800108e:	4603      	mov	r3, r0
 8001090:	e799      	b.n	8000fc6 <__udivmoddi4+0x1d2>
 8001092:	4630      	mov	r0, r6
 8001094:	e7d4      	b.n	8001040 <__udivmoddi4+0x24c>
 8001096:	46d6      	mov	lr, sl
 8001098:	e77f      	b.n	8000f9a <__udivmoddi4+0x1a6>
 800109a:	4463      	add	r3, ip
 800109c:	3802      	subs	r0, #2
 800109e:	e74d      	b.n	8000f3c <__udivmoddi4+0x148>
 80010a0:	4606      	mov	r6, r0
 80010a2:	4623      	mov	r3, r4
 80010a4:	4608      	mov	r0, r1
 80010a6:	e70f      	b.n	8000ec8 <__udivmoddi4+0xd4>
 80010a8:	3e02      	subs	r6, #2
 80010aa:	4463      	add	r3, ip
 80010ac:	e730      	b.n	8000f10 <__udivmoddi4+0x11c>
 80010ae:	bf00      	nop

080010b0 <__aeabi_idiv0>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	font = font_t;
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <GFX_SetFont+0x1c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200001f8 	.word	0x200001f8

080010d4 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b089      	sub	sp, #36	@ 0x24
 80010d8:	af02      	add	r7, sp, #8
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	4611      	mov	r1, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	460b      	mov	r3, r1
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b7e      	cmp	r3, #126	@ 0x7e
 80010ee:	f200 80a3 	bhi.w	8001238 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80010f2:	2300      	movs	r3, #0
 80010f4:	75fb      	strb	r3, [r7, #23]
 80010f6:	e096      	b.n	8001226 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80010f8:	4b51      	ldr	r3, [pc, #324]	@ (8001240 <GFX_DrawChar+0x16c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	3b20      	subs	r3, #32
 8001100:	494f      	ldr	r1, [pc, #316]	@ (8001240 <GFX_DrawChar+0x16c>)
 8001102:	6809      	ldr	r1, [r1, #0]
 8001104:	3101      	adds	r1, #1
 8001106:	7809      	ldrb	r1, [r1, #0]
 8001108:	fb03 f101 	mul.w	r1, r3, r1
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	440b      	add	r3, r1
 8001110:	3302      	adds	r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001118:	2300      	movs	r3, #0
 800111a:	757b      	strb	r3, [r7, #21]
 800111c:	e078      	b.n	8001210 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 800111e:	7dbb      	ldrb	r3, [r7, #22]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d032      	beq.n	800118e <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001128:	4b46      	ldr	r3, [pc, #280]	@ (8001244 <GFX_DrawChar+0x170>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d113      	bne.n	8001158 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	b29a      	uxth	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	b29b      	uxth	r3, r3
 8001138:	4413      	add	r3, r2
 800113a:	b29b      	uxth	r3, r3
 800113c:	b218      	sxth	r0, r3
 800113e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001142:	b29a      	uxth	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4413      	add	r3, r2
 800114a:	b29b      	uxth	r3, r3
 800114c:	b21b      	sxth	r3, r3
 800114e:	79ba      	ldrb	r2, [r7, #6]
 8001150:	4619      	mov	r1, r3
 8001152:	f000 f9d3 	bl	80014fc <SSD1306_DrawPixel>
 8001156:	e052      	b.n	80011fe <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	4a3a      	ldr	r2, [pc, #232]	@ (8001244 <GFX_DrawChar+0x170>)
 800115c:	7812      	ldrb	r2, [r2, #0]
 800115e:	fb03 f202 	mul.w	r2, r3, r2
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	18d0      	adds	r0, r2, r3
 8001166:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800116a:	4a36      	ldr	r2, [pc, #216]	@ (8001244 <GFX_DrawChar+0x170>)
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	fb03 f202 	mul.w	r2, r3, r2
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	18d1      	adds	r1, r2, r3
 8001176:	4b33      	ldr	r3, [pc, #204]	@ (8001244 <GFX_DrawChar+0x170>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b31      	ldr	r3, [pc, #196]	@ (8001244 <GFX_DrawChar+0x170>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461c      	mov	r4, r3
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	4623      	mov	r3, r4
 8001188:	f000 f960 	bl	800144c <GFX_DrawFillRectangle>
 800118c:	e037      	b.n	80011fe <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800118e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001192:	2b00      	cmp	r3, #0
 8001194:	d133      	bne.n	80011fe <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8001196:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <GFX_DrawChar+0x170>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d114      	bne.n	80011c8 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4413      	add	r3, r2
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b218      	sxth	r0, r3
 80011ac:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80011c0:	4619      	mov	r1, r3
 80011c2:	f000 f99b 	bl	80014fc <SSD1306_DrawPixel>
 80011c6:	e01a      	b.n	80011fe <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
 80011ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001244 <GFX_DrawChar+0x170>)
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	fb03 f202 	mul.w	r2, r3, r2
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	18d0      	adds	r0, r2, r3
 80011d6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011da:	4a1a      	ldr	r2, [pc, #104]	@ (8001244 <GFX_DrawChar+0x170>)
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	fb03 f202 	mul.w	r2, r3, r2
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	18d1      	adds	r1, r2, r3
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <GFX_DrawChar+0x170>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <GFX_DrawChar+0x170>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461c      	mov	r4, r3
 80011f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	4623      	mov	r3, r4
 80011fa:	f000 f927 	bl	800144c <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80011fe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	3301      	adds	r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	757b      	strb	r3, [r7, #21]
 800120a:	7dbb      	ldrb	r3, [r7, #22]
 800120c:	085b      	lsrs	r3, r3, #1
 800120e:	75bb      	strb	r3, [r7, #22]
 8001210:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001214:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <GFX_DrawChar+0x16c>)
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	7812      	ldrb	r2, [r2, #0]
 800121a:	4293      	cmp	r3, r2
 800121c:	f6ff af7f 	blt.w	800111e <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	3301      	adds	r3, #1
 8001224:	75fb      	strb	r3, [r7, #23]
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <GFX_DrawChar+0x16c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	7dfa      	ldrb	r2, [r7, #23]
 8001230:	429a      	cmp	r2, r3
 8001232:	f4ff af61 	bcc.w	80010f8 <GFX_DrawChar+0x24>
 8001236:	e000      	b.n	800123a <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001238:	bf00      	nop
            }
        }
    }
}
 800123a:	371c      	adds	r7, #28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	200001f8 	.word	0x200001f8
 8001244:	20000000 	.word	0x20000000

08001248 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af02      	add	r7, sp, #8
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001260:	e03e      	b.n	80012e0 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001262:	78f9      	ldrb	r1, [r7, #3]
 8001264:	7cfa      	ldrb	r2, [r7, #19]
 8001266:	f897 3020 	ldrb.w	r3, [r7, #32]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	460b      	mov	r3, r1
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	6978      	ldr	r0, [r7, #20]
 8001272:	f7ff ff2f 	bl	80010d4 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001276:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <GFX_DrawString+0xb0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <GFX_DrawString+0xb4>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	3301      	adds	r3, #1
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001290:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d120      	bne.n	80012da <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001298:	2300      	movs	r3, #0
 800129a:	74bb      	strb	r3, [r7, #18]
 800129c:	e012      	b.n	80012c4 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	b218      	sxth	r0, r3
 80012a8:	7cbb      	ldrb	r3, [r7, #18]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	f000 f91f 	bl	80014fc <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80012be:	7cbb      	ldrb	r3, [r7, #18]
 80012c0:	3301      	adds	r3, #1
 80012c2:	74bb      	strb	r3, [r7, #18]
 80012c4:	7cba      	ldrb	r2, [r7, #18]
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <GFX_DrawString+0xb0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <GFX_DrawString+0xb4>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	429a      	cmp	r2, r3
 80012d8:	dbe1      	blt.n	800129e <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1ba      	bne.n	8001262 <GFX_DrawString+0x1a>
	}
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001f8 	.word	0x200001f8
 80012fc:	20000000 	.word	0x20000000

08001300 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	@ 0x30
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001318:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1acb      	subs	r3, r1, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	bfb8      	it	lt
 8001326:	425b      	neglt	r3, r3
 8001328:	429a      	cmp	r2, r3
 800132a:	bfcc      	ite	gt
 800132c:	2301      	movgt	r3, #1
 800132e:	2300      	movle	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	857b      	strh	r3, [r7, #42]	@ 0x2a

	    if (steep) {
 8001334:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00b      	beq.n	8001354 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001346:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	623b      	str	r3, [r7, #32]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	dd0b      	ble.n	8001374 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	b29a      	uxth	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29b      	uxth	r3, r3
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	b29b      	uxth	r3, r3
 8001380:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	bfb8      	it	lt
 800138c:	425b      	neglt	r3, r3
 800138e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001390:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001394:	0fda      	lsrs	r2, r3, #31
 8001396:	4413      	add	r3, r2
 8001398:	105b      	asrs	r3, r3, #1
 800139a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	da02      	bge.n	80013aa <GFX_WriteLine+0xaa>
	        ystep = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80013a8:	e030      	b.n	800140c <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 80013aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80013b0:	e02c      	b.n	800140c <GFX_WriteLine+0x10c>
	        if (steep) {
 80013b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	b211      	sxth	r1, r2
 80013c2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f898 	bl	80014fc <SSD1306_DrawPixel>
 80013cc:	e008      	b.n	80013e0 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	b211      	sxth	r1, r2
 80013d6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f88e 	bl	80014fc <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80013e0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80013e2:	8abb      	ldrh	r3, [r7, #20]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	        if (err < 0) {
 80013ea:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da09      	bge.n	8001406 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80013f2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	4413      	add	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80013fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80013fe:	8afb      	ldrh	r3, [r7, #22]
 8001400:	4413      	add	r3, r2
 8001402:	b29b      	uxth	r3, r3
 8001404:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    for (; x_start<=x_end; x_start++) {
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3301      	adds	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	ddce      	ble.n	80013b2 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3730      	adds	r7, #48	@ 0x30
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af02      	add	r7, sp, #8
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	1e5a      	subs	r2, r3, #1
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4613      	mov	r3, r2
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff ff5e 	bl	8001300 <GFX_WriteLine>
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	4611      	mov	r1, r2
 8001458:	461a      	mov	r2, r3
 800145a:	460b      	mov	r3, r1
 800145c:	80fb      	strh	r3, [r7, #6]
 800145e:	4613      	mov	r3, r2
 8001460:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e009      	b.n	800147c <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001468:	88ba      	ldrh	r2, [r7, #4]
 800146a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	6978      	ldr	r0, [r7, #20]
 8001472:	f7ff ffd4 	bl	800141e <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	88fa      	ldrh	r2, [r7, #6]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbef      	blt.n	8001468 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af04      	add	r7, sp, #16
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <SSD1306_Command+0x30>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	2301      	movs	r3, #1
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	1dfb      	adds	r3, r7, #7
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2301      	movs	r3, #1
 80014b2:	2200      	movs	r2, #0
 80014b4:	2178      	movs	r1, #120	@ 0x78
 80014b6:	f004 fda1 	bl	8005ffc <HAL_I2C_Mem_Write>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200001fc 	.word	0x200001fc

080014c8 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af04      	add	r7, sp, #16
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size);
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 80014d4:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <SSD1306_Data+0x30>)
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2301      	movs	r3, #1
 80014e8:	2240      	movs	r2, #64	@ 0x40
 80014ea:	2178      	movs	r1, #120	@ 0x78
 80014ec:	f004 fd86 	bl	8005ffc <HAL_I2C_Mem_Write>
#endif
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200001fc 	.word	0x200001fc

080014fc <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	80fb      	strh	r3, [r7, #6]
 8001506:	460b      	mov	r3, r1
 8001508:	80bb      	strh	r3, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800150e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db79      	blt.n	800160a <SSD1306_DrawPixel+0x10e>
 8001516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151a:	2b7f      	cmp	r3, #127	@ 0x7f
 800151c:	dc75      	bgt.n	800160a <SSD1306_DrawPixel+0x10e>
 800151e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db71      	blt.n	800160a <SSD1306_DrawPixel+0x10e>
 8001526:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800152a:	2b3f      	cmp	r3, #63	@ 0x3f
 800152c:	dc6d      	bgt.n	800160a <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d049      	beq.n	80015c8 <SSD1306_DrawPixel+0xcc>
 8001534:	2b02      	cmp	r3, #2
 8001536:	dc69      	bgt.n	800160c <SSD1306_DrawPixel+0x110>
 8001538:	2b00      	cmp	r3, #0
 800153a:	d022      	beq.n	8001582 <SSD1306_DrawPixel+0x86>
 800153c:	2b01      	cmp	r3, #1
 800153e:	d165      	bne.n	800160c <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8001540:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001544:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	da00      	bge.n	800154e <SSD1306_DrawPixel+0x52>
 800154c:	3307      	adds	r3, #7
 800154e:	10db      	asrs	r3, r3, #3
 8001550:	b218      	sxth	r0, r3
 8001552:	4603      	mov	r3, r0
 8001554:	01db      	lsls	r3, r3, #7
 8001556:	4413      	add	r3, r2
 8001558:	4a2f      	ldr	r2, [pc, #188]	@ (8001618 <SSD1306_DrawPixel+0x11c>)
 800155a:	5cd3      	ldrb	r3, [r2, r3]
 800155c:	b25a      	sxtb	r2, r3
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	2101      	movs	r1, #1
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	b25b      	sxtb	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b259      	sxtb	r1, r3
 8001570:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001574:	4603      	mov	r3, r0
 8001576:	01db      	lsls	r3, r3, #7
 8001578:	4413      	add	r3, r2
 800157a:	b2c9      	uxtb	r1, r1
 800157c:	4a26      	ldr	r2, [pc, #152]	@ (8001618 <SSD1306_DrawPixel+0x11c>)
 800157e:	54d1      	strb	r1, [r2, r3]
      break;
 8001580:	e044      	b.n	800160c <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001582:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001586:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	da00      	bge.n	8001590 <SSD1306_DrawPixel+0x94>
 800158e:	3307      	adds	r3, #7
 8001590:	10db      	asrs	r3, r3, #3
 8001592:	b218      	sxth	r0, r3
 8001594:	4603      	mov	r3, r0
 8001596:	01db      	lsls	r3, r3, #7
 8001598:	4413      	add	r3, r2
 800159a:	4a1f      	ldr	r2, [pc, #124]	@ (8001618 <SSD1306_DrawPixel+0x11c>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	88bb      	ldrh	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	4013      	ands	r3, r2
 80015b4:	b259      	sxtb	r1, r3
 80015b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015ba:	4603      	mov	r3, r0
 80015bc:	01db      	lsls	r3, r3, #7
 80015be:	4413      	add	r3, r2
 80015c0:	b2c9      	uxtb	r1, r1
 80015c2:	4a15      	ldr	r2, [pc, #84]	@ (8001618 <SSD1306_DrawPixel+0x11c>)
 80015c4:	54d1      	strb	r1, [r2, r3]
      break;
 80015c6:	e021      	b.n	800160c <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 80015c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	da00      	bge.n	80015d6 <SSD1306_DrawPixel+0xda>
 80015d4:	3307      	adds	r3, #7
 80015d6:	10db      	asrs	r3, r3, #3
 80015d8:	b218      	sxth	r0, r3
 80015da:	4603      	mov	r3, r0
 80015dc:	01db      	lsls	r3, r3, #7
 80015de:	4413      	add	r3, r2
 80015e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <SSD1306_DrawPixel+0x11c>)
 80015e2:	5cd3      	ldrb	r3, [r2, r3]
 80015e4:	b25a      	sxtb	r2, r3
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	4053      	eors	r3, r2
 80015f6:	b259      	sxtb	r1, r3
 80015f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015fc:	4603      	mov	r3, r0
 80015fe:	01db      	lsls	r3, r3, #7
 8001600:	4413      	add	r3, r2
 8001602:	b2c9      	uxtb	r1, r1
 8001604:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <SSD1306_DrawPixel+0x11c>)
 8001606:	54d1      	strb	r1, [r2, r3]
      break;
 8001608:	e000      	b.n	800160c <SSD1306_DrawPixel+0x110>
	  return;
 800160a:	bf00      	nop
    }
}
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000200 	.word	0x20000200

0800161c <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d008      	beq.n	800163e <SSD1306_Clear+0x22>
 800162c:	2b01      	cmp	r3, #1
 800162e:	d10d      	bne.n	800164c <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 8001630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001634:	21ff      	movs	r1, #255	@ 0xff
 8001636:	4807      	ldr	r0, [pc, #28]	@ (8001654 <SSD1306_Clear+0x38>)
 8001638:	f00d fc51 	bl	800eede <memset>
		break;
 800163c:	e006      	b.n	800164c <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 800163e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001642:	2100      	movs	r1, #0
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <SSD1306_Clear+0x38>)
 8001646:	f00d fc4a 	bl	800eede <memset>
		break;
 800164a:	bf00      	nop
	}
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000200 	.word	0x20000200

08001658 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	SSD1306_Command(0); // Column start address
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
#else
	for(uint8_t i = 0; i < 8; i++)
 800165e:	2300      	movs	r3, #0
 8001660:	71fb      	strb	r3, [r7, #7]
 8001662:	e02d      	b.n	80016c0 <SSD1306_Display+0x68>
	{
		osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <SSD1306_Display+0x78>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f04f 31ff 	mov.w	r1, #4294967295
 800166c:	4618      	mov	r0, r3
 800166e:	f007 fcc1 	bl	8008ff4 <osMutexAcquire>
		SSD1306_Command(SSD1306_PAGEADDR);
 8001672:	2022      	movs	r0, #34	@ 0x22
 8001674:	f7ff ff0e 	bl	8001494 <SSD1306_Command>
		SSD1306_Command(i);                      // Page start address
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff0a 	bl	8001494 <SSD1306_Command>
		SSD1306_Command(i);                   // Page end (not really, but works here)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff06 	bl	8001494 <SSD1306_Command>
		SSD1306_Command(SSD1306_COLUMNADDR);
 8001688:	2021      	movs	r0, #33	@ 0x21
 800168a:	f7ff ff03 	bl	8001494 <SSD1306_Command>
		SSD1306_Command(0); // Column start address
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff ff00 	bl	8001494 <SSD1306_Command>
		SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001694:	207f      	movs	r0, #127	@ 0x7f
 8001696:	f7ff fefd 	bl	8001494 <SSD1306_Command>

		SSD1306_Data(buffer+(i * SSD1306_LCDWIDTH), SSD1306_LCDWIDTH);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	01db      	lsls	r3, r3, #7
 800169e:	461a      	mov	r2, r3
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <SSD1306_Display+0x7c>)
 80016a2:	4413      	add	r3, r2
 80016a4:	2180      	movs	r1, #128	@ 0x80
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff0e 	bl	80014c8 <SSD1306_Data>
		osMutexRelease(MutexI2C1HendleHandle);
 80016ac:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <SSD1306_Display+0x78>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f007 fcea 	bl	800908a <osMutexRelease>
		osThreadYield();
 80016b6:	f007 fa21 	bl	8008afc <osThreadYield>
	for(uint8_t i = 0; i < 8; i++)
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	3301      	adds	r3, #1
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b07      	cmp	r3, #7
 80016c4:	d9ce      	bls.n	8001664 <SSD1306_Display+0xc>
	}
#endif
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200006c8 	.word	0x200006c8
 80016d4:	20000200 	.word	0x20000200

080016d8 <SSD1306_Init>:


void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 80016e0:	4a28      	ldr	r2, [pc, #160]	@ (8001784 <SSD1306_Init+0xac>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 80016e6:	20ae      	movs	r0, #174	@ 0xae
 80016e8:	f7ff fed4 	bl	8001494 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 80016ec:	20d5      	movs	r0, #213	@ 0xd5
 80016ee:	f7ff fed1 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(0x80);
 80016f2:	2080      	movs	r0, #128	@ 0x80
 80016f4:	f7ff fece 	bl	8001494 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 80016f8:	203f      	movs	r0, #63	@ 0x3f
 80016fa:	f7ff fecb 	bl	8001494 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 80016fe:	20d3      	movs	r0, #211	@ 0xd3
 8001700:	f7ff fec8 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(0x00);
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff fec5 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 800170a:	2040      	movs	r0, #64	@ 0x40
 800170c:	f7ff fec2 	bl	8001494 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001710:	208d      	movs	r0, #141	@ 0x8d
 8001712:	f7ff febf 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(0x14);
 8001716:	2014      	movs	r0, #20
 8001718:	f7ff febc 	bl	8001494 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 800171c:	2020      	movs	r0, #32
 800171e:	f7ff feb9 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff feb6 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8001728:	20a1      	movs	r0, #161	@ 0xa1
 800172a:	f7ff feb3 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 800172e:	20c8      	movs	r0, #200	@ 0xc8
 8001730:	f7ff feb0 	bl	8001494 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8001734:	20da      	movs	r0, #218	@ 0xda
 8001736:	f7ff fead 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(0x12);
 800173a:	2012      	movs	r0, #18
 800173c:	f7ff feaa 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8001740:	2081      	movs	r0, #129	@ 0x81
 8001742:	f7ff fea7 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001746:	20ff      	movs	r0, #255	@ 0xff
 8001748:	f7ff fea4 	bl	8001494 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 800174c:	20d9      	movs	r0, #217	@ 0xd9
 800174e:	f7ff fea1 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(0xF1);
 8001752:	20f1      	movs	r0, #241	@ 0xf1
 8001754:	f7ff fe9e 	bl	8001494 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8001758:	20db      	movs	r0, #219	@ 0xdb
 800175a:	f7ff fe9b 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(0x40);
 800175e:	2040      	movs	r0, #64	@ 0x40
 8001760:	f7ff fe98 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 8001764:	20a4      	movs	r0, #164	@ 0xa4
 8001766:	f7ff fe95 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 800176a:	20a6      	movs	r0, #166	@ 0xa6
 800176c:	f7ff fe92 	bl	8001494 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8001770:	202e      	movs	r0, #46	@ 0x2e
 8001772:	f7ff fe8f 	bl	8001494 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 8001776:	20af      	movs	r0, #175	@ 0xaf
 8001778:	f7ff fe8c 	bl	8001494 <SSD1306_Command>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200001fc 	.word	0x200001fc

08001788 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800178e:	463b      	mov	r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <MX_ADC1_Init+0x9c>)
 800179c:	4a22      	ldr	r2, [pc, #136]	@ (8001828 <MX_ADC1_Init+0xa0>)
 800179e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017a0:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <MX_ADC1_Init+0x9c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <MX_ADC1_Init+0x9c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <MX_ADC1_Init+0x9c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <MX_ADC1_Init+0x9c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <MX_ADC1_Init+0x9c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80017c0:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <MX_ADC1_Init+0x9c>)
 80017c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80017c8:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <MX_ADC1_Init+0x9c>)
 80017ca:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <MX_ADC1_Init+0x9c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017d6:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <MX_ADC1_Init+0x9c>)
 80017d8:	2201      	movs	r2, #1
 80017da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <MX_ADC1_Init+0x9c>)
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <MX_ADC1_Init+0x9c>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ea:	480e      	ldr	r0, [pc, #56]	@ (8001824 <MX_ADC1_Init+0x9c>)
 80017ec:	f002 ff9c 	bl	8004728 <HAL_ADC_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80017f6:	f000 fff7 	bl	80027e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <MX_ADC1_Init+0x9c>)
 800180c:	f003 f9ee 	bl	8004bec <HAL_ADC_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001816:	f000 ffe7 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000600 	.word	0x20000600
 8001828:	40012000 	.word	0x40012000

0800182c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	@ 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a33      	ldr	r2, [pc, #204]	@ (8001918 <HAL_ADC_MspInit+0xec>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d15f      	bne.n	800190e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b32      	ldr	r3, [pc, #200]	@ (800191c <HAL_ADC_MspInit+0xf0>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a31      	ldr	r2, [pc, #196]	@ (800191c <HAL_ADC_MspInit+0xf0>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b2f      	ldr	r3, [pc, #188]	@ (800191c <HAL_ADC_MspInit+0xf0>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <HAL_ADC_MspInit+0xf0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a2a      	ldr	r2, [pc, #168]	@ (800191c <HAL_ADC_MspInit+0xf0>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b28      	ldr	r3, [pc, #160]	@ (800191c <HAL_ADC_MspInit+0xf0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001886:	2301      	movs	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188a:	2303      	movs	r3, #3
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4821      	ldr	r0, [pc, #132]	@ (8001920 <HAL_ADC_MspInit+0xf4>)
 800189a:	f004 f8b3 	bl	8005a04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018a0:	4a21      	ldr	r2, [pc, #132]	@ (8001928 <HAL_ADC_MspInit+0xfc>)
 80018a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018be:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018c6:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018d6:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018e2:	4810      	ldr	r0, [pc, #64]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018e4:	f003 fd1e 	bl	8005324 <HAL_DMA_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80018ee:	f000 ff7b 	bl	80027e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80018f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <HAL_ADC_MspInit+0xf8>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2105      	movs	r1, #5
 8001902:	2012      	movs	r0, #18
 8001904:	f003 fce4 	bl	80052d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001908:	2012      	movs	r0, #18
 800190a:	f003 fcfd 	bl	8005308 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	@ 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40012000 	.word	0x40012000
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000
 8001924:	20000648 	.word	0x20000648
 8001928:	40026410 	.word	0x40026410

0800192c <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af04      	add	r7, sp, #16
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	791b      	ldrb	r3, [r3, #4]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	b299      	uxth	r1, r3
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	b29a      	uxth	r2, r3
 8001948:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194c:	9302      	str	r3, [sp, #8]
 800194e:	2301      	movs	r3, #1
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	f107 030f 	add.w	r3, r7, #15
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2301      	movs	r3, #1
 800195a:	f004 fc49 	bl	80061f0 <HAL_I2C_Mem_Read>

	return Value;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af04      	add	r7, sp, #16
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	70fb      	strb	r3, [r7, #3]
 8001974:	4613      	mov	r3, r2
 8001976:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	791b      	ldrb	r3, [r3, #4]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	b299      	uxth	r1, r3
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	b29a      	uxth	r2, r3
 8001988:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1cbb      	adds	r3, r7, #2
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	f004 fb30 	bl	8005ffc <HAL_I2C_Mem_Write>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af04      	add	r7, sp, #16
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	791b      	ldrb	r3, [r3, #4]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	b299      	uxth	r1, r3
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c4:	9302      	str	r3, [sp, #8]
 80019c6:	2302      	movs	r3, #2
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2301      	movs	r3, #1
 80019d2:	f004 fc0d 	bl	80061f0 <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 80019d6:	7b7b      	ldrb	r3, [r7, #13]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	b21a      	sxth	r2, r3
 80019dc:	7b3b      	ldrb	r3, [r7, #12]
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	b29b      	uxth	r3, r3
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b088      	sub	sp, #32
 80019f2:	af04      	add	r7, sp, #16
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	791b      	ldrb	r3, [r3, #4]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	b299      	uxth	r1, r3
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0e:	9302      	str	r3, [sp, #8]
 8001a10:	2303      	movs	r3, #3
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f004 fbe8 	bl	80061f0 <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 8001a20:	7b3b      	ldrb	r3, [r7, #12]
 8001a22:	041a      	lsls	r2, r3, #16
 8001a24:	7b7b      	ldrb	r3, [r7, #13]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	7bba      	ldrb	r2, [r7, #14]
 8001a2c:	4313      	orrs	r3, r2
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d901      	bls.n	8001a4c <BMP280_SetMode+0x16>
 8001a48:	2303      	movs	r3, #3
 8001a4a:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001a4c:	21f4      	movs	r1, #244	@ 0xf4
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff6c 	bl	800192c <Read8>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	f023 0303 	bic.w	r3, r3, #3
 8001a5e:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 8001a60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	b25a      	sxtb	r2, r3
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	461a      	mov	r2, r3
 8001a78:	21f4      	movs	r1, #244	@ 0xf4
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ff74 	bl	8001968 <Write8>
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d901      	bls.n	8001a9e <BMP280_SetPressureOversampling+0x16>
 8001a9a:	2305      	movs	r3, #5
 8001a9c:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001a9e:	21f4      	movs	r1, #244	@ 0xf4
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff43 	bl	800192c <Read8>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	f023 031c 	bic.w	r3, r3, #28
 8001ab0:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	f003 031c 	and.w	r3, r3, #28
 8001abc:	b25a      	sxtb	r2, r3
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	461a      	mov	r2, r3
 8001acc:	21f4      	movs	r1, #244	@ 0xf4
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ff4a 	bl	8001968 <Write8>
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d901      	bls.n	8001af2 <BMP280_SetTemperatureOversampling+0x16>
 8001aee:	2305      	movs	r3, #5
 8001af0:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001af2:	21f4      	movs	r1, #244	@ 0xf4
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff19 	bl	800192c <Read8>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	015b      	lsls	r3, r3, #5
 8001b0a:	b25a      	sxtb	r2, r3
 8001b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	21f4      	movs	r1, #244	@ 0xf4
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff23 	bl	8001968 <Write8>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 8001b32:	21fa      	movs	r1, #250	@ 0xfa
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff5a 	bl	80019ee <Read24>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	111b      	asrs	r3, r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <BMP280_ReadPressureRaw>:

//
// Read Raw pressure data from BMP280
//
int32_t BMP280_ReadPressureRaw(BMP280_t *bmp)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_PRESSUREDATA);
 8001b56:	21f7      	movs	r1, #247	@ 0xf7
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff48 	bl	80019ee <Read24>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	111b      	asrs	r3, r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001b68:	68fb      	ldr	r3, [r7, #12]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ffd4 	bl	8001b2a <BMP280_ReadTemperatureRaw>
 8001b82:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	10da      	asrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	8b5b      	ldrh	r3, [r3, #26]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	12db      	asrs	r3, r3, #11
 8001b9c:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	111b      	asrs	r3, r3, #4
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	8b52      	ldrh	r2, [r2, #26]
 8001ba6:	1a9b      	subs	r3, r3, r2
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	1112      	asrs	r2, r2, #4
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	8b49      	ldrh	r1, [r1, #26]
 8001bb0:	1a52      	subs	r2, r2, r1
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	139b      	asrs	r3, r3, #14
 8001bc4:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	441a      	add	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1a      	ldr	r2, [r3, #32]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	3380      	adds	r3, #128	@ 0x80
 8001bdc:	121b      	asrs	r3, r3, #8
 8001bde:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 8001be0:	68b8      	ldr	r0, [r7, #8]
 8001be2:	f7fe fd07 	bl	80005f4 <__aeabi_i2d>
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <BMP280_ReadTemperature+0x98>)
 8001bec:	f7fe fe96 	bl	800091c <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f7ff f85e 	bl	8000cb8 <__aeabi_d2f>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	ee07 3a90 	vmov	s15, r3
}
 8001c02:	eeb0 0a67 	vmov.f32	s0, s15
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40590000 	.word	0x40590000

08001c10 <BMP280_ReadPressureAndTemperature>:
//
// Read and calculate temperature & pressure
// Whole procedure is taken from BMP280 Datasheet
//
uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
	// Have to read temperature first
	*Temperature = BMP280_ReadTemperature(bmp);
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f7ff ffa9 	bl	8001b74 <BMP280_ReadTemperature>
 8001c22:	eef0 7a40 	vmov.f32	s15, s0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	var1 = (((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	105b      	asrs	r3, r3, #1
 8001c32:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8001c36:	61bb      	str	r3, [r7, #24]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	109b      	asrs	r3, r3, #2
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	1092      	asrs	r2, r2, #2
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	12db      	asrs	r3, r3, #11
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
	var2 = var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4413      	add	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
	var2 = (var2>>2)+(((int32_t)(bmp->p4))<<16);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	109a      	asrs	r2, r3, #2
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c72:	041b      	lsls	r3, r3, #16
 8001c74:	4413      	add	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
	var1 = ((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	109b      	asrs	r3, r3, #2
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	1092      	asrs	r2, r2, #2
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	135b      	asrs	r3, r3, #13
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	10da      	asrs	r2, r3, #3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	105b      	asrs	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	149b      	asrs	r3, r3, #18
 8001ca8:	61bb      	str	r3, [r7, #24]
	var1 =((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	8b92      	ldrh	r2, [r2, #28]
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	13db      	asrs	r3, r3, #15
 8001cba:	61bb      	str	r3, [r7, #24]

	if (var1 == 0)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <BMP280_ReadPressureAndTemperature+0xb6>
	{
		return 1; // avoid exception caused by division by zero
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e054      	b.n	8001d70 <BMP280_ReadPressureAndTemperature+0x160>
	}

	// Raw pressure from BMP's ADC
	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f7ff ff41 	bl	8001b4e <BMP280_ReadPressureRaw>
 8001ccc:	6138      	str	r0, [r7, #16]

	p = (((int32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	f5c3 1280 	rsb	r2, r3, #1048576	@ 0x100000
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	131b      	asrs	r3, r3, #12
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f640 4235 	movw	r2, #3125	@ 0xc35
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	61fb      	str	r3, [r7, #28]
	if (p < 0x80000000)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db06      	blt.n	8001cf8 <BMP280_ReadPressureAndTemperature+0xe8>
	{
		p = (p << 1) / ((uint32_t)var1);
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005a      	lsls	r2, r3, #1
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	e005      	b.n	8001d04 <BMP280_ReadPressureAndTemperature+0xf4>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
	}
	var1 = (((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	08d2      	lsrs	r2, r2, #3
 8001d14:	fb02 f303 	mul.w	r3, r2, r3
 8001d18:	0b5b      	lsrs	r3, r3, #13
 8001d1a:	fb01 f303 	mul.w	r3, r1, r3
 8001d1e:	131b      	asrs	r3, r3, #12
 8001d20:	61bb      	str	r3, [r7, #24]
	var2 = (((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	135b      	asrs	r3, r3, #13
 8001d34:	617b      	str	r3, [r7, #20]

	p = (uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001d42:	4413      	add	r3, r2
 8001d44:	111a      	asrs	r2, r3, #4
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	4413      	add	r3, r2
 8001d4a:	61fb      	str	r3, [r7, #28]

	// Convert Pa to hPa
	*Pressure = (float)(p/100.0);
 8001d4c:	69f8      	ldr	r0, [r7, #28]
 8001d4e:	f7fe fc41 	bl	80005d4 <__aeabi_ui2d>
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <BMP280_ReadPressureAndTemperature+0x168>)
 8001d58:	f7fe fde0 	bl	800091c <__aeabi_ddiv>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe ffa8 	bl	8000cb8 <__aeabi_d2f>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	601a      	str	r2, [r3, #0]

	return 0;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40590000 	.word	0x40590000

08001d7c <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	4613      	mov	r3, r2
 8001d88:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	79fa      	ldrb	r2, [r7, #7]
 8001d94:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001d96:	21d0      	movs	r1, #208	@ 0xd0
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f7ff fdc7 	bl	800192c <Read8>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	2b58      	cmp	r3, #88	@ 0x58
 8001da6:	d001      	beq.n	8001dac <BMP280_Init+0x30>
	{
		return 1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e06c      	b.n	8001e86 <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 8001dac:	2188      	movs	r1, #136	@ 0x88
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7ff fdf8 	bl	80019a4 <Read16>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 8001dbc:	218a      	movs	r1, #138	@ 0x8a
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f7ff fdf0 	bl	80019a4 <Read16>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001dcc:	218c      	movs	r1, #140	@ 0x8c
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f7ff fde8 	bl	80019a4 <Read16>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8001ddc:	218e      	movs	r1, #142	@ 0x8e
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7ff fde0 	bl	80019a4 <Read16>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8001dec:	2190      	movs	r1, #144	@ 0x90
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff fdd8 	bl	80019a4 <Read16>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8001dfc:	2192      	movs	r1, #146	@ 0x92
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff fdd0 	bl	80019a4 <Read16>
 8001e04:	4603      	mov	r3, r0
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8001e0c:	2194      	movs	r1, #148	@ 0x94
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7ff fdc8 	bl	80019a4 <Read16>
 8001e14:	4603      	mov	r3, r0
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8001e1c:	2196      	movs	r1, #150	@ 0x96
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7ff fdc0 	bl	80019a4 <Read16>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 8001e2c:	2198      	movs	r1, #152	@ 0x98
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff fdb8 	bl	80019a4 <Read16>
 8001e34:	4603      	mov	r3, r0
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 8001e3c:	219a      	movs	r1, #154	@ 0x9a
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7ff fdb0 	bl	80019a4 <Read16>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 8001e4c:	219c      	movs	r1, #156	@ 0x9c
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff fda8 	bl	80019a4 <Read16>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 8001e5c:	219e      	movs	r1, #158	@ 0x9e
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff fda0 	bl	80019a4 <Read16>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7ff fe34 	bl	8001adc <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 8001e74:	2105      	movs	r1, #5
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f7ff fe06 	bl	8001a88 <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f7ff fdd9 	bl	8001a36 <BMP280_SetMode>

	return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <MX_DMA_Init+0x3c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001ecc <MX_DMA_Init+0x3c>)
 8001ea0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea6:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <MX_DMA_Init+0x3c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	2038      	movs	r0, #56	@ 0x38
 8001eb8:	f003 fa0a 	bl	80052d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ebc:	2038      	movs	r0, #56	@ 0x38
 8001ebe:	f003 fa23 	bl	8005308 <HAL_NVIC_EnableIRQ>

}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <_putchar>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

void _putchar(char character)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <_putchar+0x38>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f007 f886 	bl	8008ff4 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 8001ee8:	1df9      	adds	r1, r7, #7
 8001eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4806      	ldr	r0, [pc, #24]	@ (8001f0c <_putchar+0x3c>)
 8001ef2:	f006 f911 	bl	8008118 <HAL_UART_Transmit>
	osMutexRelease(MutexPrintfHandle);
 8001ef6:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <_putchar+0x38>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f007 f8c5 	bl	800908a <osMutexRelease>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200006c4 	.word	0x200006c4
 8001f0c:	200007c0 	.word	0x200007c0

08001f10 <complexABS>:

float complexABS(float real, float compl) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f1a:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8001f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f22:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f26:	edd7 7a00 	vldr	s15, [r7]
 8001f2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f32:	eeb0 0a67 	vmov.f32	s0, s15
 8001f36:	f010 fc2f 	bl	8012798 <sqrtf>
 8001f3a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */


}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8001f70:	482d      	ldr	r0, [pc, #180]	@ (8002028 <MX_FREERTOS_Init+0xbc>)
 8001f72:	f006 ffb9 	bl	8008ee8 <osMutexNew>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4a2c      	ldr	r2, [pc, #176]	@ (800202c <MX_FREERTOS_Init+0xc0>)
 8001f7a:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C1Hendle */
  MutexI2C1HendleHandle = osMutexNew(&MutexI2C1Hendle_attributes);
 8001f7c:	482c      	ldr	r0, [pc, #176]	@ (8002030 <MX_FREERTOS_Init+0xc4>)
 8001f7e:	f006 ffb3 	bl	8008ee8 <osMutexNew>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a2b      	ldr	r2, [pc, #172]	@ (8002034 <MX_FREERTOS_Init+0xc8>)
 8001f86:	6013      	str	r3, [r2, #0]

  /* creation of MutexBmpDataHandle */
  MutexBmpDataHandleHandle = osMutexNew(&MutexBmpDataHandle_attributes);
 8001f88:	482b      	ldr	r0, [pc, #172]	@ (8002038 <MX_FREERTOS_Init+0xcc>)
 8001f8a:	f006 ffad 	bl	8008ee8 <osMutexNew>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a2a      	ldr	r2, [pc, #168]	@ (800203c <MX_FREERTOS_Init+0xd0>)
 8001f92:	6013      	str	r3, [r2, #0]

  /* creation of MutexBmpData */
  MutexBmpDataHandle = osMutexNew(&MutexBmpData_attributes);
 8001f94:	482a      	ldr	r0, [pc, #168]	@ (8002040 <MX_FREERTOS_Init+0xd4>)
 8001f96:	f006 ffa7 	bl	8008ee8 <osMutexNew>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4a29      	ldr	r2, [pc, #164]	@ (8002044 <MX_FREERTOS_Init+0xd8>)
 8001f9e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreBmpQueue */
  SemaphoreBmpQueueHandle = osSemaphoreNew(1, 1, &SemaphoreBmpQueue_attributes);
 8001fa0:	4a29      	ldr	r2, [pc, #164]	@ (8002048 <MX_FREERTOS_Init+0xdc>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f007 f8ad 	bl	8009104 <osSemaphoreNew>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a27      	ldr	r2, [pc, #156]	@ (800204c <MX_FREERTOS_Init+0xe0>)
 8001fae:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerBmpData */
  TimerBmpDataHandle = osTimerNew(TimerBmpDataCallback, osTimerPeriodic, NULL, &TimerBmpData_attributes);
 8001fb0:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <MX_FREERTOS_Init+0xe4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4827      	ldr	r0, [pc, #156]	@ (8002054 <MX_FREERTOS_Init+0xe8>)
 8001fb8:	f006 feec 	bl	8008d94 <osTimerNew>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a26      	ldr	r2, [pc, #152]	@ (8002058 <MX_FREERTOS_Init+0xec>)
 8001fc0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueBmpData */
  QueueBmpDataHandle = osMessageQueueNew (16, sizeof(BmpData_t), &QueueBmpData_attributes);
 8001fc2:	4a26      	ldr	r2, [pc, #152]	@ (800205c <MX_FREERTOS_Init+0xf0>)
 8001fc4:	2108      	movs	r1, #8
 8001fc6:	2010      	movs	r0, #16
 8001fc8:	f007 f9bc 	bl	8009344 <osMessageQueueNew>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a24      	ldr	r2, [pc, #144]	@ (8002060 <MX_FREERTOS_Init+0xf4>)
 8001fd0:	6013      	str	r3, [r2, #0]

  /* creation of QueueFFTData */
  QueueFFTDataHandle = osMessageQueueNew (8, sizeof(FftData_t), &QueueFFTData_attributes);
 8001fd2:	4a24      	ldr	r2, [pc, #144]	@ (8002064 <MX_FREERTOS_Init+0xf8>)
 8001fd4:	210a      	movs	r1, #10
 8001fd6:	2008      	movs	r0, #8
 8001fd8:	f007 f9b4 	bl	8009344 <osMessageQueueNew>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <MX_FREERTOS_Init+0xfc>)
 8001fe0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeatTask */
  HeartBeatTaskHandle = osThreadNew(StartHeartBeatTask, NULL, &HeartBeatTask_attributes);
 8001fe2:	4a22      	ldr	r2, [pc, #136]	@ (800206c <MX_FREERTOS_Init+0x100>)
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4822      	ldr	r0, [pc, #136]	@ (8002070 <MX_FREERTOS_Init+0x104>)
 8001fe8:	f006 fcf5 	bl	80089d6 <osThreadNew>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a21      	ldr	r2, [pc, #132]	@ (8002074 <MX_FREERTOS_Init+0x108>)
 8001ff0:	6013      	str	r3, [r2, #0]

  /* creation of Bmp_280Task */
  Bmp_280TaskHandle = osThreadNew(StartBmp_280Task, NULL, &Bmp_280Task_attributes);
 8001ff2:	4a21      	ldr	r2, [pc, #132]	@ (8002078 <MX_FREERTOS_Init+0x10c>)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4821      	ldr	r0, [pc, #132]	@ (800207c <MX_FREERTOS_Init+0x110>)
 8001ff8:	f006 fced 	bl	80089d6 <osThreadNew>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a20      	ldr	r2, [pc, #128]	@ (8002080 <MX_FREERTOS_Init+0x114>)
 8002000:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(StartOledTask, NULL, &OledTask_attributes);
 8002002:	4a20      	ldr	r2, [pc, #128]	@ (8002084 <MX_FREERTOS_Init+0x118>)
 8002004:	2100      	movs	r1, #0
 8002006:	4820      	ldr	r0, [pc, #128]	@ (8002088 <MX_FREERTOS_Init+0x11c>)
 8002008:	f006 fce5 	bl	80089d6 <osThreadNew>
 800200c:	4603      	mov	r3, r0
 800200e:	4a1f      	ldr	r2, [pc, #124]	@ (800208c <MX_FREERTOS_Init+0x120>)
 8002010:	6013      	str	r3, [r2, #0]

  /* creation of FFTTask */
  FFTTaskHandle = osThreadNew(StartFFTTask, NULL, &FFTTask_attributes);
 8002012:	4a1f      	ldr	r2, [pc, #124]	@ (8002090 <MX_FREERTOS_Init+0x124>)
 8002014:	2100      	movs	r1, #0
 8002016:	481f      	ldr	r0, [pc, #124]	@ (8002094 <MX_FREERTOS_Init+0x128>)
 8002018:	f006 fcdd 	bl	80089d6 <osThreadNew>
 800201c:	4603      	mov	r3, r0
 800201e:	4a1e      	ldr	r2, [pc, #120]	@ (8002098 <MX_FREERTOS_Init+0x12c>)
 8002020:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	08012e64 	.word	0x08012e64
 800202c:	200006c4 	.word	0x200006c4
 8002030:	08012e74 	.word	0x08012e74
 8002034:	200006c8 	.word	0x200006c8
 8002038:	08012e84 	.word	0x08012e84
 800203c:	200006cc 	.word	0x200006cc
 8002040:	08012e94 	.word	0x08012e94
 8002044:	200006d0 	.word	0x200006d0
 8002048:	08012ea4 	.word	0x08012ea4
 800204c:	200006d4 	.word	0x200006d4
 8002050:	08012e54 	.word	0x08012e54
 8002054:	080024a9 	.word	0x080024a9
 8002058:	200006c0 	.word	0x200006c0
 800205c:	08012e24 	.word	0x08012e24
 8002060:	200006b8 	.word	0x200006b8
 8002064:	08012e3c 	.word	0x08012e3c
 8002068:	200006bc 	.word	0x200006bc
 800206c:	08012d94 	.word	0x08012d94
 8002070:	0800209d 	.word	0x0800209d
 8002074:	200006a8 	.word	0x200006a8
 8002078:	08012db8 	.word	0x08012db8
 800207c:	080020bd 	.word	0x080020bd
 8002080:	200006ac 	.word	0x200006ac
 8002084:	08012ddc 	.word	0x08012ddc
 8002088:	08002195 	.word	0x08002195
 800208c:	200006b0 	.word	0x200006b0
 8002090:	08012e00 	.word	0x08012e00
 8002094:	080022ed 	.word	0x080022ed
 8002098:	200006b4 	.word	0x200006b4

0800209c <StartHeartBeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartBeatTask */
void StartHeartBeatTask(void *argument)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartBeatTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80020a4:	2120      	movs	r1, #32
 80020a6:	4804      	ldr	r0, [pc, #16]	@ (80020b8 <StartHeartBeatTask+0x1c>)
 80020a8:	f003 fe49 	bl	8005d3e <HAL_GPIO_TogglePin>
	  osDelay(500);
 80020ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020b0:	f006 fe13 	bl	8008cda <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80020b4:	bf00      	nop
 80020b6:	e7f5      	b.n	80020a4 <StartHeartBeatTask+0x8>
 80020b8:	40020000 	.word	0x40020000

080020bc <StartBmp_280Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBmp_280Task */
void StartBmp_280Task(void *argument)
{
 80020bc:	b5b0      	push	{r4, r5, r7, lr}
 80020be:	b090      	sub	sp, #64	@ 0x40
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBmp_280Task */
	BMP280_t Bmp280;
	BmpData_t _BmpData;
	uint32_t DelayTick = osKernelGetTickCount();
 80020c4:	f006 fc72 	bl	80089ac <osKernelGetTickCount>
 80020c8:	6378      	str	r0, [r7, #52]	@ 0x34


	osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
 80020ca:	4b2c      	ldr	r3, [pc, #176]	@ (800217c <StartBmp_280Task+0xc0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f04f 31ff 	mov.w	r1, #4294967295
 80020d2:	4618      	mov	r0, r3
 80020d4:	f006 ff8e 	bl	8008ff4 <osMutexAcquire>
	BMP280_Init(&Bmp280, &hi2c1, 0x76);
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	2276      	movs	r2, #118	@ 0x76
 80020de:	4928      	ldr	r1, [pc, #160]	@ (8002180 <StartBmp_280Task+0xc4>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fe4b 	bl	8001d7c <BMP280_Init>
	osMutexRelease(MutexI2C1HendleHandle);
 80020e6:	4b25      	ldr	r3, [pc, #148]	@ (800217c <StartBmp_280Task+0xc0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f006 ffcd 	bl	800908a <osMutexRelease>

	osTimerStart(TimerBmpDataHandle, 100);
 80020f0:	4b24      	ldr	r3, [pc, #144]	@ (8002184 <StartBmp_280Task+0xc8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2164      	movs	r1, #100	@ 0x64
 80020f6:	4618      	mov	r0, r3
 80020f8:	f006 fec8 	bl	8008e8c <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
 80020fc:	4b1f      	ldr	r3, [pc, #124]	@ (800217c <StartBmp_280Task+0xc0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	4618      	mov	r0, r3
 8002106:	f006 ff75 	bl	8008ff4 <osMutexAcquire>
	  BMP280_ReadPressureAndTemperature(&Bmp280, &_BmpData.Pressure, &_BmpData.Temperature);
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	1d1a      	adds	r2, r3, #4
 8002110:	f107 0108 	add.w	r1, r7, #8
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fd79 	bl	8001c10 <BMP280_ReadPressureAndTemperature>
	  osMutexRelease(MutexI2C1HendleHandle);
 800211e:	4b17      	ldr	r3, [pc, #92]	@ (800217c <StartBmp_280Task+0xc0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f006 ffb1 	bl	800908a <osMutexRelease>

	  if(osOK == osSemaphoreAcquire(SemaphoreBmpQueueHandle, 0));
 8002128:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <StartBmp_280Task+0xcc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f007 f872 	bl	8009218 <osSemaphoreAcquire>
	  osMessageQueuePut(QueueBmpDataHandle, &_BmpData, 0, osWaitForever);
 8002134:	4b15      	ldr	r3, [pc, #84]	@ (800218c <StartBmp_280Task+0xd0>)
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	f107 0108 	add.w	r1, r7, #8
 800213c:	f04f 33ff 	mov.w	r3, #4294967295
 8002140:	2200      	movs	r2, #0
 8002142:	f007 f973 	bl	800942c <osMessageQueuePut>
//	  osMutexAcquire(MutexBmpDataHandleHandle, osWaitForever);
//	  Pressure = _BmpData.Pressure;
//	  Temperature = _BmpData.Temperature;
//	  osMutexRelease(MutexBmpDataHandleHandle);

	  printf("Temperature: %.2f, Pressure: %.2f\n\r", _BmpData.Temperature, _BmpData.Pressure);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fa65 	bl	8000618 <__aeabi_f2d>
 800214e:	4604      	mov	r4, r0
 8002150:	460d      	mov	r5, r1
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fa5f 	bl	8000618 <__aeabi_f2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	e9cd 2300 	strd	r2, r3, [sp]
 8002162:	4622      	mov	r2, r4
 8002164:	462b      	mov	r3, r5
 8002166:	480a      	ldr	r0, [pc, #40]	@ (8002190 <StartBmp_280Task+0xd4>)
 8002168:	f001 ffac 	bl	80040c4 <printf_>

	  DelayTick += 10;
 800216c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800216e:	330a      	adds	r3, #10
 8002170:	637b      	str	r3, [r7, #52]	@ 0x34
	  osDelayUntil(DelayTick);
 8002172:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002174:	f006 fdcc 	bl	8008d10 <osDelayUntil>
	  osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
 8002178:	e7c0      	b.n	80020fc <StartBmp_280Task+0x40>
 800217a:	bf00      	nop
 800217c:	200006c8 	.word	0x200006c8
 8002180:	200006d8 	.word	0x200006d8
 8002184:	200006c0 	.word	0x200006c0
 8002188:	200006d4 	.word	0x200006d4
 800218c:	200006b8 	.word	0x200006b8
 8002190:	08012b3c 	.word	0x08012b3c

08002194 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b092      	sub	sp, #72	@ 0x48
 8002198:	af02      	add	r7, sp, #8
 800219a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	char Message[32];
	uint8_t i = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	BmpData_t _BmpData;

	FftData_t FftData;

	osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
 80021a2:	4b4a      	ldr	r3, [pc, #296]	@ (80022cc <StartOledTask+0x138>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f04f 31ff 	mov.w	r1, #4294967295
 80021aa:	4618      	mov	r0, r3
 80021ac:	f006 ff22 	bl	8008ff4 <osMutexAcquire>
	SSD1306_Init(&hi2c1);
 80021b0:	4847      	ldr	r0, [pc, #284]	@ (80022d0 <StartOledTask+0x13c>)
 80021b2:	f7ff fa91 	bl	80016d8 <SSD1306_Init>
	osMutexRelease(MutexI2C1HendleHandle);
 80021b6:	4b45      	ldr	r3, [pc, #276]	@ (80022cc <StartOledTask+0x138>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f006 ff65 	bl	800908a <osMutexRelease>

	GFX_SetFont(font_8x5);
 80021c0:	4844      	ldr	r0, [pc, #272]	@ (80022d4 <StartOledTask+0x140>)
 80021c2:	f7fe ff77 	bl	80010b4 <GFX_SetFont>

	SSD1306_Clear(BLACK);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7ff fa28 	bl	800161c <SSD1306_Clear>

//	osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
	SSD1306_Display();
 80021cc:	f7ff fa44 	bl	8001658 <SSD1306_Display>
//	osMutexRelease(MutexI2C1HendleHandle);

  /* Infinite loop */
  for(;;)
  {
	SSD1306_Clear(BLACK);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7ff fa23 	bl	800161c <SSD1306_Clear>

	sprintf(Message, "Hello %d", i++);
 80021d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80021e0:	461a      	mov	r2, r3
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	493c      	ldr	r1, [pc, #240]	@ (80022d8 <StartOledTask+0x144>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f001 ff87 	bl	80040fc <sprintf_>

	GFX_DrawString(0, 0, Message, WHITE, 0);
 80021ee:	f107 021c 	add.w	r2, r7, #28
 80021f2:	2300      	movs	r3, #0
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2301      	movs	r3, #1
 80021f8:	2100      	movs	r1, #0
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff f824 	bl	8001248 <GFX_DrawString>
//	osMutexAcquire(MutexBmpDataHandleHandle, osWaitForever);
//	_BmpData.Pressure = Pressure;
//	_BmpData.Temperature = Temperature;
//	osMutexRelease(MutexBmpDataHandleHandle);

	osMessageQueueGet(QueueBmpDataHandle, &_BmpData, NULL, 0);
 8002200:	4b36      	ldr	r3, [pc, #216]	@ (80022dc <StartOledTask+0x148>)
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	f107 0114 	add.w	r1, r7, #20
 8002208:	2300      	movs	r3, #0
 800220a:	2200      	movs	r2, #0
 800220c:	f007 f96e 	bl	80094ec <osMessageQueueGet>

	osMessageQueueGet(QueueFFTDataHandle, &FftData, NULL, 0);
 8002210:	4b33      	ldr	r3, [pc, #204]	@ (80022e0 <StartOledTask+0x14c>)
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	f107 0108 	add.w	r1, r7, #8
 8002218:	2300      	movs	r3, #0
 800221a:	2200      	movs	r2, #0
 800221c:	f007 f966 	bl	80094ec <osMessageQueueGet>


	sprintf(Message, "Press: %.2f", _BmpData.Pressure);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f9f8 	bl	8000618 <__aeabi_f2d>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	f107 001c 	add.w	r0, r7, #28
 8002230:	492c      	ldr	r1, [pc, #176]	@ (80022e4 <StartOledTask+0x150>)
 8002232:	f001 ff63 	bl	80040fc <sprintf_>
	GFX_DrawString(0, 10, Message, WHITE, 0);
 8002236:	f107 021c 	add.w	r2, r7, #28
 800223a:	2300      	movs	r3, #0
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2301      	movs	r3, #1
 8002240:	210a      	movs	r1, #10
 8002242:	2000      	movs	r0, #0
 8002244:	f7ff f800 	bl	8001248 <GFX_DrawString>

	sprintf(Message, "Temp: %.2f", _BmpData.Temperature);
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe f9e4 	bl	8000618 <__aeabi_f2d>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	f107 001c 	add.w	r0, r7, #28
 8002258:	4923      	ldr	r1, [pc, #140]	@ (80022e8 <StartOledTask+0x154>)
 800225a:	f001 ff4f 	bl	80040fc <sprintf_>
	GFX_DrawString(0, 20, Message, WHITE, 0);
 800225e:	f107 021c 	add.w	r2, r7, #28
 8002262:	2300      	movs	r3, #0
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2301      	movs	r3, #1
 8002268:	2114      	movs	r1, #20
 800226a:	2000      	movs	r0, #0
 800226c:	f7fe ffec 	bl	8001248 <GFX_DrawString>


	//
	// FFT
	//
	for(uint8_t i = 0; i < 10; i++) // Each frequency
 8002270:	2300      	movs	r3, #0
 8002272:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002276:	e022      	b.n	80022be <StartOledTask+0x12a>
	{
	  GFX_DrawFillRectangle(10+(i*11), 64-FftData.OutFreqArray[i], 10, FftData.OutFreqArray[i], WHITE);
 8002278:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	f103 000a 	add.w	r0, r3, #10
 800228a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800228e:	3340      	adds	r3, #64	@ 0x40
 8002290:	443b      	add	r3, r7
 8002292:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002296:	f1c3 0140 	rsb	r1, r3, #64	@ 0x40
 800229a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800229e:	3340      	adds	r3, #64	@ 0x40
 80022a0:	443b      	add	r3, r7
 80022a2:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80022a6:	461a      	mov	r2, r3
 80022a8:	2301      	movs	r3, #1
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	220a      	movs	r2, #10
 80022b0:	f7ff f8cc 	bl	800144c <GFX_DrawFillRectangle>
	for(uint8_t i = 0; i < 10; i++) // Each frequency
 80022b4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80022b8:	3301      	adds	r3, #1
 80022ba:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80022be:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80022c2:	2b09      	cmp	r3, #9
 80022c4:	d9d8      	bls.n	8002278 <StartOledTask+0xe4>
	}

//	osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
	SSD1306_Display();
 80022c6:	f7ff f9c7 	bl	8001658 <SSD1306_Display>
	SSD1306_Clear(BLACK);
 80022ca:	e781      	b.n	80021d0 <StartOledTask+0x3c>
 80022cc:	200006c8 	.word	0x200006c8
 80022d0:	200006d8 	.word	0x200006d8
 80022d4:	08012bb4 	.word	0x08012bb4
 80022d8:	08012b60 	.word	0x08012b60
 80022dc:	200006b8 	.word	0x200006b8
 80022e0:	200006bc 	.word	0x200006bc
 80022e4:	08012b6c 	.word	0x08012b6c
 80022e8:	08012b78 	.word	0x08012b78

080022ec <StartFFTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFFTTask */
void StartFFTTask(void *argument)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b094      	sub	sp, #80	@ 0x50
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFFTTask */
	arm_rfft_fast_instance_f32 FFTHandler;
	FftData_t FftData;
	int FreqPoint = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int Offset = 40; // variable noise floor offset
 80022f8:	2328      	movs	r3, #40	@ 0x28
 80022fa:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t *AdcMicrophone;
	float *FFTInBuffer;
	float *FFTOutBuffer;
	int *Freqs;

	AdcMicrophone = pvPortMalloc(FFT_SAMPLES * sizeof(uint16_t));
 80022fc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002300:	f00a fc94 	bl	800cc2c <pvPortMalloc>
 8002304:	63f8      	str	r0, [r7, #60]	@ 0x3c
	FFTInBuffer = pvPortMalloc(FFT_SAMPLES * sizeof(float));
 8002306:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800230a:	f00a fc8f 	bl	800cc2c <pvPortMalloc>
 800230e:	63b8      	str	r0, [r7, #56]	@ 0x38
	FFTOutBuffer = pvPortMalloc(FFT_SAMPLES * sizeof(float));
 8002310:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002314:	f00a fc8a 	bl	800cc2c <pvPortMalloc>
 8002318:	6378      	str	r0, [r7, #52]	@ 0x34
	Freqs = pvPortMalloc(FFT_SAMPLES * sizeof(int));
 800231a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800231e:	f00a fc85 	bl	800cc2c <pvPortMalloc>
 8002322:	6338      	str	r0, [r7, #48]	@ 0x30

	HAL_TIM_Base_Start(&htim2);
 8002324:	485d      	ldr	r0, [pc, #372]	@ (800249c <StartFFTTask+0x1b0>)
 8002326:	f005 fa63 	bl	80077f0 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcMicrophone, FFT_SAMPLES);
 800232a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800232e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002330:	485b      	ldr	r0, [pc, #364]	@ (80024a0 <StartFFTTask+0x1b4>)
 8002332:	f002 fb4d 	bl	80049d0 <HAL_ADC_Start_DMA>

	arm_rfft_fast_init_f32(&FFTHandler, FFT_SAMPLES);
 8002336:	f107 0318 	add.w	r3, r7, #24
 800233a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800233e:	4618      	mov	r0, r3
 8002340:	f00a fe68 	bl	800d014 <arm_rfft_fast_init_f32>

  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever);
 8002344:	f04f 32ff 	mov.w	r2, #4294967295
 8002348:	2101      	movs	r1, #1
 800234a:	2001      	movs	r0, #1
 800234c:	f006 fc44 	bl	8008bd8 <osThreadFlagsWait>

	  for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 8002350:	2300      	movs	r3, #0
 8002352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002354:	e011      	b.n	800237a <StartFFTTask+0x8e>
	  {
		  FFTInBuffer[i] =  (float)AdcMicrophone[i];
 8002356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800235c:	4413      	add	r3, r2
 800235e:	8819      	ldrh	r1, [r3, #0]
 8002360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002366:	4413      	add	r3, r2
 8002368:	ee07 1a90 	vmov	s15, r1
 800236c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002370:	edc3 7a00 	vstr	s15, [r3]
	  for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 8002374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002376:	3301      	adds	r3, #1
 8002378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800237a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800237c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002380:	d3e9      	bcc.n	8002356 <StartFFTTask+0x6a>
	  }

	  arm_rfft_fast_f32(&FFTHandler, FFTInBuffer, FFTOutBuffer, 0);
 8002382:	f107 0018 	add.w	r0, r7, #24
 8002386:	2300      	movs	r3, #0
 8002388:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800238a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800238c:	f00a fec6 	bl	800d11c <arm_rfft_fast_f32>

		FreqPoint = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	64fb      	str	r3, [r7, #76]	@ 0x4c
		// calculate abs values and linear-to-dB
		for (int i = 0; i < FFT_SAMPLES; i = i+2)
 8002394:	2300      	movs	r3, #0
 8002396:	647b      	str	r3, [r7, #68]	@ 0x44
 8002398:	e03c      	b.n	8002414 <StartFFTTask+0x128>
		{
			Freqs[FreqPoint] = (int)(20*log10f(complexABS(FFTOutBuffer[i], FFTOutBuffer[i+1]))) - Offset;
 800239a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023a0:	4413      	add	r3, r2
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a8:	3301      	adds	r3, #1
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023ae:	4413      	add	r3, r2
 80023b0:	ed93 7a00 	vldr	s14, [r3]
 80023b4:	eef0 0a47 	vmov.f32	s1, s14
 80023b8:	eeb0 0a67 	vmov.f32	s0, s15
 80023bc:	f7ff fda8 	bl	8001f10 <complexABS>
 80023c0:	eef0 7a40 	vmov.f32	s15, s0
 80023c4:	eeb0 0a67 	vmov.f32	s0, s15
 80023c8:	f010 f9b8 	bl	801273c <log10f>
 80023cc:	eef0 7a40 	vmov.f32	s15, s0
 80023d0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80023d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023dc:	ee17 1a90 	vmov	r1, s15
 80023e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023e6:	4413      	add	r3, r2
 80023e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023ea:	1a8a      	subs	r2, r1, r2
 80023ec:	601a      	str	r2, [r3, #0]

			if(Freqs[FreqPoint] < 0)
 80023ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023f4:	4413      	add	r3, r2
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	da05      	bge.n	8002408 <StartFFTTask+0x11c>
			{
				Freqs[FreqPoint] = 0;
 80023fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002402:	4413      	add	r3, r2
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
			}
			FreqPoint++;
 8002408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800240a:	3301      	adds	r3, #1
 800240c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		for (int i = 0; i < FFT_SAMPLES; i = i+2)
 800240e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002410:	3302      	adds	r3, #2
 8002412:	647b      	str	r3, [r7, #68]	@ 0x44
 8002414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800241a:	dbbe      	blt.n	800239a <StartFFTTask+0xae>
		}

		FftData.OutFreqArray[0] = (uint8_t)Freqs[1]; // 22 Hz
 800241c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241e:	3304      	adds	r3, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	733b      	strb	r3, [r7, #12]
		FftData.OutFreqArray[1] = (uint8_t)Freqs[2]; // 63 Hz
 8002426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002428:	3308      	adds	r3, #8
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	737b      	strb	r3, [r7, #13]
		FftData.OutFreqArray[2] = (uint8_t)Freqs[3]; // 125 Hz
 8002430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002432:	330c      	adds	r3, #12
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	73bb      	strb	r3, [r7, #14]
		FftData.OutFreqArray[3] = (uint8_t)Freqs[6]; // 250 Hz
 800243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243c:	3318      	adds	r3, #24
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	73fb      	strb	r3, [r7, #15]
		FftData.OutFreqArray[4] = (uint8_t)Freqs[12]; // 500 Hz
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	3330      	adds	r3, #48	@ 0x30
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	743b      	strb	r3, [r7, #16]
		FftData.OutFreqArray[5] = (uint8_t)Freqs[23]; // 1000 Hz
 800244e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002450:	335c      	adds	r3, #92	@ 0x5c
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	747b      	strb	r3, [r7, #17]
		FftData.OutFreqArray[6] = (uint8_t)Freqs[51]; // 2200 Hz
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	33cc      	adds	r3, #204	@ 0xcc
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	74bb      	strb	r3, [r7, #18]
		FftData.OutFreqArray[7] = (uint8_t)Freqs[104]; // 4500 Hz
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	74fb      	strb	r3, [r7, #19]
		FftData.OutFreqArray[8] = (uint8_t)Freqs[207]; // 9000 Hz
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	753b      	strb	r3, [r7, #20]
		FftData.OutFreqArray[9] = (uint8_t)Freqs[344]; // 15000 Hz
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	f503 63ac 	add.w	r3, r3, #1376	@ 0x560
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	757b      	strb	r3, [r7, #21]

		osMessageQueuePut(QueueFFTDataHandle, &FftData, 0, osWaitForever);
 8002486:	4b07      	ldr	r3, [pc, #28]	@ (80024a4 <StartFFTTask+0x1b8>)
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	f107 010c 	add.w	r1, r7, #12
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	2200      	movs	r2, #0
 8002494:	f006 ffca 	bl	800942c <osMessageQueuePut>
	  osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever);
 8002498:	e754      	b.n	8002344 <StartFFTTask+0x58>
 800249a:	bf00      	nop
 800249c:	20000778 	.word	0x20000778
 80024a0:	20000600 	.word	0x20000600
 80024a4:	200006bc 	.word	0x200006bc

080024a8 <TimerBmpDataCallback>:
  /* USER CODE END StartFFTTask */
}

/* TimerBmpDataCallback function */
void TimerBmpDataCallback(void *argument)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerBmpDataCallback */
	osSemaphoreRelease(SemaphoreBmpQueueHandle);
 80024b0:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <TimerBmpDataCallback+0x1c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f006 ff01 	bl	80092bc <osSemaphoreRelease>
  /* USER CODE END TimerBmpDataCallback */
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200006d4 	.word	0x200006d4

080024c8 <HAL_ADC_ConvCpltCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a06      	ldr	r2, [pc, #24]	@ (80024f0 <HAL_ADC_ConvCpltCallback+0x28>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d105      	bne.n	80024e6 <HAL_ADC_ConvCpltCallback+0x1e>
	{
//	SamplesReady = 1;
		osThreadFlagsSet(FFTTaskHandle, 0x01);
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f006 fb2b 	bl	8008b3c <osThreadFlagsSet>
	}
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40012000 	.word	0x40012000
 80024f4:	200006b4 	.word	0x200006b4

080024f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b2d      	ldr	r3, [pc, #180]	@ (80025c8 <MX_GPIO_Init+0xd0>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4a2c      	ldr	r2, [pc, #176]	@ (80025c8 <MX_GPIO_Init+0xd0>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4b2a      	ldr	r3, [pc, #168]	@ (80025c8 <MX_GPIO_Init+0xd0>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b26      	ldr	r3, [pc, #152]	@ (80025c8 <MX_GPIO_Init+0xd0>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4a25      	ldr	r2, [pc, #148]	@ (80025c8 <MX_GPIO_Init+0xd0>)
 8002534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
 800253a:	4b23      	ldr	r3, [pc, #140]	@ (80025c8 <MX_GPIO_Init+0xd0>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <MX_GPIO_Init+0xd0>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a1e      	ldr	r2, [pc, #120]	@ (80025c8 <MX_GPIO_Init+0xd0>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b1c      	ldr	r3, [pc, #112]	@ (80025c8 <MX_GPIO_Init+0xd0>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <MX_GPIO_Init+0xd0>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	4a17      	ldr	r2, [pc, #92]	@ (80025c8 <MX_GPIO_Init+0xd0>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	6313      	str	r3, [r2, #48]	@ 0x30
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <MX_GPIO_Init+0xd0>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800257e:	2200      	movs	r2, #0
 8002580:	2120      	movs	r1, #32
 8002582:	4812      	ldr	r0, [pc, #72]	@ (80025cc <MX_GPIO_Init+0xd4>)
 8002584:	f003 fbc2 	bl	8005d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002588:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800258c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800258e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4619      	mov	r1, r3
 800259e:	480c      	ldr	r0, [pc, #48]	@ (80025d0 <MX_GPIO_Init+0xd8>)
 80025a0:	f003 fa30 	bl	8005a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025a4:	2320      	movs	r3, #32
 80025a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4619      	mov	r1, r3
 80025ba:	4804      	ldr	r0, [pc, #16]	@ (80025cc <MX_GPIO_Init+0xd4>)
 80025bc:	f003 fa22 	bl	8005a04 <HAL_GPIO_Init>

}
 80025c0:	bf00      	nop
 80025c2:	3728      	adds	r7, #40	@ 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020800 	.word	0x40020800

080025d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025d8:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <MX_I2C1_Init+0x50>)
 80025da:	4a13      	ldr	r2, [pc, #76]	@ (8002628 <MX_I2C1_Init+0x54>)
 80025dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80025de:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <MX_I2C1_Init+0x50>)
 80025e0:	4a12      	ldr	r2, [pc, #72]	@ (800262c <MX_I2C1_Init+0x58>)
 80025e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <MX_I2C1_Init+0x50>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <MX_I2C1_Init+0x50>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <MX_I2C1_Init+0x50>)
 80025f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <MX_I2C1_Init+0x50>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025fe:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <MX_I2C1_Init+0x50>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002604:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <MX_I2C1_Init+0x50>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <MX_I2C1_Init+0x50>)
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002610:	4804      	ldr	r0, [pc, #16]	@ (8002624 <MX_I2C1_Init+0x50>)
 8002612:	f003 fbaf 	bl	8005d74 <HAL_I2C_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800261c:	f000 f8e4 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200006d8 	.word	0x200006d8
 8002628:	40005400 	.word	0x40005400
 800262c:	00061a80 	.word	0x00061a80

08002630 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a19      	ldr	r2, [pc, #100]	@ (80026b4 <HAL_I2C_MspInit+0x84>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d12c      	bne.n	80026ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	4b18      	ldr	r3, [pc, #96]	@ (80026b8 <HAL_I2C_MspInit+0x88>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	4a17      	ldr	r2, [pc, #92]	@ (80026b8 <HAL_I2C_MspInit+0x88>)
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	6313      	str	r3, [r2, #48]	@ 0x30
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <HAL_I2C_MspInit+0x88>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800266e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002674:	2312      	movs	r3, #18
 8002676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002680:	2304      	movs	r3, #4
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	480c      	ldr	r0, [pc, #48]	@ (80026bc <HAL_I2C_MspInit+0x8c>)
 800268c:	f003 f9ba 	bl	8005a04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <HAL_I2C_MspInit+0x88>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	4a07      	ldr	r2, [pc, #28]	@ (80026b8 <HAL_I2C_MspInit+0x88>)
 800269a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800269e:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a0:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <HAL_I2C_MspInit+0x88>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80026ac:	bf00      	nop
 80026ae:	3728      	adds	r7, #40	@ 0x28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40005400 	.word	0x40005400
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020400 	.word	0x40020400

080026c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026c4:	f001 ffee 	bl	80046a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026c8:	f000 f814 	bl	80026f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026cc:	f7ff ff14 	bl	80024f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80026d0:	f7ff fbde 	bl	8001e90 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80026d4:	f001 ff4a 	bl	800456c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80026d8:	f7ff ff7c 	bl	80025d4 <MX_I2C1_Init>
  MX_ADC1_Init();
 80026dc:	f7ff f854 	bl	8001788 <MX_ADC1_Init>
  MX_TIM2_Init();
 80026e0:	f001 fed8 	bl	8004494 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80026e4:	f006 f918 	bl	8008918 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80026e8:	f7ff fc40 	bl	8001f6c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80026ec:	f006 f938 	bl	8008960 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <main+0x30>

080026f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b094      	sub	sp, #80	@ 0x50
 80026f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026fa:	f107 0320 	add.w	r3, r7, #32
 80026fe:	2230      	movs	r2, #48	@ 0x30
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f00c fbeb 	bl	800eede <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <SystemClock_Config+0xc8>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	4a26      	ldr	r2, [pc, #152]	@ (80027bc <SystemClock_Config+0xc8>)
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002726:	6413      	str	r3, [r2, #64]	@ 0x40
 8002728:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <SystemClock_Config+0xc8>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002734:	2300      	movs	r3, #0
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	4b21      	ldr	r3, [pc, #132]	@ (80027c0 <SystemClock_Config+0xcc>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a20      	ldr	r2, [pc, #128]	@ (80027c0 <SystemClock_Config+0xcc>)
 800273e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b1e      	ldr	r3, [pc, #120]	@ (80027c0 <SystemClock_Config+0xcc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002750:	2301      	movs	r3, #1
 8002752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002754:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800275a:	2302      	movs	r3, #2
 800275c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800275e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002764:	2304      	movs	r3, #4
 8002766:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002768:	2348      	movs	r3, #72	@ 0x48
 800276a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800276c:	2302      	movs	r3, #2
 800276e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002770:	2303      	movs	r3, #3
 8002772:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002774:	f107 0320 	add.w	r3, r7, #32
 8002778:	4618      	mov	r0, r3
 800277a:	f004 fb1f 	bl	8006dbc <HAL_RCC_OscConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002784:	f000 f830 	bl	80027e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002788:	230f      	movs	r3, #15
 800278a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800278c:	2302      	movs	r3, #2
 800278e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800279e:	f107 030c 	add.w	r3, r7, #12
 80027a2:	2102      	movs	r1, #2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 fd81 	bl	80072ac <HAL_RCC_ClockConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80027b0:	f000 f81a 	bl	80027e8 <Error_Handler>
  }
}
 80027b4:	bf00      	nop
 80027b6:	3750      	adds	r7, #80	@ 0x50
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40007000 	.word	0x40007000

080027c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d101      	bne.n	80027da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027d6:	f001 ff87 	bl	80046e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40014400 	.word	0x40014400

080027e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ec:	b672      	cpsid	i
}
 80027ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <Error_Handler+0x8>

080027f4 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d204      	bcs.n	8002816 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	701a      	strb	r2, [r3, #0]
  }
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002822:	b480      	push	{r7}
 8002824:	b085      	sub	sp, #20
 8002826:	af00      	add	r7, sp, #0
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	4603      	mov	r3, r0
 8002830:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	4603      	mov	r3, r0
 800284c:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <_out_char+0x1e>
    _putchar(character);
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fb3a 	bl	8001ed0 <_putchar>
  }
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e002      	b.n	800287a <_strnlen_s+0x16>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3301      	adds	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d004      	beq.n	800288c <_strnlen_s+0x28>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	603a      	str	r2, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f3      	bne.n	8002874 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	1ad3      	subs	r3, r2, r3
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80028ac:	d904      	bls.n	80028b8 <_is_digit+0x1a>
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	2b39      	cmp	r3, #57	@ 0x39
 80028b2:	d801      	bhi.n	80028b8 <_is_digit+0x1a>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <_is_digit+0x1c>
 80028b8:	2300      	movs	r3, #0
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80028d8:	e00e      	b.n	80028f8 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4618      	mov	r0, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	1c59      	adds	r1, r3, #1
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6011      	str	r1, [r2, #0]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	4403      	add	r3, r0
 80028f4:	3b30      	subs	r3, #48	@ 0x30
 80028f6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ffcd 	bl	800289e <_is_digit>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1e7      	bne.n	80028da <_atoi+0xe>
  }
  return i;
 800290a:	68fb      	ldr	r3, [r7, #12]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d125      	bne.n	800297c <_out_rev+0x68>
 8002930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d120      	bne.n	800297c <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800293a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e00a      	b.n	8002956 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	1c53      	adds	r3, r2, #1
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	68fc      	ldr	r4, [r7, #12]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	2020      	movs	r0, #32
 800294e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3301      	adds	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295a:	429a      	cmp	r2, r3
 800295c:	d3f0      	bcc.n	8002940 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800295e:	e00d      	b.n	800297c <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002962:	3b01      	subs	r3, #1
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296a:	4413      	add	r3, r2
 800296c:	7818      	ldrb	r0, [r3, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	1c53      	adds	r3, r2, #1
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	68fc      	ldr	r4, [r7, #12]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	47a0      	blx	r4
  while (len) {
 800297c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1ee      	bne.n	8002960 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00e      	beq.n	80029aa <_out_rev+0x96>
    while (idx - start_idx < width) {
 800298c:	e007      	b.n	800299e <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	1c53      	adds	r3, r2, #1
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	68fc      	ldr	r4, [r7, #12]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	2020      	movs	r0, #32
 800299c:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d8f1      	bhi.n	800298e <_out_rev+0x7a>
    }
  }

  return idx;
 80029aa:	687b      	ldr	r3, [r7, #4]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd90      	pop	{r4, r7, pc}

080029b4 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af04      	add	r7, sp, #16
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80029c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d136      	bne.n	8002a3a <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d018      	beq.n	8002a04 <_ntoa_format+0x50>
 80029d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d013      	beq.n	8002a04 <_ntoa_format+0x50>
 80029dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d104      	bne.n	80029ee <_ntoa_format+0x3a>
 80029e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <_ntoa_format+0x50>
      width--;
 80029ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f0:	3b01      	subs	r3, #1
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80029f4:	e006      	b.n	8002a04 <_ntoa_format+0x50>
      buf[len++] = '0';
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	61fa      	str	r2, [r7, #28]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4413      	add	r3, r2
 8002a00:	2230      	movs	r2, #48	@ 0x30
 8002a02:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d20a      	bcs.n	8002a22 <_ntoa_format+0x6e>
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b1f      	cmp	r3, #31
 8002a10:	d9f1      	bls.n	80029f6 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a12:	e006      	b.n	8002a22 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	61fa      	str	r2, [r7, #28]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	2230      	movs	r2, #48	@ 0x30
 8002a20:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <_ntoa_format+0x86>
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d202      	bcs.n	8002a3a <_ntoa_format+0x86>
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b1f      	cmp	r3, #31
 8002a38:	d9ec      	bls.n	8002a14 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d058      	beq.n	8002af6 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <_ntoa_format+0xc8>
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <_ntoa_format+0xc8>
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d003      	beq.n	8002a64 <_ntoa_format+0xb0>
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d10b      	bne.n	8002a7c <_ntoa_format+0xc8>
      len--;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <_ntoa_format+0xc8>
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d102      	bne.n	8002a7c <_ntoa_format+0xc8>
        len--;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	2b10      	cmp	r3, #16
 8002a80:	d10f      	bne.n	8002aa2 <_ntoa_format+0xee>
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <_ntoa_format+0xee>
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b1f      	cmp	r3, #31
 8002a90:	d807      	bhi.n	8002aa2 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	61fa      	str	r2, [r7, #28]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	2278      	movs	r2, #120	@ 0x78
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e01f      	b.n	8002ae2 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d10f      	bne.n	8002ac8 <_ntoa_format+0x114>
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <_ntoa_format+0x114>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	2b1f      	cmp	r3, #31
 8002ab6:	d807      	bhi.n	8002ac8 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	61fa      	str	r2, [r7, #28]
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	2258      	movs	r2, #88	@ 0x58
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e00c      	b.n	8002ae2 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d109      	bne.n	8002ae2 <_ntoa_format+0x12e>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	2b1f      	cmp	r3, #31
 8002ad2:	d806      	bhi.n	8002ae2 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	61fa      	str	r2, [r7, #28]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4413      	add	r3, r2
 8002ade:	2262      	movs	r2, #98	@ 0x62
 8002ae0:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2b1f      	cmp	r3, #31
 8002ae6:	d806      	bhi.n	8002af6 <_ntoa_format+0x142>
      buf[len++] = '0';
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	61fa      	str	r2, [r7, #28]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4413      	add	r3, r2
 8002af2:	2230      	movs	r2, #48	@ 0x30
 8002af4:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	2b1f      	cmp	r3, #31
 8002afa:	d824      	bhi.n	8002b46 <_ntoa_format+0x192>
    if (negative) {
 8002afc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	61fa      	str	r2, [r7, #28]
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	222d      	movs	r2, #45	@ 0x2d
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	e018      	b.n	8002b46 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	61fa      	str	r2, [r7, #28]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4413      	add	r3, r2
 8002b28:	222b      	movs	r2, #43	@ 0x2b
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e00b      	b.n	8002b46 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	61fa      	str	r2, [r7, #28]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4413      	add	r3, r2
 8002b42:	2220      	movs	r2, #32
 8002b44:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b48:	9303      	str	r3, [sp, #12]
 8002b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b4c:	9302      	str	r3, [sp, #8]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f7ff fed9 	bl	8002914 <_out_rev>
 8002b62:	4603      	mov	r3, r0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b096      	sub	sp, #88	@ 0x58
 8002b70:	af08      	add	r7, sp, #32
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8002b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b86:	f023 0310 	bic.w	r3, r3, #16
 8002b8a:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <_ntoa_long+0x30>
 8002b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d032      	beq.n	8002c02 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ba0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ba4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002ba6:	fb01 f202 	mul.w	r2, r1, r2
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002bb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	d804      	bhi.n	8002bc2 <_ntoa_long+0x56>
 8002bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bbc:	3330      	adds	r3, #48	@ 0x30
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	e00d      	b.n	8002bde <_ntoa_long+0x72>
 8002bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <_ntoa_long+0x64>
 8002bcc:	2241      	movs	r2, #65	@ 0x41
 8002bce:	e000      	b.n	8002bd2 <_ntoa_long+0x66>
 8002bd0:	2261      	movs	r2, #97	@ 0x61
 8002bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	3b0a      	subs	r3, #10
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be0:	1c59      	adds	r1, r3, #1
 8002be2:	6379      	str	r1, [r7, #52]	@ 0x34
 8002be4:	3338      	adds	r3, #56	@ 0x38
 8002be6:	443b      	add	r3, r7
 8002be8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002bec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <_ntoa_long+0x96>
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfe:	2b1f      	cmp	r3, #31
 8002c00:	d9cc      	bls.n	8002b9c <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c04:	9306      	str	r3, [sp, #24]
 8002c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c08:	9305      	str	r3, [sp, #20]
 8002c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c0c:	9304      	str	r3, [sp, #16]
 8002c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c10:	9303      	str	r3, [sp, #12]
 8002c12:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002c16:	9302      	str	r3, [sp, #8]
 8002c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f7ff fec3 	bl	80029b4 <_ntoa_format>
 8002c2e:	4603      	mov	r3, r0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3738      	adds	r7, #56	@ 0x38
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b096      	sub	sp, #88	@ 0x58
 8002c3c:	af08      	add	r7, sp, #32
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8002c4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	d103      	bne.n	8002c5a <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c54:	f023 0310 	bic.w	r3, r3, #16
 8002c58:	663b      	str	r3, [r7, #96]	@ 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <_ntoa_long_long+0x34>
 8002c64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	d037      	beq.n	8002cdc <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8002c6c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c74:	f7fe f870 	bl	8000d58 <__aeabi_uldivmod>
 8002c78:	4613      	mov	r3, r2
 8002c7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c82:	2b09      	cmp	r3, #9
 8002c84:	d804      	bhi.n	8002c90 <_ntoa_long_long+0x58>
 8002c86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c8a:	3330      	adds	r3, #48	@ 0x30
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	e00d      	b.n	8002cac <_ntoa_long_long+0x74>
 8002c90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <_ntoa_long_long+0x66>
 8002c9a:	2241      	movs	r2, #65	@ 0x41
 8002c9c:	e000      	b.n	8002ca0 <_ntoa_long_long+0x68>
 8002c9e:	2261      	movs	r2, #97	@ 0x61
 8002ca0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	3b0a      	subs	r3, #10
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cae:	1c59      	adds	r1, r3, #1
 8002cb0:	6379      	str	r1, [r7, #52]	@ 0x34
 8002cb2:	3338      	adds	r3, #56	@ 0x38
 8002cb4:	443b      	add	r3, r7
 8002cb6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002cba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002cbe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002cc2:	f7fe f849 	bl	8000d58 <__aeabi_uldivmod>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002cce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	d002      	beq.n	8002cdc <_ntoa_long_long+0xa4>
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd8:	2b1f      	cmp	r3, #31
 8002cda:	d9c7      	bls.n	8002c6c <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cde:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002ce0:	9206      	str	r2, [sp, #24]
 8002ce2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002ce4:	9205      	str	r2, [sp, #20]
 8002ce6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ce8:	9204      	str	r2, [sp, #16]
 8002cea:	9303      	str	r3, [sp, #12]
 8002cec:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002cf0:	9302      	str	r3, [sp, #8]
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	f107 0310 	add.w	r3, r7, #16
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f7ff fe56 	bl	80029b4 <_ntoa_format>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3738      	adds	r7, #56	@ 0x38
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	0000      	movs	r0, r0
 8002d14:	0000      	movs	r0, r0
	...

08002d18 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b09d      	sub	sp, #116	@ 0x74
 8002d1c:	af04      	add	r7, sp, #16
 8002d1e:	6178      	str	r0, [r7, #20]
 8002d20:	6139      	str	r1, [r7, #16]
 8002d22:	60fa      	str	r2, [r7, #12]
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double diff = 0.0;
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d42:	f7fd ff29 	bl	8000b98 <__aeabi_dcmpeq>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10f      	bne.n	8002d6c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002d4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d4e:	9303      	str	r3, [sp, #12]
 8002d50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d52:	9302      	str	r3, [sp, #8]
 8002d54:	2303      	movs	r3, #3
 8002d56:	9301      	str	r3, [sp, #4]
 8002d58:	4ba7      	ldr	r3, [pc, #668]	@ (8002ff8 <_ftoa+0x2e0>)
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	6939      	ldr	r1, [r7, #16]
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7ff fdd6 	bl	8002914 <_out_rev>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	e222      	b.n	80031b2 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8002d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d70:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8002d74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d78:	f7fd ff18 	bl	8000bac <__aeabi_dcmplt>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00f      	beq.n	8002da2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002d82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d84:	9303      	str	r3, [sp, #12]
 8002d86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d88:	9302      	str	r3, [sp, #8]
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	4b9b      	ldr	r3, [pc, #620]	@ (8002ffc <_ftoa+0x2e4>)
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	6939      	ldr	r1, [r7, #16]
 8002d98:	6978      	ldr	r0, [r7, #20]
 8002d9a:	f7ff fdbb 	bl	8002914 <_out_rev>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	e207      	b.n	80031b2 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8002da2:	f04f 32ff 	mov.w	r2, #4294967295
 8002da6:	4b96      	ldr	r3, [pc, #600]	@ (8003000 <_ftoa+0x2e8>)
 8002da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dac:	f7fd ff1c 	bl	8000be8 <__aeabi_dcmpgt>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01d      	beq.n	8002df2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <_ftoa+0xac>
 8002dc0:	4b90      	ldr	r3, [pc, #576]	@ (8003004 <_ftoa+0x2ec>)
 8002dc2:	e000      	b.n	8002dc6 <_ftoa+0xae>
 8002dc4:	4b90      	ldr	r3, [pc, #576]	@ (8003008 <_ftoa+0x2f0>)
 8002dc6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002dc8:	f002 0204 	and.w	r2, r2, #4
 8002dcc:	2a00      	cmp	r2, #0
 8002dce:	d001      	beq.n	8002dd4 <_ftoa+0xbc>
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	e000      	b.n	8002dd6 <_ftoa+0xbe>
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002dd8:	9103      	str	r1, [sp, #12]
 8002dda:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002ddc:	9102      	str	r1, [sp, #8]
 8002dde:	9201      	str	r2, [sp, #4]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	6939      	ldr	r1, [r7, #16]
 8002de8:	6978      	ldr	r0, [r7, #20]
 8002dea:	f7ff fd93 	bl	8002914 <_out_rev>
 8002dee:	4603      	mov	r3, r0
 8002df0:	e1df      	b.n	80031b2 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002df2:	a37d      	add	r3, pc, #500	@ (adr r3, 8002fe8 <_ftoa+0x2d0>)
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dfc:	f7fd fef4 	bl	8000be8 <__aeabi_dcmpgt>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <_ftoa+0x102>
 8002e06:	a37a      	add	r3, pc, #488	@ (adr r3, 8002ff0 <_ftoa+0x2d8>)
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e10:	f7fd fecc 	bl	8000bac <__aeabi_dcmplt>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00f      	beq.n	8002e3a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002e1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e1c:	9302      	str	r3, [sp, #8]
 8002e1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	ed97 0b00 	vldr	d0, [r7]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	6939      	ldr	r1, [r7, #16]
 8002e30:	6978      	ldr	r0, [r7, #20]
 8002e32:	f000 f9c9 	bl	80031c8 <_etoa>
 8002e36:	4603      	mov	r3, r0
 8002e38:	e1bb      	b.n	80031b2 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  if (value < 0) {
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e4c:	f7fd feae 	bl	8000bac <__aeabi_dcmplt>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00e      	beq.n	8002e74 <_ftoa+0x15c>
    negative = true;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    value = 0 - value;
 8002e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e60:	f04f 0000 	mov.w	r0, #0
 8002e64:	f04f 0100 	mov.w	r1, #0
 8002e68:	f7fd fa76 	bl	8000358 <__aeabi_dsub>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002e74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10d      	bne.n	8002e9a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002e7e:	2306      	movs	r3, #6
 8002e80:	673b      	str	r3, [r7, #112]	@ 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002e82:	e00a      	b.n	8002e9a <_ftoa+0x182>
    buf[len++] = '0';
 8002e84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e8a:	3360      	adds	r3, #96	@ 0x60
 8002e8c:	443b      	add	r3, r7
 8002e8e:	2230      	movs	r2, #48	@ 0x30
 8002e90:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002e94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e96:	3b01      	subs	r3, #1
 8002e98:	673b      	str	r3, [r7, #112]	@ 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002e9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e9c:	2b1f      	cmp	r3, #31
 8002e9e:	d802      	bhi.n	8002ea6 <_ftoa+0x18e>
 8002ea0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ea2:	2b09      	cmp	r3, #9
 8002ea4:	d8ee      	bhi.n	8002e84 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002ea6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002eaa:	f7fd febd 	bl	8000c28 <__aeabi_d2iz>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	657b      	str	r3, [r7, #84]	@ 0x54
  double tmp = (value - whole) * pow10[prec];
 8002eb2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002eb4:	f7fd fb9e 	bl	80005f4 <__aeabi_i2d>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ec0:	f7fd fa4a 	bl	8000358 <__aeabi_dsub>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4a4f      	ldr	r2, [pc, #316]	@ (800300c <_ftoa+0x2f4>)
 8002ece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed8:	f7fd fbf6 	bl	80006c8 <__aeabi_dmul>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long frac = (unsigned long)tmp;
 8002ee4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002ee8:	f7fd fec6 	bl	8000c78 <__aeabi_d2uiz>
 8002eec:	4603      	mov	r3, r0
 8002eee:	653b      	str	r3, [r7, #80]	@ 0x50
  diff = tmp - frac;
 8002ef0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002ef2:	f7fd fb6f 	bl	80005d4 <__aeabi_ui2d>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002efe:	f7fd fa2b 	bl	8000358 <__aeabi_dsub>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  if (diff > 0.5) {
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	4b40      	ldr	r3, [pc, #256]	@ (8003010 <_ftoa+0x2f8>)
 8002f10:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002f14:	f7fd fe68 	bl	8000be8 <__aeabi_dcmpgt>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <_ftoa+0x234>
    ++frac;
 8002f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f20:	3301      	adds	r3, #1
 8002f22:	653b      	str	r3, [r7, #80]	@ 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002f24:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002f26:	f7fd fb55 	bl	80005d4 <__aeabi_ui2d>
 8002f2a:	4a38      	ldr	r2, [pc, #224]	@ (800300c <_ftoa+0x2f4>)
 8002f2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f7fd fe4d 	bl	8000bd4 <__aeabi_dcmpge>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01a      	beq.n	8002f76 <_ftoa+0x25e>
      frac = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	653b      	str	r3, [r7, #80]	@ 0x50
      ++whole;
 8002f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f46:	3301      	adds	r3, #1
 8002f48:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f4a:	e014      	b.n	8002f76 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	4b2f      	ldr	r3, [pc, #188]	@ (8003010 <_ftoa+0x2f8>)
 8002f52:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002f56:	f7fd fe29 	bl	8000bac <__aeabi_dcmplt>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d004      	beq.n	8002f70 <_ftoa+0x258>
 8002f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f72:	3301      	adds	r3, #1
 8002f74:	653b      	str	r3, [r7, #80]	@ 0x50
  }

  if (prec == 0U) {
 8002f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d14b      	bne.n	8003014 <_ftoa+0x2fc>
    diff = value - (double)whole;
 8002f7c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002f7e:	f7fd fb39 	bl	80005f4 <__aeabi_i2d>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f8a:	f7fd f9e5 	bl	8000358 <__aeabi_dsub>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002f96:	2301      	movs	r3, #1
 8002f98:	461c      	mov	r4, r3
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003010 <_ftoa+0x2f8>)
 8002fa0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002fa4:	f7fd fe02 	bl	8000bac <__aeabi_dcmplt>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <_ftoa+0x29a>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	461c      	mov	r4, r3
 8002fb2:	b2e3      	uxtb	r3, r4
 8002fb4:	f083 0301 	eor.w	r3, r3, #1
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <_ftoa+0x2ba>
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <_ftoa+0x2f8>)
 8002fc4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002fc8:	f7fd fe0e 	bl	8000be8 <__aeabi_dcmpgt>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d064      	beq.n	800309c <_ftoa+0x384>
 8002fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8081 	beq.w	80030e0 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fe4:	e07c      	b.n	80030e0 <_ftoa+0x3c8>
 8002fe6:	bf00      	nop
 8002fe8:	00000000 	.word	0x00000000
 8002fec:	41cdcd65 	.word	0x41cdcd65
 8002ff0:	00000000 	.word	0x00000000
 8002ff4:	c1cdcd65 	.word	0xc1cdcd65
 8002ff8:	08012b84 	.word	0x08012b84
 8002ffc:	08012b88 	.word	0x08012b88
 8003000:	7fefffff 	.word	0x7fefffff
 8003004:	08012b90 	.word	0x08012b90
 8003008:	08012b98 	.word	0x08012b98
 800300c:	08012eb8 	.word	0x08012eb8
 8003010:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8003014:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003016:	64fb      	str	r3, [r7, #76]	@ 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003018:	e01f      	b.n	800305a <_ftoa+0x342>
      --count;
 800301a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800301c:	3b01      	subs	r3, #1
 800301e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8003020:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003022:	4b66      	ldr	r3, [pc, #408]	@ (80031bc <_ftoa+0x4a4>)
 8003024:	fba3 2301 	umull	r2, r3, r3, r1
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	1aca      	subs	r2, r1, r3
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003038:	1c59      	adds	r1, r3, #1
 800303a:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800303c:	3230      	adds	r2, #48	@ 0x30
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	3360      	adds	r3, #96	@ 0x60
 8003042:	443b      	add	r3, r7
 8003044:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800304a:	4a5c      	ldr	r2, [pc, #368]	@ (80031bc <_ftoa+0x4a4>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	08db      	lsrs	r3, r3, #3
 8003052:	653b      	str	r3, [r7, #80]	@ 0x50
 8003054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800305a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800305c:	2b1f      	cmp	r3, #31
 800305e:	d9dc      	bls.n	800301a <_ftoa+0x302>
 8003060:	e009      	b.n	8003076 <_ftoa+0x35e>
        break;
 8003062:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003064:	e007      	b.n	8003076 <_ftoa+0x35e>
      buf[len++] = '0';
 8003066:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800306c:	3360      	adds	r3, #96	@ 0x60
 800306e:	443b      	add	r3, r7
 8003070:	2230      	movs	r2, #48	@ 0x30
 8003072:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003078:	2b1f      	cmp	r3, #31
 800307a:	d804      	bhi.n	8003086 <_ftoa+0x36e>
 800307c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800307e:	1e5a      	subs	r2, r3, #1
 8003080:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ef      	bne.n	8003066 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003088:	2b1f      	cmp	r3, #31
 800308a:	d829      	bhi.n	80030e0 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800308c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003092:	3360      	adds	r3, #96	@ 0x60
 8003094:	443b      	add	r3, r7
 8003096:	222e      	movs	r2, #46	@ 0x2e
 8003098:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800309c:	e020      	b.n	80030e0 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800309e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030a0:	4b47      	ldr	r3, [pc, #284]	@ (80031c0 <_ftoa+0x4a8>)
 80030a2:	fb83 1302 	smull	r1, r3, r3, r2
 80030a6:	1099      	asrs	r1, r3, #2
 80030a8:	17d3      	asrs	r3, r2, #31
 80030aa:	1ac9      	subs	r1, r1, r3
 80030ac:	460b      	mov	r3, r1
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	1ad1      	subs	r1, r2, r3
 80030b6:	b2ca      	uxtb	r2, r1
 80030b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ba:	1c59      	adds	r1, r3, #1
 80030bc:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80030be:	3230      	adds	r2, #48	@ 0x30
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	3360      	adds	r3, #96	@ 0x60
 80030c4:	443b      	add	r3, r7
 80030c6:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80030ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030cc:	4a3c      	ldr	r2, [pc, #240]	@ (80031c0 <_ftoa+0x4a8>)
 80030ce:	fb82 1203 	smull	r1, r2, r2, r3
 80030d2:	1092      	asrs	r2, r2, #2
 80030d4:	17db      	asrs	r3, r3, #31
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80030da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80030e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030e2:	2b1f      	cmp	r3, #31
 80030e4:	d9db      	bls.n	800309e <_ftoa+0x386>
 80030e6:	e000      	b.n	80030ea <_ftoa+0x3d2>
      break;
 80030e8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80030ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d123      	bne.n	800313c <_ftoa+0x424>
 80030f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01e      	beq.n	800313c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80030fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003100:	2b00      	cmp	r3, #0
 8003102:	d014      	beq.n	800312e <_ftoa+0x416>
 8003104:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003108:	2b00      	cmp	r3, #0
 800310a:	d104      	bne.n	8003116 <_ftoa+0x3fe>
 800310c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <_ftoa+0x416>
      width--;
 8003116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003118:	3b01      	subs	r3, #1
 800311a:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800311c:	e007      	b.n	800312e <_ftoa+0x416>
      buf[len++] = '0';
 800311e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003124:	3360      	adds	r3, #96	@ 0x60
 8003126:	443b      	add	r3, r7
 8003128:	2230      	movs	r2, #48	@ 0x30
 800312a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800312e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003132:	429a      	cmp	r2, r3
 8003134:	d202      	bcs.n	800313c <_ftoa+0x424>
 8003136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003138:	2b1f      	cmp	r3, #31
 800313a:	d9f0      	bls.n	800311e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800313c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800313e:	2b1f      	cmp	r3, #31
 8003140:	d827      	bhi.n	8003192 <_ftoa+0x47a>
    if (negative) {
 8003142:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <_ftoa+0x444>
      buf[len++] = '-';
 800314a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003150:	3360      	adds	r3, #96	@ 0x60
 8003152:	443b      	add	r3, r7
 8003154:	222d      	movs	r2, #45	@ 0x2d
 8003156:	f803 2c48 	strb.w	r2, [r3, #-72]
 800315a:	e01a      	b.n	8003192 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800315c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800316c:	3360      	adds	r3, #96	@ 0x60
 800316e:	443b      	add	r3, r7
 8003170:	222b      	movs	r2, #43	@ 0x2b
 8003172:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003176:	e00c      	b.n	8003192 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <_ftoa+0x47a>
      buf[len++] = ' ';
 8003182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003188:	3360      	adds	r3, #96	@ 0x60
 800318a:	443b      	add	r3, r7
 800318c:	2220      	movs	r2, #32
 800318e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003192:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003194:	9303      	str	r3, [sp, #12]
 8003196:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003198:	9302      	str	r3, [sp, #8]
 800319a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	f107 0318 	add.w	r3, r7, #24
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	6939      	ldr	r1, [r7, #16]
 80031aa:	6978      	ldr	r0, [r7, #20]
 80031ac:	f7ff fbb2 	bl	8002914 <_out_rev>
 80031b0:	4603      	mov	r3, r0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3764      	adds	r7, #100	@ 0x64
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd90      	pop	{r4, r7, pc}
 80031ba:	bf00      	nop
 80031bc:	cccccccd 	.word	0xcccccccd
 80031c0:	66666667 	.word	0x66666667
 80031c4:	00000000 	.word	0x00000000

080031c8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80031c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031cc:	b09f      	sub	sp, #124	@ 0x7c
 80031ce:	af06      	add	r7, sp, #24
 80031d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80031d2:	6239      	str	r1, [r7, #32]
 80031d4:	61fa      	str	r2, [r7, #28]
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80031dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031e4:	f7fd fcd8 	bl	8000b98 <__aeabi_dcmpeq>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d014      	beq.n	8003218 <_etoa+0x50>
 80031ee:	f04f 32ff 	mov.w	r2, #4294967295
 80031f2:	4bc1      	ldr	r3, [pc, #772]	@ (80034f8 <_etoa+0x330>)
 80031f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031f8:	f7fd fcf6 	bl	8000be8 <__aeabi_dcmpgt>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <_etoa+0x50>
 8003202:	f04f 32ff 	mov.w	r2, #4294967295
 8003206:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 800320a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800320e:	f7fd fccd 	bl	8000bac <__aeabi_dcmplt>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d012      	beq.n	800323e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003218:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800321c:	9302      	str	r3, [sp, #8]
 800321e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	ed97 0b04 	vldr	d0, [r7, #16]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	6a39      	ldr	r1, [r7, #32]
 8003234:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003236:	f7ff fd6f 	bl	8002d18 <_ftoa>
 800323a:	4603      	mov	r3, r0
 800323c:	e23f      	b.n	80036be <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800323e:	2301      	movs	r3, #1
 8003240:	461e      	mov	r6, r3
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800324e:	f7fd fcad 	bl	8000bac <__aeabi_dcmplt>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <_etoa+0x94>
 8003258:	2300      	movs	r3, #0
 800325a:	461e      	mov	r6, r3
 800325c:	f887 6053 	strb.w	r6, [r7, #83]	@ 0x53
  if (negative) {
 8003260:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <_etoa+0xb4>
    value = -value;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	ed97 7b00 	vldr	d7, [r7]
 8003278:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800327c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003288:	2306      	movs	r3, #6
 800328a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800328e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003292:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003296:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	0d0a      	lsrs	r2, r1, #20
 80032a4:	2300      	movs	r3, #0
 80032a6:	4613      	mov	r3, r2
 80032a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ac:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80032b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80032b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032b6:	4690      	mov	r8, r2
 80032b8:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80032bc:	4644      	mov	r4, r8
 80032be:	f049 557f 	orr.w	r5, r9, #1069547520	@ 0x3fc00000
 80032c2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80032c6:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80032ca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80032cc:	f7fd f992 	bl	80005f4 <__aeabi_i2d>
 80032d0:	a37d      	add	r3, pc, #500	@ (adr r3, 80034c8 <_etoa+0x300>)
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f7fd f9f7 	bl	80006c8 <__aeabi_dmul>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	a37b      	add	r3, pc, #492	@ (adr r3, 80034d0 <_etoa+0x308>)
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f7fd f838 	bl	800035c <__adddf3>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4614      	mov	r4, r2
 80032f2:	461d      	mov	r5, r3
 80032f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	4b7f      	ldr	r3, [pc, #508]	@ (80034fc <_etoa+0x334>)
 80032fe:	f7fd f82b 	bl	8000358 <__aeabi_dsub>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4610      	mov	r0, r2
 8003308:	4619      	mov	r1, r3
 800330a:	a373      	add	r3, pc, #460	@ (adr r3, 80034d8 <_etoa+0x310>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f7fd f9da 	bl	80006c8 <__aeabi_dmul>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4620      	mov	r0, r4
 800331a:	4629      	mov	r1, r5
 800331c:	f7fd f81e 	bl	800035c <__adddf3>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	f7fd fc7e 	bl	8000c28 <__aeabi_d2iz>
 800332c:	4603      	mov	r3, r0
 800332e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003330:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003332:	f7fd f95f 	bl	80005f4 <__aeabi_i2d>
 8003336:	a36a      	add	r3, pc, #424	@ (adr r3, 80034e0 <_etoa+0x318>)
 8003338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333c:	f7fd f9c4 	bl	80006c8 <__aeabi_dmul>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	4b6c      	ldr	r3, [pc, #432]	@ (8003500 <_etoa+0x338>)
 800334e:	f7fd f805 	bl	800035c <__adddf3>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	f7fd fc65 	bl	8000c28 <__aeabi_d2iz>
 800335e:	4603      	mov	r3, r0
 8003360:	64fb      	str	r3, [r7, #76]	@ 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003362:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003364:	f7fd f946 	bl	80005f4 <__aeabi_i2d>
 8003368:	a35f      	add	r3, pc, #380	@ (adr r3, 80034e8 <_etoa+0x320>)
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	f7fd f9ab 	bl	80006c8 <__aeabi_dmul>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4614      	mov	r4, r2
 8003378:	461d      	mov	r5, r3
 800337a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800337c:	f7fd f93a 	bl	80005f4 <__aeabi_i2d>
 8003380:	a35b      	add	r3, pc, #364	@ (adr r3, 80034f0 <_etoa+0x328>)
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	f7fd f99f 	bl	80006c8 <__aeabi_dmul>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4620      	mov	r0, r4
 8003390:	4629      	mov	r1, r5
 8003392:	f7fc ffe1 	bl	8000358 <__aeabi_dsub>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  const double z2 = z * z;
 800339e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80033a6:	f7fd f98f 	bl	80006c8 <__aeabi_dmul>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80033b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033b4:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80033b8:	17da      	asrs	r2, r3, #31
 80033ba:	469a      	mov	sl, r3
 80033bc:	4693      	mov	fp, r2
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80033ca:	2200      	movs	r2, #0
 80033cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80033d0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80033d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	f7fc ffbe 	bl	800035c <__adddf3>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4690      	mov	r8, r2
 80033e6:	4699      	mov	r9, r3
 80033e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033ec:	f04f 0000 	mov.w	r0, #0
 80033f0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80033f4:	f7fc ffb0 	bl	8000358 <__aeabi_dsub>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4692      	mov	sl, r2
 80033fe:	469b      	mov	fp, r3
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <_etoa+0x33c>)
 8003406:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800340a:	f7fd fa87 	bl	800091c <__aeabi_ddiv>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	4b3b      	ldr	r3, [pc, #236]	@ (8003508 <_etoa+0x340>)
 800341c:	f7fc ff9e 	bl	800035c <__adddf3>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003428:	f7fd fa78 	bl	800091c <__aeabi_ddiv>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	4b34      	ldr	r3, [pc, #208]	@ (800350c <_etoa+0x344>)
 800343a:	f7fc ff8f 	bl	800035c <__adddf3>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003446:	f7fd fa69 	bl	800091c <__aeabi_ddiv>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4650      	mov	r0, sl
 8003450:	4659      	mov	r1, fp
 8003452:	f7fc ff83 	bl	800035c <__adddf3>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4640      	mov	r0, r8
 800345c:	4649      	mov	r1, r9
 800345e:	f7fd fa5d 	bl	800091c <__aeabi_ddiv>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	4b28      	ldr	r3, [pc, #160]	@ (8003510 <_etoa+0x348>)
 8003470:	f7fc ff74 	bl	800035c <__adddf3>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4620      	mov	r0, r4
 800347a:	4629      	mov	r1, r5
 800347c:	f7fd f924 	bl	80006c8 <__aeabi_dmul>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8003488:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800348c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003490:	f7fd fb8c 	bl	8000bac <__aeabi_dcmplt>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <_etoa+0x2ee>
    expval--;
 800349a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800349c:	3b01      	subs	r3, #1
 800349e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    conv.F /= 10;
 80034a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	4b17      	ldr	r3, [pc, #92]	@ (8003508 <_etoa+0x340>)
 80034aa:	f7fd fa37 	bl	800091c <__aeabi_ddiv>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80034b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034b8:	2b63      	cmp	r3, #99	@ 0x63
 80034ba:	dc2b      	bgt.n	8003514 <_etoa+0x34c>
 80034bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034be:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 80034c2:	db27      	blt.n	8003514 <_etoa+0x34c>
 80034c4:	2304      	movs	r3, #4
 80034c6:	e026      	b.n	8003516 <_etoa+0x34e>
 80034c8:	509f79fb 	.word	0x509f79fb
 80034cc:	3fd34413 	.word	0x3fd34413
 80034d0:	8b60c8b3 	.word	0x8b60c8b3
 80034d4:	3fc68a28 	.word	0x3fc68a28
 80034d8:	636f4361 	.word	0x636f4361
 80034dc:	3fd287a7 	.word	0x3fd287a7
 80034e0:	0979a371 	.word	0x0979a371
 80034e4:	400a934f 	.word	0x400a934f
 80034e8:	bbb55516 	.word	0xbbb55516
 80034ec:	40026bb1 	.word	0x40026bb1
 80034f0:	fefa39ef 	.word	0xfefa39ef
 80034f4:	3fe62e42 	.word	0x3fe62e42
 80034f8:	7fefffff 	.word	0x7fefffff
 80034fc:	3ff80000 	.word	0x3ff80000
 8003500:	3fe00000 	.word	0x3fe00000
 8003504:	402c0000 	.word	0x402c0000
 8003508:	40240000 	.word	0x40240000
 800350c:	40180000 	.word	0x40180000
 8003510:	3ff00000 	.word	0x3ff00000
 8003514:	2305      	movs	r3, #5
 8003516:	65bb      	str	r3, [r7, #88]	@ 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003518:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800351c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003520:	2b00      	cmp	r3, #0
 8003522:	d03d      	beq.n	80035a0 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8003524:	a368      	add	r3, pc, #416	@ (adr r3, 80036c8 <_etoa+0x500>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800352e:	f7fd fb51 	bl	8000bd4 <__aeabi_dcmpge>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d024      	beq.n	8003582 <_etoa+0x3ba>
 8003538:	a365      	add	r3, pc, #404	@ (adr r3, 80036d0 <_etoa+0x508>)
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003542:	f7fd fb33 	bl	8000bac <__aeabi_dcmplt>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01a      	beq.n	8003582 <_etoa+0x3ba>
      if ((int)prec > expval) {
 800354c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003550:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003552:	429a      	cmp	r2, r3
 8003554:	da07      	bge.n	8003566 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8003556:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800355a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003564:	e002      	b.n	800356c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800356c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003570:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003574:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      // no characters in exponent
      minwidth = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	65bb      	str	r3, [r7, #88]	@ 0x58
      expval   = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003580:	e00e      	b.n	80035a0 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003582:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <_etoa+0x3d8>
 800358a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800358e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <_etoa+0x3d8>
        --prec;
 8003596:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800359a:	3b01      	subs	r3, #1
 800359c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80035a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (width > minwidth) {
 80035a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80035aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d904      	bls.n	80035ba <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80035b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80035b8:	e001      	b.n	80035be <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80035be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d004      	beq.n	80035d4 <_etoa+0x40c>
 80035ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // rescale the float value
  if (expval) {
 80035d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <_etoa+0x426>
    value /= conv.F;
 80035da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035e2:	f7fd f99b 	bl	800091c <__aeabi_ddiv>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	637b      	str	r3, [r7, #52]	@ 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80035f2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d006      	beq.n	8003608 <_etoa+0x440>
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	e003      	b.n	8003610 <_etoa+0x448>
 8003608:	ed97 7b04 	vldr	d7, [r7, #16]
 800360c:	ed87 7b02 	vstr	d7, [r7, #8]
 8003610:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003614:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003618:	9302      	str	r3, [sp, #8]
 800361a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	ed97 0b02 	vldr	d0, [r7, #8]
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	6a39      	ldr	r1, [r7, #32]
 800362e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003630:	f7ff fb72 	bl	8002d18 <_ftoa>
 8003634:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8003636:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003638:	2b00      	cmp	r3, #0
 800363a:	d03f      	beq.n	80036bc <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800363c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <_etoa+0x484>
 8003648:	2045      	movs	r0, #69	@ 0x45
 800364a:	e000      	b.n	800364e <_etoa+0x486>
 800364c:	2065      	movs	r0, #101	@ 0x65
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	1c53      	adds	r3, r2, #1
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800365c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800365e:	2b00      	cmp	r3, #0
 8003660:	bfb8      	it	lt
 8003662:	425b      	neglt	r3, r3
 8003664:	4618      	mov	r0, r3
 8003666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003668:	0fdb      	lsrs	r3, r3, #31
 800366a:	b2db      	uxtb	r3, r3
 800366c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800366e:	3a01      	subs	r2, #1
 8003670:	2105      	movs	r1, #5
 8003672:	9105      	str	r1, [sp, #20]
 8003674:	9204      	str	r2, [sp, #16]
 8003676:	2200      	movs	r2, #0
 8003678:	9203      	str	r2, [sp, #12]
 800367a:	220a      	movs	r2, #10
 800367c:	9202      	str	r2, [sp, #8]
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	9000      	str	r0, [sp, #0]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	6a39      	ldr	r1, [r7, #32]
 8003688:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800368a:	f7ff fa6f 	bl	8002b6c <_ntoa_long>
 800368e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003690:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00f      	beq.n	80036bc <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800369c:	e007      	b.n	80036ae <_etoa+0x4e6>
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	1c53      	adds	r3, r2, #1
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	6a39      	ldr	r1, [r7, #32]
 80036aa:	2020      	movs	r0, #32
 80036ac:	47a0      	blx	r4
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d8f0      	bhi.n	800369e <_etoa+0x4d6>
    }
  }
  return idx;
 80036bc:	69fb      	ldr	r3, [r7, #28]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3764      	adds	r7, #100	@ 0x64
 80036c2:	46bd      	mov	sp, r7
 80036c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c8:	eb1c432d 	.word	0xeb1c432d
 80036cc:	3f1a36e2 	.word	0x3f1a36e2
 80036d0:	00000000 	.word	0x00000000
 80036d4:	412e8480 	.word	0x412e8480

080036d8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80036d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	b0a3      	sub	sp, #140	@ 0x8c
 80036de:	af0a      	add	r7, sp, #40	@ 0x28
 80036e0:	6178      	str	r0, [r7, #20]
 80036e2:	6139      	str	r1, [r7, #16]
 80036e4:	60fa      	str	r2, [r7, #12]
 80036e6:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!buffer) {
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 84cf 	bne.w	8004092 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 80036f4:	4ba8      	ldr	r3, [pc, #672]	@ (8003998 <_vsnprintf+0x2c0>)
 80036f6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80036f8:	f000 bccb 	b.w	8004092 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b25      	cmp	r3, #37	@ 0x25
 8003702:	d00d      	beq.n	8003720 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	7818      	ldrb	r0, [r3, #0]
 8003708:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800370a:	1c53      	adds	r3, r2, #1
 800370c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800370e:	697c      	ldr	r4, [r7, #20]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6939      	ldr	r1, [r7, #16]
 8003714:	47a0      	blx	r4
      format++;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	3301      	adds	r3, #1
 800371a:	60bb      	str	r3, [r7, #8]
      continue;
 800371c:	f000 bcb9 	b.w	8004092 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	3301      	adds	r3, #1
 8003724:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	65fb      	str	r3, [r7, #92]	@ 0x5c
    do {
      switch (*format) {
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	3b20      	subs	r3, #32
 8003730:	2b10      	cmp	r3, #16
 8003732:	d857      	bhi.n	80037e4 <_vsnprintf+0x10c>
 8003734:	a201      	add	r2, pc, #4	@ (adr r2, 800373c <_vsnprintf+0x64>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	080037bd 	.word	0x080037bd
 8003740:	080037e5 	.word	0x080037e5
 8003744:	080037e5 	.word	0x080037e5
 8003748:	080037d1 	.word	0x080037d1
 800374c:	080037e5 	.word	0x080037e5
 8003750:	080037e5 	.word	0x080037e5
 8003754:	080037e5 	.word	0x080037e5
 8003758:	080037e5 	.word	0x080037e5
 800375c:	080037e5 	.word	0x080037e5
 8003760:	080037e5 	.word	0x080037e5
 8003764:	080037e5 	.word	0x080037e5
 8003768:	080037a9 	.word	0x080037a9
 800376c:	080037e5 	.word	0x080037e5
 8003770:	08003795 	.word	0x08003795
 8003774:	080037e5 	.word	0x080037e5
 8003778:	080037e5 	.word	0x080037e5
 800377c:	08003781 	.word	0x08003781
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003780:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3301      	adds	r3, #1
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	2301      	movs	r3, #1
 8003790:	653b      	str	r3, [r7, #80]	@ 0x50
 8003792:	e02a      	b.n	80037ea <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	3301      	adds	r3, #1
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	2301      	movs	r3, #1
 80037a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80037a6:	e020      	b.n	80037ea <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80037a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037aa:	f043 0304 	orr.w	r3, r3, #4
 80037ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	3301      	adds	r3, #1
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	2301      	movs	r3, #1
 80037b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ba:	e016      	b.n	80037ea <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80037bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037be:	f043 0308 	orr.w	r3, r3, #8
 80037c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	3301      	adds	r3, #1
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	2301      	movs	r3, #1
 80037cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ce:	e00c      	b.n	80037ea <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80037d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037d2:	f043 0310 	orr.w	r3, r3, #16
 80037d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	3301      	adds	r3, #1
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	2301      	movs	r3, #1
 80037e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80037e2:	e002      	b.n	80037ea <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80037e4:	2300      	movs	r3, #0
 80037e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80037e8:	bf00      	nop
      }
    } while (n);
 80037ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d19c      	bne.n	800372a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (_is_digit(*format)) {
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff f850 	bl	800289e <_is_digit>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d006      	beq.n	8003812 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8003804:	f107 0308 	add.w	r3, r7, #8
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff f85f 	bl	80028cc <_atoi>
 800380e:	65b8      	str	r0, [r7, #88]	@ 0x58
 8003810:	e01a      	b.n	8003848 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b2a      	cmp	r3, #42	@ 0x2a
 8003818:	d116      	bne.n	8003848 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800381a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800381e:	1d1a      	adds	r2, r3, #4
 8003820:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	63bb      	str	r3, [r7, #56]	@ 0x38
      if (w < 0) {
 8003828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382a:	2b00      	cmp	r3, #0
 800382c:	da07      	bge.n	800383e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800382e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	65fb      	str	r3, [r7, #92]	@ 0x5c
        width = (unsigned int)-w;
 8003836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003838:	425b      	negs	r3, r3
 800383a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800383c:	e001      	b.n	8003842 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800383e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003840:	65bb      	str	r3, [r7, #88]	@ 0x58
      }
      format++;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3301      	adds	r3, #1
 8003846:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (*format == '.') {
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b2e      	cmp	r3, #46	@ 0x2e
 8003852:	d127      	bne.n	80038a4 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8003854:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003856:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800385a:	65fb      	str	r3, [r7, #92]	@ 0x5c
      format++;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	3301      	adds	r3, #1
 8003860:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff f819 	bl	800289e <_is_digit>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d006      	beq.n	8003880 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8003872:	f107 0308 	add.w	r3, r7, #8
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f828 	bl	80028cc <_atoi>
 800387c:	6578      	str	r0, [r7, #84]	@ 0x54
 800387e:	e011      	b.n	80038a4 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b2a      	cmp	r3, #42	@ 0x2a
 8003886:	d10d      	bne.n	80038a4 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003888:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800388c:	1d1a      	adds	r2, r3, #4
 800388e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	637b      	str	r3, [r7, #52]	@ 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003898:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800389c:	657b      	str	r3, [r7, #84]	@ 0x54
        format++;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	3b68      	subs	r3, #104	@ 0x68
 80038aa:	2b12      	cmp	r3, #18
 80038ac:	d866      	bhi.n	800397c <_vsnprintf+0x2a4>
 80038ae:	a201      	add	r2, pc, #4	@ (adr r2, 80038b4 <_vsnprintf+0x1dc>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	08003927 	.word	0x08003927
 80038b8:	0800397d 	.word	0x0800397d
 80038bc:	0800395d 	.word	0x0800395d
 80038c0:	0800397d 	.word	0x0800397d
 80038c4:	08003901 	.word	0x08003901
 80038c8:	0800397d 	.word	0x0800397d
 80038cc:	0800397d 	.word	0x0800397d
 80038d0:	0800397d 	.word	0x0800397d
 80038d4:	0800397d 	.word	0x0800397d
 80038d8:	0800397d 	.word	0x0800397d
 80038dc:	0800397d 	.word	0x0800397d
 80038e0:	0800397d 	.word	0x0800397d
 80038e4:	0800394d 	.word	0x0800394d
 80038e8:	0800397d 	.word	0x0800397d
 80038ec:	0800397d 	.word	0x0800397d
 80038f0:	0800397d 	.word	0x0800397d
 80038f4:	0800397d 	.word	0x0800397d
 80038f8:	0800397d 	.word	0x0800397d
 80038fc:	0800396d 	.word	0x0800396d
      case 'l' :
        flags |= FLAGS_LONG;
 8003900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003906:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3301      	adds	r3, #1
 800390c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b6c      	cmp	r3, #108	@ 0x6c
 8003914:	d134      	bne.n	8003980 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8003916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003918:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800391c:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	3301      	adds	r3, #1
 8003922:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003924:	e02c      	b.n	8003980 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800392c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3301      	adds	r3, #1
 8003932:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b68      	cmp	r3, #104	@ 0x68
 800393a:	d123      	bne.n	8003984 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 800393c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800393e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003942:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3301      	adds	r3, #1
 8003948:	60bb      	str	r3, [r7, #8]
        }
        break;
 800394a:	e01b      	b.n	8003984 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800394c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800394e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003952:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	3301      	adds	r3, #1
 8003958:	60bb      	str	r3, [r7, #8]
        break;
 800395a:	e014      	b.n	8003986 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800395c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800395e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003962:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3301      	adds	r3, #1
 8003968:	60bb      	str	r3, [r7, #8]
        break;
 800396a:	e00c      	b.n	8003986 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800396c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800396e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003972:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	3301      	adds	r3, #1
 8003978:	60bb      	str	r3, [r7, #8]
        break;
 800397a:	e004      	b.n	8003986 <_vsnprintf+0x2ae>
      default :
        break;
 800397c:	bf00      	nop
 800397e:	e002      	b.n	8003986 <_vsnprintf+0x2ae>
        break;
 8003980:	bf00      	nop
 8003982:	e000      	b.n	8003986 <_vsnprintf+0x2ae>
        break;
 8003984:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b67      	cmp	r3, #103	@ 0x67
 800398c:	f300 80b8 	bgt.w	8003b00 <_vsnprintf+0x428>
 8003990:	2b25      	cmp	r3, #37	@ 0x25
 8003992:	da27      	bge.n	80039e4 <_vsnprintf+0x30c>
 8003994:	e370      	b.n	8004078 <_vsnprintf+0x9a0>
 8003996:	bf00      	nop
 8003998:	08002823 	.word	0x08002823
 800399c:	3b69      	subs	r3, #105	@ 0x69
 800399e:	2201      	movs	r2, #1
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	f249 0241 	movw	r2, #36929	@ 0x9041
 80039a8:	401a      	ands	r2, r3
 80039aa:	2a00      	cmp	r2, #0
 80039ac:	bf14      	ite	ne
 80039ae:	2201      	movne	r2, #1
 80039b0:	2200      	moveq	r2, #0
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	2a00      	cmp	r2, #0
 80039b6:	f040 80aa 	bne.w	8003b0e <_vsnprintf+0x436>
 80039ba:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 80039be:	2a00      	cmp	r2, #0
 80039c0:	bf14      	ite	ne
 80039c2:	2201      	movne	r2, #1
 80039c4:	2200      	moveq	r2, #0
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	2a00      	cmp	r2, #0
 80039ca:	f040 82fb 	bne.w	8003fc4 <_vsnprintf+0x8ec>
 80039ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf14      	ite	ne
 80039d6:	2301      	movne	r3, #1
 80039d8:	2300      	moveq	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f040 828d 	bne.w	8003efc <_vsnprintf+0x824>
 80039e2:	e349      	b.n	8004078 <_vsnprintf+0x9a0>
 80039e4:	3b25      	subs	r3, #37	@ 0x25
 80039e6:	2b42      	cmp	r3, #66	@ 0x42
 80039e8:	f200 8346 	bhi.w	8004078 <_vsnprintf+0x9a0>
 80039ec:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <_vsnprintf+0x31c>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08004061 	.word	0x08004061
 80039f8:	08004079 	.word	0x08004079
 80039fc:	08004079 	.word	0x08004079
 8003a00:	08004079 	.word	0x08004079
 8003a04:	08004079 	.word	0x08004079
 8003a08:	08004079 	.word	0x08004079
 8003a0c:	08004079 	.word	0x08004079
 8003a10:	08004079 	.word	0x08004079
 8003a14:	08004079 	.word	0x08004079
 8003a18:	08004079 	.word	0x08004079
 8003a1c:	08004079 	.word	0x08004079
 8003a20:	08004079 	.word	0x08004079
 8003a24:	08004079 	.word	0x08004079
 8003a28:	08004079 	.word	0x08004079
 8003a2c:	08004079 	.word	0x08004079
 8003a30:	08004079 	.word	0x08004079
 8003a34:	08004079 	.word	0x08004079
 8003a38:	08004079 	.word	0x08004079
 8003a3c:	08004079 	.word	0x08004079
 8003a40:	08004079 	.word	0x08004079
 8003a44:	08004079 	.word	0x08004079
 8003a48:	08004079 	.word	0x08004079
 8003a4c:	08004079 	.word	0x08004079
 8003a50:	08004079 	.word	0x08004079
 8003a54:	08004079 	.word	0x08004079
 8003a58:	08004079 	.word	0x08004079
 8003a5c:	08004079 	.word	0x08004079
 8003a60:	08004079 	.word	0x08004079
 8003a64:	08004079 	.word	0x08004079
 8003a68:	08004079 	.word	0x08004079
 8003a6c:	08004079 	.word	0x08004079
 8003a70:	08004079 	.word	0x08004079
 8003a74:	08003e15 	.word	0x08003e15
 8003a78:	08003dc5 	.word	0x08003dc5
 8003a7c:	08003e15 	.word	0x08003e15
 8003a80:	08004079 	.word	0x08004079
 8003a84:	08004079 	.word	0x08004079
 8003a88:	08004079 	.word	0x08004079
 8003a8c:	08004079 	.word	0x08004079
 8003a90:	08004079 	.word	0x08004079
 8003a94:	08004079 	.word	0x08004079
 8003a98:	08004079 	.word	0x08004079
 8003a9c:	08004079 	.word	0x08004079
 8003aa0:	08004079 	.word	0x08004079
 8003aa4:	08004079 	.word	0x08004079
 8003aa8:	08004079 	.word	0x08004079
 8003aac:	08004079 	.word	0x08004079
 8003ab0:	08004079 	.word	0x08004079
 8003ab4:	08004079 	.word	0x08004079
 8003ab8:	08004079 	.word	0x08004079
 8003abc:	08004079 	.word	0x08004079
 8003ac0:	08003b0f 	.word	0x08003b0f
 8003ac4:	08004079 	.word	0x08004079
 8003ac8:	08004079 	.word	0x08004079
 8003acc:	08004079 	.word	0x08004079
 8003ad0:	08004079 	.word	0x08004079
 8003ad4:	08004079 	.word	0x08004079
 8003ad8:	08004079 	.word	0x08004079
 8003adc:	08004079 	.word	0x08004079
 8003ae0:	08004079 	.word	0x08004079
 8003ae4:	08004079 	.word	0x08004079
 8003ae8:	08003b0f 	.word	0x08003b0f
 8003aec:	08003e85 	.word	0x08003e85
 8003af0:	08003b0f 	.word	0x08003b0f
 8003af4:	08003e15 	.word	0x08003e15
 8003af8:	08003dc5 	.word	0x08003dc5
 8003afc:	08003e15 	.word	0x08003e15
 8003b00:	2b78      	cmp	r3, #120	@ 0x78
 8003b02:	f300 82b9 	bgt.w	8004078 <_vsnprintf+0x9a0>
 8003b06:	2b69      	cmp	r3, #105	@ 0x69
 8003b08:	f6bf af48 	bge.w	800399c <_vsnprintf+0x2c4>
 8003b0c:	e2b4      	b.n	8004078 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b78      	cmp	r3, #120	@ 0x78
 8003b14:	d003      	beq.n	8003b1e <_vsnprintf+0x446>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b58      	cmp	r3, #88	@ 0x58
 8003b1c:	d102      	bne.n	8003b24 <_vsnprintf+0x44c>
          base = 16U;
 8003b1e:	2310      	movs	r3, #16
 8003b20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b22:	e013      	b.n	8003b4c <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b6f      	cmp	r3, #111	@ 0x6f
 8003b2a:	d102      	bne.n	8003b32 <_vsnprintf+0x45a>
          base =  8U;
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b30:	e00c      	b.n	8003b4c <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b62      	cmp	r3, #98	@ 0x62
 8003b38:	d102      	bne.n	8003b40 <_vsnprintf+0x468>
          base =  2U;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b3e:	e005      	b.n	8003b4c <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8003b40:	230a      	movs	r3, #10
 8003b42:	64bb      	str	r3, [r7, #72]	@ 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003b44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b46:	f023 0310 	bic.w	r3, r3, #16
 8003b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b58      	cmp	r3, #88	@ 0x58
 8003b52:	d103      	bne.n	8003b5c <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 8003b54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b56:	f043 0320 	orr.w	r3, r3, #32
 8003b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b69      	cmp	r3, #105	@ 0x69
 8003b62:	d007      	beq.n	8003b74 <_vsnprintf+0x49c>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b64      	cmp	r3, #100	@ 0x64
 8003b6a:	d003      	beq.n	8003b74 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003b6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b6e:	f023 030c 	bic.w	r3, r3, #12
 8003b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003b74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8003b7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b69      	cmp	r3, #105	@ 0x69
 8003b8c:	d004      	beq.n	8003b98 <_vsnprintf+0x4c0>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b64      	cmp	r3, #100	@ 0x64
 8003b94:	f040 8098 	bne.w	8003cc8 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003b98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d031      	beq.n	8003c06 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ba6:	3307      	adds	r3, #7
 8003ba8:	f023 0307 	bic.w	r3, r3, #7
 8003bac:	f103 0208 	add.w	r2, r3, #8
 8003bb0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	da06      	bge.n	8003bd2 <_vsnprintf+0x4fa>
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	f1d2 0800 	rsbs	r8, r2, #0
 8003bca:	eb61 0903 	sbc.w	r9, r1, r3
 8003bce:	4642      	mov	r2, r8
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	69f9      	ldr	r1, [r7, #28]
 8003bd4:	0fc9      	lsrs	r1, r1, #31
 8003bd6:	b2c9      	uxtb	r1, r1
 8003bd8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003bda:	2400      	movs	r4, #0
 8003bdc:	4682      	mov	sl, r0
 8003bde:	46a3      	mov	fp, r4
 8003be0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003be2:	9008      	str	r0, [sp, #32]
 8003be4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003be6:	9007      	str	r0, [sp, #28]
 8003be8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003bea:	9006      	str	r0, [sp, #24]
 8003bec:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003bf0:	9102      	str	r1, [sp, #8]
 8003bf2:	e9cd 2300 	strd	r2, r3, [sp]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bfa:	6939      	ldr	r1, [r7, #16]
 8003bfc:	6978      	ldr	r0, [r7, #20]
 8003bfe:	f7ff f81b 	bl	8002c38 <_ntoa_long_long>
 8003c02:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003c04:	e0da      	b.n	8003dbc <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d020      	beq.n	8003c52 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8003c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c14:	1d1a      	adds	r2, r3, #4
 8003c16:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bfb8      	it	lt
 8003c24:	425b      	neglt	r3, r3
 8003c26:	4619      	mov	r1, r3
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	0fdb      	lsrs	r3, r3, #31
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c30:	9205      	str	r2, [sp, #20]
 8003c32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c34:	9204      	str	r2, [sp, #16]
 8003c36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c38:	9203      	str	r2, [sp, #12]
 8003c3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c3c:	9202      	str	r2, [sp, #8]
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	9100      	str	r1, [sp, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c46:	6939      	ldr	r1, [r7, #16]
 8003c48:	6978      	ldr	r0, [r7, #20]
 8003c4a:	f7fe ff8f 	bl	8002b6c <_ntoa_long>
 8003c4e:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003c50:	e0b4      	b.n	8003dbc <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <_vsnprintf+0x594>
 8003c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c60:	1d1a      	adds	r2, r3, #4
 8003c62:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e012      	b.n	8003c92 <_vsnprintf+0x5ba>
 8003c6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <_vsnprintf+0x5ae>
 8003c76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c7a:	1d1a      	adds	r2, r3, #4
 8003c7c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	b21b      	sxth	r3, r3
 8003c84:	e005      	b.n	8003c92 <_vsnprintf+0x5ba>
 8003c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c8a:	1d1a      	adds	r2, r3, #4
 8003c8c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bfb8      	it	lt
 8003c9a:	425b      	neglt	r3, r3
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	0fdb      	lsrs	r3, r3, #31
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ca6:	9205      	str	r2, [sp, #20]
 8003ca8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003caa:	9204      	str	r2, [sp, #16]
 8003cac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cae:	9203      	str	r2, [sp, #12]
 8003cb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cb2:	9202      	str	r2, [sp, #8]
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	9100      	str	r1, [sp, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cbc:	6939      	ldr	r1, [r7, #16]
 8003cbe:	6978      	ldr	r0, [r7, #20]
 8003cc0:	f7fe ff54 	bl	8002b6c <_ntoa_long>
 8003cc4:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003cc6:	e079      	b.n	8003dbc <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003cc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d022      	beq.n	8003d18 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cd6:	3307      	adds	r3, #7
 8003cd8:	f023 0307 	bic.w	r3, r3, #7
 8003cdc:	f103 0208 	add.w	r2, r3, #8
 8003ce0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003cea:	2000      	movs	r0, #0
 8003cec:	460d      	mov	r5, r1
 8003cee:	4606      	mov	r6, r0
 8003cf0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003cf2:	9108      	str	r1, [sp, #32]
 8003cf4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003cf6:	9107      	str	r1, [sp, #28]
 8003cf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cfa:	9106      	str	r1, [sp, #24]
 8003cfc:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003d00:	2100      	movs	r1, #0
 8003d02:	9102      	str	r1, [sp, #8]
 8003d04:	e9cd 2300 	strd	r2, r3, [sp]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d0c:	6939      	ldr	r1, [r7, #16]
 8003d0e:	6978      	ldr	r0, [r7, #20]
 8003d10:	f7fe ff92 	bl	8002c38 <_ntoa_long_long>
 8003d14:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8003d16:	e051      	b.n	8003dbc <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d018      	beq.n	8003d54 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d26:	1d1a      	adds	r2, r3, #4
 8003d28:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003d30:	9205      	str	r2, [sp, #20]
 8003d32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d34:	9204      	str	r2, [sp, #16]
 8003d36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d38:	9203      	str	r2, [sp, #12]
 8003d3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d3c:	9202      	str	r2, [sp, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	9201      	str	r2, [sp, #4]
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d48:	6939      	ldr	r1, [r7, #16]
 8003d4a:	6978      	ldr	r0, [r7, #20]
 8003d4c:	f7fe ff0e 	bl	8002b6c <_ntoa_long>
 8003d50:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8003d52:	e033      	b.n	8003dbc <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003d54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <_vsnprintf+0x696>
 8003d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d62:	1d1a      	adds	r2, r3, #4
 8003d64:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	e012      	b.n	8003d94 <_vsnprintf+0x6bc>
 8003d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <_vsnprintf+0x6b0>
 8003d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d7c:	1d1a      	adds	r2, r3, #4
 8003d7e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	e005      	b.n	8003d94 <_vsnprintf+0x6bc>
 8003d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d8c:	1d1a      	adds	r2, r3, #4
 8003d8e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d98:	9305      	str	r3, [sp, #20]
 8003d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d9c:	9304      	str	r3, [sp, #16]
 8003d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da0:	9303      	str	r3, [sp, #12]
 8003da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003da4:	9302      	str	r3, [sp, #8]
 8003da6:	2300      	movs	r3, #0
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003db2:	6939      	ldr	r1, [r7, #16]
 8003db4:	6978      	ldr	r0, [r7, #20]
 8003db6:	f7fe fed9 	bl	8002b6c <_ntoa_long>
 8003dba:	64f8      	str	r0, [r7, #76]	@ 0x4c
          }
        }
        format++;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60bb      	str	r3, [r7, #8]
        break;
 8003dc2:	e166      	b.n	8004092 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b46      	cmp	r3, #70	@ 0x46
 8003dca:	d103      	bne.n	8003dd4 <_vsnprintf+0x6fc>
 8003dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dce:	f043 0320 	orr.w	r3, r3, #32
 8003dd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dd8:	3307      	adds	r3, #7
 8003dda:	f023 0307 	bic.w	r3, r3, #7
 8003dde:	f103 0208 	add.w	r2, r3, #8
 8003de2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003de6:	ed93 7b00 	vldr	d7, [r3]
 8003dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dec:	9302      	str	r3, [sp, #8]
 8003dee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	eeb0 0a47 	vmov.f32	s0, s14
 8003dfa:	eef0 0a67 	vmov.f32	s1, s15
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e02:	6939      	ldr	r1, [r7, #16]
 8003e04:	6978      	ldr	r0, [r7, #20]
 8003e06:	f7fe ff87 	bl	8002d18 <_ftoa>
 8003e0a:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
        break;
 8003e12:	e13e      	b.n	8004092 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b67      	cmp	r3, #103	@ 0x67
 8003e1a:	d003      	beq.n	8003e24 <_vsnprintf+0x74c>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b47      	cmp	r3, #71	@ 0x47
 8003e22:	d103      	bne.n	8003e2c <_vsnprintf+0x754>
 8003e24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e26:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b45      	cmp	r3, #69	@ 0x45
 8003e32:	d003      	beq.n	8003e3c <_vsnprintf+0x764>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b47      	cmp	r3, #71	@ 0x47
 8003e3a:	d103      	bne.n	8003e44 <_vsnprintf+0x76c>
 8003e3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e3e:	f043 0320 	orr.w	r3, r3, #32
 8003e42:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003e44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e48:	3307      	adds	r3, #7
 8003e4a:	f023 0307 	bic.w	r3, r3, #7
 8003e4e:	f103 0208 	add.w	r2, r3, #8
 8003e52:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003e56:	ed93 7b00 	vldr	d7, [r3]
 8003e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e5c:	9302      	str	r3, [sp, #8]
 8003e5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	eeb0 0a47 	vmov.f32	s0, s14
 8003e6a:	eef0 0a67 	vmov.f32	s1, s15
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e72:	6939      	ldr	r1, [r7, #16]
 8003e74:	6978      	ldr	r0, [r7, #20]
 8003e76:	f7ff f9a7 	bl	80031c8 <_etoa>
 8003e7a:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60bb      	str	r3, [r7, #8]
        break;
 8003e82:	e106      	b.n	8004092 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003e84:	2301      	movs	r3, #1
 8003e86:	647b      	str	r3, [r7, #68]	@ 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10e      	bne.n	8003eb0 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8003e92:	e007      	b.n	8003ea4 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8003e94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e96:	1c53      	adds	r3, r2, #1
 8003e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e9a:	697c      	ldr	r4, [r7, #20]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6939      	ldr	r1, [r7, #16]
 8003ea0:	2020      	movs	r0, #32
 8003ea2:	47a0      	blx	r4
          while (l++ < width) {
 8003ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	647a      	str	r2, [r7, #68]	@ 0x44
 8003eaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d8f1      	bhi.n	8003e94 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003eb4:	1d1a      	adds	r2, r3, #4
 8003eb6:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	b2d8      	uxtb	r0, r3
 8003ebe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ec0:	1c53      	adds	r3, r2, #1
 8003ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ec4:	697c      	ldr	r4, [r7, #20]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6939      	ldr	r1, [r7, #16]
 8003eca:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003ecc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00e      	beq.n	8003ef4 <_vsnprintf+0x81c>
          while (l++ < width) {
 8003ed6:	e007      	b.n	8003ee8 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8003ed8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eda:	1c53      	adds	r3, r2, #1
 8003edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ede:	697c      	ldr	r4, [r7, #20]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6939      	ldr	r1, [r7, #16]
 8003ee4:	2020      	movs	r0, #32
 8003ee6:	47a0      	blx	r4
          while (l++ < width) {
 8003ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	647a      	str	r2, [r7, #68]	@ 0x44
 8003eee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d8f1      	bhi.n	8003ed8 <_vsnprintf+0x800>
          }
        }
        format++;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60bb      	str	r3, [r7, #8]
        break;
 8003efa:	e0ca      	b.n	8004092 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f00:	1d1a      	adds	r2, r3, #4
 8003f02:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	643b      	str	r3, [r7, #64]	@ 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <_vsnprintf+0x83c>
 8003f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f12:	e001      	b.n	8003f18 <_vsnprintf+0x840>
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003f1c:	f7fe fca2 	bl	8002864 <_strnlen_s>
 8003f20:	63f8      	str	r0, [r7, #60]	@ 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8003f2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f30:	4293      	cmp	r3, r2
 8003f32:	bf28      	it	cs
 8003f34:	4613      	movcs	r3, r2
 8003f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003f38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d11a      	bne.n	8003f78 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8003f42:	e007      	b.n	8003f54 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8003f44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f46:	1c53      	adds	r3, r2, #1
 8003f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f4a:	697c      	ldr	r4, [r7, #20]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6939      	ldr	r1, [r7, #16]
 8003f50:	2020      	movs	r0, #32
 8003f52:	47a0      	blx	r4
          while (l++ < width) {
 8003f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d8f1      	bhi.n	8003f44 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003f60:	e00a      	b.n	8003f78 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8003f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f68:	7818      	ldrb	r0, [r3, #0]
 8003f6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f6c:	1c53      	adds	r3, r2, #1
 8003f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f70:	697c      	ldr	r4, [r7, #20]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6939      	ldr	r1, [r7, #16]
 8003f76:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d009      	beq.n	8003f94 <_vsnprintf+0x8bc>
 8003f80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0eb      	beq.n	8003f62 <_vsnprintf+0x88a>
 8003f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f8c:	1e5a      	subs	r2, r3, #1
 8003f8e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e6      	bne.n	8003f62 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00e      	beq.n	8003fbc <_vsnprintf+0x8e4>
          while (l++ < width) {
 8003f9e:	e007      	b.n	8003fb0 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8003fa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fa2:	1c53      	adds	r3, r2, #1
 8003fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa6:	697c      	ldr	r4, [r7, #20]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6939      	ldr	r1, [r7, #16]
 8003fac:	2020      	movs	r0, #32
 8003fae:	47a0      	blx	r4
          while (l++ < width) {
 8003fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d8f1      	bhi.n	8003fa0 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]
        break;
 8003fc2:	e066      	b.n	8004092 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003fc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fca:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8003fce:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (is_ll) {
 8003fd6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d023      	beq.n	8004026 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003fde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fe2:	1d1a      	adds	r2, r3, #4
 8003fe4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	2300      	movs	r3, #0
 8003fee:	603a      	str	r2, [r7, #0]
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ff4:	9308      	str	r3, [sp, #32]
 8003ff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ff8:	9307      	str	r3, [sp, #28]
 8003ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffc:	9306      	str	r3, [sp, #24]
 8003ffe:	f04f 0210 	mov.w	r2, #16
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800400a:	2300      	movs	r3, #0
 800400c:	9302      	str	r3, [sp, #8]
 800400e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004012:	e9cd 3400 	strd	r3, r4, [sp]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800401a:	6939      	ldr	r1, [r7, #16]
 800401c:	6978      	ldr	r0, [r7, #20]
 800401e:	f7fe fe0b 	bl	8002c38 <_ntoa_long_long>
 8004022:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8004024:	e018      	b.n	8004058 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004026:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004036:	9305      	str	r3, [sp, #20]
 8004038:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800403a:	9304      	str	r3, [sp, #16]
 800403c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800403e:	9303      	str	r3, [sp, #12]
 8004040:	2310      	movs	r3, #16
 8004042:	9302      	str	r3, [sp, #8]
 8004044:	2300      	movs	r3, #0
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	9200      	str	r2, [sp, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800404e:	6939      	ldr	r1, [r7, #16]
 8004050:	6978      	ldr	r0, [r7, #20]
 8004052:	f7fe fd8b 	bl	8002b6c <_ntoa_long>
 8004056:	64f8      	str	r0, [r7, #76]	@ 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	3301      	adds	r3, #1
 800405c:	60bb      	str	r3, [r7, #8]
        break;
 800405e:	e018      	b.n	8004092 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004060:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004062:	1c53      	adds	r3, r2, #1
 8004064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004066:	697c      	ldr	r4, [r7, #20]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6939      	ldr	r1, [r7, #16]
 800406c:	2025      	movs	r0, #37	@ 0x25
 800406e:	47a0      	blx	r4
        format++;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	3301      	adds	r3, #1
 8004074:	60bb      	str	r3, [r7, #8]
        break;
 8004076:	e00c      	b.n	8004092 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	7818      	ldrb	r0, [r3, #0]
 800407c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800407e:	1c53      	adds	r3, r2, #1
 8004080:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004082:	697c      	ldr	r4, [r7, #20]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6939      	ldr	r1, [r7, #16]
 8004088:	47a0      	blx	r4
        format++;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	3301      	adds	r3, #1
 800408e:	60bb      	str	r3, [r7, #8]
        break;
 8004090:	bf00      	nop
  while (*format)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f47f ab30 	bne.w	80036fc <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800409c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d302      	bcc.n	80040aa <_vsnprintf+0x9d2>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1e5a      	subs	r2, r3, #1
 80040a8:	e000      	b.n	80040ac <_vsnprintf+0x9d4>
 80040aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040ac:	697c      	ldr	r4, [r7, #20]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6939      	ldr	r1, [r7, #16]
 80040b2:	2000      	movs	r0, #0
 80040b4:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80040b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3764      	adds	r7, #100	@ 0x64
 80040bc:	46bd      	mov	sp, r7
 80040be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c2:	bf00      	nop

080040c4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80040c4:	b40f      	push	{r0, r1, r2, r3}
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b086      	sub	sp, #24
 80040ca:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80040cc:	f107 031c 	add.w	r3, r7, #28
 80040d0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80040d2:	1d39      	adds	r1, r7, #4
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f04f 32ff 	mov.w	r2, #4294967295
 80040de:	4806      	ldr	r0, [pc, #24]	@ (80040f8 <printf_+0x34>)
 80040e0:	f7ff fafa 	bl	80036d8 <_vsnprintf>
 80040e4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80040e6:	68fb      	ldr	r3, [r7, #12]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040f2:	b004      	add	sp, #16
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	0800283f 	.word	0x0800283f

080040fc <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 80040fc:	b40e      	push	{r1, r2, r3}
 80040fe:	b580      	push	{r7, lr}
 8004100:	b087      	sub	sp, #28
 8004102:	af02      	add	r7, sp, #8
 8004104:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004106:	f107 0320 	add.w	r3, r7, #32
 800410a:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f04f 32ff 	mov.w	r2, #4294967295
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4805      	ldr	r0, [pc, #20]	@ (8004130 <sprintf_+0x34>)
 800411a:	f7ff fadd 	bl	80036d8 <_vsnprintf>
 800411e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004120:	68fb      	ldr	r3, [r7, #12]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800412c:	b003      	add	sp, #12
 800412e:	4770      	bx	lr
 8004130:	080027f5 	.word	0x080027f5

08004134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <HAL_MspInit+0x54>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004142:	4a11      	ldr	r2, [pc, #68]	@ (8004188 <HAL_MspInit+0x54>)
 8004144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004148:	6453      	str	r3, [r2, #68]	@ 0x44
 800414a:	4b0f      	ldr	r3, [pc, #60]	@ (8004188 <HAL_MspInit+0x54>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <HAL_MspInit+0x54>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	4a0a      	ldr	r2, [pc, #40]	@ (8004188 <HAL_MspInit+0x54>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004164:	6413      	str	r3, [r2, #64]	@ 0x40
 8004166:	4b08      	ldr	r3, [pc, #32]	@ (8004188 <HAL_MspInit+0x54>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004172:	2200      	movs	r2, #0
 8004174:	210f      	movs	r1, #15
 8004176:	f06f 0001 	mvn.w	r0, #1
 800417a:	f001 f8a9 	bl	80052d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800

0800418c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08c      	sub	sp, #48	@ 0x30
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	4b2e      	ldr	r3, [pc, #184]	@ (800425c <HAL_InitTick+0xd0>)
 80041a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a4:	4a2d      	ldr	r2, [pc, #180]	@ (800425c <HAL_InitTick+0xd0>)
 80041a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ac:	4b2b      	ldr	r3, [pc, #172]	@ (800425c <HAL_InitTick+0xd0>)
 80041ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041b8:	f107 020c 	add.w	r2, r7, #12
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f003 fa92 	bl	80076ec <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80041c8:	f003 fa7c 	bl	80076c4 <HAL_RCC_GetPCLK2Freq>
 80041cc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80041ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d0:	4a23      	ldr	r2, [pc, #140]	@ (8004260 <HAL_InitTick+0xd4>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	0c9b      	lsrs	r3, r3, #18
 80041d8:	3b01      	subs	r3, #1
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80041dc:	4b21      	ldr	r3, [pc, #132]	@ (8004264 <HAL_InitTick+0xd8>)
 80041de:	4a22      	ldr	r2, [pc, #136]	@ (8004268 <HAL_InitTick+0xdc>)
 80041e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80041e2:	4b20      	ldr	r3, [pc, #128]	@ (8004264 <HAL_InitTick+0xd8>)
 80041e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80041e8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80041ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004264 <HAL_InitTick+0xd8>)
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80041f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004264 <HAL_InitTick+0xd8>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004264 <HAL_InitTick+0xd8>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041fc:	4b19      	ldr	r3, [pc, #100]	@ (8004264 <HAL_InitTick+0xd8>)
 80041fe:	2200      	movs	r2, #0
 8004200:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8004202:	4818      	ldr	r0, [pc, #96]	@ (8004264 <HAL_InitTick+0xd8>)
 8004204:	f003 faa4 	bl	8007750 <HAL_TIM_Base_Init>
 8004208:	4603      	mov	r3, r0
 800420a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800420e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004212:	2b00      	cmp	r3, #0
 8004214:	d11b      	bne.n	800424e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8004216:	4813      	ldr	r0, [pc, #76]	@ (8004264 <HAL_InitTick+0xd8>)
 8004218:	f003 fb44 	bl	80078a4 <HAL_TIM_Base_Start_IT>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8004222:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004226:	2b00      	cmp	r3, #0
 8004228:	d111      	bne.n	800424e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800422a:	2019      	movs	r0, #25
 800422c:	f001 f86c 	bl	8005308 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b0f      	cmp	r3, #15
 8004234:	d808      	bhi.n	8004248 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8004236:	2200      	movs	r2, #0
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	2019      	movs	r0, #25
 800423c:	f001 f848 	bl	80052d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004240:	4a0a      	ldr	r2, [pc, #40]	@ (800426c <HAL_InitTick+0xe0>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e002      	b.n	800424e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800424e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004252:	4618      	mov	r0, r3
 8004254:	3730      	adds	r7, #48	@ 0x30
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	431bde83 	.word	0x431bde83
 8004264:	2000072c 	.word	0x2000072c
 8004268:	40014400 	.word	0x40014400
 800426c:	20000008 	.word	0x20000008

08004270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004274:	bf00      	nop
 8004276:	e7fd      	b.n	8004274 <NMI_Handler+0x4>

08004278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <HardFault_Handler+0x4>

08004280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <MemManage_Handler+0x4>

08004288 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <BusFault_Handler+0x4>

08004290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <UsageFault_Handler+0x4>

08004298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80042ac:	4802      	ldr	r0, [pc, #8]	@ (80042b8 <ADC_IRQHandler+0x10>)
 80042ae:	f000 fa7e 	bl	80047ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000600 	.word	0x20000600

080042bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80042c0:	4802      	ldr	r0, [pc, #8]	@ (80042cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80042c2:	f003 fb51 	bl	8007968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	2000072c 	.word	0x2000072c

080042d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042d4:	4802      	ldr	r0, [pc, #8]	@ (80042e0 <DMA2_Stream0_IRQHandler+0x10>)
 80042d6:	f001 f92b 	bl	8005530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000648 	.word	0x20000648

080042e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return 1;
 80042e8:	2301      	movs	r3, #1
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <_kill>:

int _kill(int pid, int sig)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042fe:	f00a fe97 	bl	800f030 <__errno>
 8004302:	4603      	mov	r3, r0
 8004304:	2216      	movs	r2, #22
 8004306:	601a      	str	r2, [r3, #0]
  return -1;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <_exit>:

void _exit (int status)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800431c:	f04f 31ff 	mov.w	r1, #4294967295
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ffe7 	bl	80042f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004326:	bf00      	nop
 8004328:	e7fd      	b.n	8004326 <_exit+0x12>

0800432a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b086      	sub	sp, #24
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	e00a      	b.n	8004352 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800433c:	f3af 8000 	nop.w
 8004340:	4601      	mov	r1, r0
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	60ba      	str	r2, [r7, #8]
 8004348:	b2ca      	uxtb	r2, r1
 800434a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3301      	adds	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	429a      	cmp	r2, r3
 8004358:	dbf0      	blt.n	800433c <_read+0x12>
  }

  return len;
 800435a:	687b      	ldr	r3, [r7, #4]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e009      	b.n	800438a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	60ba      	str	r2, [r7, #8]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3301      	adds	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	429a      	cmp	r2, r3
 8004390:	dbf1      	blt.n	8004376 <_write+0x12>
  }
  return len;
 8004392:	687b      	ldr	r3, [r7, #4]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <_close>:

int _close(int file)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043c4:	605a      	str	r2, [r3, #4]
  return 0;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <_isatty>:

int _isatty(int file)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043dc:	2301      	movs	r3, #1
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800440c:	4a14      	ldr	r2, [pc, #80]	@ (8004460 <_sbrk+0x5c>)
 800440e:	4b15      	ldr	r3, [pc, #84]	@ (8004464 <_sbrk+0x60>)
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004418:	4b13      	ldr	r3, [pc, #76]	@ (8004468 <_sbrk+0x64>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004420:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <_sbrk+0x64>)
 8004422:	4a12      	ldr	r2, [pc, #72]	@ (800446c <_sbrk+0x68>)
 8004424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004426:	4b10      	ldr	r3, [pc, #64]	@ (8004468 <_sbrk+0x64>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d207      	bcs.n	8004444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004434:	f00a fdfc 	bl	800f030 <__errno>
 8004438:	4603      	mov	r3, r0
 800443a:	220c      	movs	r2, #12
 800443c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800443e:	f04f 33ff 	mov.w	r3, #4294967295
 8004442:	e009      	b.n	8004458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004444:	4b08      	ldr	r3, [pc, #32]	@ (8004468 <_sbrk+0x64>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800444a:	4b07      	ldr	r3, [pc, #28]	@ (8004468 <_sbrk+0x64>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	4a05      	ldr	r2, [pc, #20]	@ (8004468 <_sbrk+0x64>)
 8004454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004456:	68fb      	ldr	r3, [r7, #12]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20020000 	.word	0x20020000
 8004464:	00000400 	.word	0x00000400
 8004468:	20000774 	.word	0x20000774
 800446c:	20009440 	.word	0x20009440

08004470 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004474:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <SystemInit+0x20>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447a:	4a05      	ldr	r2, [pc, #20]	@ (8004490 <SystemInit+0x20>)
 800447c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	e000ed00 	.word	0xe000ed00

08004494 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800449a:	f107 0308 	add.w	r3, r7, #8
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	605a      	str	r2, [r3, #4]
 80044a4:	609a      	str	r2, [r3, #8]
 80044a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044a8:	463b      	mov	r3, r7
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80044b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004528 <MX_TIM2_Init+0x94>)
 80044b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80044b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 80044b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <MX_TIM2_Init+0x94>)
 80044ba:	2202      	movs	r2, #2
 80044bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044be:	4b1a      	ldr	r3, [pc, #104]	@ (8004528 <MX_TIM2_Init+0x94>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 634;
 80044c4:	4b18      	ldr	r3, [pc, #96]	@ (8004528 <MX_TIM2_Init+0x94>)
 80044c6:	f240 227a 	movw	r2, #634	@ 0x27a
 80044ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044cc:	4b16      	ldr	r3, [pc, #88]	@ (8004528 <MX_TIM2_Init+0x94>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044d2:	4b15      	ldr	r3, [pc, #84]	@ (8004528 <MX_TIM2_Init+0x94>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044d8:	4813      	ldr	r0, [pc, #76]	@ (8004528 <MX_TIM2_Init+0x94>)
 80044da:	f003 f939 	bl	8007750 <HAL_TIM_Base_Init>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80044e4:	f7fe f980 	bl	80027e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044ee:	f107 0308 	add.w	r3, r7, #8
 80044f2:	4619      	mov	r1, r3
 80044f4:	480c      	ldr	r0, [pc, #48]	@ (8004528 <MX_TIM2_Init+0x94>)
 80044f6:	f003 fb27 	bl	8007b48 <HAL_TIM_ConfigClockSource>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004500:	f7fe f972 	bl	80027e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004504:	2320      	movs	r3, #32
 8004506:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004508:	2300      	movs	r3, #0
 800450a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800450c:	463b      	mov	r3, r7
 800450e:	4619      	mov	r1, r3
 8004510:	4805      	ldr	r0, [pc, #20]	@ (8004528 <MX_TIM2_Init+0x94>)
 8004512:	f003 fd2f 	bl	8007f74 <HAL_TIMEx_MasterConfigSynchronization>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800451c:	f7fe f964 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004520:	bf00      	nop
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000778 	.word	0x20000778

0800452c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453c:	d10d      	bne.n	800455a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	4b09      	ldr	r3, [pc, #36]	@ (8004568 <HAL_TIM_Base_MspInit+0x3c>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	4a08      	ldr	r2, [pc, #32]	@ (8004568 <HAL_TIM_Base_MspInit+0x3c>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	6413      	str	r3, [r2, #64]	@ 0x40
 800454e:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <HAL_TIM_Base_MspInit+0x3c>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800

0800456c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004570:	4b11      	ldr	r3, [pc, #68]	@ (80045b8 <MX_USART2_UART_Init+0x4c>)
 8004572:	4a12      	ldr	r2, [pc, #72]	@ (80045bc <MX_USART2_UART_Init+0x50>)
 8004574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004576:	4b10      	ldr	r3, [pc, #64]	@ (80045b8 <MX_USART2_UART_Init+0x4c>)
 8004578:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800457c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800457e:	4b0e      	ldr	r3, [pc, #56]	@ (80045b8 <MX_USART2_UART_Init+0x4c>)
 8004580:	2200      	movs	r2, #0
 8004582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004584:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <MX_USART2_UART_Init+0x4c>)
 8004586:	2200      	movs	r2, #0
 8004588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800458a:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <MX_USART2_UART_Init+0x4c>)
 800458c:	2200      	movs	r2, #0
 800458e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004590:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <MX_USART2_UART_Init+0x4c>)
 8004592:	220c      	movs	r2, #12
 8004594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004596:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <MX_USART2_UART_Init+0x4c>)
 8004598:	2200      	movs	r2, #0
 800459a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800459c:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <MX_USART2_UART_Init+0x4c>)
 800459e:	2200      	movs	r2, #0
 80045a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045a2:	4805      	ldr	r0, [pc, #20]	@ (80045b8 <MX_USART2_UART_Init+0x4c>)
 80045a4:	f003 fd68 	bl	8008078 <HAL_UART_Init>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80045ae:	f7fe f91b 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	200007c0 	.word	0x200007c0
 80045bc:	40004400 	.word	0x40004400

080045c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	@ 0x28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c8:	f107 0314 	add.w	r3, r7, #20
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a19      	ldr	r2, [pc, #100]	@ (8004644 <HAL_UART_MspInit+0x84>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d12b      	bne.n	800463a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	4b18      	ldr	r3, [pc, #96]	@ (8004648 <HAL_UART_MspInit+0x88>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	4a17      	ldr	r2, [pc, #92]	@ (8004648 <HAL_UART_MspInit+0x88>)
 80045ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045f2:	4b15      	ldr	r3, [pc, #84]	@ (8004648 <HAL_UART_MspInit+0x88>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	4b11      	ldr	r3, [pc, #68]	@ (8004648 <HAL_UART_MspInit+0x88>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004606:	4a10      	ldr	r2, [pc, #64]	@ (8004648 <HAL_UART_MspInit+0x88>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6313      	str	r3, [r2, #48]	@ 0x30
 800460e:	4b0e      	ldr	r3, [pc, #56]	@ (8004648 <HAL_UART_MspInit+0x88>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800461a:	230c      	movs	r3, #12
 800461c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461e:	2302      	movs	r3, #2
 8004620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004626:	2303      	movs	r3, #3
 8004628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800462a:	2307      	movs	r3, #7
 800462c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800462e:	f107 0314 	add.w	r3, r7, #20
 8004632:	4619      	mov	r1, r3
 8004634:	4805      	ldr	r0, [pc, #20]	@ (800464c <HAL_UART_MspInit+0x8c>)
 8004636:	f001 f9e5 	bl	8005a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800463a:	bf00      	nop
 800463c:	3728      	adds	r7, #40	@ 0x28
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40004400 	.word	0x40004400
 8004648:	40023800 	.word	0x40023800
 800464c:	40020000 	.word	0x40020000

08004650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004688 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004654:	f7ff ff0c 	bl	8004470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004658:	480c      	ldr	r0, [pc, #48]	@ (800468c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800465a:	490d      	ldr	r1, [pc, #52]	@ (8004690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800465c:	4a0d      	ldr	r2, [pc, #52]	@ (8004694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800465e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004660:	e002      	b.n	8004668 <LoopCopyDataInit>

08004662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004666:	3304      	adds	r3, #4

08004668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800466a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800466c:	d3f9      	bcc.n	8004662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800466e:	4a0a      	ldr	r2, [pc, #40]	@ (8004698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004670:	4c0a      	ldr	r4, [pc, #40]	@ (800469c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004674:	e001      	b.n	800467a <LoopFillZerobss>

08004676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004678:	3204      	adds	r2, #4

0800467a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800467a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800467c:	d3fb      	bcc.n	8004676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800467e:	f00a fcdd 	bl	800f03c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004682:	f7fe f81d 	bl	80026c0 <main>
  bx  lr    
 8004686:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800468c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004690:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004694:	080267c0 	.word	0x080267c0
  ldr r2, =_sbss
 8004698:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800469c:	20009440 	.word	0x20009440

080046a0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046a0:	e7fe      	b.n	80046a0 <DMA1_Stream0_IRQHandler>
	...

080046a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046a8:	4b0e      	ldr	r3, [pc, #56]	@ (80046e4 <HAL_Init+0x40>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a0d      	ldr	r2, [pc, #52]	@ (80046e4 <HAL_Init+0x40>)
 80046ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <HAL_Init+0x40>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a0a      	ldr	r2, [pc, #40]	@ (80046e4 <HAL_Init+0x40>)
 80046ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046c0:	4b08      	ldr	r3, [pc, #32]	@ (80046e4 <HAL_Init+0x40>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a07      	ldr	r2, [pc, #28]	@ (80046e4 <HAL_Init+0x40>)
 80046c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046cc:	2003      	movs	r0, #3
 80046ce:	f000 fdf4 	bl	80052ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046d2:	200f      	movs	r0, #15
 80046d4:	f7ff fd5a 	bl	800418c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046d8:	f7ff fd2c 	bl	8004134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40023c00 	.word	0x40023c00

080046e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046ec:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <HAL_IncTick+0x20>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	4b06      	ldr	r3, [pc, #24]	@ (800470c <HAL_IncTick+0x24>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4413      	add	r3, r2
 80046f8:	4a04      	ldr	r2, [pc, #16]	@ (800470c <HAL_IncTick+0x24>)
 80046fa:	6013      	str	r3, [r2, #0]
}
 80046fc:	bf00      	nop
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	2000000c 	.word	0x2000000c
 800470c:	20000808 	.word	0x20000808

08004710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  return uwTick;
 8004714:	4b03      	ldr	r3, [pc, #12]	@ (8004724 <HAL_GetTick+0x14>)
 8004716:	681b      	ldr	r3, [r3, #0]
}
 8004718:	4618      	mov	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000808 	.word	0x20000808

08004728 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e033      	b.n	80047a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fd f870 	bl	800182c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b00      	cmp	r3, #0
 8004764:	d118      	bne.n	8004798 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800476e:	f023 0302 	bic.w	r3, r3, #2
 8004772:	f043 0202 	orr.w	r2, r3, #2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fb68 	bl	8004e50 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	f023 0303 	bic.w	r3, r3, #3
 800478e:	f043 0201 	orr.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	@ 0x40
 8004796:	e001      	b.n	800479c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b086      	sub	sp, #24
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d049      	beq.n	8004878 <HAL_ADC_IRQHandler+0xca>
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d046      	beq.n	8004878 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d105      	bne.n	8004802 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d12b      	bne.n	8004868 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004814:	2b00      	cmp	r3, #0
 8004816:	d127      	bne.n	8004868 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004822:	2b00      	cmp	r3, #0
 8004824:	d006      	beq.n	8004834 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004830:	2b00      	cmp	r3, #0
 8004832:	d119      	bne.n	8004868 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0220 	bic.w	r2, r2, #32
 8004842:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d105      	bne.n	8004868 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	f043 0201 	orr.w	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fd fe2d 	bl	80024c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f06f 0212 	mvn.w	r2, #18
 8004876:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004886:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d057      	beq.n	800493e <HAL_ADC_IRQHandler+0x190>
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d054      	beq.n	800493e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b00      	cmp	r3, #0
 800489e:	d105      	bne.n	80048ac <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d139      	bne.n	800492e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d006      	beq.n	80048d6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d12b      	bne.n	800492e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d124      	bne.n	800492e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d11d      	bne.n	800492e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d119      	bne.n	800492e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004908:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d105      	bne.n	800492e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fc0c 	bl	800514c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 020c 	mvn.w	r2, #12
 800493c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d017      	beq.n	8004984 <HAL_ADC_IRQHandler+0x1d6>
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d014      	beq.n	8004984 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b01      	cmp	r3, #1
 8004966:	d10d      	bne.n	8004984 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f925 	bl	8004bc4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f06f 0201 	mvn.w	r2, #1
 8004982:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004992:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d015      	beq.n	80049c6 <HAL_ADC_IRQHandler+0x218>
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d012      	beq.n	80049c6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a4:	f043 0202 	orr.w	r2, r3, #2
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0220 	mvn.w	r2, #32
 80049b4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f90e 	bl	8004bd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0220 	mvn.w	r2, #32
 80049c4:	601a      	str	r2, [r3, #0]
  }
}
 80049c6:	bf00      	nop
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_ADC_Start_DMA+0x1e>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e0ce      	b.n	8004b8c <HAL_ADC_Start_DMA+0x1bc>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d018      	beq.n	8004a36 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a14:	4b5f      	ldr	r3, [pc, #380]	@ (8004b94 <HAL_ADC_Start_DMA+0x1c4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a5f      	ldr	r2, [pc, #380]	@ (8004b98 <HAL_ADC_Start_DMA+0x1c8>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	0c9a      	lsrs	r2, r3, #18
 8004a20:	4613      	mov	r3, r2
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	4413      	add	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004a28:	e002      	b.n	8004a30 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f9      	bne.n	8004a2a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a44:	d107      	bne.n	8004a56 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a54:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	f040 8086 	bne.w	8004b72 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004a6e:	f023 0301 	bic.w	r3, r3, #1
 8004a72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa4:	d106      	bne.n	8004ab4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	f023 0206 	bic.w	r2, r3, #6
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ab2:	e002      	b.n	8004aba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ac2:	4b36      	ldr	r3, [pc, #216]	@ (8004b9c <HAL_ADC_Start_DMA+0x1cc>)
 8004ac4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aca:	4a35      	ldr	r2, [pc, #212]	@ (8004ba0 <HAL_ADC_Start_DMA+0x1d0>)
 8004acc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad2:	4a34      	ldr	r2, [pc, #208]	@ (8004ba4 <HAL_ADC_Start_DMA+0x1d4>)
 8004ad4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ada:	4a33      	ldr	r2, [pc, #204]	@ (8004ba8 <HAL_ADC_Start_DMA+0x1d8>)
 8004adc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004ae6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004af6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b06:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	334c      	adds	r3, #76	@ 0x4c
 8004b12:	4619      	mov	r1, r3
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f000 fcb2 	bl	8005480 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10f      	bne.n	8004b48 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d129      	bne.n	8004b8a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b44:	609a      	str	r2, [r3, #8]
 8004b46:	e020      	b.n	8004b8a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a17      	ldr	r2, [pc, #92]	@ (8004bac <HAL_ADC_Start_DMA+0x1dc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d11b      	bne.n	8004b8a <HAL_ADC_Start_DMA+0x1ba>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d114      	bne.n	8004b8a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	e00b      	b.n	8004b8a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	f043 0210 	orr.w	r2, r3, #16
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	f043 0201 	orr.w	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20000004 	.word	0x20000004
 8004b98:	431bde83 	.word	0x431bde83
 8004b9c:	40012300 	.word	0x40012300
 8004ba0:	08005049 	.word	0x08005049
 8004ba4:	08005103 	.word	0x08005103
 8004ba8:	0800511f 	.word	0x0800511f
 8004bac:	40012000 	.word	0x40012000

08004bb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x1c>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e113      	b.n	8004e30 <HAL_ADC_ConfigChannel+0x244>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b09      	cmp	r3, #9
 8004c16:	d925      	bls.n	8004c64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68d9      	ldr	r1, [r3, #12]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	4613      	mov	r3, r2
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3b1e      	subs	r3, #30
 8004c2e:	2207      	movs	r2, #7
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43da      	mvns	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68d9      	ldr	r1, [r3, #12]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	4618      	mov	r0, r3
 8004c50:	4603      	mov	r3, r0
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	4403      	add	r3, r0
 8004c56:	3b1e      	subs	r3, #30
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	e022      	b.n	8004caa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6919      	ldr	r1, [r3, #16]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	4613      	mov	r3, r2
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	4413      	add	r3, r2
 8004c78:	2207      	movs	r2, #7
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43da      	mvns	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	400a      	ands	r2, r1
 8004c86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6919      	ldr	r1, [r3, #16]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	4618      	mov	r0, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	4403      	add	r3, r0
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b06      	cmp	r3, #6
 8004cb0:	d824      	bhi.n	8004cfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	3b05      	subs	r3, #5
 8004cc4:	221f      	movs	r2, #31
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	400a      	ands	r2, r1
 8004cd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	3b05      	subs	r3, #5
 8004cee:	fa00 f203 	lsl.w	r2, r0, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004cfa:	e04c      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	d824      	bhi.n	8004d4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	3b23      	subs	r3, #35	@ 0x23
 8004d16:	221f      	movs	r2, #31
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	43da      	mvns	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	400a      	ands	r2, r1
 8004d24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	4618      	mov	r0, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3b23      	subs	r3, #35	@ 0x23
 8004d40:	fa00 f203 	lsl.w	r2, r0, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d4c:	e023      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3b41      	subs	r3, #65	@ 0x41
 8004d60:	221f      	movs	r2, #31
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43da      	mvns	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	3b41      	subs	r3, #65	@ 0x41
 8004d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d96:	4b29      	ldr	r3, [pc, #164]	@ (8004e3c <HAL_ADC_ConfigChannel+0x250>)
 8004d98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a28      	ldr	r2, [pc, #160]	@ (8004e40 <HAL_ADC_ConfigChannel+0x254>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d10f      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x1d8>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b12      	cmp	r3, #18
 8004daa:	d10b      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e40 <HAL_ADC_ConfigChannel+0x254>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d12b      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x23a>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e44 <HAL_ADC_ConfigChannel+0x258>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <HAL_ADC_ConfigChannel+0x1f4>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b11      	cmp	r3, #17
 8004dde:	d122      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a11      	ldr	r2, [pc, #68]	@ (8004e44 <HAL_ADC_ConfigChannel+0x258>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d111      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e02:	4b11      	ldr	r3, [pc, #68]	@ (8004e48 <HAL_ADC_ConfigChannel+0x25c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a11      	ldr	r2, [pc, #68]	@ (8004e4c <HAL_ADC_ConfigChannel+0x260>)
 8004e08:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0c:	0c9a      	lsrs	r2, r3, #18
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004e18:	e002      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f9      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	40012300 	.word	0x40012300
 8004e40:	40012000 	.word	0x40012000
 8004e44:	10000012 	.word	0x10000012
 8004e48:	20000004 	.word	0x20000004
 8004e4c:	431bde83 	.word	0x431bde83

08004e50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e58:	4b79      	ldr	r3, [pc, #484]	@ (8005040 <ADC_Init+0x1f0>)
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	021a      	lsls	r2, r3, #8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6899      	ldr	r1, [r3, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee2:	4a58      	ldr	r2, [pc, #352]	@ (8005044 <ADC_Init+0x1f4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d022      	beq.n	8004f2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ef6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6899      	ldr	r1, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6899      	ldr	r1, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	e00f      	b.n	8004f4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004f4c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0202 	bic.w	r2, r2, #2
 8004f5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6899      	ldr	r1, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	7e1b      	ldrb	r3, [r3, #24]
 8004f68:	005a      	lsls	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01b      	beq.n	8004fb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f8a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004f9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6859      	ldr	r1, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	035a      	lsls	r2, r3, #13
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	e007      	b.n	8004fc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	051a      	lsls	r2, r3, #20
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ff8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6899      	ldr	r1, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005006:	025a      	lsls	r2, r3, #9
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800501e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6899      	ldr	r1, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	029a      	lsls	r2, r3, #10
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	609a      	str	r2, [r3, #8]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	40012300 	.word	0x40012300
 8005044:	0f000001 	.word	0x0f000001

08005048 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005054:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800505e:	2b00      	cmp	r3, #0
 8005060:	d13c      	bne.n	80050dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d12b      	bne.n	80050d4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005080:	2b00      	cmp	r3, #0
 8005082:	d127      	bne.n	80050d4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800508e:	2b00      	cmp	r3, #0
 8005090:	d006      	beq.n	80050a0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800509c:	2b00      	cmp	r3, #0
 800509e:	d119      	bne.n	80050d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0220 	bic.w	r2, r2, #32
 80050ae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d105      	bne.n	80050d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	f043 0201 	orr.w	r2, r3, #1
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7fd f9f7 	bl	80024c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050da:	e00e      	b.n	80050fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff fd75 	bl	8004bd8 <HAL_ADC_ErrorCallback>
}
 80050ee:	e004      	b.n	80050fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff fd4d 	bl	8004bb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005116:	bf00      	nop
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2240      	movs	r2, #64	@ 0x40
 8005130:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	f043 0204 	orr.w	r2, r3, #4
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7ff fd4a 	bl	8004bd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005170:	4b0c      	ldr	r3, [pc, #48]	@ (80051a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800517c:	4013      	ands	r3, r2
 800517e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005188:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800518c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005192:	4a04      	ldr	r2, [pc, #16]	@ (80051a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	60d3      	str	r3, [r2, #12]
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	e000ed00 	.word	0xe000ed00

080051a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051ac:	4b04      	ldr	r3, [pc, #16]	@ (80051c0 <__NVIC_GetPriorityGrouping+0x18>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	0a1b      	lsrs	r3, r3, #8
 80051b2:	f003 0307 	and.w	r3, r3, #7
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	e000ed00 	.word	0xe000ed00

080051c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	db0b      	blt.n	80051ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	f003 021f 	and.w	r2, r3, #31
 80051dc:	4907      	ldr	r1, [pc, #28]	@ (80051fc <__NVIC_EnableIRQ+0x38>)
 80051de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	2001      	movs	r0, #1
 80051e6:	fa00 f202 	lsl.w	r2, r0, r2
 80051ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	e000e100 	.word	0xe000e100

08005200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	6039      	str	r1, [r7, #0]
 800520a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800520c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005210:	2b00      	cmp	r3, #0
 8005212:	db0a      	blt.n	800522a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	490c      	ldr	r1, [pc, #48]	@ (800524c <__NVIC_SetPriority+0x4c>)
 800521a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521e:	0112      	lsls	r2, r2, #4
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	440b      	add	r3, r1
 8005224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005228:	e00a      	b.n	8005240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	b2da      	uxtb	r2, r3
 800522e:	4908      	ldr	r1, [pc, #32]	@ (8005250 <__NVIC_SetPriority+0x50>)
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	3b04      	subs	r3, #4
 8005238:	0112      	lsls	r2, r2, #4
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	440b      	add	r3, r1
 800523e:	761a      	strb	r2, [r3, #24]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	e000e100 	.word	0xe000e100
 8005250:	e000ed00 	.word	0xe000ed00

08005254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005254:	b480      	push	{r7}
 8005256:	b089      	sub	sp, #36	@ 0x24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f1c3 0307 	rsb	r3, r3, #7
 800526e:	2b04      	cmp	r3, #4
 8005270:	bf28      	it	cs
 8005272:	2304      	movcs	r3, #4
 8005274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	3304      	adds	r3, #4
 800527a:	2b06      	cmp	r3, #6
 800527c:	d902      	bls.n	8005284 <NVIC_EncodePriority+0x30>
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	3b03      	subs	r3, #3
 8005282:	e000      	b.n	8005286 <NVIC_EncodePriority+0x32>
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005288:	f04f 32ff 	mov.w	r2, #4294967295
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	43da      	mvns	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	401a      	ands	r2, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800529c:	f04f 31ff 	mov.w	r1, #4294967295
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	fa01 f303 	lsl.w	r3, r1, r3
 80052a6:	43d9      	mvns	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052ac:	4313      	orrs	r3, r2
         );
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3724      	adds	r7, #36	@ 0x24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff ff4c 	bl	8005160 <__NVIC_SetPriorityGrouping>
}
 80052c8:	bf00      	nop
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	4603      	mov	r3, r0
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052de:	2300      	movs	r3, #0
 80052e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052e2:	f7ff ff61 	bl	80051a8 <__NVIC_GetPriorityGrouping>
 80052e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	6978      	ldr	r0, [r7, #20]
 80052ee:	f7ff ffb1 	bl	8005254 <NVIC_EncodePriority>
 80052f2:	4602      	mov	r2, r0
 80052f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f8:	4611      	mov	r1, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff ff80 	bl	8005200 <__NVIC_SetPriority>
}
 8005300:	bf00      	nop
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff ff54 	bl	80051c4 <__NVIC_EnableIRQ>
}
 800531c:	bf00      	nop
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005330:	f7ff f9ee 	bl	8004710 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e099      	b.n	8005474 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005360:	e00f      	b.n	8005382 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005362:	f7ff f9d5 	bl	8004710 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b05      	cmp	r3, #5
 800536e:	d908      	bls.n	8005382 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2203      	movs	r2, #3
 800537a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e078      	b.n	8005474 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e8      	bne.n	8005362 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4b38      	ldr	r3, [pc, #224]	@ (800547c <HAL_DMA_Init+0x158>)
 800539c:	4013      	ands	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d107      	bne.n	80053ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e4:	4313      	orrs	r3, r2
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f023 0307 	bic.w	r3, r3, #7
 8005402:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	2b04      	cmp	r3, #4
 8005414:	d117      	bne.n	8005446 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00e      	beq.n	8005446 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fa6f 	bl	800590c <DMA_CheckFifoParam>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2240      	movs	r2, #64	@ 0x40
 8005438:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005442:	2301      	movs	r3, #1
 8005444:	e016      	b.n	8005474 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fa26 	bl	80058a0 <DMA_CalcBaseAndBitshift>
 8005454:	4603      	mov	r3, r0
 8005456:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545c:	223f      	movs	r2, #63	@ 0x3f
 800545e:	409a      	lsls	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	f010803f 	.word	0xf010803f

08005480 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005496:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_DMA_Start_IT+0x26>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e040      	b.n	8005528 <HAL_DMA_Start_IT+0xa8>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d12f      	bne.n	800551a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f9b8 	bl	8005844 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d8:	223f      	movs	r2, #63	@ 0x3f
 80054da:	409a      	lsls	r2, r3
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0216 	orr.w	r2, r2, #22
 80054ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d007      	beq.n	8005508 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0208 	orr.w	r2, r2, #8
 8005506:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	e005      	b.n	8005526 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005522:	2302      	movs	r3, #2
 8005524:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005526:	7dfb      	ldrb	r3, [r7, #23]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800553c:	4b8e      	ldr	r3, [pc, #568]	@ (8005778 <HAL_DMA_IRQHandler+0x248>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a8e      	ldr	r2, [pc, #568]	@ (800577c <HAL_DMA_IRQHandler+0x24c>)
 8005542:	fba2 2303 	umull	r2, r3, r2, r3
 8005546:	0a9b      	lsrs	r3, r3, #10
 8005548:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555a:	2208      	movs	r2, #8
 800555c:	409a      	lsls	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4013      	ands	r3, r2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01a      	beq.n	800559c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d013      	beq.n	800559c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0204 	bic.w	r2, r2, #4
 8005582:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005588:	2208      	movs	r2, #8
 800558a:	409a      	lsls	r2, r3
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005594:	f043 0201 	orr.w	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a0:	2201      	movs	r2, #1
 80055a2:	409a      	lsls	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d012      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00b      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055be:	2201      	movs	r2, #1
 80055c0:	409a      	lsls	r2, r3
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ca:	f043 0202 	orr.w	r2, r3, #2
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d6:	2204      	movs	r2, #4
 80055d8:	409a      	lsls	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4013      	ands	r3, r2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d012      	beq.n	8005608 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00b      	beq.n	8005608 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f4:	2204      	movs	r2, #4
 80055f6:	409a      	lsls	r2, r3
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005600:	f043 0204 	orr.w	r2, r3, #4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800560c:	2210      	movs	r2, #16
 800560e:	409a      	lsls	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4013      	ands	r3, r2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d043      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d03c      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800562a:	2210      	movs	r2, #16
 800562c:	409a      	lsls	r2, r3
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d018      	beq.n	8005672 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d108      	bne.n	8005660 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d024      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	4798      	blx	r3
 800565e:	e01f      	b.n	80056a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01b      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4798      	blx	r3
 8005670:	e016      	b.n	80056a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800567c:	2b00      	cmp	r3, #0
 800567e:	d107      	bne.n	8005690 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0208 	bic.w	r2, r2, #8
 800568e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a4:	2220      	movs	r2, #32
 80056a6:	409a      	lsls	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 808f 	beq.w	80057d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8087 	beq.w	80057d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c6:	2220      	movs	r2, #32
 80056c8:	409a      	lsls	r2, r3
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b05      	cmp	r3, #5
 80056d8:	d136      	bne.n	8005748 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0216 	bic.w	r2, r2, #22
 80056e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <HAL_DMA_IRQHandler+0x1da>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0208 	bic.w	r2, r2, #8
 8005718:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571e:	223f      	movs	r2, #63	@ 0x3f
 8005720:	409a      	lsls	r2, r3
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800573a:	2b00      	cmp	r3, #0
 800573c:	d07e      	beq.n	800583c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
        }
        return;
 8005746:	e079      	b.n	800583c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01d      	beq.n	8005792 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10d      	bne.n	8005780 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005768:	2b00      	cmp	r3, #0
 800576a:	d031      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	4798      	blx	r3
 8005774:	e02c      	b.n	80057d0 <HAL_DMA_IRQHandler+0x2a0>
 8005776:	bf00      	nop
 8005778:	20000004 	.word	0x20000004
 800577c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005784:	2b00      	cmp	r3, #0
 8005786:	d023      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	4798      	blx	r3
 8005790:	e01e      	b.n	80057d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10f      	bne.n	80057c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0210 	bic.w	r2, r2, #16
 80057ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d032      	beq.n	800583e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d022      	beq.n	800582a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2205      	movs	r2, #5
 80057e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0201 	bic.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	3301      	adds	r3, #1
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	429a      	cmp	r2, r3
 8005806:	d307      	bcc.n	8005818 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f2      	bne.n	80057fc <HAL_DMA_IRQHandler+0x2cc>
 8005816:	e000      	b.n	800581a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005818:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
 800583a:	e000      	b.n	800583e <HAL_DMA_IRQHandler+0x30e>
        return;
 800583c:	bf00      	nop
    }
  }
}
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005860:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2b40      	cmp	r3, #64	@ 0x40
 8005870:	d108      	bne.n	8005884 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005882:	e007      	b.n	8005894 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	60da      	str	r2, [r3, #12]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	3b10      	subs	r3, #16
 80058b0:	4a14      	ldr	r2, [pc, #80]	@ (8005904 <DMA_CalcBaseAndBitshift+0x64>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	091b      	lsrs	r3, r3, #4
 80058b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058ba:	4a13      	ldr	r2, [pc, #76]	@ (8005908 <DMA_CalcBaseAndBitshift+0x68>)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d909      	bls.n	80058e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80058d6:	f023 0303 	bic.w	r3, r3, #3
 80058da:	1d1a      	adds	r2, r3, #4
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	659a      	str	r2, [r3, #88]	@ 0x58
 80058e0:	e007      	b.n	80058f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	aaaaaaab 	.word	0xaaaaaaab
 8005908:	08012f20 	.word	0x08012f20

0800590c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d11f      	bne.n	8005966 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d856      	bhi.n	80059da <DMA_CheckFifoParam+0xce>
 800592c:	a201      	add	r2, pc, #4	@ (adr r2, 8005934 <DMA_CheckFifoParam+0x28>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005945 	.word	0x08005945
 8005938:	08005957 	.word	0x08005957
 800593c:	08005945 	.word	0x08005945
 8005940:	080059db 	.word	0x080059db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d046      	beq.n	80059de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005954:	e043      	b.n	80059de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800595e:	d140      	bne.n	80059e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005964:	e03d      	b.n	80059e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800596e:	d121      	bne.n	80059b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b03      	cmp	r3, #3
 8005974:	d837      	bhi.n	80059e6 <DMA_CheckFifoParam+0xda>
 8005976:	a201      	add	r2, pc, #4	@ (adr r2, 800597c <DMA_CheckFifoParam+0x70>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	0800598d 	.word	0x0800598d
 8005980:	08005993 	.word	0x08005993
 8005984:	0800598d 	.word	0x0800598d
 8005988:	080059a5 	.word	0x080059a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
      break;
 8005990:	e030      	b.n	80059f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005996:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d025      	beq.n	80059ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a2:	e022      	b.n	80059ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059ac:	d11f      	bne.n	80059ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059b2:	e01c      	b.n	80059ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d903      	bls.n	80059c2 <DMA_CheckFifoParam+0xb6>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d003      	beq.n	80059c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059c0:	e018      	b.n	80059f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
      break;
 80059c6:	e015      	b.n	80059f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00e      	beq.n	80059f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
      break;
 80059d8:	e00b      	b.n	80059f2 <DMA_CheckFifoParam+0xe6>
      break;
 80059da:	bf00      	nop
 80059dc:	e00a      	b.n	80059f4 <DMA_CheckFifoParam+0xe8>
      break;
 80059de:	bf00      	nop
 80059e0:	e008      	b.n	80059f4 <DMA_CheckFifoParam+0xe8>
      break;
 80059e2:	bf00      	nop
 80059e4:	e006      	b.n	80059f4 <DMA_CheckFifoParam+0xe8>
      break;
 80059e6:	bf00      	nop
 80059e8:	e004      	b.n	80059f4 <DMA_CheckFifoParam+0xe8>
      break;
 80059ea:	bf00      	nop
 80059ec:	e002      	b.n	80059f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80059ee:	bf00      	nop
 80059f0:	e000      	b.n	80059f4 <DMA_CheckFifoParam+0xe8>
      break;
 80059f2:	bf00      	nop
    }
  } 
  
  return status; 
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop

08005a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b089      	sub	sp, #36	@ 0x24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]
 8005a1e:	e159      	b.n	8005cd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a20:	2201      	movs	r2, #1
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4013      	ands	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	f040 8148 	bne.w	8005cce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d005      	beq.n	8005a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d130      	bne.n	8005ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	2203      	movs	r2, #3
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	091b      	lsrs	r3, r3, #4
 8005aa2:	f003 0201 	and.w	r2, r3, #1
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d017      	beq.n	8005af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	2203      	movs	r2, #3
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d123      	bne.n	8005b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	08da      	lsrs	r2, r3, #3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3208      	adds	r2, #8
 8005b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	220f      	movs	r2, #15
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4013      	ands	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	08da      	lsrs	r2, r3, #3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3208      	adds	r2, #8
 8005b42:	69b9      	ldr	r1, [r7, #24]
 8005b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	2203      	movs	r2, #3
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 0203 	and.w	r2, r3, #3
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80a2 	beq.w	8005cce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	4b57      	ldr	r3, [pc, #348]	@ (8005cec <HAL_GPIO_Init+0x2e8>)
 8005b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b92:	4a56      	ldr	r2, [pc, #344]	@ (8005cec <HAL_GPIO_Init+0x2e8>)
 8005b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b9a:	4b54      	ldr	r3, [pc, #336]	@ (8005cec <HAL_GPIO_Init+0x2e8>)
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ba6:	4a52      	ldr	r2, [pc, #328]	@ (8005cf0 <HAL_GPIO_Init+0x2ec>)
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	089b      	lsrs	r3, r3, #2
 8005bac:	3302      	adds	r3, #2
 8005bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	220f      	movs	r2, #15
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a49      	ldr	r2, [pc, #292]	@ (8005cf4 <HAL_GPIO_Init+0x2f0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d019      	beq.n	8005c06 <HAL_GPIO_Init+0x202>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a48      	ldr	r2, [pc, #288]	@ (8005cf8 <HAL_GPIO_Init+0x2f4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <HAL_GPIO_Init+0x1fe>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a47      	ldr	r2, [pc, #284]	@ (8005cfc <HAL_GPIO_Init+0x2f8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00d      	beq.n	8005bfe <HAL_GPIO_Init+0x1fa>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a46      	ldr	r2, [pc, #280]	@ (8005d00 <HAL_GPIO_Init+0x2fc>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d007      	beq.n	8005bfa <HAL_GPIO_Init+0x1f6>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a45      	ldr	r2, [pc, #276]	@ (8005d04 <HAL_GPIO_Init+0x300>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d101      	bne.n	8005bf6 <HAL_GPIO_Init+0x1f2>
 8005bf2:	2304      	movs	r3, #4
 8005bf4:	e008      	b.n	8005c08 <HAL_GPIO_Init+0x204>
 8005bf6:	2307      	movs	r3, #7
 8005bf8:	e006      	b.n	8005c08 <HAL_GPIO_Init+0x204>
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e004      	b.n	8005c08 <HAL_GPIO_Init+0x204>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e002      	b.n	8005c08 <HAL_GPIO_Init+0x204>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <HAL_GPIO_Init+0x204>
 8005c06:	2300      	movs	r3, #0
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	f002 0203 	and.w	r2, r2, #3
 8005c0e:	0092      	lsls	r2, r2, #2
 8005c10:	4093      	lsls	r3, r2
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c18:	4935      	ldr	r1, [pc, #212]	@ (8005cf0 <HAL_GPIO_Init+0x2ec>)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	089b      	lsrs	r3, r3, #2
 8005c1e:	3302      	adds	r3, #2
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c26:	4b38      	ldr	r3, [pc, #224]	@ (8005d08 <HAL_GPIO_Init+0x304>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	4013      	ands	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c4a:	4a2f      	ldr	r2, [pc, #188]	@ (8005d08 <HAL_GPIO_Init+0x304>)
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c50:	4b2d      	ldr	r3, [pc, #180]	@ (8005d08 <HAL_GPIO_Init+0x304>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c74:	4a24      	ldr	r2, [pc, #144]	@ (8005d08 <HAL_GPIO_Init+0x304>)
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c7a:	4b23      	ldr	r3, [pc, #140]	@ (8005d08 <HAL_GPIO_Init+0x304>)
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	43db      	mvns	r3, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4013      	ands	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d08 <HAL_GPIO_Init+0x304>)
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ca4:	4b18      	ldr	r3, [pc, #96]	@ (8005d08 <HAL_GPIO_Init+0x304>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	43db      	mvns	r3, r3
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cc8:	4a0f      	ldr	r2, [pc, #60]	@ (8005d08 <HAL_GPIO_Init+0x304>)
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	2b0f      	cmp	r3, #15
 8005cd8:	f67f aea2 	bls.w	8005a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	3724      	adds	r7, #36	@ 0x24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	40013800 	.word	0x40013800
 8005cf4:	40020000 	.word	0x40020000
 8005cf8:	40020400 	.word	0x40020400
 8005cfc:	40020800 	.word	0x40020800
 8005d00:	40020c00 	.word	0x40020c00
 8005d04:	40021000 	.word	0x40021000
 8005d08:	40013c00 	.word	0x40013c00

08005d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	807b      	strh	r3, [r7, #2]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d1c:	787b      	ldrb	r3, [r7, #1]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d22:	887a      	ldrh	r2, [r7, #2]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d28:	e003      	b.n	8005d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d2a:	887b      	ldrh	r3, [r7, #2]
 8005d2c:	041a      	lsls	r2, r3, #16
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	619a      	str	r2, [r3, #24]
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d50:	887a      	ldrh	r2, [r7, #2]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4013      	ands	r3, r2
 8005d56:	041a      	lsls	r2, r3, #16
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	43d9      	mvns	r1, r3
 8005d5c:	887b      	ldrh	r3, [r7, #2]
 8005d5e:	400b      	ands	r3, r1
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	619a      	str	r2, [r3, #24]
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e12b      	b.n	8005fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fc fc48 	bl	8002630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2224      	movs	r2, #36	@ 0x24
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0201 	bic.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005dd8:	f001 fc60 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 8005ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4a81      	ldr	r2, [pc, #516]	@ (8005fe8 <HAL_I2C_Init+0x274>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d807      	bhi.n	8005df8 <HAL_I2C_Init+0x84>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4a80      	ldr	r2, [pc, #512]	@ (8005fec <HAL_I2C_Init+0x278>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	bf94      	ite	ls
 8005df0:	2301      	movls	r3, #1
 8005df2:	2300      	movhi	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	e006      	b.n	8005e06 <HAL_I2C_Init+0x92>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4a7d      	ldr	r2, [pc, #500]	@ (8005ff0 <HAL_I2C_Init+0x27c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	bf94      	ite	ls
 8005e00:	2301      	movls	r3, #1
 8005e02:	2300      	movhi	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e0e7      	b.n	8005fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a78      	ldr	r2, [pc, #480]	@ (8005ff4 <HAL_I2C_Init+0x280>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	0c9b      	lsrs	r3, r3, #18
 8005e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	4a6a      	ldr	r2, [pc, #424]	@ (8005fe8 <HAL_I2C_Init+0x274>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d802      	bhi.n	8005e48 <HAL_I2C_Init+0xd4>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	3301      	adds	r3, #1
 8005e46:	e009      	b.n	8005e5c <HAL_I2C_Init+0xe8>
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005e4e:	fb02 f303 	mul.w	r3, r2, r3
 8005e52:	4a69      	ldr	r2, [pc, #420]	@ (8005ff8 <HAL_I2C_Init+0x284>)
 8005e54:	fba2 2303 	umull	r2, r3, r2, r3
 8005e58:	099b      	lsrs	r3, r3, #6
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6812      	ldr	r2, [r2, #0]
 8005e60:	430b      	orrs	r3, r1
 8005e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005e6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	495c      	ldr	r1, [pc, #368]	@ (8005fe8 <HAL_I2C_Init+0x274>)
 8005e78:	428b      	cmp	r3, r1
 8005e7a:	d819      	bhi.n	8005eb0 <HAL_I2C_Init+0x13c>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	1e59      	subs	r1, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e8a:	1c59      	adds	r1, r3, #1
 8005e8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e90:	400b      	ands	r3, r1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <HAL_I2C_Init+0x138>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	1e59      	subs	r1, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eaa:	e051      	b.n	8005f50 <HAL_I2C_Init+0x1dc>
 8005eac:	2304      	movs	r3, #4
 8005eae:	e04f      	b.n	8005f50 <HAL_I2C_Init+0x1dc>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d111      	bne.n	8005edc <HAL_I2C_Init+0x168>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	1e58      	subs	r0, r3, #1
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6859      	ldr	r1, [r3, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	440b      	add	r3, r1
 8005ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eca:	3301      	adds	r3, #1
 8005ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2301      	moveq	r3, #1
 8005ed6:	2300      	movne	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	e012      	b.n	8005f02 <HAL_I2C_Init+0x18e>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	1e58      	subs	r0, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6859      	ldr	r1, [r3, #4]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	0099      	lsls	r1, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bf0c      	ite	eq
 8005efc:	2301      	moveq	r3, #1
 8005efe:	2300      	movne	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <HAL_I2C_Init+0x196>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e022      	b.n	8005f50 <HAL_I2C_Init+0x1dc>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10e      	bne.n	8005f30 <HAL_I2C_Init+0x1bc>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1e58      	subs	r0, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	440b      	add	r3, r1
 8005f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f24:	3301      	adds	r3, #1
 8005f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f2e:	e00f      	b.n	8005f50 <HAL_I2C_Init+0x1dc>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	1e58      	subs	r0, r3, #1
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6859      	ldr	r1, [r3, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	0099      	lsls	r1, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f46:	3301      	adds	r3, #1
 8005f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	6809      	ldr	r1, [r1, #0]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69da      	ldr	r2, [r3, #28]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6911      	ldr	r1, [r2, #16]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	68d2      	ldr	r2, [r2, #12]
 8005f8a:	4311      	orrs	r1, r2
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	430b      	orrs	r3, r1
 8005f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	000186a0 	.word	0x000186a0
 8005fec:	001e847f 	.word	0x001e847f
 8005ff0:	003d08ff 	.word	0x003d08ff
 8005ff4:	431bde83 	.word	0x431bde83
 8005ff8:	10624dd3 	.word	0x10624dd3

08005ffc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af02      	add	r7, sp, #8
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	4608      	mov	r0, r1
 8006006:	4611      	mov	r1, r2
 8006008:	461a      	mov	r2, r3
 800600a:	4603      	mov	r3, r0
 800600c:	817b      	strh	r3, [r7, #10]
 800600e:	460b      	mov	r3, r1
 8006010:	813b      	strh	r3, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006016:	f7fe fb7b 	bl	8004710 <HAL_GetTick>
 800601a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b20      	cmp	r3, #32
 8006026:	f040 80d9 	bne.w	80061dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	2319      	movs	r3, #25
 8006030:	2201      	movs	r2, #1
 8006032:	496d      	ldr	r1, [pc, #436]	@ (80061e8 <HAL_I2C_Mem_Write+0x1ec>)
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fc8b 	bl	8006950 <I2C_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006040:	2302      	movs	r3, #2
 8006042:	e0cc      	b.n	80061de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_I2C_Mem_Write+0x56>
 800604e:	2302      	movs	r3, #2
 8006050:	e0c5      	b.n	80061de <HAL_I2C_Mem_Write+0x1e2>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b01      	cmp	r3, #1
 8006066:	d007      	beq.n	8006078 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006086:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2221      	movs	r2, #33	@ 0x21
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2240      	movs	r2, #64	@ 0x40
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a3a      	ldr	r2, [r7, #32]
 80060a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80060a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a4d      	ldr	r2, [pc, #308]	@ (80061ec <HAL_I2C_Mem_Write+0x1f0>)
 80060b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060ba:	88f8      	ldrh	r0, [r7, #6]
 80060bc:	893a      	ldrh	r2, [r7, #8]
 80060be:	8979      	ldrh	r1, [r7, #10]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	4603      	mov	r3, r0
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 fac2 	bl	8006654 <I2C_RequestMemoryWrite>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d052      	beq.n	800617c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e081      	b.n	80061de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 fd50 	bl	8006b84 <I2C_WaitOnTXEFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00d      	beq.n	8006106 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d107      	bne.n	8006102 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006100:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e06b      	b.n	80061de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610a:	781a      	ldrb	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b04      	cmp	r3, #4
 8006142:	d11b      	bne.n	800617c <HAL_I2C_Mem_Write+0x180>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006148:	2b00      	cmp	r3, #0
 800614a:	d017      	beq.n	800617c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006150:	781a      	ldrb	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1aa      	bne.n	80060da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fd43 	bl	8006c14 <I2C_WaitOnBTFFlagUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006198:	2b04      	cmp	r3, #4
 800619a:	d107      	bne.n	80061ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e016      	b.n	80061de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e000      	b.n	80061de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	00100002 	.word	0x00100002
 80061ec:	ffff0000 	.word	0xffff0000

080061f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08c      	sub	sp, #48	@ 0x30
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	4608      	mov	r0, r1
 80061fa:	4611      	mov	r1, r2
 80061fc:	461a      	mov	r2, r3
 80061fe:	4603      	mov	r3, r0
 8006200:	817b      	strh	r3, [r7, #10]
 8006202:	460b      	mov	r3, r1
 8006204:	813b      	strh	r3, [r7, #8]
 8006206:	4613      	mov	r3, r2
 8006208:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800620a:	f7fe fa81 	bl	8004710 <HAL_GetTick>
 800620e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b20      	cmp	r3, #32
 800621a:	f040 8214 	bne.w	8006646 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	2319      	movs	r3, #25
 8006224:	2201      	movs	r2, #1
 8006226:	497b      	ldr	r1, [pc, #492]	@ (8006414 <HAL_I2C_Mem_Read+0x224>)
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 fb91 	bl	8006950 <I2C_WaitOnFlagUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006234:	2302      	movs	r3, #2
 8006236:	e207      	b.n	8006648 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_I2C_Mem_Read+0x56>
 8006242:	2302      	movs	r3, #2
 8006244:	e200      	b.n	8006648 <HAL_I2C_Mem_Read+0x458>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b01      	cmp	r3, #1
 800625a:	d007      	beq.n	800626c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800627a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2222      	movs	r2, #34	@ 0x22
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2240      	movs	r2, #64	@ 0x40
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006296:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800629c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a5b      	ldr	r2, [pc, #364]	@ (8006418 <HAL_I2C_Mem_Read+0x228>)
 80062ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062ae:	88f8      	ldrh	r0, [r7, #6]
 80062b0:	893a      	ldrh	r2, [r7, #8]
 80062b2:	8979      	ldrh	r1, [r7, #10]
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	4603      	mov	r3, r0
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fa5e 	bl	8006780 <I2C_RequestMemoryRead>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e1bc      	b.n	8006648 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d113      	bne.n	80062fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062d6:	2300      	movs	r3, #0
 80062d8:	623b      	str	r3, [r7, #32]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	623b      	str	r3, [r7, #32]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	623b      	str	r3, [r7, #32]
 80062ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e190      	b.n	8006620 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006302:	2b01      	cmp	r3, #1
 8006304:	d11b      	bne.n	800633e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006316:	2300      	movs	r3, #0
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	61fb      	str	r3, [r7, #28]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	61fb      	str	r3, [r7, #28]
 800632a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	e170      	b.n	8006620 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006342:	2b02      	cmp	r3, #2
 8006344:	d11b      	bne.n	800637e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006354:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006364:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006366:	2300      	movs	r3, #0
 8006368:	61bb      	str	r3, [r7, #24]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	61bb      	str	r3, [r7, #24]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	e150      	b.n	8006620 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006394:	e144      	b.n	8006620 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800639a:	2b03      	cmp	r3, #3
 800639c:	f200 80f1 	bhi.w	8006582 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d123      	bne.n	80063f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fc79 	bl	8006ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e145      	b.n	8006648 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063ee:	e117      	b.n	8006620 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d14e      	bne.n	8006496 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fe:	2200      	movs	r2, #0
 8006400:	4906      	ldr	r1, [pc, #24]	@ (800641c <HAL_I2C_Mem_Read+0x22c>)
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 faa4 	bl	8006950 <I2C_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d008      	beq.n	8006420 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e11a      	b.n	8006648 <HAL_I2C_Mem_Read+0x458>
 8006412:	bf00      	nop
 8006414:	00100002 	.word	0x00100002
 8006418:	ffff0000 	.word	0xffff0000
 800641c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800642e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691a      	ldr	r2, [r3, #16]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800647e:	3b01      	subs	r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006494:	e0c4      	b.n	8006620 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649c:	2200      	movs	r2, #0
 800649e:	496c      	ldr	r1, [pc, #432]	@ (8006650 <HAL_I2C_Mem_Read+0x460>)
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fa55 	bl	8006950 <I2C_WaitOnFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e0cb      	b.n	8006648 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691a      	ldr	r2, [r3, #16]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f8:	2200      	movs	r2, #0
 80064fa:	4955      	ldr	r1, [pc, #340]	@ (8006650 <HAL_I2C_Mem_Read+0x460>)
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fa27 	bl	8006950 <I2C_WaitOnFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e09d      	b.n	8006648 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800651a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006580:	e04e      	b.n	8006620 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006584:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 fb8c 	bl	8006ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e058      	b.n	8006648 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d124      	bne.n	8006620 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d107      	bne.n	80065ee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006624:	2b00      	cmp	r3, #0
 8006626:	f47f aeb6 	bne.w	8006396 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	e000      	b.n	8006648 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006646:	2302      	movs	r3, #2
  }
}
 8006648:	4618      	mov	r0, r3
 800664a:	3728      	adds	r7, #40	@ 0x28
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	00010004 	.word	0x00010004

08006654 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af02      	add	r7, sp, #8
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	4608      	mov	r0, r1
 800665e:	4611      	mov	r1, r2
 8006660:	461a      	mov	r2, r3
 8006662:	4603      	mov	r3, r0
 8006664:	817b      	strh	r3, [r7, #10]
 8006666:	460b      	mov	r3, r1
 8006668:	813b      	strh	r3, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800667c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	2200      	movs	r2, #0
 8006686:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 f960 	bl	8006950 <I2C_WaitOnFlagUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00d      	beq.n	80066b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066a4:	d103      	bne.n	80066ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e05f      	b.n	8006772 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066b2:	897b      	ldrh	r3, [r7, #10]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80066c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	6a3a      	ldr	r2, [r7, #32]
 80066c6:	492d      	ldr	r1, [pc, #180]	@ (800677c <I2C_RequestMemoryWrite+0x128>)
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f9bb 	bl	8006a44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e04c      	b.n	8006772 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f0:	6a39      	ldr	r1, [r7, #32]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 fa46 	bl	8006b84 <I2C_WaitOnTXEFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00d      	beq.n	800671a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006702:	2b04      	cmp	r3, #4
 8006704:	d107      	bne.n	8006716 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006714:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e02b      	b.n	8006772 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800671a:	88fb      	ldrh	r3, [r7, #6]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d105      	bne.n	800672c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006720:	893b      	ldrh	r3, [r7, #8]
 8006722:	b2da      	uxtb	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	611a      	str	r2, [r3, #16]
 800672a:	e021      	b.n	8006770 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800672c:	893b      	ldrh	r3, [r7, #8]
 800672e:	0a1b      	lsrs	r3, r3, #8
 8006730:	b29b      	uxth	r3, r3
 8006732:	b2da      	uxtb	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800673a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800673c:	6a39      	ldr	r1, [r7, #32]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fa20 	bl	8006b84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00d      	beq.n	8006766 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674e:	2b04      	cmp	r3, #4
 8006750:	d107      	bne.n	8006762 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006760:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e005      	b.n	8006772 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006766:	893b      	ldrh	r3, [r7, #8]
 8006768:	b2da      	uxtb	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	00010002 	.word	0x00010002

08006780 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af02      	add	r7, sp, #8
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	4608      	mov	r0, r1
 800678a:	4611      	mov	r1, r2
 800678c:	461a      	mov	r2, r3
 800678e:	4603      	mov	r3, r0
 8006790:	817b      	strh	r3, [r7, #10]
 8006792:	460b      	mov	r3, r1
 8006794:	813b      	strh	r3, [r7, #8]
 8006796:	4613      	mov	r3, r2
 8006798:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f8c2 	bl	8006950 <I2C_WaitOnFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00d      	beq.n	80067ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067e0:	d103      	bne.n	80067ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e0aa      	b.n	8006944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067ee:	897b      	ldrh	r3, [r7, #10]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	461a      	mov	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	6a3a      	ldr	r2, [r7, #32]
 8006802:	4952      	ldr	r1, [pc, #328]	@ (800694c <I2C_RequestMemoryRead+0x1cc>)
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 f91d 	bl	8006a44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e097      	b.n	8006944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006814:	2300      	movs	r3, #0
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800682a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800682c:	6a39      	ldr	r1, [r7, #32]
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 f9a8 	bl	8006b84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00d      	beq.n	8006856 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	2b04      	cmp	r3, #4
 8006840:	d107      	bne.n	8006852 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006850:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e076      	b.n	8006944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d105      	bne.n	8006868 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800685c:	893b      	ldrh	r3, [r7, #8]
 800685e:	b2da      	uxtb	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	611a      	str	r2, [r3, #16]
 8006866:	e021      	b.n	80068ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006868:	893b      	ldrh	r3, [r7, #8]
 800686a:	0a1b      	lsrs	r3, r3, #8
 800686c:	b29b      	uxth	r3, r3
 800686e:	b2da      	uxtb	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006878:	6a39      	ldr	r1, [r7, #32]
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 f982 	bl	8006b84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00d      	beq.n	80068a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688a:	2b04      	cmp	r3, #4
 800688c:	d107      	bne.n	800689e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800689c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e050      	b.n	8006944 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068a2:	893b      	ldrh	r3, [r7, #8]
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068ae:	6a39      	ldr	r1, [r7, #32]
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f967 	bl	8006b84 <I2C_WaitOnTXEFlagUntilTimeout>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00d      	beq.n	80068d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	d107      	bne.n	80068d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e035      	b.n	8006944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 f82b 	bl	8006950 <I2C_WaitOnFlagUntilTimeout>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00d      	beq.n	800691c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800690a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800690e:	d103      	bne.n	8006918 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006916:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e013      	b.n	8006944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800691c:	897b      	ldrh	r3, [r7, #10]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	f043 0301 	orr.w	r3, r3, #1
 8006924:	b2da      	uxtb	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800692c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692e:	6a3a      	ldr	r2, [r7, #32]
 8006930:	4906      	ldr	r1, [pc, #24]	@ (800694c <I2C_RequestMemoryRead+0x1cc>)
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 f886 	bl	8006a44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e000      	b.n	8006944 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	00010002 	.word	0x00010002

08006950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	4613      	mov	r3, r2
 800695e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006960:	e048      	b.n	80069f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d044      	beq.n	80069f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696a:	f7fd fed1 	bl	8004710 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	429a      	cmp	r2, r3
 8006978:	d302      	bcc.n	8006980 <I2C_WaitOnFlagUntilTimeout+0x30>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d139      	bne.n	80069f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	0c1b      	lsrs	r3, r3, #16
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b01      	cmp	r3, #1
 8006988:	d10d      	bne.n	80069a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	43da      	mvns	r2, r3
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4013      	ands	r3, r2
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	bf0c      	ite	eq
 800699c:	2301      	moveq	r3, #1
 800699e:	2300      	movne	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	e00c      	b.n	80069c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	43da      	mvns	r2, r3
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4013      	ands	r3, r2
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bf0c      	ite	eq
 80069b8:	2301      	moveq	r3, #1
 80069ba:	2300      	movne	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d116      	bne.n	80069f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e0:	f043 0220 	orr.w	r2, r3, #32
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e023      	b.n	8006a3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	0c1b      	lsrs	r3, r3, #16
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d10d      	bne.n	8006a1a <I2C_WaitOnFlagUntilTimeout+0xca>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	43da      	mvns	r2, r3
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	bf0c      	ite	eq
 8006a10:	2301      	moveq	r3, #1
 8006a12:	2300      	movne	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	461a      	mov	r2, r3
 8006a18:	e00c      	b.n	8006a34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	43da      	mvns	r2, r3
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	4013      	ands	r3, r2
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2301      	moveq	r3, #1
 8006a2e:	2300      	movne	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	461a      	mov	r2, r3
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d093      	beq.n	8006962 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a52:	e071      	b.n	8006b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a62:	d123      	bne.n	8006aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a98:	f043 0204 	orr.w	r2, r3, #4
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e067      	b.n	8006b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab2:	d041      	beq.n	8006b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab4:	f7fd fe2c 	bl	8004710 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d302      	bcc.n	8006aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d136      	bne.n	8006b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	0c1b      	lsrs	r3, r3, #16
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d10c      	bne.n	8006aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	43da      	mvns	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	bf14      	ite	ne
 8006ae6:	2301      	movne	r3, #1
 8006ae8:	2300      	moveq	r3, #0
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	e00b      	b.n	8006b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	43da      	mvns	r2, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4013      	ands	r3, r2
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bf14      	ite	ne
 8006b00:	2301      	movne	r3, #1
 8006b02:	2300      	moveq	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d016      	beq.n	8006b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b24:	f043 0220 	orr.w	r2, r3, #32
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e021      	b.n	8006b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	0c1b      	lsrs	r3, r3, #16
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d10c      	bne.n	8006b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	43da      	mvns	r2, r3
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	bf14      	ite	ne
 8006b54:	2301      	movne	r3, #1
 8006b56:	2300      	moveq	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	e00b      	b.n	8006b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	43da      	mvns	r2, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	bf14      	ite	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	2300      	moveq	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f47f af6d 	bne.w	8006a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b90:	e034      	b.n	8006bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f8e3 	bl	8006d5e <I2C_IsAcknowledgeFailed>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e034      	b.n	8006c0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba8:	d028      	beq.n	8006bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006baa:	f7fd fdb1 	bl	8004710 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d302      	bcc.n	8006bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d11d      	bne.n	8006bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bca:	2b80      	cmp	r3, #128	@ 0x80
 8006bcc:	d016      	beq.n	8006bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be8:	f043 0220 	orr.w	r2, r3, #32
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e007      	b.n	8006c0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c06:	2b80      	cmp	r3, #128	@ 0x80
 8006c08:	d1c3      	bne.n	8006b92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c20:	e034      	b.n	8006c8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f89b 	bl	8006d5e <I2C_IsAcknowledgeFailed>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e034      	b.n	8006c9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d028      	beq.n	8006c8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c3a:	f7fd fd69 	bl	8004710 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d302      	bcc.n	8006c50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d11d      	bne.n	8006c8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d016      	beq.n	8006c8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c78:	f043 0220 	orr.w	r2, r3, #32
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e007      	b.n	8006c9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	f003 0304 	and.w	r3, r3, #4
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d1c3      	bne.n	8006c22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cb0:	e049      	b.n	8006d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d119      	bne.n	8006cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f06f 0210 	mvn.w	r2, #16
 8006cc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e030      	b.n	8006d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf4:	f7fd fd0c 	bl	8004710 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d302      	bcc.n	8006d0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d11d      	bne.n	8006d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d14:	2b40      	cmp	r3, #64	@ 0x40
 8006d16:	d016      	beq.n	8006d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d32:	f043 0220 	orr.w	r2, r3, #32
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e007      	b.n	8006d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d50:	2b40      	cmp	r3, #64	@ 0x40
 8006d52:	d1ae      	bne.n	8006cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d74:	d11b      	bne.n	8006dae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d7e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9a:	f043 0204 	orr.w	r2, r3, #4
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e267      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d075      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006dda:	4b88      	ldr	r3, [pc, #544]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 030c 	and.w	r3, r3, #12
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d00c      	beq.n	8006e00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006de6:	4b85      	ldr	r3, [pc, #532]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d112      	bne.n	8006e18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006df2:	4b82      	ldr	r3, [pc, #520]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dfe:	d10b      	bne.n	8006e18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e00:	4b7e      	ldr	r3, [pc, #504]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d05b      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x108>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d157      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e242      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e20:	d106      	bne.n	8006e30 <HAL_RCC_OscConfig+0x74>
 8006e22:	4b76      	ldr	r3, [pc, #472]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a75      	ldr	r2, [pc, #468]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	e01d      	b.n	8006e6c <HAL_RCC_OscConfig+0xb0>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e38:	d10c      	bne.n	8006e54 <HAL_RCC_OscConfig+0x98>
 8006e3a:	4b70      	ldr	r3, [pc, #448]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a6f      	ldr	r2, [pc, #444]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	4b6d      	ldr	r3, [pc, #436]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a6c      	ldr	r2, [pc, #432]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	e00b      	b.n	8006e6c <HAL_RCC_OscConfig+0xb0>
 8006e54:	4b69      	ldr	r3, [pc, #420]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a68      	ldr	r2, [pc, #416]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	4b66      	ldr	r3, [pc, #408]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a65      	ldr	r2, [pc, #404]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006e66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d013      	beq.n	8006e9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e74:	f7fd fc4c 	bl	8004710 <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e7c:	f7fd fc48 	bl	8004710 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b64      	cmp	r3, #100	@ 0x64
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e207      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0f0      	beq.n	8006e7c <HAL_RCC_OscConfig+0xc0>
 8006e9a:	e014      	b.n	8006ec6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e9c:	f7fd fc38 	bl	8004710 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ea4:	f7fd fc34 	bl	8004710 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b64      	cmp	r3, #100	@ 0x64
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e1f3      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eb6:	4b51      	ldr	r3, [pc, #324]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f0      	bne.n	8006ea4 <HAL_RCC_OscConfig+0xe8>
 8006ec2:	e000      	b.n	8006ec6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d063      	beq.n	8006f9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f003 030c 	and.w	r3, r3, #12
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00b      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ede:	4b47      	ldr	r3, [pc, #284]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d11c      	bne.n	8006f24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eea:	4b44      	ldr	r3, [pc, #272]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d116      	bne.n	8006f24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ef6:	4b41      	ldr	r3, [pc, #260]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d005      	beq.n	8006f0e <HAL_RCC_OscConfig+0x152>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d001      	beq.n	8006f0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e1c7      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4937      	ldr	r1, [pc, #220]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f22:	e03a      	b.n	8006f9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d020      	beq.n	8006f6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f2c:	4b34      	ldr	r3, [pc, #208]	@ (8007000 <HAL_RCC_OscConfig+0x244>)
 8006f2e:	2201      	movs	r2, #1
 8006f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f32:	f7fd fbed 	bl	8004710 <HAL_GetTick>
 8006f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f38:	e008      	b.n	8006f4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f3a:	f7fd fbe9 	bl	8004710 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d901      	bls.n	8006f4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e1a8      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0f0      	beq.n	8006f3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f58:	4b28      	ldr	r3, [pc, #160]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	4925      	ldr	r1, [pc, #148]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	600b      	str	r3, [r1, #0]
 8006f6c:	e015      	b.n	8006f9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f6e:	4b24      	ldr	r3, [pc, #144]	@ (8007000 <HAL_RCC_OscConfig+0x244>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f74:	f7fd fbcc 	bl	8004710 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f7c:	f7fd fbc8 	bl	8004710 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e187      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d036      	beq.n	8007014 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d016      	beq.n	8006fdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fae:	4b15      	ldr	r3, [pc, #84]	@ (8007004 <HAL_RCC_OscConfig+0x248>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb4:	f7fd fbac 	bl	8004710 <HAL_GetTick>
 8006fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fbc:	f7fd fba8 	bl	8004710 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e167      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fce:	4b0b      	ldr	r3, [pc, #44]	@ (8006ffc <HAL_RCC_OscConfig+0x240>)
 8006fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0f0      	beq.n	8006fbc <HAL_RCC_OscConfig+0x200>
 8006fda:	e01b      	b.n	8007014 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fdc:	4b09      	ldr	r3, [pc, #36]	@ (8007004 <HAL_RCC_OscConfig+0x248>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fe2:	f7fd fb95 	bl	8004710 <HAL_GetTick>
 8006fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fe8:	e00e      	b.n	8007008 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fea:	f7fd fb91 	bl	8004710 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d907      	bls.n	8007008 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e150      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
 8006ffc:	40023800 	.word	0x40023800
 8007000:	42470000 	.word	0x42470000
 8007004:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007008:	4b88      	ldr	r3, [pc, #544]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 800700a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1ea      	bne.n	8006fea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8097 	beq.w	8007150 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007022:	2300      	movs	r3, #0
 8007024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007026:	4b81      	ldr	r3, [pc, #516]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 8007028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10f      	bne.n	8007052 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007032:	2300      	movs	r3, #0
 8007034:	60bb      	str	r3, [r7, #8]
 8007036:	4b7d      	ldr	r3, [pc, #500]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 8007038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703a:	4a7c      	ldr	r2, [pc, #496]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 800703c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007040:	6413      	str	r3, [r2, #64]	@ 0x40
 8007042:	4b7a      	ldr	r3, [pc, #488]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 8007044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800704a:	60bb      	str	r3, [r7, #8]
 800704c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800704e:	2301      	movs	r3, #1
 8007050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007052:	4b77      	ldr	r3, [pc, #476]	@ (8007230 <HAL_RCC_OscConfig+0x474>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800705a:	2b00      	cmp	r3, #0
 800705c:	d118      	bne.n	8007090 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800705e:	4b74      	ldr	r3, [pc, #464]	@ (8007230 <HAL_RCC_OscConfig+0x474>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a73      	ldr	r2, [pc, #460]	@ (8007230 <HAL_RCC_OscConfig+0x474>)
 8007064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800706a:	f7fd fb51 	bl	8004710 <HAL_GetTick>
 800706e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007070:	e008      	b.n	8007084 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007072:	f7fd fb4d 	bl	8004710 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d901      	bls.n	8007084 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e10c      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007084:	4b6a      	ldr	r3, [pc, #424]	@ (8007230 <HAL_RCC_OscConfig+0x474>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0f0      	beq.n	8007072 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d106      	bne.n	80070a6 <HAL_RCC_OscConfig+0x2ea>
 8007098:	4b64      	ldr	r3, [pc, #400]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 800709a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800709c:	4a63      	ldr	r2, [pc, #396]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80070a4:	e01c      	b.n	80070e0 <HAL_RCC_OscConfig+0x324>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	2b05      	cmp	r3, #5
 80070ac:	d10c      	bne.n	80070c8 <HAL_RCC_OscConfig+0x30c>
 80070ae:	4b5f      	ldr	r3, [pc, #380]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 80070b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b2:	4a5e      	ldr	r2, [pc, #376]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 80070b4:	f043 0304 	orr.w	r3, r3, #4
 80070b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80070ba:	4b5c      	ldr	r3, [pc, #368]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 80070bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070be:	4a5b      	ldr	r2, [pc, #364]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 80070c0:	f043 0301 	orr.w	r3, r3, #1
 80070c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80070c6:	e00b      	b.n	80070e0 <HAL_RCC_OscConfig+0x324>
 80070c8:	4b58      	ldr	r3, [pc, #352]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 80070ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070cc:	4a57      	ldr	r2, [pc, #348]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 80070ce:	f023 0301 	bic.w	r3, r3, #1
 80070d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80070d4:	4b55      	ldr	r3, [pc, #340]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 80070d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d8:	4a54      	ldr	r2, [pc, #336]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 80070da:	f023 0304 	bic.w	r3, r3, #4
 80070de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d015      	beq.n	8007114 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e8:	f7fd fb12 	bl	8004710 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ee:	e00a      	b.n	8007106 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070f0:	f7fd fb0e 	bl	8004710 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070fe:	4293      	cmp	r3, r2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e0cb      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007106:	4b49      	ldr	r3, [pc, #292]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 8007108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0ee      	beq.n	80070f0 <HAL_RCC_OscConfig+0x334>
 8007112:	e014      	b.n	800713e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007114:	f7fd fafc 	bl	8004710 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800711a:	e00a      	b.n	8007132 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800711c:	f7fd faf8 	bl	8004710 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800712a:	4293      	cmp	r3, r2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e0b5      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007132:	4b3e      	ldr	r3, [pc, #248]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 8007134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1ee      	bne.n	800711c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800713e:	7dfb      	ldrb	r3, [r7, #23]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d105      	bne.n	8007150 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007144:	4b39      	ldr	r3, [pc, #228]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 8007146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007148:	4a38      	ldr	r2, [pc, #224]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 800714a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800714e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 80a1 	beq.w	800729c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800715a:	4b34      	ldr	r3, [pc, #208]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 030c 	and.w	r3, r3, #12
 8007162:	2b08      	cmp	r3, #8
 8007164:	d05c      	beq.n	8007220 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d141      	bne.n	80071f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800716e:	4b31      	ldr	r3, [pc, #196]	@ (8007234 <HAL_RCC_OscConfig+0x478>)
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007174:	f7fd facc 	bl	8004710 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800717c:	f7fd fac8 	bl	8004710 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e087      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800718e:	4b27      	ldr	r3, [pc, #156]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1f0      	bne.n	800717c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69da      	ldr	r2, [r3, #28]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a8:	019b      	lsls	r3, r3, #6
 80071aa:	431a      	orrs	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b0:	085b      	lsrs	r3, r3, #1
 80071b2:	3b01      	subs	r3, #1
 80071b4:	041b      	lsls	r3, r3, #16
 80071b6:	431a      	orrs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071bc:	061b      	lsls	r3, r3, #24
 80071be:	491b      	ldr	r1, [pc, #108]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007234 <HAL_RCC_OscConfig+0x478>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ca:	f7fd faa1 	bl	8004710 <HAL_GetTick>
 80071ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071d0:	e008      	b.n	80071e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d2:	f7fd fa9d 	bl	8004710 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e05c      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071e4:	4b11      	ldr	r3, [pc, #68]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0f0      	beq.n	80071d2 <HAL_RCC_OscConfig+0x416>
 80071f0:	e054      	b.n	800729c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f2:	4b10      	ldr	r3, [pc, #64]	@ (8007234 <HAL_RCC_OscConfig+0x478>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f8:	f7fd fa8a 	bl	8004710 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007200:	f7fd fa86 	bl	8004710 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e045      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007212:	4b06      	ldr	r3, [pc, #24]	@ (800722c <HAL_RCC_OscConfig+0x470>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1f0      	bne.n	8007200 <HAL_RCC_OscConfig+0x444>
 800721e:	e03d      	b.n	800729c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d107      	bne.n	8007238 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e038      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
 800722c:	40023800 	.word	0x40023800
 8007230:	40007000 	.word	0x40007000
 8007234:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007238:	4b1b      	ldr	r3, [pc, #108]	@ (80072a8 <HAL_RCC_OscConfig+0x4ec>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d028      	beq.n	8007298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007250:	429a      	cmp	r2, r3
 8007252:	d121      	bne.n	8007298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800725e:	429a      	cmp	r2, r3
 8007260:	d11a      	bne.n	8007298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007268:	4013      	ands	r3, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800726e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007270:	4293      	cmp	r3, r2
 8007272:	d111      	bne.n	8007298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727e:	085b      	lsrs	r3, r3, #1
 8007280:	3b01      	subs	r3, #1
 8007282:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007284:	429a      	cmp	r2, r3
 8007286:	d107      	bne.n	8007298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007292:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007294:	429a      	cmp	r2, r3
 8007296:	d001      	beq.n	800729c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	40023800 	.word	0x40023800

080072ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e0cc      	b.n	800745a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072c0:	4b68      	ldr	r3, [pc, #416]	@ (8007464 <HAL_RCC_ClockConfig+0x1b8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d90c      	bls.n	80072e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ce:	4b65      	ldr	r3, [pc, #404]	@ (8007464 <HAL_RCC_ClockConfig+0x1b8>)
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072d6:	4b63      	ldr	r3, [pc, #396]	@ (8007464 <HAL_RCC_ClockConfig+0x1b8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d001      	beq.n	80072e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e0b8      	b.n	800745a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d020      	beq.n	8007336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d005      	beq.n	800730c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007300:	4b59      	ldr	r3, [pc, #356]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	4a58      	ldr	r2, [pc, #352]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 8007306:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800730a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007318:	4b53      	ldr	r3, [pc, #332]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	4a52      	ldr	r2, [pc, #328]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 800731e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007324:	4b50      	ldr	r3, [pc, #320]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	494d      	ldr	r1, [pc, #308]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 8007332:	4313      	orrs	r3, r2
 8007334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d044      	beq.n	80073cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d107      	bne.n	800735a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800734a:	4b47      	ldr	r3, [pc, #284]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d119      	bne.n	800738a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e07f      	b.n	800745a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2b02      	cmp	r3, #2
 8007360:	d003      	beq.n	800736a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007366:	2b03      	cmp	r3, #3
 8007368:	d107      	bne.n	800737a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800736a:	4b3f      	ldr	r3, [pc, #252]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d109      	bne.n	800738a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e06f      	b.n	800745a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800737a:	4b3b      	ldr	r3, [pc, #236]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e067      	b.n	800745a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800738a:	4b37      	ldr	r3, [pc, #220]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f023 0203 	bic.w	r2, r3, #3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	4934      	ldr	r1, [pc, #208]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 8007398:	4313      	orrs	r3, r2
 800739a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800739c:	f7fd f9b8 	bl	8004710 <HAL_GetTick>
 80073a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073a2:	e00a      	b.n	80073ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073a4:	f7fd f9b4 	bl	8004710 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e04f      	b.n	800745a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 020c 	and.w	r2, r3, #12
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d1eb      	bne.n	80073a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073cc:	4b25      	ldr	r3, [pc, #148]	@ (8007464 <HAL_RCC_ClockConfig+0x1b8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d20c      	bcs.n	80073f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073da:	4b22      	ldr	r3, [pc, #136]	@ (8007464 <HAL_RCC_ClockConfig+0x1b8>)
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073e2:	4b20      	ldr	r3, [pc, #128]	@ (8007464 <HAL_RCC_ClockConfig+0x1b8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d001      	beq.n	80073f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e032      	b.n	800745a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d008      	beq.n	8007412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007400:	4b19      	ldr	r3, [pc, #100]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	4916      	ldr	r1, [pc, #88]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 800740e:	4313      	orrs	r3, r2
 8007410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0308 	and.w	r3, r3, #8
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800741e:	4b12      	ldr	r3, [pc, #72]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	490e      	ldr	r1, [pc, #56]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 800742e:	4313      	orrs	r3, r2
 8007430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007432:	f000 f821 	bl	8007478 <HAL_RCC_GetSysClockFreq>
 8007436:	4602      	mov	r2, r0
 8007438:	4b0b      	ldr	r3, [pc, #44]	@ (8007468 <HAL_RCC_ClockConfig+0x1bc>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	091b      	lsrs	r3, r3, #4
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	490a      	ldr	r1, [pc, #40]	@ (800746c <HAL_RCC_ClockConfig+0x1c0>)
 8007444:	5ccb      	ldrb	r3, [r1, r3]
 8007446:	fa22 f303 	lsr.w	r3, r2, r3
 800744a:	4a09      	ldr	r2, [pc, #36]	@ (8007470 <HAL_RCC_ClockConfig+0x1c4>)
 800744c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800744e:	4b09      	ldr	r3, [pc, #36]	@ (8007474 <HAL_RCC_ClockConfig+0x1c8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4618      	mov	r0, r3
 8007454:	f7fc fe9a 	bl	800418c <HAL_InitTick>

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	40023c00 	.word	0x40023c00
 8007468:	40023800 	.word	0x40023800
 800746c:	08012f08 	.word	0x08012f08
 8007470:	20000004 	.word	0x20000004
 8007474:	20000008 	.word	0x20000008

08007478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800747c:	b094      	sub	sp, #80	@ 0x50
 800747e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007490:	4b79      	ldr	r3, [pc, #484]	@ (8007678 <HAL_RCC_GetSysClockFreq+0x200>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f003 030c 	and.w	r3, r3, #12
 8007498:	2b08      	cmp	r3, #8
 800749a:	d00d      	beq.n	80074b8 <HAL_RCC_GetSysClockFreq+0x40>
 800749c:	2b08      	cmp	r3, #8
 800749e:	f200 80e1 	bhi.w	8007664 <HAL_RCC_GetSysClockFreq+0x1ec>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <HAL_RCC_GetSysClockFreq+0x34>
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d003      	beq.n	80074b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80074aa:	e0db      	b.n	8007664 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074ac:	4b73      	ldr	r3, [pc, #460]	@ (800767c <HAL_RCC_GetSysClockFreq+0x204>)
 80074ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074b0:	e0db      	b.n	800766a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074b2:	4b73      	ldr	r3, [pc, #460]	@ (8007680 <HAL_RCC_GetSysClockFreq+0x208>)
 80074b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074b6:	e0d8      	b.n	800766a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074b8:	4b6f      	ldr	r3, [pc, #444]	@ (8007678 <HAL_RCC_GetSysClockFreq+0x200>)
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074c2:	4b6d      	ldr	r3, [pc, #436]	@ (8007678 <HAL_RCC_GetSysClockFreq+0x200>)
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d063      	beq.n	8007596 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074ce:	4b6a      	ldr	r3, [pc, #424]	@ (8007678 <HAL_RCC_GetSysClockFreq+0x200>)
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	099b      	lsrs	r3, r3, #6
 80074d4:	2200      	movs	r2, #0
 80074d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80074da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80074e2:	2300      	movs	r3, #0
 80074e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80074ea:	4622      	mov	r2, r4
 80074ec:	462b      	mov	r3, r5
 80074ee:	f04f 0000 	mov.w	r0, #0
 80074f2:	f04f 0100 	mov.w	r1, #0
 80074f6:	0159      	lsls	r1, r3, #5
 80074f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074fc:	0150      	lsls	r0, r2, #5
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4621      	mov	r1, r4
 8007504:	1a51      	subs	r1, r2, r1
 8007506:	6139      	str	r1, [r7, #16]
 8007508:	4629      	mov	r1, r5
 800750a:	eb63 0301 	sbc.w	r3, r3, r1
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800751c:	4659      	mov	r1, fp
 800751e:	018b      	lsls	r3, r1, #6
 8007520:	4651      	mov	r1, sl
 8007522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007526:	4651      	mov	r1, sl
 8007528:	018a      	lsls	r2, r1, #6
 800752a:	4651      	mov	r1, sl
 800752c:	ebb2 0801 	subs.w	r8, r2, r1
 8007530:	4659      	mov	r1, fp
 8007532:	eb63 0901 	sbc.w	r9, r3, r1
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	f04f 0300 	mov.w	r3, #0
 800753e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800754a:	4690      	mov	r8, r2
 800754c:	4699      	mov	r9, r3
 800754e:	4623      	mov	r3, r4
 8007550:	eb18 0303 	adds.w	r3, r8, r3
 8007554:	60bb      	str	r3, [r7, #8]
 8007556:	462b      	mov	r3, r5
 8007558:	eb49 0303 	adc.w	r3, r9, r3
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	f04f 0200 	mov.w	r2, #0
 8007562:	f04f 0300 	mov.w	r3, #0
 8007566:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800756a:	4629      	mov	r1, r5
 800756c:	024b      	lsls	r3, r1, #9
 800756e:	4621      	mov	r1, r4
 8007570:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007574:	4621      	mov	r1, r4
 8007576:	024a      	lsls	r2, r1, #9
 8007578:	4610      	mov	r0, r2
 800757a:	4619      	mov	r1, r3
 800757c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800757e:	2200      	movs	r2, #0
 8007580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007582:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007584:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007588:	f7f9 fbe6 	bl	8000d58 <__aeabi_uldivmod>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4613      	mov	r3, r2
 8007592:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007594:	e058      	b.n	8007648 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007596:	4b38      	ldr	r3, [pc, #224]	@ (8007678 <HAL_RCC_GetSysClockFreq+0x200>)
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	099b      	lsrs	r3, r3, #6
 800759c:	2200      	movs	r2, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	4611      	mov	r1, r2
 80075a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80075a6:	623b      	str	r3, [r7, #32]
 80075a8:	2300      	movs	r3, #0
 80075aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80075b0:	4642      	mov	r2, r8
 80075b2:	464b      	mov	r3, r9
 80075b4:	f04f 0000 	mov.w	r0, #0
 80075b8:	f04f 0100 	mov.w	r1, #0
 80075bc:	0159      	lsls	r1, r3, #5
 80075be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075c2:	0150      	lsls	r0, r2, #5
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4641      	mov	r1, r8
 80075ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80075ce:	4649      	mov	r1, r9
 80075d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80075e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80075e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80075e8:	ebb2 040a 	subs.w	r4, r2, sl
 80075ec:	eb63 050b 	sbc.w	r5, r3, fp
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	00eb      	lsls	r3, r5, #3
 80075fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075fe:	00e2      	lsls	r2, r4, #3
 8007600:	4614      	mov	r4, r2
 8007602:	461d      	mov	r5, r3
 8007604:	4643      	mov	r3, r8
 8007606:	18e3      	adds	r3, r4, r3
 8007608:	603b      	str	r3, [r7, #0]
 800760a:	464b      	mov	r3, r9
 800760c:	eb45 0303 	adc.w	r3, r5, r3
 8007610:	607b      	str	r3, [r7, #4]
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	f04f 0300 	mov.w	r3, #0
 800761a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800761e:	4629      	mov	r1, r5
 8007620:	028b      	lsls	r3, r1, #10
 8007622:	4621      	mov	r1, r4
 8007624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007628:	4621      	mov	r1, r4
 800762a:	028a      	lsls	r2, r1, #10
 800762c:	4610      	mov	r0, r2
 800762e:	4619      	mov	r1, r3
 8007630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007632:	2200      	movs	r2, #0
 8007634:	61bb      	str	r3, [r7, #24]
 8007636:	61fa      	str	r2, [r7, #28]
 8007638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800763c:	f7f9 fb8c 	bl	8000d58 <__aeabi_uldivmod>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4613      	mov	r3, r2
 8007646:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007648:	4b0b      	ldr	r3, [pc, #44]	@ (8007678 <HAL_RCC_GetSysClockFreq+0x200>)
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	0c1b      	lsrs	r3, r3, #16
 800764e:	f003 0303 	and.w	r3, r3, #3
 8007652:	3301      	adds	r3, #1
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007658:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800765a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800765c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007660:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007662:	e002      	b.n	800766a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007664:	4b05      	ldr	r3, [pc, #20]	@ (800767c <HAL_RCC_GetSysClockFreq+0x204>)
 8007666:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800766a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800766c:	4618      	mov	r0, r3
 800766e:	3750      	adds	r7, #80	@ 0x50
 8007670:	46bd      	mov	sp, r7
 8007672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007676:	bf00      	nop
 8007678:	40023800 	.word	0x40023800
 800767c:	00f42400 	.word	0x00f42400
 8007680:	007a1200 	.word	0x007a1200

08007684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007688:	4b03      	ldr	r3, [pc, #12]	@ (8007698 <HAL_RCC_GetHCLKFreq+0x14>)
 800768a:	681b      	ldr	r3, [r3, #0]
}
 800768c:	4618      	mov	r0, r3
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	20000004 	.word	0x20000004

0800769c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076a0:	f7ff fff0 	bl	8007684 <HAL_RCC_GetHCLKFreq>
 80076a4:	4602      	mov	r2, r0
 80076a6:	4b05      	ldr	r3, [pc, #20]	@ (80076bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	0a9b      	lsrs	r3, r3, #10
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	4903      	ldr	r1, [pc, #12]	@ (80076c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076b2:	5ccb      	ldrb	r3, [r1, r3]
 80076b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40023800 	.word	0x40023800
 80076c0:	08012f18 	.word	0x08012f18

080076c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80076c8:	f7ff ffdc 	bl	8007684 <HAL_RCC_GetHCLKFreq>
 80076cc:	4602      	mov	r2, r0
 80076ce:	4b05      	ldr	r3, [pc, #20]	@ (80076e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	0b5b      	lsrs	r3, r3, #13
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	4903      	ldr	r1, [pc, #12]	@ (80076e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076da:	5ccb      	ldrb	r3, [r1, r3]
 80076dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	40023800 	.word	0x40023800
 80076e8:	08012f18 	.word	0x08012f18

080076ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	220f      	movs	r2, #15
 80076fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80076fc:	4b12      	ldr	r3, [pc, #72]	@ (8007748 <HAL_RCC_GetClockConfig+0x5c>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 0203 	and.w	r2, r3, #3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007708:	4b0f      	ldr	r3, [pc, #60]	@ (8007748 <HAL_RCC_GetClockConfig+0x5c>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007714:	4b0c      	ldr	r3, [pc, #48]	@ (8007748 <HAL_RCC_GetClockConfig+0x5c>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007720:	4b09      	ldr	r3, [pc, #36]	@ (8007748 <HAL_RCC_GetClockConfig+0x5c>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	08db      	lsrs	r3, r3, #3
 8007726:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800772e:	4b07      	ldr	r3, [pc, #28]	@ (800774c <HAL_RCC_GetClockConfig+0x60>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0207 	and.w	r2, r3, #7
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	601a      	str	r2, [r3, #0]
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	40023800 	.word	0x40023800
 800774c:	40023c00 	.word	0x40023c00

08007750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e041      	b.n	80077e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d106      	bne.n	800777c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7fc fed8 	bl	800452c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3304      	adds	r3, #4
 800778c:	4619      	mov	r1, r3
 800778e:	4610      	mov	r0, r2
 8007790:	f000 faca 	bl	8007d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	d001      	beq.n	8007808 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e03c      	b.n	8007882 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a1e      	ldr	r2, [pc, #120]	@ (8007890 <HAL_TIM_Base_Start+0xa0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d018      	beq.n	800784c <HAL_TIM_Base_Start+0x5c>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007822:	d013      	beq.n	800784c <HAL_TIM_Base_Start+0x5c>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a1a      	ldr	r2, [pc, #104]	@ (8007894 <HAL_TIM_Base_Start+0xa4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d00e      	beq.n	800784c <HAL_TIM_Base_Start+0x5c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a19      	ldr	r2, [pc, #100]	@ (8007898 <HAL_TIM_Base_Start+0xa8>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d009      	beq.n	800784c <HAL_TIM_Base_Start+0x5c>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a17      	ldr	r2, [pc, #92]	@ (800789c <HAL_TIM_Base_Start+0xac>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d004      	beq.n	800784c <HAL_TIM_Base_Start+0x5c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a16      	ldr	r2, [pc, #88]	@ (80078a0 <HAL_TIM_Base_Start+0xb0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d111      	bne.n	8007870 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b06      	cmp	r3, #6
 800785c:	d010      	beq.n	8007880 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f042 0201 	orr.w	r2, r2, #1
 800786c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800786e:	e007      	b.n	8007880 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	40010000 	.word	0x40010000
 8007894:	40000400 	.word	0x40000400
 8007898:	40000800 	.word	0x40000800
 800789c:	40000c00 	.word	0x40000c00
 80078a0:	40014000 	.word	0x40014000

080078a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d001      	beq.n	80078bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e044      	b.n	8007946 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a1e      	ldr	r2, [pc, #120]	@ (8007954 <HAL_TIM_Base_Start_IT+0xb0>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0x6c>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e6:	d013      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0x6c>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007958 <HAL_TIM_Base_Start_IT+0xb4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0x6c>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a19      	ldr	r2, [pc, #100]	@ (800795c <HAL_TIM_Base_Start_IT+0xb8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0x6c>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a17      	ldr	r2, [pc, #92]	@ (8007960 <HAL_TIM_Base_Start_IT+0xbc>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0x6c>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a16      	ldr	r2, [pc, #88]	@ (8007964 <HAL_TIM_Base_Start_IT+0xc0>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d111      	bne.n	8007934 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b06      	cmp	r3, #6
 8007920:	d010      	beq.n	8007944 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f042 0201 	orr.w	r2, r2, #1
 8007930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007932:	e007      	b.n	8007944 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0201 	orr.w	r2, r2, #1
 8007942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	40010000 	.word	0x40010000
 8007958:	40000400 	.word	0x40000400
 800795c:	40000800 	.word	0x40000800
 8007960:	40000c00 	.word	0x40000c00
 8007964:	40014000 	.word	0x40014000

08007968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d020      	beq.n	80079cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01b      	beq.n	80079cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f06f 0202 	mvn.w	r2, #2
 800799c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f999 	bl	8007cea <HAL_TIM_IC_CaptureCallback>
 80079b8:	e005      	b.n	80079c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f98b 	bl	8007cd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f99c 	bl	8007cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f003 0304 	and.w	r3, r3, #4
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d020      	beq.n	8007a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01b      	beq.n	8007a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f06f 0204 	mvn.w	r2, #4
 80079e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2202      	movs	r2, #2
 80079ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f973 	bl	8007cea <HAL_TIM_IC_CaptureCallback>
 8007a04:	e005      	b.n	8007a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f965 	bl	8007cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f976 	bl	8007cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d020      	beq.n	8007a64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d01b      	beq.n	8007a64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f06f 0208 	mvn.w	r2, #8
 8007a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2204      	movs	r2, #4
 8007a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f94d 	bl	8007cea <HAL_TIM_IC_CaptureCallback>
 8007a50:	e005      	b.n	8007a5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f93f 	bl	8007cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f950 	bl	8007cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d020      	beq.n	8007ab0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f003 0310 	and.w	r3, r3, #16
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01b      	beq.n	8007ab0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f06f 0210 	mvn.w	r2, #16
 8007a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2208      	movs	r2, #8
 8007a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f927 	bl	8007cea <HAL_TIM_IC_CaptureCallback>
 8007a9c:	e005      	b.n	8007aaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f919 	bl	8007cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f92a 	bl	8007cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00c      	beq.n	8007ad4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d007      	beq.n	8007ad4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f06f 0201 	mvn.w	r2, #1
 8007acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fa fe78 	bl	80027c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00c      	beq.n	8007af8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d007      	beq.n	8007af8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fab6 	bl	8008064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00c      	beq.n	8007b1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d007      	beq.n	8007b1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f8fb 	bl	8007d12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f003 0320 	and.w	r3, r3, #32
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00c      	beq.n	8007b40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d007      	beq.n	8007b40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0220 	mvn.w	r2, #32
 8007b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa88 	bl	8008050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d101      	bne.n	8007b64 <HAL_TIM_ConfigClockSource+0x1c>
 8007b60:	2302      	movs	r3, #2
 8007b62:	e0b4      	b.n	8007cce <HAL_TIM_ConfigClockSource+0x186>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b9c:	d03e      	beq.n	8007c1c <HAL_TIM_ConfigClockSource+0xd4>
 8007b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ba2:	f200 8087 	bhi.w	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007baa:	f000 8086 	beq.w	8007cba <HAL_TIM_ConfigClockSource+0x172>
 8007bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb2:	d87f      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb4:	2b70      	cmp	r3, #112	@ 0x70
 8007bb6:	d01a      	beq.n	8007bee <HAL_TIM_ConfigClockSource+0xa6>
 8007bb8:	2b70      	cmp	r3, #112	@ 0x70
 8007bba:	d87b      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007bbc:	2b60      	cmp	r3, #96	@ 0x60
 8007bbe:	d050      	beq.n	8007c62 <HAL_TIM_ConfigClockSource+0x11a>
 8007bc0:	2b60      	cmp	r3, #96	@ 0x60
 8007bc2:	d877      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc4:	2b50      	cmp	r3, #80	@ 0x50
 8007bc6:	d03c      	beq.n	8007c42 <HAL_TIM_ConfigClockSource+0xfa>
 8007bc8:	2b50      	cmp	r3, #80	@ 0x50
 8007bca:	d873      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007bcc:	2b40      	cmp	r3, #64	@ 0x40
 8007bce:	d058      	beq.n	8007c82 <HAL_TIM_ConfigClockSource+0x13a>
 8007bd0:	2b40      	cmp	r3, #64	@ 0x40
 8007bd2:	d86f      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd4:	2b30      	cmp	r3, #48	@ 0x30
 8007bd6:	d064      	beq.n	8007ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8007bd8:	2b30      	cmp	r3, #48	@ 0x30
 8007bda:	d86b      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007bdc:	2b20      	cmp	r3, #32
 8007bde:	d060      	beq.n	8007ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	d867      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d05c      	beq.n	8007ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8007be8:	2b10      	cmp	r3, #16
 8007bea:	d05a      	beq.n	8007ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8007bec:	e062      	b.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bfe:	f000 f999 	bl	8007f34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	609a      	str	r2, [r3, #8]
      break;
 8007c1a:	e04f      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c2c:	f000 f982 	bl	8007f34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c3e:	609a      	str	r2, [r3, #8]
      break;
 8007c40:	e03c      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f000 f8f6 	bl	8007e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2150      	movs	r1, #80	@ 0x50
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 f94f 	bl	8007efe <TIM_ITRx_SetConfig>
      break;
 8007c60:	e02c      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f000 f915 	bl	8007e9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2160      	movs	r1, #96	@ 0x60
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 f93f 	bl	8007efe <TIM_ITRx_SetConfig>
      break;
 8007c80:	e01c      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f000 f8d6 	bl	8007e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2140      	movs	r1, #64	@ 0x40
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 f92f 	bl	8007efe <TIM_ITRx_SetConfig>
      break;
 8007ca0:	e00c      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4619      	mov	r1, r3
 8007cac:	4610      	mov	r0, r2
 8007cae:	f000 f926 	bl	8007efe <TIM_ITRx_SetConfig>
      break;
 8007cb2:	e003      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb8:	e000      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a3a      	ldr	r2, [pc, #232]	@ (8007e24 <TIM_Base_SetConfig+0xfc>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00f      	beq.n	8007d60 <TIM_Base_SetConfig+0x38>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d46:	d00b      	beq.n	8007d60 <TIM_Base_SetConfig+0x38>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a37      	ldr	r2, [pc, #220]	@ (8007e28 <TIM_Base_SetConfig+0x100>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d007      	beq.n	8007d60 <TIM_Base_SetConfig+0x38>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a36      	ldr	r2, [pc, #216]	@ (8007e2c <TIM_Base_SetConfig+0x104>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d003      	beq.n	8007d60 <TIM_Base_SetConfig+0x38>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a35      	ldr	r2, [pc, #212]	@ (8007e30 <TIM_Base_SetConfig+0x108>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d108      	bne.n	8007d72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a2b      	ldr	r2, [pc, #172]	@ (8007e24 <TIM_Base_SetConfig+0xfc>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d01b      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d80:	d017      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a28      	ldr	r2, [pc, #160]	@ (8007e28 <TIM_Base_SetConfig+0x100>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a27      	ldr	r2, [pc, #156]	@ (8007e2c <TIM_Base_SetConfig+0x104>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00f      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a26      	ldr	r2, [pc, #152]	@ (8007e30 <TIM_Base_SetConfig+0x108>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00b      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a25      	ldr	r2, [pc, #148]	@ (8007e34 <TIM_Base_SetConfig+0x10c>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d007      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a24      	ldr	r2, [pc, #144]	@ (8007e38 <TIM_Base_SetConfig+0x110>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d003      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a23      	ldr	r2, [pc, #140]	@ (8007e3c <TIM_Base_SetConfig+0x114>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d108      	bne.n	8007dc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a0e      	ldr	r2, [pc, #56]	@ (8007e24 <TIM_Base_SetConfig+0xfc>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d103      	bne.n	8007df8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d105      	bne.n	8007e16 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	f023 0201 	bic.w	r2, r3, #1
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	611a      	str	r2, [r3, #16]
  }
}
 8007e16:	bf00      	nop
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	40014000 	.word	0x40014000
 8007e38:	40014400 	.word	0x40014400
 8007e3c:	40014800 	.word	0x40014800

08007e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f023 0201 	bic.w	r2, r3, #1
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f023 030a 	bic.w	r3, r3, #10
 8007e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	621a      	str	r2, [r3, #32]
}
 8007e92:	bf00      	nop
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b087      	sub	sp, #28
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	60b9      	str	r1, [r7, #8]
 8007ea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	f023 0210 	bic.w	r2, r3, #16
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	031b      	lsls	r3, r3, #12
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007eda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	621a      	str	r2, [r3, #32]
}
 8007ef2:	bf00      	nop
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f043 0307 	orr.w	r3, r3, #7
 8007f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	609a      	str	r2, [r3, #8]
}
 8007f28:	bf00      	nop
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	021a      	lsls	r2, r3, #8
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	431a      	orrs	r2, r3
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	609a      	str	r2, [r3, #8]
}
 8007f68:	bf00      	nop
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d101      	bne.n	8007f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e050      	b.n	800802e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a1c      	ldr	r2, [pc, #112]	@ (800803c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d018      	beq.n	8008002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fd8:	d013      	beq.n	8008002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a18      	ldr	r2, [pc, #96]	@ (8008040 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d00e      	beq.n	8008002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a16      	ldr	r2, [pc, #88]	@ (8008044 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d009      	beq.n	8008002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a15      	ldr	r2, [pc, #84]	@ (8008048 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d004      	beq.n	8008002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a13      	ldr	r2, [pc, #76]	@ (800804c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d10c      	bne.n	800801c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	4313      	orrs	r3, r2
 8008012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	40010000 	.word	0x40010000
 8008040:	40000400 	.word	0x40000400
 8008044:	40000800 	.word	0x40000800
 8008048:	40000c00 	.word	0x40000c00
 800804c:	40014000 	.word	0x40014000

08008050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e042      	b.n	8008110 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fc fa8e 	bl	80045c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2224      	movs	r2, #36	@ 0x24
 80080a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f973 	bl	80083a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	691a      	ldr	r2, [r3, #16]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80080d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	695a      	ldr	r2, [r3, #20]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80080e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68da      	ldr	r2, [r3, #12]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2220      	movs	r2, #32
 8008104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08a      	sub	sp, #40	@ 0x28
 800811c:	af02      	add	r7, sp, #8
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	603b      	str	r3, [r7, #0]
 8008124:	4613      	mov	r3, r2
 8008126:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b20      	cmp	r3, #32
 8008136:	d175      	bne.n	8008224 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <HAL_UART_Transmit+0x2c>
 800813e:	88fb      	ldrh	r3, [r7, #6]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e06e      	b.n	8008226 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2221      	movs	r2, #33	@ 0x21
 8008152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008156:	f7fc fadb 	bl	8004710 <HAL_GetTick>
 800815a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	88fa      	ldrh	r2, [r7, #6]
 8008160:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	88fa      	ldrh	r2, [r7, #6]
 8008166:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008170:	d108      	bne.n	8008184 <HAL_UART_Transmit+0x6c>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800817a:	2300      	movs	r3, #0
 800817c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	61bb      	str	r3, [r7, #24]
 8008182:	e003      	b.n	800818c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008188:	2300      	movs	r3, #0
 800818a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800818c:	e02e      	b.n	80081ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2200      	movs	r2, #0
 8008196:	2180      	movs	r1, #128	@ 0x80
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f848 	bl	800822e <UART_WaitOnFlagUntilTimeout>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2220      	movs	r2, #32
 80081a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e03a      	b.n	8008226 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10b      	bne.n	80081ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	3302      	adds	r3, #2
 80081ca:	61bb      	str	r3, [r7, #24]
 80081cc:	e007      	b.n	80081de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	781a      	ldrb	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	3301      	adds	r3, #1
 80081dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1cb      	bne.n	800818e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2200      	movs	r2, #0
 80081fe:	2140      	movs	r1, #64	@ 0x40
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 f814 	bl	800822e <UART_WaitOnFlagUntilTimeout>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d005      	beq.n	8008218 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2220      	movs	r2, #32
 8008210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e006      	b.n	8008226 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2220      	movs	r2, #32
 800821c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	e000      	b.n	8008226 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008224:	2302      	movs	r3, #2
  }
}
 8008226:	4618      	mov	r0, r3
 8008228:	3720      	adds	r7, #32
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	603b      	str	r3, [r7, #0]
 800823a:	4613      	mov	r3, r2
 800823c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800823e:	e03b      	b.n	80082b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008246:	d037      	beq.n	80082b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008248:	f7fc fa62 	bl	8004710 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	6a3a      	ldr	r2, [r7, #32]
 8008254:	429a      	cmp	r2, r3
 8008256:	d302      	bcc.n	800825e <UART_WaitOnFlagUntilTimeout+0x30>
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e03a      	b.n	80082d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f003 0304 	and.w	r3, r3, #4
 800826c:	2b00      	cmp	r3, #0
 800826e:	d023      	beq.n	80082b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b80      	cmp	r3, #128	@ 0x80
 8008274:	d020      	beq.n	80082b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b40      	cmp	r3, #64	@ 0x40
 800827a:	d01d      	beq.n	80082b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0308 	and.w	r3, r3, #8
 8008286:	2b08      	cmp	r3, #8
 8008288:	d116      	bne.n	80082b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800828a:	2300      	movs	r3, #0
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	617b      	str	r3, [r7, #20]
 800829e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 f81d 	bl	80082e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2208      	movs	r2, #8
 80082aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e00f      	b.n	80082d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4013      	ands	r3, r2
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	bf0c      	ite	eq
 80082c8:	2301      	moveq	r3, #1
 80082ca:	2300      	movne	r3, #0
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	461a      	mov	r2, r3
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d0b4      	beq.n	8008240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b095      	sub	sp, #84	@ 0x54
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	330c      	adds	r3, #12
 80082ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f2:	e853 3f00 	ldrex	r3, [r3]
 80082f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	330c      	adds	r3, #12
 8008306:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008308:	643a      	str	r2, [r7, #64]	@ 0x40
 800830a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800830e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008310:	e841 2300 	strex	r3, r2, [r1]
 8008314:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e5      	bne.n	80082e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3314      	adds	r3, #20
 8008322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	e853 3f00 	ldrex	r3, [r3]
 800832a:	61fb      	str	r3, [r7, #28]
   return(result);
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	f023 0301 	bic.w	r3, r3, #1
 8008332:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3314      	adds	r3, #20
 800833a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800833c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800833e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008344:	e841 2300 	strex	r3, r2, [r1]
 8008348:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1e5      	bne.n	800831c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008354:	2b01      	cmp	r3, #1
 8008356:	d119      	bne.n	800838c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	e853 3f00 	ldrex	r3, [r3]
 8008366:	60bb      	str	r3, [r7, #8]
   return(result);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f023 0310 	bic.w	r3, r3, #16
 800836e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	330c      	adds	r3, #12
 8008376:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008378:	61ba      	str	r2, [r7, #24]
 800837a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837c:	6979      	ldr	r1, [r7, #20]
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	e841 2300 	strex	r3, r2, [r1]
 8008384:	613b      	str	r3, [r7, #16]
   return(result);
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1e5      	bne.n	8008358 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2220      	movs	r2, #32
 8008390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800839a:	bf00      	nop
 800839c:	3754      	adds	r7, #84	@ 0x54
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083ac:	b0c0      	sub	sp, #256	@ 0x100
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80083c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c4:	68d9      	ldr	r1, [r3, #12]
 80083c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	ea40 0301 	orr.w	r3, r0, r1
 80083d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	431a      	orrs	r2, r3
 80083e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	431a      	orrs	r2, r3
 80083e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80083f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008400:	f021 010c 	bic.w	r1, r1, #12
 8008404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800840e:	430b      	orrs	r3, r1
 8008410:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800841e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008422:	6999      	ldr	r1, [r3, #24]
 8008424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	ea40 0301 	orr.w	r3, r0, r1
 800842e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	4b8f      	ldr	r3, [pc, #572]	@ (8008674 <UART_SetConfig+0x2cc>)
 8008438:	429a      	cmp	r2, r3
 800843a:	d005      	beq.n	8008448 <UART_SetConfig+0xa0>
 800843c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4b8d      	ldr	r3, [pc, #564]	@ (8008678 <UART_SetConfig+0x2d0>)
 8008444:	429a      	cmp	r2, r3
 8008446:	d104      	bne.n	8008452 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008448:	f7ff f93c 	bl	80076c4 <HAL_RCC_GetPCLK2Freq>
 800844c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008450:	e003      	b.n	800845a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008452:	f7ff f923 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 8008456:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800845a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008464:	f040 810c 	bne.w	8008680 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800846c:	2200      	movs	r2, #0
 800846e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008472:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008476:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800847a:	4622      	mov	r2, r4
 800847c:	462b      	mov	r3, r5
 800847e:	1891      	adds	r1, r2, r2
 8008480:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008482:	415b      	adcs	r3, r3
 8008484:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008486:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800848a:	4621      	mov	r1, r4
 800848c:	eb12 0801 	adds.w	r8, r2, r1
 8008490:	4629      	mov	r1, r5
 8008492:	eb43 0901 	adc.w	r9, r3, r1
 8008496:	f04f 0200 	mov.w	r2, #0
 800849a:	f04f 0300 	mov.w	r3, #0
 800849e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084aa:	4690      	mov	r8, r2
 80084ac:	4699      	mov	r9, r3
 80084ae:	4623      	mov	r3, r4
 80084b0:	eb18 0303 	adds.w	r3, r8, r3
 80084b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80084b8:	462b      	mov	r3, r5
 80084ba:	eb49 0303 	adc.w	r3, r9, r3
 80084be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80084c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80084d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80084d6:	460b      	mov	r3, r1
 80084d8:	18db      	adds	r3, r3, r3
 80084da:	653b      	str	r3, [r7, #80]	@ 0x50
 80084dc:	4613      	mov	r3, r2
 80084de:	eb42 0303 	adc.w	r3, r2, r3
 80084e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80084e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80084e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80084ec:	f7f8 fc34 	bl	8000d58 <__aeabi_uldivmod>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4b61      	ldr	r3, [pc, #388]	@ (800867c <UART_SetConfig+0x2d4>)
 80084f6:	fba3 2302 	umull	r2, r3, r3, r2
 80084fa:	095b      	lsrs	r3, r3, #5
 80084fc:	011c      	lsls	r4, r3, #4
 80084fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008502:	2200      	movs	r2, #0
 8008504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008508:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800850c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008510:	4642      	mov	r2, r8
 8008512:	464b      	mov	r3, r9
 8008514:	1891      	adds	r1, r2, r2
 8008516:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008518:	415b      	adcs	r3, r3
 800851a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800851c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008520:	4641      	mov	r1, r8
 8008522:	eb12 0a01 	adds.w	sl, r2, r1
 8008526:	4649      	mov	r1, r9
 8008528:	eb43 0b01 	adc.w	fp, r3, r1
 800852c:	f04f 0200 	mov.w	r2, #0
 8008530:	f04f 0300 	mov.w	r3, #0
 8008534:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008538:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800853c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008540:	4692      	mov	sl, r2
 8008542:	469b      	mov	fp, r3
 8008544:	4643      	mov	r3, r8
 8008546:	eb1a 0303 	adds.w	r3, sl, r3
 800854a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800854e:	464b      	mov	r3, r9
 8008550:	eb4b 0303 	adc.w	r3, fp, r3
 8008554:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008564:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008568:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800856c:	460b      	mov	r3, r1
 800856e:	18db      	adds	r3, r3, r3
 8008570:	643b      	str	r3, [r7, #64]	@ 0x40
 8008572:	4613      	mov	r3, r2
 8008574:	eb42 0303 	adc.w	r3, r2, r3
 8008578:	647b      	str	r3, [r7, #68]	@ 0x44
 800857a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800857e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008582:	f7f8 fbe9 	bl	8000d58 <__aeabi_uldivmod>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	4611      	mov	r1, r2
 800858c:	4b3b      	ldr	r3, [pc, #236]	@ (800867c <UART_SetConfig+0x2d4>)
 800858e:	fba3 2301 	umull	r2, r3, r3, r1
 8008592:	095b      	lsrs	r3, r3, #5
 8008594:	2264      	movs	r2, #100	@ 0x64
 8008596:	fb02 f303 	mul.w	r3, r2, r3
 800859a:	1acb      	subs	r3, r1, r3
 800859c:	00db      	lsls	r3, r3, #3
 800859e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80085a2:	4b36      	ldr	r3, [pc, #216]	@ (800867c <UART_SetConfig+0x2d4>)
 80085a4:	fba3 2302 	umull	r2, r3, r3, r2
 80085a8:	095b      	lsrs	r3, r3, #5
 80085aa:	005b      	lsls	r3, r3, #1
 80085ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80085b0:	441c      	add	r4, r3
 80085b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80085c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80085c4:	4642      	mov	r2, r8
 80085c6:	464b      	mov	r3, r9
 80085c8:	1891      	adds	r1, r2, r2
 80085ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80085cc:	415b      	adcs	r3, r3
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80085d4:	4641      	mov	r1, r8
 80085d6:	1851      	adds	r1, r2, r1
 80085d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80085da:	4649      	mov	r1, r9
 80085dc:	414b      	adcs	r3, r1
 80085de:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e0:	f04f 0200 	mov.w	r2, #0
 80085e4:	f04f 0300 	mov.w	r3, #0
 80085e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80085ec:	4659      	mov	r1, fp
 80085ee:	00cb      	lsls	r3, r1, #3
 80085f0:	4651      	mov	r1, sl
 80085f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085f6:	4651      	mov	r1, sl
 80085f8:	00ca      	lsls	r2, r1, #3
 80085fa:	4610      	mov	r0, r2
 80085fc:	4619      	mov	r1, r3
 80085fe:	4603      	mov	r3, r0
 8008600:	4642      	mov	r2, r8
 8008602:	189b      	adds	r3, r3, r2
 8008604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008608:	464b      	mov	r3, r9
 800860a:	460a      	mov	r2, r1
 800860c:	eb42 0303 	adc.w	r3, r2, r3
 8008610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008620:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008624:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008628:	460b      	mov	r3, r1
 800862a:	18db      	adds	r3, r3, r3
 800862c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800862e:	4613      	mov	r3, r2
 8008630:	eb42 0303 	adc.w	r3, r2, r3
 8008634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008636:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800863a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800863e:	f7f8 fb8b 	bl	8000d58 <__aeabi_uldivmod>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4b0d      	ldr	r3, [pc, #52]	@ (800867c <UART_SetConfig+0x2d4>)
 8008648:	fba3 1302 	umull	r1, r3, r3, r2
 800864c:	095b      	lsrs	r3, r3, #5
 800864e:	2164      	movs	r1, #100	@ 0x64
 8008650:	fb01 f303 	mul.w	r3, r1, r3
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	3332      	adds	r3, #50	@ 0x32
 800865a:	4a08      	ldr	r2, [pc, #32]	@ (800867c <UART_SetConfig+0x2d4>)
 800865c:	fba2 2303 	umull	r2, r3, r2, r3
 8008660:	095b      	lsrs	r3, r3, #5
 8008662:	f003 0207 	and.w	r2, r3, #7
 8008666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4422      	add	r2, r4
 800866e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008670:	e106      	b.n	8008880 <UART_SetConfig+0x4d8>
 8008672:	bf00      	nop
 8008674:	40011000 	.word	0x40011000
 8008678:	40011400 	.word	0x40011400
 800867c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008684:	2200      	movs	r2, #0
 8008686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800868a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800868e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008692:	4642      	mov	r2, r8
 8008694:	464b      	mov	r3, r9
 8008696:	1891      	adds	r1, r2, r2
 8008698:	6239      	str	r1, [r7, #32]
 800869a:	415b      	adcs	r3, r3
 800869c:	627b      	str	r3, [r7, #36]	@ 0x24
 800869e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086a2:	4641      	mov	r1, r8
 80086a4:	1854      	adds	r4, r2, r1
 80086a6:	4649      	mov	r1, r9
 80086a8:	eb43 0501 	adc.w	r5, r3, r1
 80086ac:	f04f 0200 	mov.w	r2, #0
 80086b0:	f04f 0300 	mov.w	r3, #0
 80086b4:	00eb      	lsls	r3, r5, #3
 80086b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086ba:	00e2      	lsls	r2, r4, #3
 80086bc:	4614      	mov	r4, r2
 80086be:	461d      	mov	r5, r3
 80086c0:	4643      	mov	r3, r8
 80086c2:	18e3      	adds	r3, r4, r3
 80086c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80086c8:	464b      	mov	r3, r9
 80086ca:	eb45 0303 	adc.w	r3, r5, r3
 80086ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80086d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80086e2:	f04f 0200 	mov.w	r2, #0
 80086e6:	f04f 0300 	mov.w	r3, #0
 80086ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80086ee:	4629      	mov	r1, r5
 80086f0:	008b      	lsls	r3, r1, #2
 80086f2:	4621      	mov	r1, r4
 80086f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086f8:	4621      	mov	r1, r4
 80086fa:	008a      	lsls	r2, r1, #2
 80086fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008700:	f7f8 fb2a 	bl	8000d58 <__aeabi_uldivmod>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4b60      	ldr	r3, [pc, #384]	@ (800888c <UART_SetConfig+0x4e4>)
 800870a:	fba3 2302 	umull	r2, r3, r3, r2
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	011c      	lsls	r4, r3, #4
 8008712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008716:	2200      	movs	r2, #0
 8008718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800871c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008720:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008724:	4642      	mov	r2, r8
 8008726:	464b      	mov	r3, r9
 8008728:	1891      	adds	r1, r2, r2
 800872a:	61b9      	str	r1, [r7, #24]
 800872c:	415b      	adcs	r3, r3
 800872e:	61fb      	str	r3, [r7, #28]
 8008730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008734:	4641      	mov	r1, r8
 8008736:	1851      	adds	r1, r2, r1
 8008738:	6139      	str	r1, [r7, #16]
 800873a:	4649      	mov	r1, r9
 800873c:	414b      	adcs	r3, r1
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	f04f 0200 	mov.w	r2, #0
 8008744:	f04f 0300 	mov.w	r3, #0
 8008748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800874c:	4659      	mov	r1, fp
 800874e:	00cb      	lsls	r3, r1, #3
 8008750:	4651      	mov	r1, sl
 8008752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008756:	4651      	mov	r1, sl
 8008758:	00ca      	lsls	r2, r1, #3
 800875a:	4610      	mov	r0, r2
 800875c:	4619      	mov	r1, r3
 800875e:	4603      	mov	r3, r0
 8008760:	4642      	mov	r2, r8
 8008762:	189b      	adds	r3, r3, r2
 8008764:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008768:	464b      	mov	r3, r9
 800876a:	460a      	mov	r2, r1
 800876c:	eb42 0303 	adc.w	r3, r2, r3
 8008770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800877e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008780:	f04f 0200 	mov.w	r2, #0
 8008784:	f04f 0300 	mov.w	r3, #0
 8008788:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800878c:	4649      	mov	r1, r9
 800878e:	008b      	lsls	r3, r1, #2
 8008790:	4641      	mov	r1, r8
 8008792:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008796:	4641      	mov	r1, r8
 8008798:	008a      	lsls	r2, r1, #2
 800879a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800879e:	f7f8 fadb 	bl	8000d58 <__aeabi_uldivmod>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4611      	mov	r1, r2
 80087a8:	4b38      	ldr	r3, [pc, #224]	@ (800888c <UART_SetConfig+0x4e4>)
 80087aa:	fba3 2301 	umull	r2, r3, r3, r1
 80087ae:	095b      	lsrs	r3, r3, #5
 80087b0:	2264      	movs	r2, #100	@ 0x64
 80087b2:	fb02 f303 	mul.w	r3, r2, r3
 80087b6:	1acb      	subs	r3, r1, r3
 80087b8:	011b      	lsls	r3, r3, #4
 80087ba:	3332      	adds	r3, #50	@ 0x32
 80087bc:	4a33      	ldr	r2, [pc, #204]	@ (800888c <UART_SetConfig+0x4e4>)
 80087be:	fba2 2303 	umull	r2, r3, r2, r3
 80087c2:	095b      	lsrs	r3, r3, #5
 80087c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80087c8:	441c      	add	r4, r3
 80087ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087ce:	2200      	movs	r2, #0
 80087d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80087d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80087d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80087d8:	4642      	mov	r2, r8
 80087da:	464b      	mov	r3, r9
 80087dc:	1891      	adds	r1, r2, r2
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	415b      	adcs	r3, r3
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087e8:	4641      	mov	r1, r8
 80087ea:	1851      	adds	r1, r2, r1
 80087ec:	6039      	str	r1, [r7, #0]
 80087ee:	4649      	mov	r1, r9
 80087f0:	414b      	adcs	r3, r1
 80087f2:	607b      	str	r3, [r7, #4]
 80087f4:	f04f 0200 	mov.w	r2, #0
 80087f8:	f04f 0300 	mov.w	r3, #0
 80087fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008800:	4659      	mov	r1, fp
 8008802:	00cb      	lsls	r3, r1, #3
 8008804:	4651      	mov	r1, sl
 8008806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800880a:	4651      	mov	r1, sl
 800880c:	00ca      	lsls	r2, r1, #3
 800880e:	4610      	mov	r0, r2
 8008810:	4619      	mov	r1, r3
 8008812:	4603      	mov	r3, r0
 8008814:	4642      	mov	r2, r8
 8008816:	189b      	adds	r3, r3, r2
 8008818:	66bb      	str	r3, [r7, #104]	@ 0x68
 800881a:	464b      	mov	r3, r9
 800881c:	460a      	mov	r2, r1
 800881e:	eb42 0303 	adc.w	r3, r2, r3
 8008822:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	663b      	str	r3, [r7, #96]	@ 0x60
 800882e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008830:	f04f 0200 	mov.w	r2, #0
 8008834:	f04f 0300 	mov.w	r3, #0
 8008838:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800883c:	4649      	mov	r1, r9
 800883e:	008b      	lsls	r3, r1, #2
 8008840:	4641      	mov	r1, r8
 8008842:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008846:	4641      	mov	r1, r8
 8008848:	008a      	lsls	r2, r1, #2
 800884a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800884e:	f7f8 fa83 	bl	8000d58 <__aeabi_uldivmod>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4b0d      	ldr	r3, [pc, #52]	@ (800888c <UART_SetConfig+0x4e4>)
 8008858:	fba3 1302 	umull	r1, r3, r3, r2
 800885c:	095b      	lsrs	r3, r3, #5
 800885e:	2164      	movs	r1, #100	@ 0x64
 8008860:	fb01 f303 	mul.w	r3, r1, r3
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	3332      	adds	r3, #50	@ 0x32
 800886a:	4a08      	ldr	r2, [pc, #32]	@ (800888c <UART_SetConfig+0x4e4>)
 800886c:	fba2 2303 	umull	r2, r3, r2, r3
 8008870:	095b      	lsrs	r3, r3, #5
 8008872:	f003 020f 	and.w	r2, r3, #15
 8008876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4422      	add	r2, r4
 800887e:	609a      	str	r2, [r3, #8]
}
 8008880:	bf00      	nop
 8008882:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008886:	46bd      	mov	sp, r7
 8008888:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800888c:	51eb851f 	.word	0x51eb851f

08008890 <__NVIC_SetPriority>:
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	6039      	str	r1, [r7, #0]
 800889a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800889c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	db0a      	blt.n	80088ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	490c      	ldr	r1, [pc, #48]	@ (80088dc <__NVIC_SetPriority+0x4c>)
 80088aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088ae:	0112      	lsls	r2, r2, #4
 80088b0:	b2d2      	uxtb	r2, r2
 80088b2:	440b      	add	r3, r1
 80088b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80088b8:	e00a      	b.n	80088d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	4908      	ldr	r1, [pc, #32]	@ (80088e0 <__NVIC_SetPriority+0x50>)
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	f003 030f 	and.w	r3, r3, #15
 80088c6:	3b04      	subs	r3, #4
 80088c8:	0112      	lsls	r2, r2, #4
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	440b      	add	r3, r1
 80088ce:	761a      	strb	r2, [r3, #24]
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	e000e100 	.word	0xe000e100
 80088e0:	e000ed00 	.word	0xe000ed00

080088e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80088e8:	4b05      	ldr	r3, [pc, #20]	@ (8008900 <SysTick_Handler+0x1c>)
 80088ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80088ec:	f002 ff46 	bl	800b77c <xTaskGetSchedulerState>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d001      	beq.n	80088fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80088f6:	f004 f907 	bl	800cb08 <xPortSysTickHandler>
  }
}
 80088fa:	bf00      	nop
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	e000e010 	.word	0xe000e010

08008904 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008908:	2100      	movs	r1, #0
 800890a:	f06f 0004 	mvn.w	r0, #4
 800890e:	f7ff ffbf 	bl	8008890 <__NVIC_SetPriority>
#endif
}
 8008912:	bf00      	nop
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800891e:	f3ef 8305 	mrs	r3, IPSR
 8008922:	603b      	str	r3, [r7, #0]
  return(result);
 8008924:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800892a:	f06f 0305 	mvn.w	r3, #5
 800892e:	607b      	str	r3, [r7, #4]
 8008930:	e00c      	b.n	800894c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008932:	4b0a      	ldr	r3, [pc, #40]	@ (800895c <osKernelInitialize+0x44>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d105      	bne.n	8008946 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800893a:	4b08      	ldr	r3, [pc, #32]	@ (800895c <osKernelInitialize+0x44>)
 800893c:	2201      	movs	r2, #1
 800893e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008940:	2300      	movs	r3, #0
 8008942:	607b      	str	r3, [r7, #4]
 8008944:	e002      	b.n	800894c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008946:	f04f 33ff 	mov.w	r3, #4294967295
 800894a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800894c:	687b      	ldr	r3, [r7, #4]
}
 800894e:	4618      	mov	r0, r3
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	2000080c 	.word	0x2000080c

08008960 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008966:	f3ef 8305 	mrs	r3, IPSR
 800896a:	603b      	str	r3, [r7, #0]
  return(result);
 800896c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008972:	f06f 0305 	mvn.w	r3, #5
 8008976:	607b      	str	r3, [r7, #4]
 8008978:	e010      	b.n	800899c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800897a:	4b0b      	ldr	r3, [pc, #44]	@ (80089a8 <osKernelStart+0x48>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d109      	bne.n	8008996 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008982:	f7ff ffbf 	bl	8008904 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008986:	4b08      	ldr	r3, [pc, #32]	@ (80089a8 <osKernelStart+0x48>)
 8008988:	2202      	movs	r2, #2
 800898a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800898c:	f002 fa4c 	bl	800ae28 <vTaskStartScheduler>
      stat = osOK;
 8008990:	2300      	movs	r3, #0
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	e002      	b.n	800899c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008996:	f04f 33ff 	mov.w	r3, #4294967295
 800899a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800899c:	687b      	ldr	r3, [r7, #4]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	2000080c 	.word	0x2000080c

080089ac <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089b2:	f3ef 8305 	mrs	r3, IPSR
 80089b6:	603b      	str	r3, [r7, #0]
  return(result);
 80089b8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80089be:	f002 fb5f 	bl	800b080 <xTaskGetTickCountFromISR>
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	e002      	b.n	80089cc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80089c6:	f002 fb4b 	bl	800b060 <xTaskGetTickCount>
 80089ca:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80089cc:	687b      	ldr	r3, [r7, #4]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b08e      	sub	sp, #56	@ 0x38
 80089da:	af04      	add	r7, sp, #16
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089e6:	f3ef 8305 	mrs	r3, IPSR
 80089ea:	617b      	str	r3, [r7, #20]
  return(result);
 80089ec:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d17e      	bne.n	8008af0 <osThreadNew+0x11a>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d07b      	beq.n	8008af0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80089f8:	2380      	movs	r3, #128	@ 0x80
 80089fa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80089fc:	2318      	movs	r3, #24
 80089fe:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a00:	2300      	movs	r3, #0
 8008a02:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008a04:	f04f 33ff 	mov.w	r3, #4294967295
 8008a08:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d045      	beq.n	8008a9c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <osThreadNew+0x48>
        name = attr->name;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d008      	beq.n	8008a44 <osThreadNew+0x6e>
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	2b38      	cmp	r3, #56	@ 0x38
 8008a36:	d805      	bhi.n	8008a44 <osThreadNew+0x6e>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	f003 0301 	and.w	r3, r3, #1
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <osThreadNew+0x72>
        return (NULL);
 8008a44:	2300      	movs	r3, #0
 8008a46:	e054      	b.n	8008af2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	089b      	lsrs	r3, r3, #2
 8008a56:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00e      	beq.n	8008a7e <osThreadNew+0xa8>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	2ba7      	cmp	r3, #167	@ 0xa7
 8008a66:	d90a      	bls.n	8008a7e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d006      	beq.n	8008a7e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d002      	beq.n	8008a7e <osThreadNew+0xa8>
        mem = 1;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	61bb      	str	r3, [r7, #24]
 8008a7c:	e010      	b.n	8008aa0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10c      	bne.n	8008aa0 <osThreadNew+0xca>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d108      	bne.n	8008aa0 <osThreadNew+0xca>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d104      	bne.n	8008aa0 <osThreadNew+0xca>
          mem = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	61bb      	str	r3, [r7, #24]
 8008a9a:	e001      	b.n	8008aa0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d110      	bne.n	8008ac8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008aae:	9202      	str	r2, [sp, #8]
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	6a3a      	ldr	r2, [r7, #32]
 8008aba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f001 ff3f 	bl	800a940 <xTaskCreateStatic>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	613b      	str	r3, [r7, #16]
 8008ac6:	e013      	b.n	8008af0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d110      	bne.n	8008af0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	f107 0310 	add.w	r3, r7, #16
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f001 ff8d 	bl	800aa00 <xTaskCreate>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d001      	beq.n	8008af0 <osThreadNew+0x11a>
            hTask = NULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008af0:	693b      	ldr	r3, [r7, #16]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3728      	adds	r7, #40	@ 0x28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b02:	f3ef 8305 	mrs	r3, IPSR
 8008b06:	603b      	str	r3, [r7, #0]
  return(result);
 8008b08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <osThreadYield+0x1a>
    stat = osErrorISR;
 8008b0e:	f06f 0305 	mvn.w	r3, #5
 8008b12:	607b      	str	r3, [r7, #4]
 8008b14:	e009      	b.n	8008b2a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8008b1a:	4b07      	ldr	r3, [pc, #28]	@ (8008b38 <osThreadYield+0x3c>)
 8008b1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8008b2a:	687b      	ldr	r3, [r7, #4]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <osThreadFlagsSet+0x1a>
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	da03      	bge.n	8008b5e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8008b56:	f06f 0303 	mvn.w	r3, #3
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	e035      	b.n	8008bca <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8008b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b64:	f3ef 8305 	mrs	r3, IPSR
 8008b68:	613b      	str	r3, [r7, #16]
  return(result);
 8008b6a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d01f      	beq.n	8008bb0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8008b70:	2300      	movs	r3, #0
 8008b72:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8008b74:	f107 0308 	add.w	r3, r7, #8
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6978      	ldr	r0, [r7, #20]
 8008b82:	f003 f8ab 	bl	800bcdc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8008b86:	f107 030c 	add.w	r3, r7, #12
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	9200      	str	r2, [sp, #0]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2100      	movs	r1, #0
 8008b92:	6978      	ldr	r0, [r7, #20]
 8008b94:	f003 f8a2 	bl	800bcdc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d015      	beq.n	8008bca <osThreadFlagsSet+0x8e>
 8008b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd4 <osThreadFlagsSet+0x98>)
 8008ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	e00c      	b.n	8008bca <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6978      	ldr	r0, [r7, #20]
 8008bb8:	f002 ffce 	bl	800bb58 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008bbc:	f107 030c 	add.w	r3, r7, #12
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	6978      	ldr	r0, [r7, #20]
 8008bc6:	f002 ffc7 	bl	800bb58 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8008bca:	68fb      	ldr	r3, [r7, #12]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	e000ed04 	.word	0xe000ed04

08008bd8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b08c      	sub	sp, #48	@ 0x30
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008be4:	f3ef 8305 	mrs	r3, IPSR
 8008be8:	617b      	str	r3, [r7, #20]
  return(result);
 8008bea:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008bf0:	f06f 0305 	mvn.w	r3, #5
 8008bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bf6:	e06b      	b.n	8008cd0 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	da03      	bge.n	8008c06 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8008bfe:	f06f 0303 	mvn.w	r3, #3
 8008c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c04:	e064      	b.n	8008cd0 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c14:	e001      	b.n	8008c1a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8008c22:	f002 fa1d 	bl	800b060 <xTaskGetTickCount>
 8008c26:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008c28:	f107 0210 	add.w	r2, r7, #16
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c30:	2000      	movs	r0, #0
 8008c32:	f002 ff31 	bl	800ba98 <xTaskNotifyWait>
 8008c36:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d137      	bne.n	8008cae <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8008c3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4013      	ands	r3, r2
 8008c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00c      	beq.n	8008c72 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d032      	beq.n	8008cca <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10f      	bne.n	8008c8a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008c6a:	f06f 0302 	mvn.w	r3, #2
 8008c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8008c70:	e02e      	b.n	8008cd0 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c76:	4013      	ands	r3, r2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d128      	bne.n	8008cce <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008c82:	f06f 0302 	mvn.w	r3, #2
 8008c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8008c88:	e022      	b.n	8008cd0 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008c8a:	f002 f9e9 	bl	800b060 <xTaskGetTickCount>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d902      	bls.n	8008ca4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ca2:	e00e      	b.n	8008cc2 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8008ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cac:	e009      	b.n	8008cc2 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d103      	bne.n	8008cbc <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8008cb4:	f06f 0302 	mvn.w	r3, #2
 8008cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cba:	e002      	b.n	8008cc2 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008cbc:	f06f 0301 	mvn.w	r3, #1
 8008cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1af      	bne.n	8008c28 <osThreadFlagsWait+0x50>
 8008cc8:	e002      	b.n	8008cd0 <osThreadFlagsWait+0xf8>
            break;
 8008cca:	bf00      	nop
 8008ccc:	e000      	b.n	8008cd0 <osThreadFlagsWait+0xf8>
            break;
 8008cce:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8008cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3730      	adds	r7, #48	@ 0x30
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ce2:	f3ef 8305 	mrs	r3, IPSR
 8008ce6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <osDelay+0x1c>
    stat = osErrorISR;
 8008cee:	f06f 0305 	mvn.w	r3, #5
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	e007      	b.n	8008d06 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f002 f85b 	bl	800adbc <vTaskDelay>
    }
  }

  return (stat);
 8008d06:	68fb      	ldr	r3, [r7, #12]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d18:	f3ef 8305 	mrs	r3, IPSR
 8008d1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <osDelayUntil+0x1c>
    stat = osErrorISR;
 8008d24:	f06f 0305 	mvn.w	r3, #5
 8008d28:	617b      	str	r3, [r7, #20]
 8008d2a:	e019      	b.n	8008d60 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8008d30:	f002 f996 	bl	800b060 <xTaskGetTickCount>
 8008d34:	4603      	mov	r3, r0
 8008d36:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d009      	beq.n	8008d5a <osDelayUntil+0x4a>
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	db06      	blt.n	8008d5a <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8008d4c:	f107 0308 	add.w	r3, r7, #8
 8008d50:	6939      	ldr	r1, [r7, #16]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f001 ffb2 	bl	800acbc <vTaskDelayUntil>
 8008d58:	e002      	b.n	8008d60 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8008d5a:	f06f 0303 	mvn.w	r3, #3
 8008d5e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008d60:	697b      	ldr	r3, [r7, #20]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f003 fce4 	bl	800c740 <pvTimerGetTimerID>
 8008d78:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <TimerCallback+0x22>
    callb->func (callb->arg);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	6852      	ldr	r2, [r2, #4]
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4798      	blx	r3
  }
}
 8008d8c:	bf00      	nop
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08c      	sub	sp, #48	@ 0x30
 8008d98:	af02      	add	r7, sp, #8
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	603b      	str	r3, [r7, #0]
 8008da0:	460b      	mov	r3, r1
 8008da2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008da4:	2300      	movs	r3, #0
 8008da6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008da8:	f3ef 8305 	mrs	r3, IPSR
 8008dac:	613b      	str	r3, [r7, #16]
  return(result);
 8008dae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d163      	bne.n	8008e7c <osTimerNew+0xe8>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d060      	beq.n	8008e7c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008dba:	2008      	movs	r0, #8
 8008dbc:	f003 ff36 	bl	800cc2c <pvPortMalloc>
 8008dc0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d059      	beq.n	8008e7c <osTimerNew+0xe8>
      callb->func = func;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <osTimerNew+0x4c>
        reload = pdFALSE;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	61fb      	str	r3, [r7, #28]
 8008dde:	e001      	b.n	8008de4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008de0:	2301      	movs	r3, #1
 8008de2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008de4:	f04f 33ff 	mov.w	r3, #4294967295
 8008de8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d01c      	beq.n	8008e2e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <osTimerNew+0x6e>
          name = attr->name;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d006      	beq.n	8008e18 <osTimerNew+0x84>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008e10:	d902      	bls.n	8008e18 <osTimerNew+0x84>
          mem = 1;
 8008e12:	2301      	movs	r3, #1
 8008e14:	61bb      	str	r3, [r7, #24]
 8008e16:	e00c      	b.n	8008e32 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d108      	bne.n	8008e32 <osTimerNew+0x9e>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d104      	bne.n	8008e32 <osTimerNew+0x9e>
            mem = 0;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	61bb      	str	r3, [r7, #24]
 8008e2c:	e001      	b.n	8008e32 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d10c      	bne.n	8008e52 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	4b12      	ldr	r3, [pc, #72]	@ (8008e88 <osTimerNew+0xf4>)
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	69fa      	ldr	r2, [r7, #28]
 8008e46:	2101      	movs	r1, #1
 8008e48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e4a:	f003 f8ec 	bl	800c026 <xTimerCreateStatic>
 8008e4e:	6238      	str	r0, [r7, #32]
 8008e50:	e00b      	b.n	8008e6a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d108      	bne.n	8008e6a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008e58:	4b0b      	ldr	r3, [pc, #44]	@ (8008e88 <osTimerNew+0xf4>)
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	2101      	movs	r1, #1
 8008e62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e64:	f003 f8be 	bl	800bfe4 <xTimerCreate>
 8008e68:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d105      	bne.n	8008e7c <osTimerNew+0xe8>
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <osTimerNew+0xe8>
        vPortFree (callb);
 8008e76:	6978      	ldr	r0, [r7, #20]
 8008e78:	f003 ffac 	bl	800cdd4 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3728      	adds	r7, #40	@ 0x28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	08008d6b 	.word	0x08008d6b

08008e8c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af02      	add	r7, sp, #8
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e9a:	f3ef 8305 	mrs	r3, IPSR
 8008e9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <osTimerStart+0x22>
    stat = osErrorISR;
 8008ea6:	f06f 0305 	mvn.w	r3, #5
 8008eaa:	617b      	str	r3, [r7, #20]
 8008eac:	e017      	b.n	8008ede <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d103      	bne.n	8008ebc <osTimerStart+0x30>
    stat = osErrorParameter;
 8008eb4:	f06f 0303 	mvn.w	r3, #3
 8008eb8:	617b      	str	r3, [r7, #20]
 8008eba:	e010      	b.n	8008ede <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	2104      	movs	r1, #4
 8008ec6:	6938      	ldr	r0, [r7, #16]
 8008ec8:	f003 f92a 	bl	800c120 <xTimerGenericCommand>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d102      	bne.n	8008ed8 <osTimerStart+0x4c>
      stat = osOK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	617b      	str	r3, [r7, #20]
 8008ed6:	e002      	b.n	8008ede <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8008ed8:	f06f 0302 	mvn.w	r3, #2
 8008edc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008ede:	697b      	ldr	r3, [r7, #20]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3718      	adds	r7, #24
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ef4:	f3ef 8305 	mrs	r3, IPSR
 8008ef8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008efa:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d174      	bne.n	8008fea <osMutexNew+0x102>
    if (attr != NULL) {
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d003      	beq.n	8008f0e <osMutexNew+0x26>
      type = attr->attr_bits;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	61bb      	str	r3, [r7, #24]
 8008f0c:	e001      	b.n	8008f12 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <osMutexNew+0x3a>
      rmtx = 1U;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	e001      	b.n	8008f26 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	f003 0308 	and.w	r3, r3, #8
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d15c      	bne.n	8008fea <osMutexNew+0x102>
      mem = -1;
 8008f30:	f04f 33ff 	mov.w	r3, #4294967295
 8008f34:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d015      	beq.n	8008f68 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d006      	beq.n	8008f52 <osMutexNew+0x6a>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	2b4f      	cmp	r3, #79	@ 0x4f
 8008f4a:	d902      	bls.n	8008f52 <osMutexNew+0x6a>
          mem = 1;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	613b      	str	r3, [r7, #16]
 8008f50:	e00c      	b.n	8008f6c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d108      	bne.n	8008f6c <osMutexNew+0x84>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d104      	bne.n	8008f6c <osMutexNew+0x84>
            mem = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	613b      	str	r3, [r7, #16]
 8008f66:	e001      	b.n	8008f6c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d112      	bne.n	8008f98 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d007      	beq.n	8008f88 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	2004      	movs	r0, #4
 8008f80:	f000 fd71 	bl	8009a66 <xQueueCreateMutexStatic>
 8008f84:	61f8      	str	r0, [r7, #28]
 8008f86:	e016      	b.n	8008fb6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	2001      	movs	r0, #1
 8008f90:	f000 fd69 	bl	8009a66 <xQueueCreateMutexStatic>
 8008f94:	61f8      	str	r0, [r7, #28]
 8008f96:	e00e      	b.n	8008fb6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10b      	bne.n	8008fb6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d004      	beq.n	8008fae <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008fa4:	2004      	movs	r0, #4
 8008fa6:	f000 fd46 	bl	8009a36 <xQueueCreateMutex>
 8008faa:	61f8      	str	r0, [r7, #28]
 8008fac:	e003      	b.n	8008fb6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008fae:	2001      	movs	r0, #1
 8008fb0:	f000 fd41 	bl	8009a36 <xQueueCreateMutex>
 8008fb4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00c      	beq.n	8008fd6 <osMutexNew+0xee>
        if (attr != NULL) {
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <osMutexNew+0xe2>
          name = attr->name;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	e001      	b.n	8008fce <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008fce:	68f9      	ldr	r1, [r7, #12]
 8008fd0:	69f8      	ldr	r0, [r7, #28]
 8008fd2:	f001 fc2d 	bl	800a830 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d006      	beq.n	8008fea <osMutexNew+0x102>
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d003      	beq.n	8008fea <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	f043 0301 	orr.w	r3, r3, #1
 8008fe8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008fea:	69fb      	ldr	r3, [r7, #28]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3720      	adds	r7, #32
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f023 0301 	bic.w	r3, r3, #1
 8009004:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800900e:	2300      	movs	r3, #0
 8009010:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009012:	f3ef 8305 	mrs	r3, IPSR
 8009016:	60bb      	str	r3, [r7, #8]
  return(result);
 8009018:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800901e:	f06f 0305 	mvn.w	r3, #5
 8009022:	617b      	str	r3, [r7, #20]
 8009024:	e02c      	b.n	8009080 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d103      	bne.n	8009034 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800902c:	f06f 0303 	mvn.w	r3, #3
 8009030:	617b      	str	r3, [r7, #20]
 8009032:	e025      	b.n	8009080 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d011      	beq.n	800905e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6938      	ldr	r0, [r7, #16]
 800903e:	f000 fd62 	bl	8009b06 <xQueueTakeMutexRecursive>
 8009042:	4603      	mov	r3, r0
 8009044:	2b01      	cmp	r3, #1
 8009046:	d01b      	beq.n	8009080 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800904e:	f06f 0301 	mvn.w	r3, #1
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	e014      	b.n	8009080 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009056:	f06f 0302 	mvn.w	r3, #2
 800905a:	617b      	str	r3, [r7, #20]
 800905c:	e010      	b.n	8009080 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6938      	ldr	r0, [r7, #16]
 8009062:	f001 f907 	bl	800a274 <xQueueSemaphoreTake>
 8009066:	4603      	mov	r3, r0
 8009068:	2b01      	cmp	r3, #1
 800906a:	d009      	beq.n	8009080 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8009072:	f06f 0301 	mvn.w	r3, #1
 8009076:	617b      	str	r3, [r7, #20]
 8009078:	e002      	b.n	8009080 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800907a:	f06f 0302 	mvn.w	r3, #2
 800907e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009080:	697b      	ldr	r3, [r7, #20]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800908a:	b580      	push	{r7, lr}
 800908c:	b086      	sub	sp, #24
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f023 0301 	bic.w	r3, r3, #1
 8009098:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090a6:	f3ef 8305 	mrs	r3, IPSR
 80090aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80090ac:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <osMutexRelease+0x30>
    stat = osErrorISR;
 80090b2:	f06f 0305 	mvn.w	r3, #5
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e01f      	b.n	80090fa <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d103      	bne.n	80090c8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80090c0:	f06f 0303 	mvn.w	r3, #3
 80090c4:	617b      	str	r3, [r7, #20]
 80090c6:	e018      	b.n	80090fa <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d009      	beq.n	80090e2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80090ce:	6938      	ldr	r0, [r7, #16]
 80090d0:	f000 fce4 	bl	8009a9c <xQueueGiveMutexRecursive>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d00f      	beq.n	80090fa <osMutexRelease+0x70>
        stat = osErrorResource;
 80090da:	f06f 0302 	mvn.w	r3, #2
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	e00b      	b.n	80090fa <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80090e2:	2300      	movs	r3, #0
 80090e4:	2200      	movs	r2, #0
 80090e6:	2100      	movs	r1, #0
 80090e8:	6938      	ldr	r0, [r7, #16]
 80090ea:	f000 fdb1 	bl	8009c50 <xQueueGenericSend>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d002      	beq.n	80090fa <osMutexRelease+0x70>
        stat = osErrorResource;
 80090f4:	f06f 0302 	mvn.w	r3, #2
 80090f8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80090fa:	697b      	ldr	r3, [r7, #20]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009104:	b580      	push	{r7, lr}
 8009106:	b08a      	sub	sp, #40	@ 0x28
 8009108:	af02      	add	r7, sp, #8
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009110:	2300      	movs	r3, #0
 8009112:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009114:	f3ef 8305 	mrs	r3, IPSR
 8009118:	613b      	str	r3, [r7, #16]
  return(result);
 800911a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800911c:	2b00      	cmp	r3, #0
 800911e:	d175      	bne.n	800920c <osSemaphoreNew+0x108>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d072      	beq.n	800920c <osSemaphoreNew+0x108>
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	429a      	cmp	r2, r3
 800912c:	d86e      	bhi.n	800920c <osSemaphoreNew+0x108>
    mem = -1;
 800912e:	f04f 33ff 	mov.w	r3, #4294967295
 8009132:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d015      	beq.n	8009166 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d006      	beq.n	8009150 <osSemaphoreNew+0x4c>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	2b4f      	cmp	r3, #79	@ 0x4f
 8009148:	d902      	bls.n	8009150 <osSemaphoreNew+0x4c>
        mem = 1;
 800914a:	2301      	movs	r3, #1
 800914c:	61bb      	str	r3, [r7, #24]
 800914e:	e00c      	b.n	800916a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d108      	bne.n	800916a <osSemaphoreNew+0x66>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <osSemaphoreNew+0x66>
          mem = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	61bb      	str	r3, [r7, #24]
 8009164:	e001      	b.n	800916a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009170:	d04c      	beq.n	800920c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d128      	bne.n	80091ca <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d10a      	bne.n	8009194 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	2203      	movs	r2, #3
 8009184:	9200      	str	r2, [sp, #0]
 8009186:	2200      	movs	r2, #0
 8009188:	2100      	movs	r1, #0
 800918a:	2001      	movs	r0, #1
 800918c:	f000 fb5e 	bl	800984c <xQueueGenericCreateStatic>
 8009190:	61f8      	str	r0, [r7, #28]
 8009192:	e005      	b.n	80091a0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009194:	2203      	movs	r2, #3
 8009196:	2100      	movs	r1, #0
 8009198:	2001      	movs	r0, #1
 800919a:	f000 fbd4 	bl	8009946 <xQueueGenericCreate>
 800919e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d022      	beq.n	80091ec <osSemaphoreNew+0xe8>
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d01f      	beq.n	80091ec <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80091ac:	2300      	movs	r3, #0
 80091ae:	2200      	movs	r2, #0
 80091b0:	2100      	movs	r1, #0
 80091b2:	69f8      	ldr	r0, [r7, #28]
 80091b4:	f000 fd4c 	bl	8009c50 <xQueueGenericSend>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d016      	beq.n	80091ec <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80091be:	69f8      	ldr	r0, [r7, #28]
 80091c0:	f001 f9ea 	bl	800a598 <vQueueDelete>
            hSemaphore = NULL;
 80091c4:	2300      	movs	r3, #0
 80091c6:	61fb      	str	r3, [r7, #28]
 80091c8:	e010      	b.n	80091ec <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d108      	bne.n	80091e2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	461a      	mov	r2, r3
 80091d6:	68b9      	ldr	r1, [r7, #8]
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f000 fccb 	bl	8009b74 <xQueueCreateCountingSemaphoreStatic>
 80091de:	61f8      	str	r0, [r7, #28]
 80091e0:	e004      	b.n	80091ec <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80091e2:	68b9      	ldr	r1, [r7, #8]
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 fcfe 	bl	8009be6 <xQueueCreateCountingSemaphore>
 80091ea:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00c      	beq.n	800920c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d003      	beq.n	8009200 <osSemaphoreNew+0xfc>
          name = attr->name;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	617b      	str	r3, [r7, #20]
 80091fe:	e001      	b.n	8009204 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009200:	2300      	movs	r3, #0
 8009202:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009204:	6979      	ldr	r1, [r7, #20]
 8009206:	69f8      	ldr	r0, [r7, #28]
 8009208:	f001 fb12 	bl	800a830 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800920c:	69fb      	ldr	r3, [r7, #28]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3720      	adds	r7, #32
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
	...

08009218 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009218:	b580      	push	{r7, lr}
 800921a:	b086      	sub	sp, #24
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009226:	2300      	movs	r3, #0
 8009228:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d103      	bne.n	8009238 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009230:	f06f 0303 	mvn.w	r3, #3
 8009234:	617b      	str	r3, [r7, #20]
 8009236:	e039      	b.n	80092ac <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009238:	f3ef 8305 	mrs	r3, IPSR
 800923c:	60fb      	str	r3, [r7, #12]
  return(result);
 800923e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009240:	2b00      	cmp	r3, #0
 8009242:	d022      	beq.n	800928a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d003      	beq.n	8009252 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800924a:	f06f 0303 	mvn.w	r3, #3
 800924e:	617b      	str	r3, [r7, #20]
 8009250:	e02c      	b.n	80092ac <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009252:	2300      	movs	r3, #0
 8009254:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009256:	f107 0308 	add.w	r3, r7, #8
 800925a:	461a      	mov	r2, r3
 800925c:	2100      	movs	r1, #0
 800925e:	6938      	ldr	r0, [r7, #16]
 8009260:	f001 f918 	bl	800a494 <xQueueReceiveFromISR>
 8009264:	4603      	mov	r3, r0
 8009266:	2b01      	cmp	r3, #1
 8009268:	d003      	beq.n	8009272 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800926a:	f06f 0302 	mvn.w	r3, #2
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	e01c      	b.n	80092ac <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d019      	beq.n	80092ac <osSemaphoreAcquire+0x94>
 8009278:	4b0f      	ldr	r3, [pc, #60]	@ (80092b8 <osSemaphoreAcquire+0xa0>)
 800927a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	e010      	b.n	80092ac <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6938      	ldr	r0, [r7, #16]
 800928e:	f000 fff1 	bl	800a274 <xQueueSemaphoreTake>
 8009292:	4603      	mov	r3, r0
 8009294:	2b01      	cmp	r3, #1
 8009296:	d009      	beq.n	80092ac <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800929e:	f06f 0301 	mvn.w	r3, #1
 80092a2:	617b      	str	r3, [r7, #20]
 80092a4:	e002      	b.n	80092ac <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80092a6:	f06f 0302 	mvn.w	r3, #2
 80092aa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80092ac:	697b      	ldr	r3, [r7, #20]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3718      	adds	r7, #24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	e000ed04 	.word	0xe000ed04

080092bc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d103      	bne.n	80092da <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80092d2:	f06f 0303 	mvn.w	r3, #3
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	e02c      	b.n	8009334 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092da:	f3ef 8305 	mrs	r3, IPSR
 80092de:	60fb      	str	r3, [r7, #12]
  return(result);
 80092e0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d01a      	beq.n	800931c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80092ea:	f107 0308 	add.w	r3, r7, #8
 80092ee:	4619      	mov	r1, r3
 80092f0:	6938      	ldr	r0, [r7, #16]
 80092f2:	f000 fe4d 	bl	8009f90 <xQueueGiveFromISR>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d003      	beq.n	8009304 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80092fc:	f06f 0302 	mvn.w	r3, #2
 8009300:	617b      	str	r3, [r7, #20]
 8009302:	e017      	b.n	8009334 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d014      	beq.n	8009334 <osSemaphoreRelease+0x78>
 800930a:	4b0d      	ldr	r3, [pc, #52]	@ (8009340 <osSemaphoreRelease+0x84>)
 800930c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	e00b      	b.n	8009334 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800931c:	2300      	movs	r3, #0
 800931e:	2200      	movs	r2, #0
 8009320:	2100      	movs	r1, #0
 8009322:	6938      	ldr	r0, [r7, #16]
 8009324:	f000 fc94 	bl	8009c50 <xQueueGenericSend>
 8009328:	4603      	mov	r3, r0
 800932a:	2b01      	cmp	r3, #1
 800932c:	d002      	beq.n	8009334 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800932e:	f06f 0302 	mvn.w	r3, #2
 8009332:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009334:	697b      	ldr	r3, [r7, #20]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	e000ed04 	.word	0xe000ed04

08009344 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009344:	b580      	push	{r7, lr}
 8009346:	b08a      	sub	sp, #40	@ 0x28
 8009348:	af02      	add	r7, sp, #8
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009350:	2300      	movs	r3, #0
 8009352:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009354:	f3ef 8305 	mrs	r3, IPSR
 8009358:	613b      	str	r3, [r7, #16]
  return(result);
 800935a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800935c:	2b00      	cmp	r3, #0
 800935e:	d15f      	bne.n	8009420 <osMessageQueueNew+0xdc>
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d05c      	beq.n	8009420 <osMessageQueueNew+0xdc>
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d059      	beq.n	8009420 <osMessageQueueNew+0xdc>
    mem = -1;
 800936c:	f04f 33ff 	mov.w	r3, #4294967295
 8009370:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d029      	beq.n	80093cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d012      	beq.n	80093a6 <osMessageQueueNew+0x62>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	2b4f      	cmp	r3, #79	@ 0x4f
 8009386:	d90e      	bls.n	80093a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00a      	beq.n	80093a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	695a      	ldr	r2, [r3, #20]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	68b9      	ldr	r1, [r7, #8]
 8009398:	fb01 f303 	mul.w	r3, r1, r3
 800939c:	429a      	cmp	r2, r3
 800939e:	d302      	bcc.n	80093a6 <osMessageQueueNew+0x62>
        mem = 1;
 80093a0:	2301      	movs	r3, #1
 80093a2:	61bb      	str	r3, [r7, #24]
 80093a4:	e014      	b.n	80093d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d110      	bne.n	80093d0 <osMessageQueueNew+0x8c>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10c      	bne.n	80093d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d108      	bne.n	80093d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d104      	bne.n	80093d0 <osMessageQueueNew+0x8c>
          mem = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	61bb      	str	r3, [r7, #24]
 80093ca:	e001      	b.n	80093d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d10b      	bne.n	80093ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691a      	ldr	r2, [r3, #16]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2100      	movs	r1, #0
 80093e0:	9100      	str	r1, [sp, #0]
 80093e2:	68b9      	ldr	r1, [r7, #8]
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 fa31 	bl	800984c <xQueueGenericCreateStatic>
 80093ea:	61f8      	str	r0, [r7, #28]
 80093ec:	e008      	b.n	8009400 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d105      	bne.n	8009400 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80093f4:	2200      	movs	r2, #0
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 faa4 	bl	8009946 <xQueueGenericCreate>
 80093fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00c      	beq.n	8009420 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <osMessageQueueNew+0xd0>
        name = attr->name;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	617b      	str	r3, [r7, #20]
 8009412:	e001      	b.n	8009418 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009418:	6979      	ldr	r1, [r7, #20]
 800941a:	69f8      	ldr	r0, [r7, #28]
 800941c:	f001 fa08 	bl	800a830 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009420:	69fb      	ldr	r3, [r7, #28]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3720      	adds	r7, #32
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	4613      	mov	r3, r2
 800943a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009440:	2300      	movs	r3, #0
 8009442:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009444:	f3ef 8305 	mrs	r3, IPSR
 8009448:	617b      	str	r3, [r7, #20]
  return(result);
 800944a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800944c:	2b00      	cmp	r3, #0
 800944e:	d028      	beq.n	80094a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d005      	beq.n	8009462 <osMessageQueuePut+0x36>
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <osMessageQueuePut+0x36>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009462:	f06f 0303 	mvn.w	r3, #3
 8009466:	61fb      	str	r3, [r7, #28]
 8009468:	e038      	b.n	80094dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800946a:	2300      	movs	r3, #0
 800946c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800946e:	f107 0210 	add.w	r2, r7, #16
 8009472:	2300      	movs	r3, #0
 8009474:	68b9      	ldr	r1, [r7, #8]
 8009476:	69b8      	ldr	r0, [r7, #24]
 8009478:	f000 fcec 	bl	8009e54 <xQueueGenericSendFromISR>
 800947c:	4603      	mov	r3, r0
 800947e:	2b01      	cmp	r3, #1
 8009480:	d003      	beq.n	800948a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009482:	f06f 0302 	mvn.w	r3, #2
 8009486:	61fb      	str	r3, [r7, #28]
 8009488:	e028      	b.n	80094dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d025      	beq.n	80094dc <osMessageQueuePut+0xb0>
 8009490:	4b15      	ldr	r3, [pc, #84]	@ (80094e8 <osMessageQueuePut+0xbc>)
 8009492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	e01c      	b.n	80094dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <osMessageQueuePut+0x82>
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d103      	bne.n	80094b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80094ae:	f06f 0303 	mvn.w	r3, #3
 80094b2:	61fb      	str	r3, [r7, #28]
 80094b4:	e012      	b.n	80094dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80094b6:	2300      	movs	r3, #0
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	68b9      	ldr	r1, [r7, #8]
 80094bc:	69b8      	ldr	r0, [r7, #24]
 80094be:	f000 fbc7 	bl	8009c50 <xQueueGenericSend>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d009      	beq.n	80094dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80094ce:	f06f 0301 	mvn.w	r3, #1
 80094d2:	61fb      	str	r3, [r7, #28]
 80094d4:	e002      	b.n	80094dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80094d6:	f06f 0302 	mvn.w	r3, #2
 80094da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80094dc:	69fb      	ldr	r3, [r7, #28]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3720      	adds	r7, #32
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	e000ed04 	.word	0xe000ed04

080094ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
 80094f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80094fe:	2300      	movs	r3, #0
 8009500:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009502:	f3ef 8305 	mrs	r3, IPSR
 8009506:	617b      	str	r3, [r7, #20]
  return(result);
 8009508:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800950a:	2b00      	cmp	r3, #0
 800950c:	d028      	beq.n	8009560 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d005      	beq.n	8009520 <osMessageQueueGet+0x34>
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d002      	beq.n	8009520 <osMessageQueueGet+0x34>
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d003      	beq.n	8009528 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009520:	f06f 0303 	mvn.w	r3, #3
 8009524:	61fb      	str	r3, [r7, #28]
 8009526:	e037      	b.n	8009598 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009528:	2300      	movs	r3, #0
 800952a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800952c:	f107 0310 	add.w	r3, r7, #16
 8009530:	461a      	mov	r2, r3
 8009532:	68b9      	ldr	r1, [r7, #8]
 8009534:	69b8      	ldr	r0, [r7, #24]
 8009536:	f000 ffad 	bl	800a494 <xQueueReceiveFromISR>
 800953a:	4603      	mov	r3, r0
 800953c:	2b01      	cmp	r3, #1
 800953e:	d003      	beq.n	8009548 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009540:	f06f 0302 	mvn.w	r3, #2
 8009544:	61fb      	str	r3, [r7, #28]
 8009546:	e027      	b.n	8009598 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d024      	beq.n	8009598 <osMessageQueueGet+0xac>
 800954e:	4b15      	ldr	r3, [pc, #84]	@ (80095a4 <osMessageQueueGet+0xb8>)
 8009550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009554:	601a      	str	r2, [r3, #0]
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	e01b      	b.n	8009598 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d002      	beq.n	800956c <osMessageQueueGet+0x80>
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d103      	bne.n	8009574 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800956c:	f06f 0303 	mvn.w	r3, #3
 8009570:	61fb      	str	r3, [r7, #28]
 8009572:	e011      	b.n	8009598 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	69b8      	ldr	r0, [r7, #24]
 800957a:	f000 fd99 	bl	800a0b0 <xQueueReceive>
 800957e:	4603      	mov	r3, r0
 8009580:	2b01      	cmp	r3, #1
 8009582:	d009      	beq.n	8009598 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d003      	beq.n	8009592 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800958a:	f06f 0301 	mvn.w	r3, #1
 800958e:	61fb      	str	r3, [r7, #28]
 8009590:	e002      	b.n	8009598 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009592:	f06f 0302 	mvn.w	r3, #2
 8009596:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009598:	69fb      	ldr	r3, [r7, #28]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3720      	adds	r7, #32
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	e000ed04 	.word	0xe000ed04

080095a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4a07      	ldr	r2, [pc, #28]	@ (80095d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80095b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	4a06      	ldr	r2, [pc, #24]	@ (80095d8 <vApplicationGetIdleTaskMemory+0x30>)
 80095be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2280      	movs	r2, #128	@ 0x80
 80095c4:	601a      	str	r2, [r3, #0]
}
 80095c6:	bf00      	nop
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	20000810 	.word	0x20000810
 80095d8:	200008b8 	.word	0x200008b8

080095dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4a07      	ldr	r2, [pc, #28]	@ (8009608 <vApplicationGetTimerTaskMemory+0x2c>)
 80095ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	4a06      	ldr	r2, [pc, #24]	@ (800960c <vApplicationGetTimerTaskMemory+0x30>)
 80095f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80095fa:	601a      	str	r2, [r3, #0]
}
 80095fc:	bf00      	nop
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	20000ab8 	.word	0x20000ab8
 800960c:	20000b60 	.word	0x20000b60

08009610 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f103 0208 	add.w	r2, r3, #8
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f04f 32ff 	mov.w	r2, #4294967295
 8009628:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f103 0208 	add.w	r2, r3, #8
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f103 0208 	add.w	r2, r3, #8
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800965e:	bf00      	nop
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800966a:	b480      	push	{r7}
 800966c:	b085      	sub	sp, #20
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	1c5a      	adds	r2, r3, #1
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	601a      	str	r2, [r3, #0]
}
 80096a6:	bf00      	nop
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096b2:	b480      	push	{r7}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c8:	d103      	bne.n	80096d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e00c      	b.n	80096ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3308      	adds	r3, #8
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	e002      	b.n	80096e0 <vListInsert+0x2e>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d2f6      	bcs.n	80096da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	1c5a      	adds	r2, r3, #1
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	601a      	str	r2, [r3, #0]
}
 8009718:	bf00      	nop
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	6892      	ldr	r2, [r2, #8]
 800973a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	6852      	ldr	r2, [r2, #4]
 8009744:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d103      	bne.n	8009758 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689a      	ldr	r2, [r3, #8]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	1e5a      	subs	r2, r3, #1
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10b      	bne.n	80097a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800979e:	bf00      	nop
 80097a0:	bf00      	nop
 80097a2:	e7fd      	b.n	80097a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80097a4:	f003 f920 	bl	800c9e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097b0:	68f9      	ldr	r1, [r7, #12]
 80097b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80097b4:	fb01 f303 	mul.w	r3, r1, r3
 80097b8:	441a      	add	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097d4:	3b01      	subs	r3, #1
 80097d6:	68f9      	ldr	r1, [r7, #12]
 80097d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80097da:	fb01 f303 	mul.w	r3, r1, r3
 80097de:	441a      	add	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	22ff      	movs	r2, #255	@ 0xff
 80097e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	22ff      	movs	r2, #255	@ 0xff
 80097f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d114      	bne.n	8009824 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d01a      	beq.n	8009838 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3310      	adds	r3, #16
 8009806:	4618      	mov	r0, r3
 8009808:	f001 fde2 	bl	800b3d0 <xTaskRemoveFromEventList>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d012      	beq.n	8009838 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009812:	4b0d      	ldr	r3, [pc, #52]	@ (8009848 <xQueueGenericReset+0xd0>)
 8009814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	e009      	b.n	8009838 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3310      	adds	r3, #16
 8009828:	4618      	mov	r0, r3
 800982a:	f7ff fef1 	bl	8009610 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	3324      	adds	r3, #36	@ 0x24
 8009832:	4618      	mov	r0, r3
 8009834:	f7ff feec 	bl	8009610 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009838:	f003 f908 	bl	800ca4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800983c:	2301      	movs	r3, #1
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08e      	sub	sp, #56	@ 0x38
 8009850:	af02      	add	r7, sp, #8
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10b      	bne.n	8009878 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009872:	bf00      	nop
 8009874:	bf00      	nop
 8009876:	e7fd      	b.n	8009874 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10b      	bne.n	8009896 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009890:	bf00      	nop
 8009892:	bf00      	nop
 8009894:	e7fd      	b.n	8009892 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <xQueueGenericCreateStatic+0x56>
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <xQueueGenericCreateStatic+0x5a>
 80098a2:	2301      	movs	r3, #1
 80098a4:	e000      	b.n	80098a8 <xQueueGenericCreateStatic+0x5c>
 80098a6:	2300      	movs	r3, #0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10b      	bne.n	80098c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	623b      	str	r3, [r7, #32]
}
 80098be:	bf00      	nop
 80098c0:	bf00      	nop
 80098c2:	e7fd      	b.n	80098c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d102      	bne.n	80098d0 <xQueueGenericCreateStatic+0x84>
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <xQueueGenericCreateStatic+0x88>
 80098d0:	2301      	movs	r3, #1
 80098d2:	e000      	b.n	80098d6 <xQueueGenericCreateStatic+0x8a>
 80098d4:	2300      	movs	r3, #0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10b      	bne.n	80098f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	61fb      	str	r3, [r7, #28]
}
 80098ec:	bf00      	nop
 80098ee:	bf00      	nop
 80098f0:	e7fd      	b.n	80098ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80098f2:	2350      	movs	r3, #80	@ 0x50
 80098f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2b50      	cmp	r3, #80	@ 0x50
 80098fa:	d00b      	beq.n	8009914 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	61bb      	str	r3, [r7, #24]
}
 800990e:	bf00      	nop
 8009910:	bf00      	nop
 8009912:	e7fd      	b.n	8009910 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009914:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800991a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00d      	beq.n	800993c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009928:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800992c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	4613      	mov	r3, r2
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	68b9      	ldr	r1, [r7, #8]
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 f840 	bl	80099bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800993c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800993e:	4618      	mov	r0, r3
 8009940:	3730      	adds	r7, #48	@ 0x30
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009946:	b580      	push	{r7, lr}
 8009948:	b08a      	sub	sp, #40	@ 0x28
 800994a:	af02      	add	r7, sp, #8
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	4613      	mov	r3, r2
 8009952:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10b      	bne.n	8009972 <xQueueGenericCreate+0x2c>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	613b      	str	r3, [r7, #16]
}
 800996c:	bf00      	nop
 800996e:	bf00      	nop
 8009970:	e7fd      	b.n	800996e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	fb02 f303 	mul.w	r3, r2, r3
 800997a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	3350      	adds	r3, #80	@ 0x50
 8009980:	4618      	mov	r0, r3
 8009982:	f003 f953 	bl	800cc2c <pvPortMalloc>
 8009986:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d011      	beq.n	80099b2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	3350      	adds	r3, #80	@ 0x50
 8009996:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099a0:	79fa      	ldrb	r2, [r7, #7]
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	4613      	mov	r3, r2
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	68b9      	ldr	r1, [r7, #8]
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 f805 	bl	80099bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80099b2:	69bb      	ldr	r3, [r7, #24]
	}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3720      	adds	r7, #32
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
 80099c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d103      	bne.n	80099d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	69ba      	ldr	r2, [r7, #24]
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	e002      	b.n	80099de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80099ea:	2101      	movs	r1, #1
 80099ec:	69b8      	ldr	r0, [r7, #24]
 80099ee:	f7ff fec3 	bl	8009778 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	78fa      	ldrb	r2, [r7, #3]
 80099f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80099fa:	bf00      	nop
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b082      	sub	sp, #8
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00e      	beq.n	8009a2e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009a22:	2300      	movs	r3, #0
 8009a24:	2200      	movs	r2, #0
 8009a26:	2100      	movs	r1, #0
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f911 	bl	8009c50 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009a2e:	bf00      	nop
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b086      	sub	sp, #24
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009a40:	2301      	movs	r3, #1
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	2300      	movs	r3, #0
 8009a46:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009a48:	79fb      	ldrb	r3, [r7, #7]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	6939      	ldr	r1, [r7, #16]
 8009a4e:	6978      	ldr	r0, [r7, #20]
 8009a50:	f7ff ff79 	bl	8009946 <xQueueGenericCreate>
 8009a54:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff ffd3 	bl	8009a02 <prvInitialiseMutex>

		return xNewQueue;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
	}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3718      	adds	r7, #24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b088      	sub	sp, #32
 8009a6a:	af02      	add	r7, sp, #8
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	6039      	str	r1, [r7, #0]
 8009a70:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009a72:	2301      	movs	r3, #1
 8009a74:	617b      	str	r3, [r7, #20]
 8009a76:	2300      	movs	r3, #0
 8009a78:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009a7a:	79fb      	ldrb	r3, [r7, #7]
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2200      	movs	r2, #0
 8009a82:	6939      	ldr	r1, [r7, #16]
 8009a84:	6978      	ldr	r0, [r7, #20]
 8009a86:	f7ff fee1 	bl	800984c <xQueueGenericCreateStatic>
 8009a8a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f7ff ffb8 	bl	8009a02 <prvInitialiseMutex>

		return xNewQueue;
 8009a92:	68fb      	ldr	r3, [r7, #12]
	}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009a9c:	b590      	push	{r4, r7, lr}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10b      	bne.n	8009ac6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	60fb      	str	r3, [r7, #12]
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	e7fd      	b.n	8009ac2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	689c      	ldr	r4, [r3, #8]
 8009aca:	f001 fe47 	bl	800b75c <xTaskGetCurrentTaskHandle>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	429c      	cmp	r4, r3
 8009ad2:	d111      	bne.n	8009af8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	1e5a      	subs	r2, r3, #1
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d105      	bne.n	8009af2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2100      	movs	r1, #0
 8009aec:	6938      	ldr	r0, [r7, #16]
 8009aee:	f000 f8af 	bl	8009c50 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009af2:	2301      	movs	r3, #1
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	e001      	b.n	8009afc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009af8:	2300      	movs	r3, #0
 8009afa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009afc:	697b      	ldr	r3, [r7, #20]
	}
 8009afe:	4618      	mov	r0, r3
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd90      	pop	{r4, r7, pc}

08009b06 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009b06:	b590      	push	{r4, r7, lr}
 8009b08:	b087      	sub	sp, #28
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10b      	bne.n	8009b32 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	60fb      	str	r3, [r7, #12]
}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	e7fd      	b.n	8009b2e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	689c      	ldr	r4, [r3, #8]
 8009b36:	f001 fe11 	bl	800b75c <xTaskGetCurrentTaskHandle>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	d107      	bne.n	8009b50 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	617b      	str	r3, [r7, #20]
 8009b4e:	e00c      	b.n	8009b6a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6938      	ldr	r0, [r7, #16]
 8009b54:	f000 fb8e 	bl	800a274 <xQueueSemaphoreTake>
 8009b58:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009b6a:	697b      	ldr	r3, [r7, #20]
	}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd90      	pop	{r4, r7, pc}

08009b74 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08a      	sub	sp, #40	@ 0x28
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10b      	bne.n	8009b9e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8009b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	61bb      	str	r3, [r7, #24]
}
 8009b98:	bf00      	nop
 8009b9a:	bf00      	nop
 8009b9c:	e7fd      	b.n	8009b9a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d90b      	bls.n	8009bbe <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8009ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	617b      	str	r3, [r7, #20]
}
 8009bb8:	bf00      	nop
 8009bba:	bf00      	nop
 8009bbc:	e7fd      	b.n	8009bba <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff fe3f 	bl	800984c <xQueueGenericCreateStatic>
 8009bce:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
	}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3720      	adds	r7, #32
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b086      	sub	sp, #24
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10b      	bne.n	8009c0e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	613b      	str	r3, [r7, #16]
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	e7fd      	b.n	8009c0a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d90b      	bls.n	8009c2e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	60fb      	str	r3, [r7, #12]
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	e7fd      	b.n	8009c2a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c2e:	2202      	movs	r2, #2
 8009c30:	2100      	movs	r1, #0
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7ff fe87 	bl	8009946 <xQueueGenericCreate>
 8009c38:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d002      	beq.n	8009c46 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009c46:	697b      	ldr	r3, [r7, #20]
	}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b08e      	sub	sp, #56	@ 0x38
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10b      	bne.n	8009c84 <xQueueGenericSend+0x34>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	e7fd      	b.n	8009c80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d103      	bne.n	8009c92 <xQueueGenericSend+0x42>
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d101      	bne.n	8009c96 <xQueueGenericSend+0x46>
 8009c92:	2301      	movs	r3, #1
 8009c94:	e000      	b.n	8009c98 <xQueueGenericSend+0x48>
 8009c96:	2300      	movs	r3, #0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d10b      	bne.n	8009cb4 <xQueueGenericSend+0x64>
	__asm volatile
 8009c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009cae:	bf00      	nop
 8009cb0:	bf00      	nop
 8009cb2:	e7fd      	b.n	8009cb0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d103      	bne.n	8009cc2 <xQueueGenericSend+0x72>
 8009cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d101      	bne.n	8009cc6 <xQueueGenericSend+0x76>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e000      	b.n	8009cc8 <xQueueGenericSend+0x78>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10b      	bne.n	8009ce4 <xQueueGenericSend+0x94>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	623b      	str	r3, [r7, #32]
}
 8009cde:	bf00      	nop
 8009ce0:	bf00      	nop
 8009ce2:	e7fd      	b.n	8009ce0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ce4:	f001 fd4a 	bl	800b77c <xTaskGetSchedulerState>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d102      	bne.n	8009cf4 <xQueueGenericSend+0xa4>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <xQueueGenericSend+0xa8>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e000      	b.n	8009cfa <xQueueGenericSend+0xaa>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10b      	bne.n	8009d16 <xQueueGenericSend+0xc6>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	61fb      	str	r3, [r7, #28]
}
 8009d10:	bf00      	nop
 8009d12:	bf00      	nop
 8009d14:	e7fd      	b.n	8009d12 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d16:	f002 fe67 	bl	800c9e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d302      	bcc.n	8009d2c <xQueueGenericSend+0xdc>
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d129      	bne.n	8009d80 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	68b9      	ldr	r1, [r7, #8]
 8009d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d32:	f000 fc6d 	bl	800a610 <prvCopyDataToQueue>
 8009d36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d010      	beq.n	8009d62 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d42:	3324      	adds	r3, #36	@ 0x24
 8009d44:	4618      	mov	r0, r3
 8009d46:	f001 fb43 	bl	800b3d0 <xTaskRemoveFromEventList>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d013      	beq.n	8009d78 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d50:	4b3f      	ldr	r3, [pc, #252]	@ (8009e50 <xQueueGenericSend+0x200>)
 8009d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	e00a      	b.n	8009d78 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d007      	beq.n	8009d78 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d68:	4b39      	ldr	r3, [pc, #228]	@ (8009e50 <xQueueGenericSend+0x200>)
 8009d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d78:	f002 fe68 	bl	800ca4c <vPortExitCritical>
				return pdPASS;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e063      	b.n	8009e48 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d103      	bne.n	8009d8e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d86:	f002 fe61 	bl	800ca4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	e05c      	b.n	8009e48 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d106      	bne.n	8009da2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d94:	f107 0314 	add.w	r3, r7, #20
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f001 fb7d 	bl	800b498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009da2:	f002 fe53 	bl	800ca4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009da6:	f001 f8af 	bl	800af08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009daa:	f002 fe1d 	bl	800c9e8 <vPortEnterCritical>
 8009dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009db4:	b25b      	sxtb	r3, r3
 8009db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dba:	d103      	bne.n	8009dc4 <xQueueGenericSend+0x174>
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dca:	b25b      	sxtb	r3, r3
 8009dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd0:	d103      	bne.n	8009dda <xQueueGenericSend+0x18a>
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009dda:	f002 fe37 	bl	800ca4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dde:	1d3a      	adds	r2, r7, #4
 8009de0:	f107 0314 	add.w	r3, r7, #20
 8009de4:	4611      	mov	r1, r2
 8009de6:	4618      	mov	r0, r3
 8009de8:	f001 fb6c 	bl	800b4c4 <xTaskCheckForTimeOut>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d124      	bne.n	8009e3c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009df2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009df4:	f000 fd04 	bl	800a800 <prvIsQueueFull>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d018      	beq.n	8009e30 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e00:	3310      	adds	r3, #16
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	4611      	mov	r1, r2
 8009e06:	4618      	mov	r0, r3
 8009e08:	f001 fa90 	bl	800b32c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e0e:	f000 fc8f 	bl	800a730 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e12:	f001 f887 	bl	800af24 <xTaskResumeAll>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f47f af7c 	bne.w	8009d16 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8009e50 <xQueueGenericSend+0x200>)
 8009e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	e772      	b.n	8009d16 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e32:	f000 fc7d 	bl	800a730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e36:	f001 f875 	bl	800af24 <xTaskResumeAll>
 8009e3a:	e76c      	b.n	8009d16 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e3e:	f000 fc77 	bl	800a730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e42:	f001 f86f 	bl	800af24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3738      	adds	r7, #56	@ 0x38
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	e000ed04 	.word	0xe000ed04

08009e54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b090      	sub	sp, #64	@ 0x40
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10b      	bne.n	8009e84 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e70:	f383 8811 	msr	BASEPRI, r3
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e7e:	bf00      	nop
 8009e80:	bf00      	nop
 8009e82:	e7fd      	b.n	8009e80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d103      	bne.n	8009e92 <xQueueGenericSendFromISR+0x3e>
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <xQueueGenericSendFromISR+0x42>
 8009e92:	2301      	movs	r3, #1
 8009e94:	e000      	b.n	8009e98 <xQueueGenericSendFromISR+0x44>
 8009e96:	2300      	movs	r3, #0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10b      	bne.n	8009eb4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009eae:	bf00      	nop
 8009eb0:	bf00      	nop
 8009eb2:	e7fd      	b.n	8009eb0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d103      	bne.n	8009ec2 <xQueueGenericSendFromISR+0x6e>
 8009eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <xQueueGenericSendFromISR+0x72>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e000      	b.n	8009ec8 <xQueueGenericSendFromISR+0x74>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10b      	bne.n	8009ee4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	623b      	str	r3, [r7, #32]
}
 8009ede:	bf00      	nop
 8009ee0:	bf00      	nop
 8009ee2:	e7fd      	b.n	8009ee0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ee4:	f002 fe60 	bl	800cba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ee8:	f3ef 8211 	mrs	r2, BASEPRI
 8009eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	61fa      	str	r2, [r7, #28]
 8009efe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f00:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f02:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d302      	bcc.n	8009f16 <xQueueGenericSendFromISR+0xc2>
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d12f      	bne.n	8009f76 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	68b9      	ldr	r1, [r7, #8]
 8009f2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f2c:	f000 fb70 	bl	800a610 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f30:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f38:	d112      	bne.n	8009f60 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d016      	beq.n	8009f70 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f44:	3324      	adds	r3, #36	@ 0x24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f001 fa42 	bl	800b3d0 <xTaskRemoveFromEventList>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00e      	beq.n	8009f70 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00b      	beq.n	8009f70 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	e007      	b.n	8009f70 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009f64:	3301      	adds	r3, #1
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	b25a      	sxtb	r2, r3
 8009f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009f70:	2301      	movs	r3, #1
 8009f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009f74:	e001      	b.n	8009f7a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f76:	2300      	movs	r3, #0
 8009f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f7c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3740      	adds	r7, #64	@ 0x40
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08e      	sub	sp, #56	@ 0x38
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10b      	bne.n	8009fbc <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	623b      	str	r3, [r7, #32]
}
 8009fb6:	bf00      	nop
 8009fb8:	bf00      	nop
 8009fba:	e7fd      	b.n	8009fb8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00b      	beq.n	8009fdc <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	61fb      	str	r3, [r7, #28]
}
 8009fd6:	bf00      	nop
 8009fd8:	bf00      	nop
 8009fda:	e7fd      	b.n	8009fd8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d103      	bne.n	8009fec <xQueueGiveFromISR+0x5c>
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <xQueueGiveFromISR+0x60>
 8009fec:	2301      	movs	r3, #1
 8009fee:	e000      	b.n	8009ff2 <xQueueGiveFromISR+0x62>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10b      	bne.n	800a00e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	61bb      	str	r3, [r7, #24]
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	e7fd      	b.n	800a00a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a00e:	f002 fdcb 	bl	800cba8 <vPortValidateInterruptPriority>
	__asm volatile
 800a012:	f3ef 8211 	mrs	r2, BASEPRI
 800a016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	617a      	str	r2, [r7, #20]
 800a028:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a02a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a02c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a032:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a038:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d22b      	bcs.n	800a096 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a040:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a044:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a050:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a058:	d112      	bne.n	800a080 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d016      	beq.n	800a090 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a064:	3324      	adds	r3, #36	@ 0x24
 800a066:	4618      	mov	r0, r3
 800a068:	f001 f9b2 	bl	800b3d0 <xTaskRemoveFromEventList>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00e      	beq.n	800a090 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00b      	beq.n	800a090 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2201      	movs	r2, #1
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	e007      	b.n	800a090 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a084:	3301      	adds	r3, #1
 800a086:	b2db      	uxtb	r3, r3
 800a088:	b25a      	sxtb	r2, r3
 800a08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a090:	2301      	movs	r3, #1
 800a092:	637b      	str	r3, [r7, #52]	@ 0x34
 800a094:	e001      	b.n	800a09a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a096:	2300      	movs	r3, #0
 800a098:	637b      	str	r3, [r7, #52]	@ 0x34
 800a09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f383 8811 	msr	BASEPRI, r3
}
 800a0a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3738      	adds	r7, #56	@ 0x38
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08c      	sub	sp, #48	@ 0x30
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10b      	bne.n	800a0e2 <xQueueReceive+0x32>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	623b      	str	r3, [r7, #32]
}
 800a0dc:	bf00      	nop
 800a0de:	bf00      	nop
 800a0e0:	e7fd      	b.n	800a0de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d103      	bne.n	800a0f0 <xQueueReceive+0x40>
 800a0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <xQueueReceive+0x44>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e000      	b.n	800a0f6 <xQueueReceive+0x46>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10b      	bne.n	800a112 <xQueueReceive+0x62>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	61fb      	str	r3, [r7, #28]
}
 800a10c:	bf00      	nop
 800a10e:	bf00      	nop
 800a110:	e7fd      	b.n	800a10e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a112:	f001 fb33 	bl	800b77c <xTaskGetSchedulerState>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d102      	bne.n	800a122 <xQueueReceive+0x72>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <xQueueReceive+0x76>
 800a122:	2301      	movs	r3, #1
 800a124:	e000      	b.n	800a128 <xQueueReceive+0x78>
 800a126:	2300      	movs	r3, #0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10b      	bne.n	800a144 <xQueueReceive+0x94>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	61bb      	str	r3, [r7, #24]
}
 800a13e:	bf00      	nop
 800a140:	bf00      	nop
 800a142:	e7fd      	b.n	800a140 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a144:	f002 fc50 	bl	800c9e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a14c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a150:	2b00      	cmp	r3, #0
 800a152:	d01f      	beq.n	800a194 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a154:	68b9      	ldr	r1, [r7, #8]
 800a156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a158:	f000 fac4 	bl	800a6e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15e:	1e5a      	subs	r2, r3, #1
 800a160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a162:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00f      	beq.n	800a18c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16e:	3310      	adds	r3, #16
 800a170:	4618      	mov	r0, r3
 800a172:	f001 f92d 	bl	800b3d0 <xTaskRemoveFromEventList>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d007      	beq.n	800a18c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a17c:	4b3c      	ldr	r3, [pc, #240]	@ (800a270 <xQueueReceive+0x1c0>)
 800a17e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a182:	601a      	str	r2, [r3, #0]
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a18c:	f002 fc5e 	bl	800ca4c <vPortExitCritical>
				return pdPASS;
 800a190:	2301      	movs	r3, #1
 800a192:	e069      	b.n	800a268 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d103      	bne.n	800a1a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a19a:	f002 fc57 	bl	800ca4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	e062      	b.n	800a268 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d106      	bne.n	800a1b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1a8:	f107 0310 	add.w	r3, r7, #16
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f001 f973 	bl	800b498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1b6:	f002 fc49 	bl	800ca4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1ba:	f000 fea5 	bl	800af08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1be:	f002 fc13 	bl	800c9e8 <vPortEnterCritical>
 800a1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1c8:	b25b      	sxtb	r3, r3
 800a1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ce:	d103      	bne.n	800a1d8 <xQueueReceive+0x128>
 800a1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1de:	b25b      	sxtb	r3, r3
 800a1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e4:	d103      	bne.n	800a1ee <xQueueReceive+0x13e>
 800a1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1ee:	f002 fc2d 	bl	800ca4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1f2:	1d3a      	adds	r2, r7, #4
 800a1f4:	f107 0310 	add.w	r3, r7, #16
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f001 f962 	bl	800b4c4 <xTaskCheckForTimeOut>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d123      	bne.n	800a24e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a208:	f000 fae4 	bl	800a7d4 <prvIsQueueEmpty>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d017      	beq.n	800a242 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a214:	3324      	adds	r3, #36	@ 0x24
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f001 f886 	bl	800b32c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a222:	f000 fa85 	bl	800a730 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a226:	f000 fe7d 	bl	800af24 <xTaskResumeAll>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d189      	bne.n	800a144 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a230:	4b0f      	ldr	r3, [pc, #60]	@ (800a270 <xQueueReceive+0x1c0>)
 800a232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	e780      	b.n	800a144 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a244:	f000 fa74 	bl	800a730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a248:	f000 fe6c 	bl	800af24 <xTaskResumeAll>
 800a24c:	e77a      	b.n	800a144 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a24e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a250:	f000 fa6e 	bl	800a730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a254:	f000 fe66 	bl	800af24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a25a:	f000 fabb 	bl	800a7d4 <prvIsQueueEmpty>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	f43f af6f 	beq.w	800a144 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a266:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3730      	adds	r7, #48	@ 0x30
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	e000ed04 	.word	0xe000ed04

0800a274 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08e      	sub	sp, #56	@ 0x38
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a27e:	2300      	movs	r3, #0
 800a280:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a286:	2300      	movs	r3, #0
 800a288:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10b      	bne.n	800a2a8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	623b      	str	r3, [r7, #32]
}
 800a2a2:	bf00      	nop
 800a2a4:	bf00      	nop
 800a2a6:	e7fd      	b.n	800a2a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	61fb      	str	r3, [r7, #28]
}
 800a2c2:	bf00      	nop
 800a2c4:	bf00      	nop
 800a2c6:	e7fd      	b.n	800a2c4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2c8:	f001 fa58 	bl	800b77c <xTaskGetSchedulerState>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d102      	bne.n	800a2d8 <xQueueSemaphoreTake+0x64>
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <xQueueSemaphoreTake+0x68>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e000      	b.n	800a2de <xQueueSemaphoreTake+0x6a>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10b      	bne.n	800a2fa <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	61bb      	str	r3, [r7, #24]
}
 800a2f4:	bf00      	nop
 800a2f6:	bf00      	nop
 800a2f8:	e7fd      	b.n	800a2f6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2fa:	f002 fb75 	bl	800c9e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a302:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a306:	2b00      	cmp	r3, #0
 800a308:	d024      	beq.n	800a354 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30c:	1e5a      	subs	r2, r3, #1
 800a30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a310:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d104      	bne.n	800a324 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a31a:	f001 fba9 	bl	800ba70 <pvTaskIncrementMutexHeldCount>
 800a31e:	4602      	mov	r2, r0
 800a320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a322:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00f      	beq.n	800a34c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32e:	3310      	adds	r3, #16
 800a330:	4618      	mov	r0, r3
 800a332:	f001 f84d 	bl	800b3d0 <xTaskRemoveFromEventList>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d007      	beq.n	800a34c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a33c:	4b54      	ldr	r3, [pc, #336]	@ (800a490 <xQueueSemaphoreTake+0x21c>)
 800a33e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a34c:	f002 fb7e 	bl	800ca4c <vPortExitCritical>
				return pdPASS;
 800a350:	2301      	movs	r3, #1
 800a352:	e098      	b.n	800a486 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d112      	bne.n	800a380 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00b      	beq.n	800a378 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	617b      	str	r3, [r7, #20]
}
 800a372:	bf00      	nop
 800a374:	bf00      	nop
 800a376:	e7fd      	b.n	800a374 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a378:	f002 fb68 	bl	800ca4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a37c:	2300      	movs	r3, #0
 800a37e:	e082      	b.n	800a486 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a382:	2b00      	cmp	r3, #0
 800a384:	d106      	bne.n	800a394 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a386:	f107 030c 	add.w	r3, r7, #12
 800a38a:	4618      	mov	r0, r3
 800a38c:	f001 f884 	bl	800b498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a390:	2301      	movs	r3, #1
 800a392:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a394:	f002 fb5a 	bl	800ca4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a398:	f000 fdb6 	bl	800af08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a39c:	f002 fb24 	bl	800c9e8 <vPortEnterCritical>
 800a3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3a6:	b25b      	sxtb	r3, r3
 800a3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ac:	d103      	bne.n	800a3b6 <xQueueSemaphoreTake+0x142>
 800a3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3bc:	b25b      	sxtb	r3, r3
 800a3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c2:	d103      	bne.n	800a3cc <xQueueSemaphoreTake+0x158>
 800a3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3cc:	f002 fb3e 	bl	800ca4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3d0:	463a      	mov	r2, r7
 800a3d2:	f107 030c 	add.w	r3, r7, #12
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f001 f873 	bl	800b4c4 <xTaskCheckForTimeOut>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d132      	bne.n	800a44a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3e6:	f000 f9f5 	bl	800a7d4 <prvIsQueueEmpty>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d026      	beq.n	800a43e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d109      	bne.n	800a40c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a3f8:	f002 faf6 	bl	800c9e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	4618      	mov	r0, r3
 800a402:	f001 f9d9 	bl	800b7b8 <xTaskPriorityInherit>
 800a406:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a408:	f002 fb20 	bl	800ca4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40e:	3324      	adds	r3, #36	@ 0x24
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	4611      	mov	r1, r2
 800a414:	4618      	mov	r0, r3
 800a416:	f000 ff89 	bl	800b32c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a41a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a41c:	f000 f988 	bl	800a730 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a420:	f000 fd80 	bl	800af24 <xTaskResumeAll>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	f47f af67 	bne.w	800a2fa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a42c:	4b18      	ldr	r3, [pc, #96]	@ (800a490 <xQueueSemaphoreTake+0x21c>)
 800a42e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	e75d      	b.n	800a2fa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a43e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a440:	f000 f976 	bl	800a730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a444:	f000 fd6e 	bl	800af24 <xTaskResumeAll>
 800a448:	e757      	b.n	800a2fa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a44a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a44c:	f000 f970 	bl	800a730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a450:	f000 fd68 	bl	800af24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a454:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a456:	f000 f9bd 	bl	800a7d4 <prvIsQueueEmpty>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f43f af4c 	beq.w	800a2fa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00d      	beq.n	800a484 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a468:	f002 fabe 	bl	800c9e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a46c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a46e:	f000 f8b7 	bl	800a5e0 <prvGetDisinheritPriorityAfterTimeout>
 800a472:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a47a:	4618      	mov	r0, r3
 800a47c:	f001 fa74 	bl	800b968 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a480:	f002 fae4 	bl	800ca4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a484:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a486:	4618      	mov	r0, r3
 800a488:	3738      	adds	r7, #56	@ 0x38
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	e000ed04 	.word	0xe000ed04

0800a494 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08e      	sub	sp, #56	@ 0x38
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10b      	bne.n	800a4c2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	623b      	str	r3, [r7, #32]
}
 800a4bc:	bf00      	nop
 800a4be:	bf00      	nop
 800a4c0:	e7fd      	b.n	800a4be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d103      	bne.n	800a4d0 <xQueueReceiveFromISR+0x3c>
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d101      	bne.n	800a4d4 <xQueueReceiveFromISR+0x40>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e000      	b.n	800a4d6 <xQueueReceiveFromISR+0x42>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10b      	bne.n	800a4f2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	61fb      	str	r3, [r7, #28]
}
 800a4ec:	bf00      	nop
 800a4ee:	bf00      	nop
 800a4f0:	e7fd      	b.n	800a4ee <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4f2:	f002 fb59 	bl	800cba8 <vPortValidateInterruptPriority>
	__asm volatile
 800a4f6:	f3ef 8211 	mrs	r2, BASEPRI
 800a4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	61ba      	str	r2, [r7, #24]
 800a50c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a50e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a510:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a516:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d02f      	beq.n	800a57e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a520:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a528:	68b9      	ldr	r1, [r7, #8]
 800a52a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a52c:	f000 f8da 	bl	800a6e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a532:	1e5a      	subs	r2, r3, #1
 800a534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a536:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a538:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a540:	d112      	bne.n	800a568 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d016      	beq.n	800a578 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54c:	3310      	adds	r3, #16
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 ff3e 	bl	800b3d0 <xTaskRemoveFromEventList>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00e      	beq.n	800a578 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00b      	beq.n	800a578 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	e007      	b.n	800a578 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a56c:	3301      	adds	r3, #1
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	b25a      	sxtb	r2, r3
 800a572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a578:	2301      	movs	r3, #1
 800a57a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a57c:	e001      	b.n	800a582 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a57e:	2300      	movs	r3, #0
 800a580:	637b      	str	r3, [r7, #52]	@ 0x34
 800a582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a584:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	f383 8811 	msr	BASEPRI, r3
}
 800a58c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a58e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a590:	4618      	mov	r0, r3
 800a592:	3738      	adds	r7, #56	@ 0x38
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d10b      	bne.n	800a5c2 <vQueueDelete+0x2a>
	__asm volatile
 800a5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	60bb      	str	r3, [r7, #8]
}
 800a5bc:	bf00      	nop
 800a5be:	bf00      	nop
 800a5c0:	e7fd      	b.n	800a5be <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f000 f95e 	bl	800a884 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d102      	bne.n	800a5d8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f002 fbfe 	bl	800cdd4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a5d8:	bf00      	nop
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d006      	beq.n	800a5fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	e001      	b.n	800a602 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a602:	68fb      	ldr	r3, [r7, #12]
	}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a61c:	2300      	movs	r3, #0
 800a61e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a624:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10d      	bne.n	800a64a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d14d      	bne.n	800a6d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f001 f924 	bl	800b888 <xTaskPriorityDisinherit>
 800a640:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	609a      	str	r2, [r3, #8]
 800a648:	e043      	b.n	800a6d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d119      	bne.n	800a684 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6858      	ldr	r0, [r3, #4]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a658:	461a      	mov	r2, r3
 800a65a:	68b9      	ldr	r1, [r7, #8]
 800a65c:	f004 fd15 	bl	800f08a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a668:	441a      	add	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	429a      	cmp	r2, r3
 800a678:	d32b      	bcc.n	800a6d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	605a      	str	r2, [r3, #4]
 800a682:	e026      	b.n	800a6d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	68d8      	ldr	r0, [r3, #12]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68c:	461a      	mov	r2, r3
 800a68e:	68b9      	ldr	r1, [r7, #8]
 800a690:	f004 fcfb 	bl	800f08a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68da      	ldr	r2, [r3, #12]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a69c:	425b      	negs	r3, r3
 800a69e:	441a      	add	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	68da      	ldr	r2, [r3, #12]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d207      	bcs.n	800a6c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	689a      	ldr	r2, [r3, #8]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b8:	425b      	negs	r3, r3
 800a6ba:	441a      	add	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d105      	bne.n	800a6d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	1c5a      	adds	r2, r3, #1
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a6da:	697b      	ldr	r3, [r7, #20]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d018      	beq.n	800a728 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68da      	ldr	r2, [r3, #12]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6fe:	441a      	add	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68da      	ldr	r2, [r3, #12]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d303      	bcc.n	800a718 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68d9      	ldr	r1, [r3, #12]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a720:	461a      	mov	r2, r3
 800a722:	6838      	ldr	r0, [r7, #0]
 800a724:	f004 fcb1 	bl	800f08a <memcpy>
	}
}
 800a728:	bf00      	nop
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a738:	f002 f956 	bl	800c9e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a742:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a744:	e011      	b.n	800a76a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d012      	beq.n	800a774 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	3324      	adds	r3, #36	@ 0x24
 800a752:	4618      	mov	r0, r3
 800a754:	f000 fe3c 	bl	800b3d0 <xTaskRemoveFromEventList>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a75e:	f000 ff15 	bl	800b58c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	3b01      	subs	r3, #1
 800a766:	b2db      	uxtb	r3, r3
 800a768:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a76a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	dce9      	bgt.n	800a746 <prvUnlockQueue+0x16>
 800a772:	e000      	b.n	800a776 <prvUnlockQueue+0x46>
					break;
 800a774:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	22ff      	movs	r2, #255	@ 0xff
 800a77a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a77e:	f002 f965 	bl	800ca4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a782:	f002 f931 	bl	800c9e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a78c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a78e:	e011      	b.n	800a7b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d012      	beq.n	800a7be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3310      	adds	r3, #16
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 fe17 	bl	800b3d0 <xTaskRemoveFromEventList>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a7a8:	f000 fef0 	bl	800b58c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	dce9      	bgt.n	800a790 <prvUnlockQueue+0x60>
 800a7bc:	e000      	b.n	800a7c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	22ff      	movs	r2, #255	@ 0xff
 800a7c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a7c8:	f002 f940 	bl	800ca4c <vPortExitCritical>
}
 800a7cc:	bf00      	nop
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7dc:	f002 f904 	bl	800c9e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	e001      	b.n	800a7f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7f2:	f002 f92b 	bl	800ca4c <vPortExitCritical>

	return xReturn;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a808:	f002 f8ee 	bl	800c9e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a814:	429a      	cmp	r2, r3
 800a816:	d102      	bne.n	800a81e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a818:	2301      	movs	r3, #1
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	e001      	b.n	800a822 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a81e:	2300      	movs	r3, #0
 800a820:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a822:	f002 f913 	bl	800ca4c <vPortExitCritical>

	return xReturn;
 800a826:	68fb      	ldr	r3, [r7, #12]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a83a:	2300      	movs	r3, #0
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	e014      	b.n	800a86a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a840:	4a0f      	ldr	r2, [pc, #60]	@ (800a880 <vQueueAddToRegistry+0x50>)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10b      	bne.n	800a864 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a84c:	490c      	ldr	r1, [pc, #48]	@ (800a880 <vQueueAddToRegistry+0x50>)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a856:	4a0a      	ldr	r2, [pc, #40]	@ (800a880 <vQueueAddToRegistry+0x50>)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	4413      	add	r3, r2
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a862:	e006      	b.n	800a872 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	3301      	adds	r3, #1
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2b07      	cmp	r3, #7
 800a86e:	d9e7      	bls.n	800a840 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a870:	bf00      	nop
 800a872:	bf00      	nop
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	20000f60 	.word	0x20000f60

0800a884 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a88c:	2300      	movs	r3, #0
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	e016      	b.n	800a8c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a892:	4a10      	ldr	r2, [pc, #64]	@ (800a8d4 <vQueueUnregisterQueue+0x50>)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	00db      	lsls	r3, r3, #3
 800a898:	4413      	add	r3, r2
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d10b      	bne.n	800a8ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a8a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a8d4 <vQueueUnregisterQueue+0x50>)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a8ac:	4a09      	ldr	r2, [pc, #36]	@ (800a8d4 <vQueueUnregisterQueue+0x50>)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	00db      	lsls	r3, r3, #3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	605a      	str	r2, [r3, #4]
				break;
 800a8b8:	e006      	b.n	800a8c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2b07      	cmp	r3, #7
 800a8c4:	d9e5      	bls.n	800a892 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a8c6:	bf00      	nop
 800a8c8:	bf00      	nop
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	20000f60 	.word	0x20000f60

0800a8d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8e8:	f002 f87e 	bl	800c9e8 <vPortEnterCritical>
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8f2:	b25b      	sxtb	r3, r3
 800a8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f8:	d103      	bne.n	800a902 <vQueueWaitForMessageRestricted+0x2a>
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a908:	b25b      	sxtb	r3, r3
 800a90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90e:	d103      	bne.n	800a918 <vQueueWaitForMessageRestricted+0x40>
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a918:	f002 f898 	bl	800ca4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a920:	2b00      	cmp	r3, #0
 800a922:	d106      	bne.n	800a932 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	3324      	adds	r3, #36	@ 0x24
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	68b9      	ldr	r1, [r7, #8]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f000 fd23 	bl	800b378 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a932:	6978      	ldr	r0, [r7, #20]
 800a934:	f7ff fefc 	bl	800a730 <prvUnlockQueue>
	}
 800a938:	bf00      	nop
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a940:	b580      	push	{r7, lr}
 800a942:	b08e      	sub	sp, #56	@ 0x38
 800a944:	af04      	add	r7, sp, #16
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
 800a94c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a94e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10b      	bne.n	800a96c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a958:	f383 8811 	msr	BASEPRI, r3
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	623b      	str	r3, [r7, #32]
}
 800a966:	bf00      	nop
 800a968:	bf00      	nop
 800a96a:	e7fd      	b.n	800a968 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10b      	bne.n	800a98a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	61fb      	str	r3, [r7, #28]
}
 800a984:	bf00      	nop
 800a986:	bf00      	nop
 800a988:	e7fd      	b.n	800a986 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a98a:	23a8      	movs	r3, #168	@ 0xa8
 800a98c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	2ba8      	cmp	r3, #168	@ 0xa8
 800a992:	d00b      	beq.n	800a9ac <xTaskCreateStatic+0x6c>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	61bb      	str	r3, [r7, #24]
}
 800a9a6:	bf00      	nop
 800a9a8:	bf00      	nop
 800a9aa:	e7fd      	b.n	800a9a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d01e      	beq.n	800a9f2 <xTaskCreateStatic+0xb2>
 800a9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d01b      	beq.n	800a9f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9303      	str	r3, [sp, #12]
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d2:	9302      	str	r3, [sp, #8]
 800a9d4:	f107 0314 	add.w	r3, r7, #20
 800a9d8:	9301      	str	r3, [sp, #4]
 800a9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	68b9      	ldr	r1, [r7, #8]
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f000 f851 	bl	800aa8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a9ec:	f000 f8f6 	bl	800abdc <prvAddNewTaskToReadyList>
 800a9f0:	e001      	b.n	800a9f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9f6:	697b      	ldr	r3, [r7, #20]
	}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3728      	adds	r7, #40	@ 0x28
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08c      	sub	sp, #48	@ 0x30
 800aa04:	af04      	add	r7, sp, #16
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	603b      	str	r3, [r7, #0]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa10:	88fb      	ldrh	r3, [r7, #6]
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4618      	mov	r0, r3
 800aa16:	f002 f909 	bl	800cc2c <pvPortMalloc>
 800aa1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00e      	beq.n	800aa40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa22:	20a8      	movs	r0, #168	@ 0xa8
 800aa24:	f002 f902 	bl	800cc2c <pvPortMalloc>
 800aa28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa36:	e005      	b.n	800aa44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa38:	6978      	ldr	r0, [r7, #20]
 800aa3a:	f002 f9cb 	bl	800cdd4 <vPortFree>
 800aa3e:	e001      	b.n	800aa44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa40:	2300      	movs	r3, #0
 800aa42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d017      	beq.n	800aa7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa52:	88fa      	ldrh	r2, [r7, #6]
 800aa54:	2300      	movs	r3, #0
 800aa56:	9303      	str	r3, [sp, #12]
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	9302      	str	r3, [sp, #8]
 800aa5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5e:	9301      	str	r3, [sp, #4]
 800aa60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	68b9      	ldr	r1, [r7, #8]
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 f80f 	bl	800aa8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa6e:	69f8      	ldr	r0, [r7, #28]
 800aa70:	f000 f8b4 	bl	800abdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa74:	2301      	movs	r3, #1
 800aa76:	61bb      	str	r3, [r7, #24]
 800aa78:	e002      	b.n	800aa80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa7a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa80:	69bb      	ldr	r3, [r7, #24]
	}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3720      	adds	r7, #32
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
	...

0800aa8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b088      	sub	sp, #32
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
 800aa98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	21a5      	movs	r1, #165	@ 0xa5
 800aaa6:	f004 fa1a 	bl	800eede <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aab4:	3b01      	subs	r3, #1
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4413      	add	r3, r2
 800aaba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	f023 0307 	bic.w	r3, r3, #7
 800aac2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	f003 0307 	and.w	r3, r3, #7
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00b      	beq.n	800aae6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	617b      	str	r3, [r7, #20]
}
 800aae0:	bf00      	nop
 800aae2:	bf00      	nop
 800aae4:	e7fd      	b.n	800aae2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d01f      	beq.n	800ab2c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaec:	2300      	movs	r3, #0
 800aaee:	61fb      	str	r3, [r7, #28]
 800aaf0:	e012      	b.n	800ab18 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	7819      	ldrb	r1, [r3, #0]
 800aafa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	4413      	add	r3, r2
 800ab00:	3334      	adds	r3, #52	@ 0x34
 800ab02:	460a      	mov	r2, r1
 800ab04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d006      	beq.n	800ab20 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	3301      	adds	r3, #1
 800ab16:	61fb      	str	r3, [r7, #28]
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	2b0f      	cmp	r3, #15
 800ab1c:	d9e9      	bls.n	800aaf2 <prvInitialiseNewTask+0x66>
 800ab1e:	e000      	b.n	800ab22 <prvInitialiseNewTask+0x96>
			{
				break;
 800ab20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab2a:	e003      	b.n	800ab34 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab36:	2b37      	cmp	r3, #55	@ 0x37
 800ab38:	d901      	bls.n	800ab3e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab3a:	2337      	movs	r3, #55	@ 0x37
 800ab3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab42:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab48:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab52:	3304      	adds	r3, #4
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fe fd7b 	bl	8009650 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5c:	3318      	adds	r3, #24
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe fd76 	bl	8009650 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab78:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8c:	3354      	adds	r3, #84	@ 0x54
 800ab8e:	224c      	movs	r2, #76	@ 0x4c
 800ab90:	2100      	movs	r1, #0
 800ab92:	4618      	mov	r0, r3
 800ab94:	f004 f9a3 	bl	800eede <memset>
 800ab98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9a:	4a0d      	ldr	r2, [pc, #52]	@ (800abd0 <prvInitialiseNewTask+0x144>)
 800ab9c:	659a      	str	r2, [r3, #88]	@ 0x58
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba0:	4a0c      	ldr	r2, [pc, #48]	@ (800abd4 <prvInitialiseNewTask+0x148>)
 800aba2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba6:	4a0c      	ldr	r2, [pc, #48]	@ (800abd8 <prvInitialiseNewTask+0x14c>)
 800aba8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	68f9      	ldr	r1, [r7, #12]
 800abae:	69b8      	ldr	r0, [r7, #24]
 800abb0:	f001 fde8 	bl	800c784 <pxPortInitialiseStack>
 800abb4:	4602      	mov	r2, r0
 800abb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800abba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800abc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abc6:	bf00      	nop
 800abc8:	3720      	adds	r7, #32
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	200092f4 	.word	0x200092f4
 800abd4:	2000935c 	.word	0x2000935c
 800abd8:	200093c4 	.word	0x200093c4

0800abdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abe4:	f001 ff00 	bl	800c9e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800abe8:	4b2d      	ldr	r3, [pc, #180]	@ (800aca0 <prvAddNewTaskToReadyList+0xc4>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3301      	adds	r3, #1
 800abee:	4a2c      	ldr	r2, [pc, #176]	@ (800aca0 <prvAddNewTaskToReadyList+0xc4>)
 800abf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abf2:	4b2c      	ldr	r3, [pc, #176]	@ (800aca4 <prvAddNewTaskToReadyList+0xc8>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d109      	bne.n	800ac0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abfa:	4a2a      	ldr	r2, [pc, #168]	@ (800aca4 <prvAddNewTaskToReadyList+0xc8>)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac00:	4b27      	ldr	r3, [pc, #156]	@ (800aca0 <prvAddNewTaskToReadyList+0xc4>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d110      	bne.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac08:	f000 fce4 	bl	800b5d4 <prvInitialiseTaskLists>
 800ac0c:	e00d      	b.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac0e:	4b26      	ldr	r3, [pc, #152]	@ (800aca8 <prvAddNewTaskToReadyList+0xcc>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d109      	bne.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac16:	4b23      	ldr	r3, [pc, #140]	@ (800aca4 <prvAddNewTaskToReadyList+0xc8>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d802      	bhi.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac24:	4a1f      	ldr	r2, [pc, #124]	@ (800aca4 <prvAddNewTaskToReadyList+0xc8>)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac2a:	4b20      	ldr	r3, [pc, #128]	@ (800acac <prvAddNewTaskToReadyList+0xd0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	4a1e      	ldr	r2, [pc, #120]	@ (800acac <prvAddNewTaskToReadyList+0xd0>)
 800ac32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac34:	4b1d      	ldr	r3, [pc, #116]	@ (800acac <prvAddNewTaskToReadyList+0xd0>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac40:	4b1b      	ldr	r3, [pc, #108]	@ (800acb0 <prvAddNewTaskToReadyList+0xd4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d903      	bls.n	800ac50 <prvAddNewTaskToReadyList+0x74>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac4c:	4a18      	ldr	r2, [pc, #96]	@ (800acb0 <prvAddNewTaskToReadyList+0xd4>)
 800ac4e:	6013      	str	r3, [r2, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac54:	4613      	mov	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4a15      	ldr	r2, [pc, #84]	@ (800acb4 <prvAddNewTaskToReadyList+0xd8>)
 800ac5e:	441a      	add	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3304      	adds	r3, #4
 800ac64:	4619      	mov	r1, r3
 800ac66:	4610      	mov	r0, r2
 800ac68:	f7fe fcff 	bl	800966a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac6c:	f001 feee 	bl	800ca4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac70:	4b0d      	ldr	r3, [pc, #52]	@ (800aca8 <prvAddNewTaskToReadyList+0xcc>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00e      	beq.n	800ac96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac78:	4b0a      	ldr	r3, [pc, #40]	@ (800aca4 <prvAddNewTaskToReadyList+0xc8>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d207      	bcs.n	800ac96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac86:	4b0c      	ldr	r3, [pc, #48]	@ (800acb8 <prvAddNewTaskToReadyList+0xdc>)
 800ac88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac96:	bf00      	nop
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	20001474 	.word	0x20001474
 800aca4:	20000fa0 	.word	0x20000fa0
 800aca8:	20001480 	.word	0x20001480
 800acac:	20001490 	.word	0x20001490
 800acb0:	2000147c 	.word	0x2000147c
 800acb4:	20000fa4 	.word	0x20000fa4
 800acb8:	e000ed04 	.word	0xe000ed04

0800acbc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b08a      	sub	sp, #40	@ 0x28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800acc6:	2300      	movs	r3, #0
 800acc8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10b      	bne.n	800ace8 <vTaskDelayUntil+0x2c>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	617b      	str	r3, [r7, #20]
}
 800ace2:	bf00      	nop
 800ace4:	bf00      	nop
 800ace6:	e7fd      	b.n	800ace4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10b      	bne.n	800ad06 <vTaskDelayUntil+0x4a>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	613b      	str	r3, [r7, #16]
}
 800ad00:	bf00      	nop
 800ad02:	bf00      	nop
 800ad04:	e7fd      	b.n	800ad02 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800ad06:	4b2a      	ldr	r3, [pc, #168]	@ (800adb0 <vTaskDelayUntil+0xf4>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00b      	beq.n	800ad26 <vTaskDelayUntil+0x6a>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	60fb      	str	r3, [r7, #12]
}
 800ad20:	bf00      	nop
 800ad22:	bf00      	nop
 800ad24:	e7fd      	b.n	800ad22 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800ad26:	f000 f8ef 	bl	800af08 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ad2a:	4b22      	ldr	r3, [pc, #136]	@ (800adb4 <vTaskDelayUntil+0xf8>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	4413      	add	r3, r2
 800ad38:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	6a3a      	ldr	r2, [r7, #32]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d20b      	bcs.n	800ad5c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	69fa      	ldr	r2, [r7, #28]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d211      	bcs.n	800ad72 <vTaskDelayUntil+0xb6>
 800ad4e:	69fa      	ldr	r2, [r7, #28]
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d90d      	bls.n	800ad72 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ad56:	2301      	movs	r3, #1
 800ad58:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad5a:	e00a      	b.n	800ad72 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	69fa      	ldr	r2, [r7, #28]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d303      	bcc.n	800ad6e <vTaskDelayUntil+0xb2>
 800ad66:	69fa      	ldr	r2, [r7, #28]
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d901      	bls.n	800ad72 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	69fa      	ldr	r2, [r7, #28]
 800ad76:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ad78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d006      	beq.n	800ad8c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ad7e:	69fa      	ldr	r2, [r7, #28]
 800ad80:	6a3b      	ldr	r3, [r7, #32]
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	2100      	movs	r1, #0
 800ad86:	4618      	mov	r0, r3
 800ad88:	f001 f88e 	bl	800bea8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ad8c:	f000 f8ca 	bl	800af24 <xTaskResumeAll>
 800ad90:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d107      	bne.n	800ada8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800ad98:	4b07      	ldr	r3, [pc, #28]	@ (800adb8 <vTaskDelayUntil+0xfc>)
 800ad9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ada8:	bf00      	nop
 800adaa:	3728      	adds	r7, #40	@ 0x28
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	2000149c 	.word	0x2000149c
 800adb4:	20001478 	.word	0x20001478
 800adb8:	e000ed04 	.word	0xe000ed04

0800adbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800adc4:	2300      	movs	r3, #0
 800adc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d018      	beq.n	800ae00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800adce:	4b14      	ldr	r3, [pc, #80]	@ (800ae20 <vTaskDelay+0x64>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00b      	beq.n	800adee <vTaskDelay+0x32>
	__asm volatile
 800add6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adda:	f383 8811 	msr	BASEPRI, r3
 800adde:	f3bf 8f6f 	isb	sy
 800ade2:	f3bf 8f4f 	dsb	sy
 800ade6:	60bb      	str	r3, [r7, #8]
}
 800ade8:	bf00      	nop
 800adea:	bf00      	nop
 800adec:	e7fd      	b.n	800adea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800adee:	f000 f88b 	bl	800af08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800adf2:	2100      	movs	r1, #0
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f001 f857 	bl	800bea8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800adfa:	f000 f893 	bl	800af24 <xTaskResumeAll>
 800adfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d107      	bne.n	800ae16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ae06:	4b07      	ldr	r3, [pc, #28]	@ (800ae24 <vTaskDelay+0x68>)
 800ae08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae16:	bf00      	nop
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	2000149c 	.word	0x2000149c
 800ae24:	e000ed04 	.word	0xe000ed04

0800ae28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08a      	sub	sp, #40	@ 0x28
 800ae2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae32:	2300      	movs	r3, #0
 800ae34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae36:	463a      	mov	r2, r7
 800ae38:	1d39      	adds	r1, r7, #4
 800ae3a:	f107 0308 	add.w	r3, r7, #8
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fe fbb2 	bl	80095a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	9202      	str	r2, [sp, #8]
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	2300      	movs	r3, #0
 800ae54:	460a      	mov	r2, r1
 800ae56:	4924      	ldr	r1, [pc, #144]	@ (800aee8 <vTaskStartScheduler+0xc0>)
 800ae58:	4824      	ldr	r0, [pc, #144]	@ (800aeec <vTaskStartScheduler+0xc4>)
 800ae5a:	f7ff fd71 	bl	800a940 <xTaskCreateStatic>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	4a23      	ldr	r2, [pc, #140]	@ (800aef0 <vTaskStartScheduler+0xc8>)
 800ae62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae64:	4b22      	ldr	r3, [pc, #136]	@ (800aef0 <vTaskStartScheduler+0xc8>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d002      	beq.n	800ae72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	617b      	str	r3, [r7, #20]
 800ae70:	e001      	b.n	800ae76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d102      	bne.n	800ae82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae7c:	f001 f868 	bl	800bf50 <xTimerCreateTimerTask>
 800ae80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d11b      	bne.n	800aec0 <vTaskStartScheduler+0x98>
	__asm volatile
 800ae88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae8c:	f383 8811 	msr	BASEPRI, r3
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f3bf 8f4f 	dsb	sy
 800ae98:	613b      	str	r3, [r7, #16]
}
 800ae9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae9c:	4b15      	ldr	r3, [pc, #84]	@ (800aef4 <vTaskStartScheduler+0xcc>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	3354      	adds	r3, #84	@ 0x54
 800aea2:	4a15      	ldr	r2, [pc, #84]	@ (800aef8 <vTaskStartScheduler+0xd0>)
 800aea4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aea6:	4b15      	ldr	r3, [pc, #84]	@ (800aefc <vTaskStartScheduler+0xd4>)
 800aea8:	f04f 32ff 	mov.w	r2, #4294967295
 800aeac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aeae:	4b14      	ldr	r3, [pc, #80]	@ (800af00 <vTaskStartScheduler+0xd8>)
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aeb4:	4b13      	ldr	r3, [pc, #76]	@ (800af04 <vTaskStartScheduler+0xdc>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aeba:	f001 fcf1 	bl	800c8a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aebe:	e00f      	b.n	800aee0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec6:	d10b      	bne.n	800aee0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	60fb      	str	r3, [r7, #12]
}
 800aeda:	bf00      	nop
 800aedc:	bf00      	nop
 800aede:	e7fd      	b.n	800aedc <vTaskStartScheduler+0xb4>
}
 800aee0:	bf00      	nop
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	08012b9c 	.word	0x08012b9c
 800aeec:	0800b5a5 	.word	0x0800b5a5
 800aef0:	20001498 	.word	0x20001498
 800aef4:	20000fa0 	.word	0x20000fa0
 800aef8:	20000020 	.word	0x20000020
 800aefc:	20001494 	.word	0x20001494
 800af00:	20001480 	.word	0x20001480
 800af04:	20001478 	.word	0x20001478

0800af08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af08:	b480      	push	{r7}
 800af0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af0c:	4b04      	ldr	r3, [pc, #16]	@ (800af20 <vTaskSuspendAll+0x18>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3301      	adds	r3, #1
 800af12:	4a03      	ldr	r2, [pc, #12]	@ (800af20 <vTaskSuspendAll+0x18>)
 800af14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af16:	bf00      	nop
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr
 800af20:	2000149c 	.word	0x2000149c

0800af24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af2e:	2300      	movs	r3, #0
 800af30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af32:	4b42      	ldr	r3, [pc, #264]	@ (800b03c <xTaskResumeAll+0x118>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10b      	bne.n	800af52 <xTaskResumeAll+0x2e>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	603b      	str	r3, [r7, #0]
}
 800af4c:	bf00      	nop
 800af4e:	bf00      	nop
 800af50:	e7fd      	b.n	800af4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af52:	f001 fd49 	bl	800c9e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af56:	4b39      	ldr	r3, [pc, #228]	@ (800b03c <xTaskResumeAll+0x118>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	4a37      	ldr	r2, [pc, #220]	@ (800b03c <xTaskResumeAll+0x118>)
 800af5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af60:	4b36      	ldr	r3, [pc, #216]	@ (800b03c <xTaskResumeAll+0x118>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d162      	bne.n	800b02e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af68:	4b35      	ldr	r3, [pc, #212]	@ (800b040 <xTaskResumeAll+0x11c>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d05e      	beq.n	800b02e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af70:	e02f      	b.n	800afd2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af72:	4b34      	ldr	r3, [pc, #208]	@ (800b044 <xTaskResumeAll+0x120>)
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3318      	adds	r3, #24
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fe fbd0 	bl	8009724 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	3304      	adds	r3, #4
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fe fbcb 	bl	8009724 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af92:	4b2d      	ldr	r3, [pc, #180]	@ (800b048 <xTaskResumeAll+0x124>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	429a      	cmp	r2, r3
 800af98:	d903      	bls.n	800afa2 <xTaskResumeAll+0x7e>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af9e:	4a2a      	ldr	r2, [pc, #168]	@ (800b048 <xTaskResumeAll+0x124>)
 800afa0:	6013      	str	r3, [r2, #0]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afa6:	4613      	mov	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4a27      	ldr	r2, [pc, #156]	@ (800b04c <xTaskResumeAll+0x128>)
 800afb0:	441a      	add	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f7fe fb56 	bl	800966a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afc2:	4b23      	ldr	r3, [pc, #140]	@ (800b050 <xTaskResumeAll+0x12c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc8:	429a      	cmp	r2, r3
 800afca:	d302      	bcc.n	800afd2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800afcc:	4b21      	ldr	r3, [pc, #132]	@ (800b054 <xTaskResumeAll+0x130>)
 800afce:	2201      	movs	r2, #1
 800afd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afd2:	4b1c      	ldr	r3, [pc, #112]	@ (800b044 <xTaskResumeAll+0x120>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1cb      	bne.n	800af72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800afe0:	f000 fb9c 	bl	800b71c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800afe4:	4b1c      	ldr	r3, [pc, #112]	@ (800b058 <xTaskResumeAll+0x134>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d010      	beq.n	800b012 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aff0:	f000 f858 	bl	800b0a4 <xTaskIncrementTick>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800affa:	4b16      	ldr	r3, [pc, #88]	@ (800b054 <xTaskResumeAll+0x130>)
 800affc:	2201      	movs	r2, #1
 800affe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	3b01      	subs	r3, #1
 800b004:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1f1      	bne.n	800aff0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b00c:	4b12      	ldr	r3, [pc, #72]	@ (800b058 <xTaskResumeAll+0x134>)
 800b00e:	2200      	movs	r2, #0
 800b010:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b012:	4b10      	ldr	r3, [pc, #64]	@ (800b054 <xTaskResumeAll+0x130>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d009      	beq.n	800b02e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b01a:	2301      	movs	r3, #1
 800b01c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b01e:	4b0f      	ldr	r3, [pc, #60]	@ (800b05c <xTaskResumeAll+0x138>)
 800b020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b024:	601a      	str	r2, [r3, #0]
 800b026:	f3bf 8f4f 	dsb	sy
 800b02a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b02e:	f001 fd0d 	bl	800ca4c <vPortExitCritical>

	return xAlreadyYielded;
 800b032:	68bb      	ldr	r3, [r7, #8]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	2000149c 	.word	0x2000149c
 800b040:	20001474 	.word	0x20001474
 800b044:	20001434 	.word	0x20001434
 800b048:	2000147c 	.word	0x2000147c
 800b04c:	20000fa4 	.word	0x20000fa4
 800b050:	20000fa0 	.word	0x20000fa0
 800b054:	20001488 	.word	0x20001488
 800b058:	20001484 	.word	0x20001484
 800b05c:	e000ed04 	.word	0xe000ed04

0800b060 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b066:	4b05      	ldr	r3, [pc, #20]	@ (800b07c <xTaskGetTickCount+0x1c>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b06c:	687b      	ldr	r3, [r7, #4]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	20001478 	.word	0x20001478

0800b080 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b086:	f001 fd8f 	bl	800cba8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b08a:	2300      	movs	r3, #0
 800b08c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b08e:	4b04      	ldr	r3, [pc, #16]	@ (800b0a0 <xTaskGetTickCountFromISR+0x20>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b094:	683b      	ldr	r3, [r7, #0]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	20001478 	.word	0x20001478

0800b0a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0ae:	4b4f      	ldr	r3, [pc, #316]	@ (800b1ec <xTaskIncrementTick+0x148>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f040 8090 	bne.w	800b1d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0b8:	4b4d      	ldr	r3, [pc, #308]	@ (800b1f0 <xTaskIncrementTick+0x14c>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0c0:	4a4b      	ldr	r2, [pc, #300]	@ (800b1f0 <xTaskIncrementTick+0x14c>)
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d121      	bne.n	800b110 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0cc:	4b49      	ldr	r3, [pc, #292]	@ (800b1f4 <xTaskIncrementTick+0x150>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00b      	beq.n	800b0ee <xTaskIncrementTick+0x4a>
	__asm volatile
 800b0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0da:	f383 8811 	msr	BASEPRI, r3
 800b0de:	f3bf 8f6f 	isb	sy
 800b0e2:	f3bf 8f4f 	dsb	sy
 800b0e6:	603b      	str	r3, [r7, #0]
}
 800b0e8:	bf00      	nop
 800b0ea:	bf00      	nop
 800b0ec:	e7fd      	b.n	800b0ea <xTaskIncrementTick+0x46>
 800b0ee:	4b41      	ldr	r3, [pc, #260]	@ (800b1f4 <xTaskIncrementTick+0x150>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	4b40      	ldr	r3, [pc, #256]	@ (800b1f8 <xTaskIncrementTick+0x154>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a3e      	ldr	r2, [pc, #248]	@ (800b1f4 <xTaskIncrementTick+0x150>)
 800b0fa:	6013      	str	r3, [r2, #0]
 800b0fc:	4a3e      	ldr	r2, [pc, #248]	@ (800b1f8 <xTaskIncrementTick+0x154>)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6013      	str	r3, [r2, #0]
 800b102:	4b3e      	ldr	r3, [pc, #248]	@ (800b1fc <xTaskIncrementTick+0x158>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3301      	adds	r3, #1
 800b108:	4a3c      	ldr	r2, [pc, #240]	@ (800b1fc <xTaskIncrementTick+0x158>)
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	f000 fb06 	bl	800b71c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b110:	4b3b      	ldr	r3, [pc, #236]	@ (800b200 <xTaskIncrementTick+0x15c>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	429a      	cmp	r2, r3
 800b118:	d349      	bcc.n	800b1ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b11a:	4b36      	ldr	r3, [pc, #216]	@ (800b1f4 <xTaskIncrementTick+0x150>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d104      	bne.n	800b12e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b124:	4b36      	ldr	r3, [pc, #216]	@ (800b200 <xTaskIncrementTick+0x15c>)
 800b126:	f04f 32ff 	mov.w	r2, #4294967295
 800b12a:	601a      	str	r2, [r3, #0]
					break;
 800b12c:	e03f      	b.n	800b1ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b12e:	4b31      	ldr	r3, [pc, #196]	@ (800b1f4 <xTaskIncrementTick+0x150>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	429a      	cmp	r2, r3
 800b144:	d203      	bcs.n	800b14e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b146:	4a2e      	ldr	r2, [pc, #184]	@ (800b200 <xTaskIncrementTick+0x15c>)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b14c:	e02f      	b.n	800b1ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	3304      	adds	r3, #4
 800b152:	4618      	mov	r0, r3
 800b154:	f7fe fae6 	bl	8009724 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d004      	beq.n	800b16a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	3318      	adds	r3, #24
 800b164:	4618      	mov	r0, r3
 800b166:	f7fe fadd 	bl	8009724 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b16e:	4b25      	ldr	r3, [pc, #148]	@ (800b204 <xTaskIncrementTick+0x160>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	429a      	cmp	r2, r3
 800b174:	d903      	bls.n	800b17e <xTaskIncrementTick+0xda>
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b17a:	4a22      	ldr	r2, [pc, #136]	@ (800b204 <xTaskIncrementTick+0x160>)
 800b17c:	6013      	str	r3, [r2, #0]
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b182:	4613      	mov	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4a1f      	ldr	r2, [pc, #124]	@ (800b208 <xTaskIncrementTick+0x164>)
 800b18c:	441a      	add	r2, r3
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	3304      	adds	r3, #4
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f7fe fa68 	bl	800966a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b19e:	4b1b      	ldr	r3, [pc, #108]	@ (800b20c <xTaskIncrementTick+0x168>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d3b8      	bcc.n	800b11a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1ac:	e7b5      	b.n	800b11a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1ae:	4b17      	ldr	r3, [pc, #92]	@ (800b20c <xTaskIncrementTick+0x168>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1b4:	4914      	ldr	r1, [pc, #80]	@ (800b208 <xTaskIncrementTick+0x164>)
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	440b      	add	r3, r1
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d901      	bls.n	800b1ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1ca:	4b11      	ldr	r3, [pc, #68]	@ (800b210 <xTaskIncrementTick+0x16c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d007      	beq.n	800b1e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	617b      	str	r3, [r7, #20]
 800b1d6:	e004      	b.n	800b1e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1d8:	4b0e      	ldr	r3, [pc, #56]	@ (800b214 <xTaskIncrementTick+0x170>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	4a0d      	ldr	r2, [pc, #52]	@ (800b214 <xTaskIncrementTick+0x170>)
 800b1e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1e2:	697b      	ldr	r3, [r7, #20]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	2000149c 	.word	0x2000149c
 800b1f0:	20001478 	.word	0x20001478
 800b1f4:	2000142c 	.word	0x2000142c
 800b1f8:	20001430 	.word	0x20001430
 800b1fc:	2000148c 	.word	0x2000148c
 800b200:	20001494 	.word	0x20001494
 800b204:	2000147c 	.word	0x2000147c
 800b208:	20000fa4 	.word	0x20000fa4
 800b20c:	20000fa0 	.word	0x20000fa0
 800b210:	20001488 	.word	0x20001488
 800b214:	20001484 	.word	0x20001484

0800b218 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b21e:	4b3d      	ldr	r3, [pc, #244]	@ (800b314 <vTaskSwitchContext+0xfc>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d003      	beq.n	800b22e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b226:	4b3c      	ldr	r3, [pc, #240]	@ (800b318 <vTaskSwitchContext+0x100>)
 800b228:	2201      	movs	r2, #1
 800b22a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b22c:	e06e      	b.n	800b30c <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800b22e:	4b3a      	ldr	r3, [pc, #232]	@ (800b318 <vTaskSwitchContext+0x100>)
 800b230:	2200      	movs	r2, #0
 800b232:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b234:	4b39      	ldr	r3, [pc, #228]	@ (800b31c <vTaskSwitchContext+0x104>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b23a:	613b      	str	r3, [r7, #16]
 800b23c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d111      	bne.n	800b270 <vTaskSwitchContext+0x58>
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	3304      	adds	r3, #4
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	429a      	cmp	r2, r3
 800b256:	d10b      	bne.n	800b270 <vTaskSwitchContext+0x58>
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	3308      	adds	r3, #8
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	429a      	cmp	r2, r3
 800b262:	d105      	bne.n	800b270 <vTaskSwitchContext+0x58>
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	330c      	adds	r3, #12
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d008      	beq.n	800b282 <vTaskSwitchContext+0x6a>
 800b270:	4b2a      	ldr	r3, [pc, #168]	@ (800b31c <vTaskSwitchContext+0x104>)
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	4b29      	ldr	r3, [pc, #164]	@ (800b31c <vTaskSwitchContext+0x104>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3334      	adds	r3, #52	@ 0x34
 800b27a:	4619      	mov	r1, r3
 800b27c:	4610      	mov	r0, r2
 800b27e:	f7f6 fe63 	bl	8001f48 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b282:	4b27      	ldr	r3, [pc, #156]	@ (800b320 <vTaskSwitchContext+0x108>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	617b      	str	r3, [r7, #20]
 800b288:	e011      	b.n	800b2ae <vTaskSwitchContext+0x96>
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10b      	bne.n	800b2a8 <vTaskSwitchContext+0x90>
	__asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	607b      	str	r3, [r7, #4]
}
 800b2a2:	bf00      	nop
 800b2a4:	bf00      	nop
 800b2a6:	e7fd      	b.n	800b2a4 <vTaskSwitchContext+0x8c>
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	617b      	str	r3, [r7, #20]
 800b2ae:	491d      	ldr	r1, [pc, #116]	@ (800b324 <vTaskSwitchContext+0x10c>)
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	440b      	add	r3, r1
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d0e3      	beq.n	800b28a <vTaskSwitchContext+0x72>
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4413      	add	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4a15      	ldr	r2, [pc, #84]	@ (800b324 <vTaskSwitchContext+0x10c>)
 800b2ce:	4413      	add	r3, r2
 800b2d0:	60bb      	str	r3, [r7, #8]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	605a      	str	r2, [r3, #4]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d104      	bne.n	800b2f2 <vTaskSwitchContext+0xda>
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	605a      	str	r2, [r3, #4]
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	4a08      	ldr	r2, [pc, #32]	@ (800b31c <vTaskSwitchContext+0x104>)
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	4a08      	ldr	r2, [pc, #32]	@ (800b320 <vTaskSwitchContext+0x108>)
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b302:	4b06      	ldr	r3, [pc, #24]	@ (800b31c <vTaskSwitchContext+0x104>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3354      	adds	r3, #84	@ 0x54
 800b308:	4a07      	ldr	r2, [pc, #28]	@ (800b328 <vTaskSwitchContext+0x110>)
 800b30a:	6013      	str	r3, [r2, #0]
}
 800b30c:	bf00      	nop
 800b30e:	3718      	adds	r7, #24
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	2000149c 	.word	0x2000149c
 800b318:	20001488 	.word	0x20001488
 800b31c:	20000fa0 	.word	0x20000fa0
 800b320:	2000147c 	.word	0x2000147c
 800b324:	20000fa4 	.word	0x20000fa4
 800b328:	20000020 	.word	0x20000020

0800b32c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10b      	bne.n	800b354 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b340:	f383 8811 	msr	BASEPRI, r3
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	60fb      	str	r3, [r7, #12]
}
 800b34e:	bf00      	nop
 800b350:	bf00      	nop
 800b352:	e7fd      	b.n	800b350 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b354:	4b07      	ldr	r3, [pc, #28]	@ (800b374 <vTaskPlaceOnEventList+0x48>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3318      	adds	r3, #24
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7fe f9a8 	bl	80096b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b362:	2101      	movs	r1, #1
 800b364:	6838      	ldr	r0, [r7, #0]
 800b366:	f000 fd9f 	bl	800bea8 <prvAddCurrentTaskToDelayedList>
}
 800b36a:	bf00      	nop
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20000fa0 	.word	0x20000fa0

0800b378 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10b      	bne.n	800b3a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38e:	f383 8811 	msr	BASEPRI, r3
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	617b      	str	r3, [r7, #20]
}
 800b39c:	bf00      	nop
 800b39e:	bf00      	nop
 800b3a0:	e7fd      	b.n	800b39e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b3cc <vTaskPlaceOnEventListRestricted+0x54>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3318      	adds	r3, #24
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f7fe f95d 	bl	800966a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b3bc:	6879      	ldr	r1, [r7, #4]
 800b3be:	68b8      	ldr	r0, [r7, #8]
 800b3c0:	f000 fd72 	bl	800bea8 <prvAddCurrentTaskToDelayedList>
	}
 800b3c4:	bf00      	nop
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	20000fa0 	.word	0x20000fa0

0800b3d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b086      	sub	sp, #24
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10b      	bne.n	800b3fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	60fb      	str	r3, [r7, #12]
}
 800b3f8:	bf00      	nop
 800b3fa:	bf00      	nop
 800b3fc:	e7fd      	b.n	800b3fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	3318      	adds	r3, #24
 800b402:	4618      	mov	r0, r3
 800b404:	f7fe f98e 	bl	8009724 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b408:	4b1d      	ldr	r3, [pc, #116]	@ (800b480 <xTaskRemoveFromEventList+0xb0>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d11d      	bne.n	800b44c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	3304      	adds	r3, #4
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe f985 	bl	8009724 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b41e:	4b19      	ldr	r3, [pc, #100]	@ (800b484 <xTaskRemoveFromEventList+0xb4>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	429a      	cmp	r2, r3
 800b424:	d903      	bls.n	800b42e <xTaskRemoveFromEventList+0x5e>
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b42a:	4a16      	ldr	r2, [pc, #88]	@ (800b484 <xTaskRemoveFromEventList+0xb4>)
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b432:	4613      	mov	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4413      	add	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4a13      	ldr	r2, [pc, #76]	@ (800b488 <xTaskRemoveFromEventList+0xb8>)
 800b43c:	441a      	add	r2, r3
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	3304      	adds	r3, #4
 800b442:	4619      	mov	r1, r3
 800b444:	4610      	mov	r0, r2
 800b446:	f7fe f910 	bl	800966a <vListInsertEnd>
 800b44a:	e005      	b.n	800b458 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	3318      	adds	r3, #24
 800b450:	4619      	mov	r1, r3
 800b452:	480e      	ldr	r0, [pc, #56]	@ (800b48c <xTaskRemoveFromEventList+0xbc>)
 800b454:	f7fe f909 	bl	800966a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b45c:	4b0c      	ldr	r3, [pc, #48]	@ (800b490 <xTaskRemoveFromEventList+0xc0>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b462:	429a      	cmp	r2, r3
 800b464:	d905      	bls.n	800b472 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b466:	2301      	movs	r3, #1
 800b468:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b46a:	4b0a      	ldr	r3, [pc, #40]	@ (800b494 <xTaskRemoveFromEventList+0xc4>)
 800b46c:	2201      	movs	r2, #1
 800b46e:	601a      	str	r2, [r3, #0]
 800b470:	e001      	b.n	800b476 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b472:	2300      	movs	r3, #0
 800b474:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b476:	697b      	ldr	r3, [r7, #20]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	2000149c 	.word	0x2000149c
 800b484:	2000147c 	.word	0x2000147c
 800b488:	20000fa4 	.word	0x20000fa4
 800b48c:	20001434 	.word	0x20001434
 800b490:	20000fa0 	.word	0x20000fa0
 800b494:	20001488 	.word	0x20001488

0800b498 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4a0:	4b06      	ldr	r3, [pc, #24]	@ (800b4bc <vTaskInternalSetTimeOutState+0x24>)
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4a8:	4b05      	ldr	r3, [pc, #20]	@ (800b4c0 <vTaskInternalSetTimeOutState+0x28>)
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	605a      	str	r2, [r3, #4]
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	2000148c 	.word	0x2000148c
 800b4c0:	20001478 	.word	0x20001478

0800b4c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b088      	sub	sp, #32
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10b      	bne.n	800b4ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	613b      	str	r3, [r7, #16]
}
 800b4e6:	bf00      	nop
 800b4e8:	bf00      	nop
 800b4ea:	e7fd      	b.n	800b4e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10b      	bne.n	800b50a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	60fb      	str	r3, [r7, #12]
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop
 800b508:	e7fd      	b.n	800b506 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b50a:	f001 fa6d 	bl	800c9e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b50e:	4b1d      	ldr	r3, [pc, #116]	@ (800b584 <xTaskCheckForTimeOut+0xc0>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	69ba      	ldr	r2, [r7, #24]
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b526:	d102      	bne.n	800b52e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b528:	2300      	movs	r3, #0
 800b52a:	61fb      	str	r3, [r7, #28]
 800b52c:	e023      	b.n	800b576 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	4b15      	ldr	r3, [pc, #84]	@ (800b588 <xTaskCheckForTimeOut+0xc4>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	429a      	cmp	r2, r3
 800b538:	d007      	beq.n	800b54a <xTaskCheckForTimeOut+0x86>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	69ba      	ldr	r2, [r7, #24]
 800b540:	429a      	cmp	r2, r3
 800b542:	d302      	bcc.n	800b54a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b544:	2301      	movs	r3, #1
 800b546:	61fb      	str	r3, [r7, #28]
 800b548:	e015      	b.n	800b576 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	697a      	ldr	r2, [r7, #20]
 800b550:	429a      	cmp	r2, r3
 800b552:	d20b      	bcs.n	800b56c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	1ad2      	subs	r2, r2, r3
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f7ff ff99 	bl	800b498 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b566:	2300      	movs	r3, #0
 800b568:	61fb      	str	r3, [r7, #28]
 800b56a:	e004      	b.n	800b576 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2200      	movs	r2, #0
 800b570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b572:	2301      	movs	r3, #1
 800b574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b576:	f001 fa69 	bl	800ca4c <vPortExitCritical>

	return xReturn;
 800b57a:	69fb      	ldr	r3, [r7, #28]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3720      	adds	r7, #32
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	20001478 	.word	0x20001478
 800b588:	2000148c 	.word	0x2000148c

0800b58c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b58c:	b480      	push	{r7}
 800b58e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b590:	4b03      	ldr	r3, [pc, #12]	@ (800b5a0 <vTaskMissedYield+0x14>)
 800b592:	2201      	movs	r2, #1
 800b594:	601a      	str	r2, [r3, #0]
}
 800b596:	bf00      	nop
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	20001488 	.word	0x20001488

0800b5a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5ac:	f000 f852 	bl	800b654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b5b0:	4b06      	ldr	r3, [pc, #24]	@ (800b5cc <prvIdleTask+0x28>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d9f9      	bls.n	800b5ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800b5b8:	4b05      	ldr	r3, [pc, #20]	@ (800b5d0 <prvIdleTask+0x2c>)
 800b5ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5be:	601a      	str	r2, [r3, #0]
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b5c8:	e7f0      	b.n	800b5ac <prvIdleTask+0x8>
 800b5ca:	bf00      	nop
 800b5cc:	20000fa4 	.word	0x20000fa4
 800b5d0:	e000ed04 	.word	0xe000ed04

0800b5d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5da:	2300      	movs	r3, #0
 800b5dc:	607b      	str	r3, [r7, #4]
 800b5de:	e00c      	b.n	800b5fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4413      	add	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4a12      	ldr	r2, [pc, #72]	@ (800b634 <prvInitialiseTaskLists+0x60>)
 800b5ec:	4413      	add	r3, r2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe f80e 	bl	8009610 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	607b      	str	r3, [r7, #4]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b37      	cmp	r3, #55	@ 0x37
 800b5fe:	d9ef      	bls.n	800b5e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b600:	480d      	ldr	r0, [pc, #52]	@ (800b638 <prvInitialiseTaskLists+0x64>)
 800b602:	f7fe f805 	bl	8009610 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b606:	480d      	ldr	r0, [pc, #52]	@ (800b63c <prvInitialiseTaskLists+0x68>)
 800b608:	f7fe f802 	bl	8009610 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b60c:	480c      	ldr	r0, [pc, #48]	@ (800b640 <prvInitialiseTaskLists+0x6c>)
 800b60e:	f7fd ffff 	bl	8009610 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b612:	480c      	ldr	r0, [pc, #48]	@ (800b644 <prvInitialiseTaskLists+0x70>)
 800b614:	f7fd fffc 	bl	8009610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b618:	480b      	ldr	r0, [pc, #44]	@ (800b648 <prvInitialiseTaskLists+0x74>)
 800b61a:	f7fd fff9 	bl	8009610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b61e:	4b0b      	ldr	r3, [pc, #44]	@ (800b64c <prvInitialiseTaskLists+0x78>)
 800b620:	4a05      	ldr	r2, [pc, #20]	@ (800b638 <prvInitialiseTaskLists+0x64>)
 800b622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b624:	4b0a      	ldr	r3, [pc, #40]	@ (800b650 <prvInitialiseTaskLists+0x7c>)
 800b626:	4a05      	ldr	r2, [pc, #20]	@ (800b63c <prvInitialiseTaskLists+0x68>)
 800b628:	601a      	str	r2, [r3, #0]
}
 800b62a:	bf00      	nop
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	20000fa4 	.word	0x20000fa4
 800b638:	20001404 	.word	0x20001404
 800b63c:	20001418 	.word	0x20001418
 800b640:	20001434 	.word	0x20001434
 800b644:	20001448 	.word	0x20001448
 800b648:	20001460 	.word	0x20001460
 800b64c:	2000142c 	.word	0x2000142c
 800b650:	20001430 	.word	0x20001430

0800b654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b65a:	e019      	b.n	800b690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b65c:	f001 f9c4 	bl	800c9e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b660:	4b10      	ldr	r3, [pc, #64]	@ (800b6a4 <prvCheckTasksWaitingTermination+0x50>)
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	3304      	adds	r3, #4
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fe f859 	bl	8009724 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b672:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a8 <prvCheckTasksWaitingTermination+0x54>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3b01      	subs	r3, #1
 800b678:	4a0b      	ldr	r2, [pc, #44]	@ (800b6a8 <prvCheckTasksWaitingTermination+0x54>)
 800b67a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b67c:	4b0b      	ldr	r3, [pc, #44]	@ (800b6ac <prvCheckTasksWaitingTermination+0x58>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3b01      	subs	r3, #1
 800b682:	4a0a      	ldr	r2, [pc, #40]	@ (800b6ac <prvCheckTasksWaitingTermination+0x58>)
 800b684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b686:	f001 f9e1 	bl	800ca4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f810 	bl	800b6b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b690:	4b06      	ldr	r3, [pc, #24]	@ (800b6ac <prvCheckTasksWaitingTermination+0x58>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e1      	bne.n	800b65c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b698:	bf00      	nop
 800b69a:	bf00      	nop
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20001448 	.word	0x20001448
 800b6a8:	20001474 	.word	0x20001474
 800b6ac:	2000145c 	.word	0x2000145c

0800b6b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3354      	adds	r3, #84	@ 0x54
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f003 fc2b 	bl	800ef18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d108      	bne.n	800b6de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f001 fb7f 	bl	800cdd4 <vPortFree>
				vPortFree( pxTCB );
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f001 fb7c 	bl	800cdd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6dc:	e019      	b.n	800b712 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d103      	bne.n	800b6f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f001 fb73 	bl	800cdd4 <vPortFree>
	}
 800b6ee:	e010      	b.n	800b712 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d00b      	beq.n	800b712 <prvDeleteTCB+0x62>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	60fb      	str	r3, [r7, #12]
}
 800b70c:	bf00      	nop
 800b70e:	bf00      	nop
 800b710:	e7fd      	b.n	800b70e <prvDeleteTCB+0x5e>
	}
 800b712:	bf00      	nop
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
	...

0800b71c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b722:	4b0c      	ldr	r3, [pc, #48]	@ (800b754 <prvResetNextTaskUnblockTime+0x38>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d104      	bne.n	800b736 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b72c:	4b0a      	ldr	r3, [pc, #40]	@ (800b758 <prvResetNextTaskUnblockTime+0x3c>)
 800b72e:	f04f 32ff 	mov.w	r2, #4294967295
 800b732:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b734:	e008      	b.n	800b748 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b736:	4b07      	ldr	r3, [pc, #28]	@ (800b754 <prvResetNextTaskUnblockTime+0x38>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	4a04      	ldr	r2, [pc, #16]	@ (800b758 <prvResetNextTaskUnblockTime+0x3c>)
 800b746:	6013      	str	r3, [r2, #0]
}
 800b748:	bf00      	nop
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	2000142c 	.word	0x2000142c
 800b758:	20001494 	.word	0x20001494

0800b75c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b762:	4b05      	ldr	r3, [pc, #20]	@ (800b778 <xTaskGetCurrentTaskHandle+0x1c>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b768:	687b      	ldr	r3, [r7, #4]
	}
 800b76a:	4618      	mov	r0, r3
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	20000fa0 	.word	0x20000fa0

0800b77c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b782:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b0 <xTaskGetSchedulerState+0x34>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d102      	bne.n	800b790 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b78a:	2301      	movs	r3, #1
 800b78c:	607b      	str	r3, [r7, #4]
 800b78e:	e008      	b.n	800b7a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b790:	4b08      	ldr	r3, [pc, #32]	@ (800b7b4 <xTaskGetSchedulerState+0x38>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d102      	bne.n	800b79e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b798:	2302      	movs	r3, #2
 800b79a:	607b      	str	r3, [r7, #4]
 800b79c:	e001      	b.n	800b7a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b7a2:	687b      	ldr	r3, [r7, #4]
	}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	20001480 	.word	0x20001480
 800b7b4:	2000149c 	.word	0x2000149c

0800b7b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d051      	beq.n	800b872 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7d2:	4b2a      	ldr	r3, [pc, #168]	@ (800b87c <xTaskPriorityInherit+0xc4>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d241      	bcs.n	800b860 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	699b      	ldr	r3, [r3, #24]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	db06      	blt.n	800b7f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7e4:	4b25      	ldr	r3, [pc, #148]	@ (800b87c <xTaskPriorityInherit+0xc4>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	6959      	ldr	r1, [r3, #20]
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	4413      	add	r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	4a1f      	ldr	r2, [pc, #124]	@ (800b880 <xTaskPriorityInherit+0xc8>)
 800b804:	4413      	add	r3, r2
 800b806:	4299      	cmp	r1, r3
 800b808:	d122      	bne.n	800b850 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	3304      	adds	r3, #4
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fd ff88 	bl	8009724 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b814:	4b19      	ldr	r3, [pc, #100]	@ (800b87c <xTaskPriorityInherit+0xc4>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b822:	4b18      	ldr	r3, [pc, #96]	@ (800b884 <xTaskPriorityInherit+0xcc>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	429a      	cmp	r2, r3
 800b828:	d903      	bls.n	800b832 <xTaskPriorityInherit+0x7a>
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b82e:	4a15      	ldr	r2, [pc, #84]	@ (800b884 <xTaskPriorityInherit+0xcc>)
 800b830:	6013      	str	r3, [r2, #0]
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b836:	4613      	mov	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4a10      	ldr	r2, [pc, #64]	@ (800b880 <xTaskPriorityInherit+0xc8>)
 800b840:	441a      	add	r2, r3
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	3304      	adds	r3, #4
 800b846:	4619      	mov	r1, r3
 800b848:	4610      	mov	r0, r2
 800b84a:	f7fd ff0e 	bl	800966a <vListInsertEnd>
 800b84e:	e004      	b.n	800b85a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b850:	4b0a      	ldr	r3, [pc, #40]	@ (800b87c <xTaskPriorityInherit+0xc4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b85a:	2301      	movs	r3, #1
 800b85c:	60fb      	str	r3, [r7, #12]
 800b85e:	e008      	b.n	800b872 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b864:	4b05      	ldr	r3, [pc, #20]	@ (800b87c <xTaskPriorityInherit+0xc4>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d201      	bcs.n	800b872 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b86e:	2301      	movs	r3, #1
 800b870:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b872:	68fb      	ldr	r3, [r7, #12]
	}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	20000fa0 	.word	0x20000fa0
 800b880:	20000fa4 	.word	0x20000fa4
 800b884:	2000147c 	.word	0x2000147c

0800b888 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b894:	2300      	movs	r3, #0
 800b896:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d058      	beq.n	800b950 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b89e:	4b2f      	ldr	r3, [pc, #188]	@ (800b95c <xTaskPriorityDisinherit+0xd4>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d00b      	beq.n	800b8c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ac:	f383 8811 	msr	BASEPRI, r3
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	60fb      	str	r3, [r7, #12]
}
 800b8ba:	bf00      	nop
 800b8bc:	bf00      	nop
 800b8be:	e7fd      	b.n	800b8bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d10b      	bne.n	800b8e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	60bb      	str	r3, [r7, #8]
}
 800b8da:	bf00      	nop
 800b8dc:	bf00      	nop
 800b8de:	e7fd      	b.n	800b8dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8e4:	1e5a      	subs	r2, r3, #1
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d02c      	beq.n	800b950 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d128      	bne.n	800b950 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	3304      	adds	r3, #4
 800b902:	4618      	mov	r0, r3
 800b904:	f7fd ff0e 	bl	8009724 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b914:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b920:	4b0f      	ldr	r3, [pc, #60]	@ (800b960 <xTaskPriorityDisinherit+0xd8>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	429a      	cmp	r2, r3
 800b926:	d903      	bls.n	800b930 <xTaskPriorityDisinherit+0xa8>
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b92c:	4a0c      	ldr	r2, [pc, #48]	@ (800b960 <xTaskPriorityDisinherit+0xd8>)
 800b92e:	6013      	str	r3, [r2, #0]
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b934:	4613      	mov	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4413      	add	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4a09      	ldr	r2, [pc, #36]	@ (800b964 <xTaskPriorityDisinherit+0xdc>)
 800b93e:	441a      	add	r2, r3
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	3304      	adds	r3, #4
 800b944:	4619      	mov	r1, r3
 800b946:	4610      	mov	r0, r2
 800b948:	f7fd fe8f 	bl	800966a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b94c:	2301      	movs	r3, #1
 800b94e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b950:	697b      	ldr	r3, [r7, #20]
	}
 800b952:	4618      	mov	r0, r3
 800b954:	3718      	adds	r7, #24
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	20000fa0 	.word	0x20000fa0
 800b960:	2000147c 	.word	0x2000147c
 800b964:	20000fa4 	.word	0x20000fa4

0800b968 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b088      	sub	sp, #32
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b976:	2301      	movs	r3, #1
 800b978:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d06c      	beq.n	800ba5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10b      	bne.n	800b9a0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	60fb      	str	r3, [r7, #12]
}
 800b99a:	bf00      	nop
 800b99c:	bf00      	nop
 800b99e:	e7fd      	b.n	800b99c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9a4:	683a      	ldr	r2, [r7, #0]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d902      	bls.n	800b9b0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	61fb      	str	r3, [r7, #28]
 800b9ae:	e002      	b.n	800b9b6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ba:	69fa      	ldr	r2, [r7, #28]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d04c      	beq.n	800ba5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d147      	bne.n	800ba5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b9ca:	4b26      	ldr	r3, [pc, #152]	@ (800ba64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	69ba      	ldr	r2, [r7, #24]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d10b      	bne.n	800b9ec <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	60bb      	str	r3, [r7, #8]
}
 800b9e6:	bf00      	nop
 800b9e8:	bf00      	nop
 800b9ea:	e7fd      	b.n	800b9e8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	69fa      	ldr	r2, [r7, #28]
 800b9f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	db04      	blt.n	800ba0a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	6959      	ldr	r1, [r3, #20]
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	4613      	mov	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	4a13      	ldr	r2, [pc, #76]	@ (800ba68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ba1a:	4413      	add	r3, r2
 800ba1c:	4299      	cmp	r1, r3
 800ba1e:	d11c      	bne.n	800ba5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	3304      	adds	r3, #4
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7fd fe7d 	bl	8009724 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ba6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d903      	bls.n	800ba3e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3a:	4a0c      	ldr	r2, [pc, #48]	@ (800ba6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ba3c:	6013      	str	r3, [r2, #0]
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba42:	4613      	mov	r3, r2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	4413      	add	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4a07      	ldr	r2, [pc, #28]	@ (800ba68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ba4c:	441a      	add	r2, r3
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	3304      	adds	r3, #4
 800ba52:	4619      	mov	r1, r3
 800ba54:	4610      	mov	r0, r2
 800ba56:	f7fd fe08 	bl	800966a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba5a:	bf00      	nop
 800ba5c:	3720      	adds	r7, #32
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	20000fa0 	.word	0x20000fa0
 800ba68:	20000fa4 	.word	0x20000fa4
 800ba6c:	2000147c 	.word	0x2000147c

0800ba70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ba70:	b480      	push	{r7}
 800ba72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ba74:	4b07      	ldr	r3, [pc, #28]	@ (800ba94 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d004      	beq.n	800ba86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ba7c:	4b05      	ldr	r3, [pc, #20]	@ (800ba94 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba82:	3201      	adds	r2, #1
 800ba84:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ba86:	4b03      	ldr	r3, [pc, #12]	@ (800ba94 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba88:	681b      	ldr	r3, [r3, #0]
	}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	20000fa0 	.word	0x20000fa0

0800ba98 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]
 800baa4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800baa6:	f000 ff9f 	bl	800c9e8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800baaa:	4b29      	ldr	r3, [pc, #164]	@ (800bb50 <xTaskNotifyWait+0xb8>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d01c      	beq.n	800baf2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bab8:	4b25      	ldr	r3, [pc, #148]	@ (800bb50 <xTaskNotifyWait+0xb8>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	43d2      	mvns	r2, r2
 800bac4:	400a      	ands	r2, r1
 800bac6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800baca:	4b21      	ldr	r3, [pc, #132]	@ (800bb50 <xTaskNotifyWait+0xb8>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00b      	beq.n	800baf2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bada:	2101      	movs	r1, #1
 800badc:	6838      	ldr	r0, [r7, #0]
 800bade:	f000 f9e3 	bl	800bea8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bae2:	4b1c      	ldr	r3, [pc, #112]	@ (800bb54 <xTaskNotifyWait+0xbc>)
 800bae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bae8:	601a      	str	r2, [r3, #0]
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800baf2:	f000 ffab 	bl	800ca4c <vPortExitCritical>

		taskENTER_CRITICAL();
 800baf6:	f000 ff77 	bl	800c9e8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d005      	beq.n	800bb0c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bb00:	4b13      	ldr	r3, [pc, #76]	@ (800bb50 <xTaskNotifyWait+0xb8>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bb0c:	4b10      	ldr	r3, [pc, #64]	@ (800bb50 <xTaskNotifyWait+0xb8>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d002      	beq.n	800bb20 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	617b      	str	r3, [r7, #20]
 800bb1e:	e00a      	b.n	800bb36 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bb20:	4b0b      	ldr	r3, [pc, #44]	@ (800bb50 <xTaskNotifyWait+0xb8>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	43d2      	mvns	r2, r2
 800bb2c:	400a      	ands	r2, r1
 800bb2e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800bb32:	2301      	movs	r3, #1
 800bb34:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb36:	4b06      	ldr	r3, [pc, #24]	@ (800bb50 <xTaskNotifyWait+0xb8>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800bb40:	f000 ff84 	bl	800ca4c <vPortExitCritical>

		return xReturn;
 800bb44:	697b      	ldr	r3, [r7, #20]
	}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	20000fa0 	.word	0x20000fa0
 800bb54:	e000ed04 	.word	0xe000ed04

0800bb58 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b08a      	sub	sp, #40	@ 0x28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	603b      	str	r3, [r7, #0]
 800bb64:	4613      	mov	r3, r2
 800bb66:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d10b      	bne.n	800bb8a <xTaskGenericNotify+0x32>
	__asm volatile
 800bb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	61bb      	str	r3, [r7, #24]
}
 800bb84:	bf00      	nop
 800bb86:	bf00      	nop
 800bb88:	e7fd      	b.n	800bb86 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bb8e:	f000 ff2b 	bl	800c9e8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d004      	beq.n	800bba2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bb98:	6a3b      	ldr	r3, [r7, #32]
 800bb9a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800bba8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	2202      	movs	r2, #2
 800bbae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800bbb2:	79fb      	ldrb	r3, [r7, #7]
 800bbb4:	2b04      	cmp	r3, #4
 800bbb6:	d82e      	bhi.n	800bc16 <xTaskGenericNotify+0xbe>
 800bbb8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc0 <xTaskGenericNotify+0x68>)
 800bbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbbe:	bf00      	nop
 800bbc0:	0800bc3b 	.word	0x0800bc3b
 800bbc4:	0800bbd5 	.word	0x0800bbd5
 800bbc8:	0800bbe7 	.word	0x0800bbe7
 800bbcc:	0800bbf7 	.word	0x0800bbf7
 800bbd0:	0800bc01 	.word	0x0800bc01
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	431a      	orrs	r2, r3
 800bbde:	6a3b      	ldr	r3, [r7, #32]
 800bbe0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800bbe4:	e02c      	b.n	800bc40 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bbe6:	6a3b      	ldr	r3, [r7, #32]
 800bbe8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bbec:	1c5a      	adds	r2, r3, #1
 800bbee:	6a3b      	ldr	r3, [r7, #32]
 800bbf0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800bbf4:	e024      	b.n	800bc40 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bbf6:	6a3b      	ldr	r3, [r7, #32]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800bbfe:	e01f      	b.n	800bc40 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bc00:	7ffb      	ldrb	r3, [r7, #31]
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d004      	beq.n	800bc10 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bc06:	6a3b      	ldr	r3, [r7, #32]
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bc0e:	e017      	b.n	800bc40 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800bc10:	2300      	movs	r3, #0
 800bc12:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800bc14:	e014      	b.n	800bc40 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bc16:	6a3b      	ldr	r3, [r7, #32]
 800bc18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc20:	d00d      	beq.n	800bc3e <xTaskGenericNotify+0xe6>
	__asm volatile
 800bc22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	617b      	str	r3, [r7, #20]
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop
 800bc38:	e7fd      	b.n	800bc36 <xTaskGenericNotify+0xde>
					break;
 800bc3a:	bf00      	nop
 800bc3c:	e000      	b.n	800bc40 <xTaskGenericNotify+0xe8>

					break;
 800bc3e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bc40:	7ffb      	ldrb	r3, [r7, #31]
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d13b      	bne.n	800bcbe <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc46:	6a3b      	ldr	r3, [r7, #32]
 800bc48:	3304      	adds	r3, #4
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fd fd6a 	bl	8009724 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bc50:	6a3b      	ldr	r3, [r7, #32]
 800bc52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc54:	4b1d      	ldr	r3, [pc, #116]	@ (800bccc <xTaskGenericNotify+0x174>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d903      	bls.n	800bc64 <xTaskGenericNotify+0x10c>
 800bc5c:	6a3b      	ldr	r3, [r7, #32]
 800bc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc60:	4a1a      	ldr	r2, [pc, #104]	@ (800bccc <xTaskGenericNotify+0x174>)
 800bc62:	6013      	str	r3, [r2, #0]
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc68:	4613      	mov	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4a17      	ldr	r2, [pc, #92]	@ (800bcd0 <xTaskGenericNotify+0x178>)
 800bc72:	441a      	add	r2, r3
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	3304      	adds	r3, #4
 800bc78:	4619      	mov	r1, r3
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	f7fd fcf5 	bl	800966a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00b      	beq.n	800bca0 <xTaskGenericNotify+0x148>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	613b      	str	r3, [r7, #16]
}
 800bc9a:	bf00      	nop
 800bc9c:	bf00      	nop
 800bc9e:	e7fd      	b.n	800bc9c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bca0:	6a3b      	ldr	r3, [r7, #32]
 800bca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bca4:	4b0b      	ldr	r3, [pc, #44]	@ (800bcd4 <xTaskGenericNotify+0x17c>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d907      	bls.n	800bcbe <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bcae:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd8 <xTaskGenericNotify+0x180>)
 800bcb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcb4:	601a      	str	r2, [r3, #0]
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bcbe:	f000 fec5 	bl	800ca4c <vPortExitCritical>

		return xReturn;
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3728      	adds	r7, #40	@ 0x28
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	2000147c 	.word	0x2000147c
 800bcd0:	20000fa4 	.word	0x20000fa4
 800bcd4:	20000fa0 	.word	0x20000fa0
 800bcd8:	e000ed04 	.word	0xe000ed04

0800bcdc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08e      	sub	sp, #56	@ 0x38
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	603b      	str	r3, [r7, #0]
 800bce8:	4613      	mov	r3, r2
 800bcea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bcec:	2301      	movs	r3, #1
 800bcee:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10b      	bne.n	800bd0e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800bcf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bd08:	bf00      	nop
 800bd0a:	bf00      	nop
 800bd0c:	e7fd      	b.n	800bd0a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd0e:	f000 ff4b 	bl	800cba8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800bd16:	f3ef 8211 	mrs	r2, BASEPRI
 800bd1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd1e:	f383 8811 	msr	BASEPRI, r3
 800bd22:	f3bf 8f6f 	isb	sy
 800bd26:	f3bf 8f4f 	dsb	sy
 800bd2a:	623a      	str	r2, [r7, #32]
 800bd2c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800bd2e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd30:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d004      	beq.n	800bd42 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd3a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd44:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800bd48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4e:	2202      	movs	r2, #2
 800bd50:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800bd54:	79fb      	ldrb	r3, [r7, #7]
 800bd56:	2b04      	cmp	r3, #4
 800bd58:	d82e      	bhi.n	800bdb8 <xTaskGenericNotifyFromISR+0xdc>
 800bd5a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd60 <xTaskGenericNotifyFromISR+0x84>)
 800bd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd60:	0800bddd 	.word	0x0800bddd
 800bd64:	0800bd75 	.word	0x0800bd75
 800bd68:	0800bd87 	.word	0x0800bd87
 800bd6c:	0800bd97 	.word	0x0800bd97
 800bd70:	0800bda1 	.word	0x0800bda1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd76:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	431a      	orrs	r2, r3
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd80:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800bd84:	e02d      	b.n	800bde2 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd90:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800bd94:	e025      	b.n	800bde2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd98:	68ba      	ldr	r2, [r7, #8]
 800bd9a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800bd9e:	e020      	b.n	800bde2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bda0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d004      	beq.n	800bdb2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bdb0:	e017      	b.n	800bde2 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800bdb6:	e014      	b.n	800bde2 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bdbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdc2:	d00d      	beq.n	800bde0 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	61bb      	str	r3, [r7, #24]
}
 800bdd6:	bf00      	nop
 800bdd8:	bf00      	nop
 800bdda:	e7fd      	b.n	800bdd8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800bddc:	bf00      	nop
 800bdde:	e000      	b.n	800bde2 <xTaskGenericNotifyFromISR+0x106>
					break;
 800bde0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bde2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d147      	bne.n	800be7a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00b      	beq.n	800be0a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800bdf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	617b      	str	r3, [r7, #20]
}
 800be04:	bf00      	nop
 800be06:	bf00      	nop
 800be08:	e7fd      	b.n	800be06 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be0a:	4b21      	ldr	r3, [pc, #132]	@ (800be90 <xTaskGenericNotifyFromISR+0x1b4>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d11d      	bne.n	800be4e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be14:	3304      	adds	r3, #4
 800be16:	4618      	mov	r0, r3
 800be18:	f7fd fc84 	bl	8009724 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be20:	4b1c      	ldr	r3, [pc, #112]	@ (800be94 <xTaskGenericNotifyFromISR+0x1b8>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	429a      	cmp	r2, r3
 800be26:	d903      	bls.n	800be30 <xTaskGenericNotifyFromISR+0x154>
 800be28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2c:	4a19      	ldr	r2, [pc, #100]	@ (800be94 <xTaskGenericNotifyFromISR+0x1b8>)
 800be2e:	6013      	str	r3, [r2, #0]
 800be30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be34:	4613      	mov	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4413      	add	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4a16      	ldr	r2, [pc, #88]	@ (800be98 <xTaskGenericNotifyFromISR+0x1bc>)
 800be3e:	441a      	add	r2, r3
 800be40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be42:	3304      	adds	r3, #4
 800be44:	4619      	mov	r1, r3
 800be46:	4610      	mov	r0, r2
 800be48:	f7fd fc0f 	bl	800966a <vListInsertEnd>
 800be4c:	e005      	b.n	800be5a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800be4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be50:	3318      	adds	r3, #24
 800be52:	4619      	mov	r1, r3
 800be54:	4811      	ldr	r0, [pc, #68]	@ (800be9c <xTaskGenericNotifyFromISR+0x1c0>)
 800be56:	f7fd fc08 	bl	800966a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be5e:	4b10      	ldr	r3, [pc, #64]	@ (800bea0 <xTaskGenericNotifyFromISR+0x1c4>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be64:	429a      	cmp	r2, r3
 800be66:	d908      	bls.n	800be7a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800be68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d002      	beq.n	800be74 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800be6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be70:	2201      	movs	r2, #1
 800be72:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800be74:	4b0b      	ldr	r3, [pc, #44]	@ (800bea4 <xTaskGenericNotifyFromISR+0x1c8>)
 800be76:	2201      	movs	r2, #1
 800be78:	601a      	str	r2, [r3, #0]
 800be7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	f383 8811 	msr	BASEPRI, r3
}
 800be84:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800be86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800be88:	4618      	mov	r0, r3
 800be8a:	3738      	adds	r7, #56	@ 0x38
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	2000149c 	.word	0x2000149c
 800be94:	2000147c 	.word	0x2000147c
 800be98:	20000fa4 	.word	0x20000fa4
 800be9c:	20001434 	.word	0x20001434
 800bea0:	20000fa0 	.word	0x20000fa0
 800bea4:	20001488 	.word	0x20001488

0800bea8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800beb2:	4b21      	ldr	r3, [pc, #132]	@ (800bf38 <prvAddCurrentTaskToDelayedList+0x90>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800beb8:	4b20      	ldr	r3, [pc, #128]	@ (800bf3c <prvAddCurrentTaskToDelayedList+0x94>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3304      	adds	r3, #4
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fd fc30 	bl	8009724 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beca:	d10a      	bne.n	800bee2 <prvAddCurrentTaskToDelayedList+0x3a>
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d007      	beq.n	800bee2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bed2:	4b1a      	ldr	r3, [pc, #104]	@ (800bf3c <prvAddCurrentTaskToDelayedList+0x94>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	3304      	adds	r3, #4
 800bed8:	4619      	mov	r1, r3
 800beda:	4819      	ldr	r0, [pc, #100]	@ (800bf40 <prvAddCurrentTaskToDelayedList+0x98>)
 800bedc:	f7fd fbc5 	bl	800966a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bee0:	e026      	b.n	800bf30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4413      	add	r3, r2
 800bee8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800beea:	4b14      	ldr	r3, [pc, #80]	@ (800bf3c <prvAddCurrentTaskToDelayedList+0x94>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d209      	bcs.n	800bf0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800befa:	4b12      	ldr	r3, [pc, #72]	@ (800bf44 <prvAddCurrentTaskToDelayedList+0x9c>)
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	4b0f      	ldr	r3, [pc, #60]	@ (800bf3c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	3304      	adds	r3, #4
 800bf04:	4619      	mov	r1, r3
 800bf06:	4610      	mov	r0, r2
 800bf08:	f7fd fbd3 	bl	80096b2 <vListInsert>
}
 800bf0c:	e010      	b.n	800bf30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf0e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf48 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	4b0a      	ldr	r3, [pc, #40]	@ (800bf3c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3304      	adds	r3, #4
 800bf18:	4619      	mov	r1, r3
 800bf1a:	4610      	mov	r0, r2
 800bf1c:	f7fd fbc9 	bl	80096b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf20:	4b0a      	ldr	r3, [pc, #40]	@ (800bf4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d202      	bcs.n	800bf30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf2a:	4a08      	ldr	r2, [pc, #32]	@ (800bf4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	6013      	str	r3, [r2, #0]
}
 800bf30:	bf00      	nop
 800bf32:	3710      	adds	r7, #16
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	20001478 	.word	0x20001478
 800bf3c:	20000fa0 	.word	0x20000fa0
 800bf40:	20001460 	.word	0x20001460
 800bf44:	20001430 	.word	0x20001430
 800bf48:	2000142c 	.word	0x2000142c
 800bf4c:	20001494 	.word	0x20001494

0800bf50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b08a      	sub	sp, #40	@ 0x28
 800bf54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf56:	2300      	movs	r3, #0
 800bf58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf5a:	f000 fbb1 	bl	800c6c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf5e:	4b1d      	ldr	r3, [pc, #116]	@ (800bfd4 <xTimerCreateTimerTask+0x84>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d021      	beq.n	800bfaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf66:	2300      	movs	r3, #0
 800bf68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf6e:	1d3a      	adds	r2, r7, #4
 800bf70:	f107 0108 	add.w	r1, r7, #8
 800bf74:	f107 030c 	add.w	r3, r7, #12
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fd fb2f 	bl	80095dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	9202      	str	r2, [sp, #8]
 800bf86:	9301      	str	r3, [sp, #4]
 800bf88:	2302      	movs	r3, #2
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	460a      	mov	r2, r1
 800bf90:	4911      	ldr	r1, [pc, #68]	@ (800bfd8 <xTimerCreateTimerTask+0x88>)
 800bf92:	4812      	ldr	r0, [pc, #72]	@ (800bfdc <xTimerCreateTimerTask+0x8c>)
 800bf94:	f7fe fcd4 	bl	800a940 <xTaskCreateStatic>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	4a11      	ldr	r2, [pc, #68]	@ (800bfe0 <xTimerCreateTimerTask+0x90>)
 800bf9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bf9e:	4b10      	ldr	r3, [pc, #64]	@ (800bfe0 <xTimerCreateTimerTask+0x90>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10b      	bne.n	800bfc8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	613b      	str	r3, [r7, #16]
}
 800bfc2:	bf00      	nop
 800bfc4:	bf00      	nop
 800bfc6:	e7fd      	b.n	800bfc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bfc8:	697b      	ldr	r3, [r7, #20]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3718      	adds	r7, #24
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	200014d0 	.word	0x200014d0
 800bfd8:	08012ba4 	.word	0x08012ba4
 800bfdc:	0800c259 	.word	0x0800c259
 800bfe0:	200014d4 	.word	0x200014d4

0800bfe4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b088      	sub	sp, #32
 800bfe8:	af02      	add	r7, sp, #8
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
 800bff0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800bff2:	202c      	movs	r0, #44	@ 0x2c
 800bff4:	f000 fe1a 	bl	800cc2c <pvPortMalloc>
 800bff8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00d      	beq.n	800c01c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2200      	movs	r2, #0
 800c004:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	9301      	str	r3, [sp, #4]
 800c00c:	6a3b      	ldr	r3, [r7, #32]
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	68b9      	ldr	r1, [r7, #8]
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f000 f845 	bl	800c0a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c01c:	697b      	ldr	r3, [r7, #20]
	}
 800c01e:	4618      	mov	r0, r3
 800c020:	3718      	adds	r7, #24
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c026:	b580      	push	{r7, lr}
 800c028:	b08a      	sub	sp, #40	@ 0x28
 800c02a:	af02      	add	r7, sp, #8
 800c02c:	60f8      	str	r0, [r7, #12]
 800c02e:	60b9      	str	r1, [r7, #8]
 800c030:	607a      	str	r2, [r7, #4]
 800c032:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c034:	232c      	movs	r3, #44	@ 0x2c
 800c036:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	2b2c      	cmp	r3, #44	@ 0x2c
 800c03c:	d00b      	beq.n	800c056 <xTimerCreateStatic+0x30>
	__asm volatile
 800c03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	61bb      	str	r3, [r7, #24]
}
 800c050:	bf00      	nop
 800c052:	bf00      	nop
 800c054:	e7fd      	b.n	800c052 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c056:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10b      	bne.n	800c076 <xTimerCreateStatic+0x50>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	617b      	str	r3, [r7, #20]
}
 800c070:	bf00      	nop
 800c072:	bf00      	nop
 800c074:	e7fd      	b.n	800c072 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c078:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00d      	beq.n	800c09c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	2202      	movs	r2, #2
 800c084:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08e:	9300      	str	r3, [sp, #0]
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	68b9      	ldr	r1, [r7, #8]
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f000 f805 	bl	800c0a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c09c:	69fb      	ldr	r3, [r7, #28]
	}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3720      	adds	r7, #32
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b086      	sub	sp, #24
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	60f8      	str	r0, [r7, #12]
 800c0ae:	60b9      	str	r1, [r7, #8]
 800c0b0:	607a      	str	r2, [r7, #4]
 800c0b2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10b      	bne.n	800c0d2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	617b      	str	r3, [r7, #20]
}
 800c0cc:	bf00      	nop
 800c0ce:	bf00      	nop
 800c0d0:	e7fd      	b.n	800c0ce <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d01e      	beq.n	800c116 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c0d8:	f000 faf2 	bl	800c6c0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e4:	68ba      	ldr	r2, [r7, #8]
 800c0e6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f0:	6a3a      	ldr	r2, [r7, #32]
 800c0f2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fd faa9 	bl	8009650 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d008      	beq.n	800c116 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c106:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c10a:	f043 0304 	orr.w	r3, r3, #4
 800c10e:	b2da      	uxtb	r2, r3
 800c110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c112:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c116:	bf00      	nop
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
	...

0800c120 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b08a      	sub	sp, #40	@ 0x28
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c12e:	2300      	movs	r3, #0
 800c130:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10b      	bne.n	800c150 <xTimerGenericCommand+0x30>
	__asm volatile
 800c138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	623b      	str	r3, [r7, #32]
}
 800c14a:	bf00      	nop
 800c14c:	bf00      	nop
 800c14e:	e7fd      	b.n	800c14c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c150:	4b19      	ldr	r3, [pc, #100]	@ (800c1b8 <xTimerGenericCommand+0x98>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d02a      	beq.n	800c1ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	2b05      	cmp	r3, #5
 800c168:	dc18      	bgt.n	800c19c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c16a:	f7ff fb07 	bl	800b77c <xTaskGetSchedulerState>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b02      	cmp	r3, #2
 800c172:	d109      	bne.n	800c188 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c174:	4b10      	ldr	r3, [pc, #64]	@ (800c1b8 <xTimerGenericCommand+0x98>)
 800c176:	6818      	ldr	r0, [r3, #0]
 800c178:	f107 0110 	add.w	r1, r7, #16
 800c17c:	2300      	movs	r3, #0
 800c17e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c180:	f7fd fd66 	bl	8009c50 <xQueueGenericSend>
 800c184:	6278      	str	r0, [r7, #36]	@ 0x24
 800c186:	e012      	b.n	800c1ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c188:	4b0b      	ldr	r3, [pc, #44]	@ (800c1b8 <xTimerGenericCommand+0x98>)
 800c18a:	6818      	ldr	r0, [r3, #0]
 800c18c:	f107 0110 	add.w	r1, r7, #16
 800c190:	2300      	movs	r3, #0
 800c192:	2200      	movs	r2, #0
 800c194:	f7fd fd5c 	bl	8009c50 <xQueueGenericSend>
 800c198:	6278      	str	r0, [r7, #36]	@ 0x24
 800c19a:	e008      	b.n	800c1ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c19c:	4b06      	ldr	r3, [pc, #24]	@ (800c1b8 <xTimerGenericCommand+0x98>)
 800c19e:	6818      	ldr	r0, [r3, #0]
 800c1a0:	f107 0110 	add.w	r1, r7, #16
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	f7fd fe54 	bl	8009e54 <xQueueGenericSendFromISR>
 800c1ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3728      	adds	r7, #40	@ 0x28
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	200014d0 	.word	0x200014d0

0800c1bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b088      	sub	sp, #32
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1c6:	4b23      	ldr	r3, [pc, #140]	@ (800c254 <prvProcessExpiredTimer+0x98>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fd faa5 	bl	8009724 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1e0:	f003 0304 	and.w	r3, r3, #4
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d023      	beq.n	800c230 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	699a      	ldr	r2, [r3, #24]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	18d1      	adds	r1, r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	6978      	ldr	r0, [r7, #20]
 800c1f6:	f000 f8d5 	bl	800c3a4 <prvInsertTimerInActiveList>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d020      	beq.n	800c242 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c200:	2300      	movs	r3, #0
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	2300      	movs	r3, #0
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	2100      	movs	r1, #0
 800c20a:	6978      	ldr	r0, [r7, #20]
 800c20c:	f7ff ff88 	bl	800c120 <xTimerGenericCommand>
 800c210:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d114      	bne.n	800c242 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	60fb      	str	r3, [r7, #12]
}
 800c22a:	bf00      	nop
 800c22c:	bf00      	nop
 800c22e:	e7fd      	b.n	800c22c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c236:	f023 0301 	bic.w	r3, r3, #1
 800c23a:	b2da      	uxtb	r2, r3
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	6a1b      	ldr	r3, [r3, #32]
 800c246:	6978      	ldr	r0, [r7, #20]
 800c248:	4798      	blx	r3
}
 800c24a:	bf00      	nop
 800c24c:	3718      	adds	r7, #24
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	200014c8 	.word	0x200014c8

0800c258 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c260:	f107 0308 	add.w	r3, r7, #8
 800c264:	4618      	mov	r0, r3
 800c266:	f000 f859 	bl	800c31c <prvGetNextExpireTime>
 800c26a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	4619      	mov	r1, r3
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f000 f805 	bl	800c280 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c276:	f000 f8d7 	bl	800c428 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c27a:	bf00      	nop
 800c27c:	e7f0      	b.n	800c260 <prvTimerTask+0x8>
	...

0800c280 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c28a:	f7fe fe3d 	bl	800af08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c28e:	f107 0308 	add.w	r3, r7, #8
 800c292:	4618      	mov	r0, r3
 800c294:	f000 f866 	bl	800c364 <prvSampleTimeNow>
 800c298:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d130      	bne.n	800c302 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10a      	bne.n	800c2bc <prvProcessTimerOrBlockTask+0x3c>
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d806      	bhi.n	800c2bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2ae:	f7fe fe39 	bl	800af24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2b2:	68f9      	ldr	r1, [r7, #12]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7ff ff81 	bl	800c1bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2ba:	e024      	b.n	800c306 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d008      	beq.n	800c2d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2c2:	4b13      	ldr	r3, [pc, #76]	@ (800c310 <prvProcessTimerOrBlockTask+0x90>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d101      	bne.n	800c2d0 <prvProcessTimerOrBlockTask+0x50>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e000      	b.n	800c2d2 <prvProcessTimerOrBlockTask+0x52>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2d4:	4b0f      	ldr	r3, [pc, #60]	@ (800c314 <prvProcessTimerOrBlockTask+0x94>)
 800c2d6:	6818      	ldr	r0, [r3, #0]
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	683a      	ldr	r2, [r7, #0]
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	f7fe faf9 	bl	800a8d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c2e6:	f7fe fe1d 	bl	800af24 <xTaskResumeAll>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d10a      	bne.n	800c306 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c2f0:	4b09      	ldr	r3, [pc, #36]	@ (800c318 <prvProcessTimerOrBlockTask+0x98>)
 800c2f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2f6:	601a      	str	r2, [r3, #0]
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	f3bf 8f6f 	isb	sy
}
 800c300:	e001      	b.n	800c306 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c302:	f7fe fe0f 	bl	800af24 <xTaskResumeAll>
}
 800c306:	bf00      	nop
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	200014cc 	.word	0x200014cc
 800c314:	200014d0 	.word	0x200014d0
 800c318:	e000ed04 	.word	0xe000ed04

0800c31c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c324:	4b0e      	ldr	r3, [pc, #56]	@ (800c360 <prvGetNextExpireTime+0x44>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <prvGetNextExpireTime+0x16>
 800c32e:	2201      	movs	r2, #1
 800c330:	e000      	b.n	800c334 <prvGetNextExpireTime+0x18>
 800c332:	2200      	movs	r2, #0
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d105      	bne.n	800c34c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c340:	4b07      	ldr	r3, [pc, #28]	@ (800c360 <prvGetNextExpireTime+0x44>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	60fb      	str	r3, [r7, #12]
 800c34a:	e001      	b.n	800c350 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c34c:	2300      	movs	r3, #0
 800c34e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c350:	68fb      	ldr	r3, [r7, #12]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	200014c8 	.word	0x200014c8

0800c364 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c36c:	f7fe fe78 	bl	800b060 <xTaskGetTickCount>
 800c370:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c372:	4b0b      	ldr	r3, [pc, #44]	@ (800c3a0 <prvSampleTimeNow+0x3c>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d205      	bcs.n	800c388 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c37c:	f000 f93a 	bl	800c5f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	601a      	str	r2, [r3, #0]
 800c386:	e002      	b.n	800c38e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c38e:	4a04      	ldr	r2, [pc, #16]	@ (800c3a0 <prvSampleTimeNow+0x3c>)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c394:	68fb      	ldr	r3, [r7, #12]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	200014d8 	.word	0x200014d8

0800c3a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	68ba      	ldr	r2, [r7, #8]
 800c3ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d812      	bhi.n	800c3f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	1ad2      	subs	r2, r2, r3
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	699b      	ldr	r3, [r3, #24]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d302      	bcc.n	800c3de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	617b      	str	r3, [r7, #20]
 800c3dc:	e01b      	b.n	800c416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3de:	4b10      	ldr	r3, [pc, #64]	@ (800c420 <prvInsertTimerInActiveList+0x7c>)
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	3304      	adds	r3, #4
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	f7fd f962 	bl	80096b2 <vListInsert>
 800c3ee:	e012      	b.n	800c416 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d206      	bcs.n	800c406 <prvInsertTimerInActiveList+0x62>
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d302      	bcc.n	800c406 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c400:	2301      	movs	r3, #1
 800c402:	617b      	str	r3, [r7, #20]
 800c404:	e007      	b.n	800c416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c406:	4b07      	ldr	r3, [pc, #28]	@ (800c424 <prvInsertTimerInActiveList+0x80>)
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	3304      	adds	r3, #4
 800c40e:	4619      	mov	r1, r3
 800c410:	4610      	mov	r0, r2
 800c412:	f7fd f94e 	bl	80096b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c416:	697b      	ldr	r3, [r7, #20]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3718      	adds	r7, #24
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	200014cc 	.word	0x200014cc
 800c424:	200014c8 	.word	0x200014c8

0800c428 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08e      	sub	sp, #56	@ 0x38
 800c42c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c42e:	e0ce      	b.n	800c5ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	da19      	bge.n	800c46a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c436:	1d3b      	adds	r3, r7, #4
 800c438:	3304      	adds	r3, #4
 800c43a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10b      	bne.n	800c45a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	61fb      	str	r3, [r7, #28]
}
 800c454:	bf00      	nop
 800c456:	bf00      	nop
 800c458:	e7fd      	b.n	800c456 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c460:	6850      	ldr	r0, [r2, #4]
 800c462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c464:	6892      	ldr	r2, [r2, #8]
 800c466:	4611      	mov	r1, r2
 800c468:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	f2c0 80ae 	blt.w	800c5ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c478:	695b      	ldr	r3, [r3, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d004      	beq.n	800c488 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c480:	3304      	adds	r3, #4
 800c482:	4618      	mov	r0, r3
 800c484:	f7fd f94e 	bl	8009724 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c488:	463b      	mov	r3, r7
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7ff ff6a 	bl	800c364 <prvSampleTimeNow>
 800c490:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2b09      	cmp	r3, #9
 800c496:	f200 8097 	bhi.w	800c5c8 <prvProcessReceivedCommands+0x1a0>
 800c49a:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a0 <prvProcessReceivedCommands+0x78>)
 800c49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a0:	0800c4c9 	.word	0x0800c4c9
 800c4a4:	0800c4c9 	.word	0x0800c4c9
 800c4a8:	0800c4c9 	.word	0x0800c4c9
 800c4ac:	0800c53f 	.word	0x0800c53f
 800c4b0:	0800c553 	.word	0x0800c553
 800c4b4:	0800c59f 	.word	0x0800c59f
 800c4b8:	0800c4c9 	.word	0x0800c4c9
 800c4bc:	0800c4c9 	.word	0x0800c4c9
 800c4c0:	0800c53f 	.word	0x0800c53f
 800c4c4:	0800c553 	.word	0x0800c553
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4ce:	f043 0301 	orr.w	r3, r3, #1
 800c4d2:	b2da      	uxtb	r2, r3
 800c4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4de:	699b      	ldr	r3, [r3, #24]
 800c4e0:	18d1      	adds	r1, r2, r3
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4e8:	f7ff ff5c 	bl	800c3a4 <prvInsertTimerInActiveList>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d06c      	beq.n	800c5cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b00      	cmp	r3, #0
 800c506:	d061      	beq.n	800c5cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50c:	699b      	ldr	r3, [r3, #24]
 800c50e:	441a      	add	r2, r3
 800c510:	2300      	movs	r3, #0
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	2300      	movs	r3, #0
 800c516:	2100      	movs	r1, #0
 800c518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c51a:	f7ff fe01 	bl	800c120 <xTimerGenericCommand>
 800c51e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c520:	6a3b      	ldr	r3, [r7, #32]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d152      	bne.n	800c5cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	61bb      	str	r3, [r7, #24]
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	e7fd      	b.n	800c53a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c544:	f023 0301 	bic.w	r3, r3, #1
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c550:	e03d      	b.n	800c5ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c558:	f043 0301 	orr.w	r3, r3, #1
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c560:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c568:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c56c:	699b      	ldr	r3, [r3, #24]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10b      	bne.n	800c58a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	617b      	str	r3, [r7, #20]
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop
 800c588:	e7fd      	b.n	800c586 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58c:	699a      	ldr	r2, [r3, #24]
 800c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c590:	18d1      	adds	r1, r2, r3
 800c592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c598:	f7ff ff04 	bl	800c3a4 <prvInsertTimerInActiveList>
					break;
 800c59c:	e017      	b.n	800c5ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5a4:	f003 0302 	and.w	r3, r3, #2
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d103      	bne.n	800c5b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c5ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5ae:	f000 fc11 	bl	800cdd4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5b2:	e00c      	b.n	800c5ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5ba:	f023 0301 	bic.w	r3, r3, #1
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c5c6:	e002      	b.n	800c5ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c5c8:	bf00      	nop
 800c5ca:	e000      	b.n	800c5ce <prvProcessReceivedCommands+0x1a6>
					break;
 800c5cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5ce:	4b08      	ldr	r3, [pc, #32]	@ (800c5f0 <prvProcessReceivedCommands+0x1c8>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	1d39      	adds	r1, r7, #4
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fd fd6a 	bl	800a0b0 <xQueueReceive>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f47f af26 	bne.w	800c430 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c5e4:	bf00      	nop
 800c5e6:	bf00      	nop
 800c5e8:	3730      	adds	r7, #48	@ 0x30
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	200014d0 	.word	0x200014d0

0800c5f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b088      	sub	sp, #32
 800c5f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5fa:	e049      	b.n	800c690 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5fc:	4b2e      	ldr	r3, [pc, #184]	@ (800c6b8 <prvSwitchTimerLists+0xc4>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c606:	4b2c      	ldr	r3, [pc, #176]	@ (800c6b8 <prvSwitchTimerLists+0xc4>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	3304      	adds	r3, #4
 800c614:	4618      	mov	r0, r3
 800c616:	f7fd f885 	bl	8009724 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c628:	f003 0304 	and.w	r3, r3, #4
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d02f      	beq.n	800c690 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	4413      	add	r3, r2
 800c638:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d90e      	bls.n	800c660 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c64e:	4b1a      	ldr	r3, [pc, #104]	@ (800c6b8 <prvSwitchTimerLists+0xc4>)
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	3304      	adds	r3, #4
 800c656:	4619      	mov	r1, r3
 800c658:	4610      	mov	r0, r2
 800c65a:	f7fd f82a 	bl	80096b2 <vListInsert>
 800c65e:	e017      	b.n	800c690 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c660:	2300      	movs	r3, #0
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	2300      	movs	r3, #0
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	2100      	movs	r1, #0
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f7ff fd58 	bl	800c120 <xTimerGenericCommand>
 800c670:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d10b      	bne.n	800c690 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c67c:	f383 8811 	msr	BASEPRI, r3
 800c680:	f3bf 8f6f 	isb	sy
 800c684:	f3bf 8f4f 	dsb	sy
 800c688:	603b      	str	r3, [r7, #0]
}
 800c68a:	bf00      	nop
 800c68c:	bf00      	nop
 800c68e:	e7fd      	b.n	800c68c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c690:	4b09      	ldr	r3, [pc, #36]	@ (800c6b8 <prvSwitchTimerLists+0xc4>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1b0      	bne.n	800c5fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c69a:	4b07      	ldr	r3, [pc, #28]	@ (800c6b8 <prvSwitchTimerLists+0xc4>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c6a0:	4b06      	ldr	r3, [pc, #24]	@ (800c6bc <prvSwitchTimerLists+0xc8>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a04      	ldr	r2, [pc, #16]	@ (800c6b8 <prvSwitchTimerLists+0xc4>)
 800c6a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c6a8:	4a04      	ldr	r2, [pc, #16]	@ (800c6bc <prvSwitchTimerLists+0xc8>)
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	6013      	str	r3, [r2, #0]
}
 800c6ae:	bf00      	nop
 800c6b0:	3718      	adds	r7, #24
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	200014c8 	.word	0x200014c8
 800c6bc:	200014cc 	.word	0x200014cc

0800c6c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6c6:	f000 f98f 	bl	800c9e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6ca:	4b15      	ldr	r3, [pc, #84]	@ (800c720 <prvCheckForValidListAndQueue+0x60>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d120      	bne.n	800c714 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6d2:	4814      	ldr	r0, [pc, #80]	@ (800c724 <prvCheckForValidListAndQueue+0x64>)
 800c6d4:	f7fc ff9c 	bl	8009610 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6d8:	4813      	ldr	r0, [pc, #76]	@ (800c728 <prvCheckForValidListAndQueue+0x68>)
 800c6da:	f7fc ff99 	bl	8009610 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6de:	4b13      	ldr	r3, [pc, #76]	@ (800c72c <prvCheckForValidListAndQueue+0x6c>)
 800c6e0:	4a10      	ldr	r2, [pc, #64]	@ (800c724 <prvCheckForValidListAndQueue+0x64>)
 800c6e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6e4:	4b12      	ldr	r3, [pc, #72]	@ (800c730 <prvCheckForValidListAndQueue+0x70>)
 800c6e6:	4a10      	ldr	r2, [pc, #64]	@ (800c728 <prvCheckForValidListAndQueue+0x68>)
 800c6e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	4b11      	ldr	r3, [pc, #68]	@ (800c734 <prvCheckForValidListAndQueue+0x74>)
 800c6f0:	4a11      	ldr	r2, [pc, #68]	@ (800c738 <prvCheckForValidListAndQueue+0x78>)
 800c6f2:	2110      	movs	r1, #16
 800c6f4:	200a      	movs	r0, #10
 800c6f6:	f7fd f8a9 	bl	800984c <xQueueGenericCreateStatic>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	4a08      	ldr	r2, [pc, #32]	@ (800c720 <prvCheckForValidListAndQueue+0x60>)
 800c6fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c700:	4b07      	ldr	r3, [pc, #28]	@ (800c720 <prvCheckForValidListAndQueue+0x60>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d005      	beq.n	800c714 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c708:	4b05      	ldr	r3, [pc, #20]	@ (800c720 <prvCheckForValidListAndQueue+0x60>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	490b      	ldr	r1, [pc, #44]	@ (800c73c <prvCheckForValidListAndQueue+0x7c>)
 800c70e:	4618      	mov	r0, r3
 800c710:	f7fe f88e 	bl	800a830 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c714:	f000 f99a 	bl	800ca4c <vPortExitCritical>
}
 800c718:	bf00      	nop
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	200014d0 	.word	0x200014d0
 800c724:	200014a0 	.word	0x200014a0
 800c728:	200014b4 	.word	0x200014b4
 800c72c:	200014c8 	.word	0x200014c8
 800c730:	200014cc 	.word	0x200014cc
 800c734:	2000157c 	.word	0x2000157c
 800c738:	200014dc 	.word	0x200014dc
 800c73c:	08012bac 	.word	0x08012bac

0800c740 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10b      	bne.n	800c76a <pvTimerGetTimerID+0x2a>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	60fb      	str	r3, [r7, #12]
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop
 800c768:	e7fd      	b.n	800c766 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800c76a:	f000 f93d 	bl	800c9e8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c774:	f000 f96a 	bl	800ca4c <vPortExitCritical>

	return pvReturn;
 800c778:	693b      	ldr	r3, [r7, #16]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3718      	adds	r7, #24
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
	...

0800c784 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	3b04      	subs	r3, #4
 800c794:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c79c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	3b04      	subs	r3, #4
 800c7a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	f023 0201 	bic.w	r2, r3, #1
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	3b04      	subs	r3, #4
 800c7b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c7b4:	4a0c      	ldr	r2, [pc, #48]	@ (800c7e8 <pxPortInitialiseStack+0x64>)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3b14      	subs	r3, #20
 800c7be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	3b04      	subs	r3, #4
 800c7ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f06f 0202 	mvn.w	r2, #2
 800c7d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	3b20      	subs	r3, #32
 800c7d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7da:	68fb      	ldr	r3, [r7, #12]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3714      	adds	r7, #20
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	0800c7ed 	.word	0x0800c7ed

0800c7ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7f6:	4b13      	ldr	r3, [pc, #76]	@ (800c844 <prvTaskExitError+0x58>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7fe:	d00b      	beq.n	800c818 <prvTaskExitError+0x2c>
	__asm volatile
 800c800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	60fb      	str	r3, [r7, #12]
}
 800c812:	bf00      	nop
 800c814:	bf00      	nop
 800c816:	e7fd      	b.n	800c814 <prvTaskExitError+0x28>
	__asm volatile
 800c818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81c:	f383 8811 	msr	BASEPRI, r3
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	60bb      	str	r3, [r7, #8]
}
 800c82a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c82c:	bf00      	nop
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d0fc      	beq.n	800c82e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	20000010 	.word	0x20000010
	...

0800c850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c850:	4b07      	ldr	r3, [pc, #28]	@ (800c870 <pxCurrentTCBConst2>)
 800c852:	6819      	ldr	r1, [r3, #0]
 800c854:	6808      	ldr	r0, [r1, #0]
 800c856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85a:	f380 8809 	msr	PSP, r0
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f04f 0000 	mov.w	r0, #0
 800c866:	f380 8811 	msr	BASEPRI, r0
 800c86a:	4770      	bx	lr
 800c86c:	f3af 8000 	nop.w

0800c870 <pxCurrentTCBConst2>:
 800c870:	20000fa0 	.word	0x20000fa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c874:	bf00      	nop
 800c876:	bf00      	nop

0800c878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c878:	4808      	ldr	r0, [pc, #32]	@ (800c89c <prvPortStartFirstTask+0x24>)
 800c87a:	6800      	ldr	r0, [r0, #0]
 800c87c:	6800      	ldr	r0, [r0, #0]
 800c87e:	f380 8808 	msr	MSP, r0
 800c882:	f04f 0000 	mov.w	r0, #0
 800c886:	f380 8814 	msr	CONTROL, r0
 800c88a:	b662      	cpsie	i
 800c88c:	b661      	cpsie	f
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	df00      	svc	0
 800c898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c89a:	bf00      	nop
 800c89c:	e000ed08 	.word	0xe000ed08

0800c8a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c8a6:	4b47      	ldr	r3, [pc, #284]	@ (800c9c4 <xPortStartScheduler+0x124>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a47      	ldr	r2, [pc, #284]	@ (800c9c8 <xPortStartScheduler+0x128>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d10b      	bne.n	800c8c8 <xPortStartScheduler+0x28>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	613b      	str	r3, [r7, #16]
}
 800c8c2:	bf00      	nop
 800c8c4:	bf00      	nop
 800c8c6:	e7fd      	b.n	800c8c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c8c8:	4b3e      	ldr	r3, [pc, #248]	@ (800c9c4 <xPortStartScheduler+0x124>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a3f      	ldr	r2, [pc, #252]	@ (800c9cc <xPortStartScheduler+0x12c>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d10b      	bne.n	800c8ea <xPortStartScheduler+0x4a>
	__asm volatile
 800c8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d6:	f383 8811 	msr	BASEPRI, r3
 800c8da:	f3bf 8f6f 	isb	sy
 800c8de:	f3bf 8f4f 	dsb	sy
 800c8e2:	60fb      	str	r3, [r7, #12]
}
 800c8e4:	bf00      	nop
 800c8e6:	bf00      	nop
 800c8e8:	e7fd      	b.n	800c8e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8ea:	4b39      	ldr	r3, [pc, #228]	@ (800c9d0 <xPortStartScheduler+0x130>)
 800c8ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	22ff      	movs	r2, #255	@ 0xff
 800c8fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	b2db      	uxtb	r3, r3
 800c902:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c904:	78fb      	ldrb	r3, [r7, #3]
 800c906:	b2db      	uxtb	r3, r3
 800c908:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	4b31      	ldr	r3, [pc, #196]	@ (800c9d4 <xPortStartScheduler+0x134>)
 800c910:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c912:	4b31      	ldr	r3, [pc, #196]	@ (800c9d8 <xPortStartScheduler+0x138>)
 800c914:	2207      	movs	r2, #7
 800c916:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c918:	e009      	b.n	800c92e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c91a:	4b2f      	ldr	r3, [pc, #188]	@ (800c9d8 <xPortStartScheduler+0x138>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	3b01      	subs	r3, #1
 800c920:	4a2d      	ldr	r2, [pc, #180]	@ (800c9d8 <xPortStartScheduler+0x138>)
 800c922:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c924:	78fb      	ldrb	r3, [r7, #3]
 800c926:	b2db      	uxtb	r3, r3
 800c928:	005b      	lsls	r3, r3, #1
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c92e:	78fb      	ldrb	r3, [r7, #3]
 800c930:	b2db      	uxtb	r3, r3
 800c932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c936:	2b80      	cmp	r3, #128	@ 0x80
 800c938:	d0ef      	beq.n	800c91a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c93a:	4b27      	ldr	r3, [pc, #156]	@ (800c9d8 <xPortStartScheduler+0x138>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f1c3 0307 	rsb	r3, r3, #7
 800c942:	2b04      	cmp	r3, #4
 800c944:	d00b      	beq.n	800c95e <xPortStartScheduler+0xbe>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	60bb      	str	r3, [r7, #8]
}
 800c958:	bf00      	nop
 800c95a:	bf00      	nop
 800c95c:	e7fd      	b.n	800c95a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c95e:	4b1e      	ldr	r3, [pc, #120]	@ (800c9d8 <xPortStartScheduler+0x138>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	021b      	lsls	r3, r3, #8
 800c964:	4a1c      	ldr	r2, [pc, #112]	@ (800c9d8 <xPortStartScheduler+0x138>)
 800c966:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c968:	4b1b      	ldr	r3, [pc, #108]	@ (800c9d8 <xPortStartScheduler+0x138>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c970:	4a19      	ldr	r2, [pc, #100]	@ (800c9d8 <xPortStartScheduler+0x138>)
 800c972:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	b2da      	uxtb	r2, r3
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c97c:	4b17      	ldr	r3, [pc, #92]	@ (800c9dc <xPortStartScheduler+0x13c>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a16      	ldr	r2, [pc, #88]	@ (800c9dc <xPortStartScheduler+0x13c>)
 800c982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c986:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c988:	4b14      	ldr	r3, [pc, #80]	@ (800c9dc <xPortStartScheduler+0x13c>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a13      	ldr	r2, [pc, #76]	@ (800c9dc <xPortStartScheduler+0x13c>)
 800c98e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c992:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c994:	f000 f8da 	bl	800cb4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c998:	4b11      	ldr	r3, [pc, #68]	@ (800c9e0 <xPortStartScheduler+0x140>)
 800c99a:	2200      	movs	r2, #0
 800c99c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c99e:	f000 f8f9 	bl	800cb94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c9a2:	4b10      	ldr	r3, [pc, #64]	@ (800c9e4 <xPortStartScheduler+0x144>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a0f      	ldr	r2, [pc, #60]	@ (800c9e4 <xPortStartScheduler+0x144>)
 800c9a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c9ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c9ae:	f7ff ff63 	bl	800c878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c9b2:	f7fe fc31 	bl	800b218 <vTaskSwitchContext>
	prvTaskExitError();
 800c9b6:	f7ff ff19 	bl	800c7ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3718      	adds	r7, #24
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	e000ed00 	.word	0xe000ed00
 800c9c8:	410fc271 	.word	0x410fc271
 800c9cc:	410fc270 	.word	0x410fc270
 800c9d0:	e000e400 	.word	0xe000e400
 800c9d4:	200015cc 	.word	0x200015cc
 800c9d8:	200015d0 	.word	0x200015d0
 800c9dc:	e000ed20 	.word	0xe000ed20
 800c9e0:	20000010 	.word	0x20000010
 800c9e4:	e000ef34 	.word	0xe000ef34

0800c9e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	607b      	str	r3, [r7, #4]
}
 800ca00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca02:	4b10      	ldr	r3, [pc, #64]	@ (800ca44 <vPortEnterCritical+0x5c>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	3301      	adds	r3, #1
 800ca08:	4a0e      	ldr	r2, [pc, #56]	@ (800ca44 <vPortEnterCritical+0x5c>)
 800ca0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca0c:	4b0d      	ldr	r3, [pc, #52]	@ (800ca44 <vPortEnterCritical+0x5c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d110      	bne.n	800ca36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca14:	4b0c      	ldr	r3, [pc, #48]	@ (800ca48 <vPortEnterCritical+0x60>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00b      	beq.n	800ca36 <vPortEnterCritical+0x4e>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	603b      	str	r3, [r7, #0]
}
 800ca30:	bf00      	nop
 800ca32:	bf00      	nop
 800ca34:	e7fd      	b.n	800ca32 <vPortEnterCritical+0x4a>
	}
}
 800ca36:	bf00      	nop
 800ca38:	370c      	adds	r7, #12
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	20000010 	.word	0x20000010
 800ca48:	e000ed04 	.word	0xe000ed04

0800ca4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca52:	4b12      	ldr	r3, [pc, #72]	@ (800ca9c <vPortExitCritical+0x50>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d10b      	bne.n	800ca72 <vPortExitCritical+0x26>
	__asm volatile
 800ca5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca5e:	f383 8811 	msr	BASEPRI, r3
 800ca62:	f3bf 8f6f 	isb	sy
 800ca66:	f3bf 8f4f 	dsb	sy
 800ca6a:	607b      	str	r3, [r7, #4]
}
 800ca6c:	bf00      	nop
 800ca6e:	bf00      	nop
 800ca70:	e7fd      	b.n	800ca6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca72:	4b0a      	ldr	r3, [pc, #40]	@ (800ca9c <vPortExitCritical+0x50>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	3b01      	subs	r3, #1
 800ca78:	4a08      	ldr	r2, [pc, #32]	@ (800ca9c <vPortExitCritical+0x50>)
 800ca7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca7c:	4b07      	ldr	r3, [pc, #28]	@ (800ca9c <vPortExitCritical+0x50>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d105      	bne.n	800ca90 <vPortExitCritical+0x44>
 800ca84:	2300      	movs	r3, #0
 800ca86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	f383 8811 	msr	BASEPRI, r3
}
 800ca8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	20000010 	.word	0x20000010

0800caa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800caa0:	f3ef 8009 	mrs	r0, PSP
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	4b15      	ldr	r3, [pc, #84]	@ (800cb00 <pxCurrentTCBConst>)
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	f01e 0f10 	tst.w	lr, #16
 800cab0:	bf08      	it	eq
 800cab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caba:	6010      	str	r0, [r2, #0]
 800cabc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cac4:	f380 8811 	msr	BASEPRI, r0
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f7fe fba2 	bl	800b218 <vTaskSwitchContext>
 800cad4:	f04f 0000 	mov.w	r0, #0
 800cad8:	f380 8811 	msr	BASEPRI, r0
 800cadc:	bc09      	pop	{r0, r3}
 800cade:	6819      	ldr	r1, [r3, #0]
 800cae0:	6808      	ldr	r0, [r1, #0]
 800cae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae6:	f01e 0f10 	tst.w	lr, #16
 800caea:	bf08      	it	eq
 800caec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800caf0:	f380 8809 	msr	PSP, r0
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop
 800cafc:	f3af 8000 	nop.w

0800cb00 <pxCurrentTCBConst>:
 800cb00:	20000fa0 	.word	0x20000fa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop

0800cb08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	607b      	str	r3, [r7, #4]
}
 800cb20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb22:	f7fe fabf 	bl	800b0a4 <xTaskIncrementTick>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d003      	beq.n	800cb34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb2c:	4b06      	ldr	r3, [pc, #24]	@ (800cb48 <xPortSysTickHandler+0x40>)
 800cb2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb32:	601a      	str	r2, [r3, #0]
 800cb34:	2300      	movs	r3, #0
 800cb36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	f383 8811 	msr	BASEPRI, r3
}
 800cb3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb40:	bf00      	nop
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	e000ed04 	.word	0xe000ed04

0800cb4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb50:	4b0b      	ldr	r3, [pc, #44]	@ (800cb80 <vPortSetupTimerInterrupt+0x34>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb56:	4b0b      	ldr	r3, [pc, #44]	@ (800cb84 <vPortSetupTimerInterrupt+0x38>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb5c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb88 <vPortSetupTimerInterrupt+0x3c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a0a      	ldr	r2, [pc, #40]	@ (800cb8c <vPortSetupTimerInterrupt+0x40>)
 800cb62:	fba2 2303 	umull	r2, r3, r2, r3
 800cb66:	099b      	lsrs	r3, r3, #6
 800cb68:	4a09      	ldr	r2, [pc, #36]	@ (800cb90 <vPortSetupTimerInterrupt+0x44>)
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb6e:	4b04      	ldr	r3, [pc, #16]	@ (800cb80 <vPortSetupTimerInterrupt+0x34>)
 800cb70:	2207      	movs	r2, #7
 800cb72:	601a      	str	r2, [r3, #0]
}
 800cb74:	bf00      	nop
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	e000e010 	.word	0xe000e010
 800cb84:	e000e018 	.word	0xe000e018
 800cb88:	20000004 	.word	0x20000004
 800cb8c:	10624dd3 	.word	0x10624dd3
 800cb90:	e000e014 	.word	0xe000e014

0800cb94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cba4 <vPortEnableVFP+0x10>
 800cb98:	6801      	ldr	r1, [r0, #0]
 800cb9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cb9e:	6001      	str	r1, [r0, #0]
 800cba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cba2:	bf00      	nop
 800cba4:	e000ed88 	.word	0xe000ed88

0800cba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cba8:	b480      	push	{r7}
 800cbaa:	b085      	sub	sp, #20
 800cbac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cbae:	f3ef 8305 	mrs	r3, IPSR
 800cbb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2b0f      	cmp	r3, #15
 800cbb8:	d915      	bls.n	800cbe6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cbba:	4a18      	ldr	r2, [pc, #96]	@ (800cc1c <vPortValidateInterruptPriority+0x74>)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cbc4:	4b16      	ldr	r3, [pc, #88]	@ (800cc20 <vPortValidateInterruptPriority+0x78>)
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	7afa      	ldrb	r2, [r7, #11]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d20b      	bcs.n	800cbe6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	607b      	str	r3, [r7, #4]
}
 800cbe0:	bf00      	nop
 800cbe2:	bf00      	nop
 800cbe4:	e7fd      	b.n	800cbe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cbe6:	4b0f      	ldr	r3, [pc, #60]	@ (800cc24 <vPortValidateInterruptPriority+0x7c>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cbee:	4b0e      	ldr	r3, [pc, #56]	@ (800cc28 <vPortValidateInterruptPriority+0x80>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d90b      	bls.n	800cc0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	603b      	str	r3, [r7, #0]
}
 800cc08:	bf00      	nop
 800cc0a:	bf00      	nop
 800cc0c:	e7fd      	b.n	800cc0a <vPortValidateInterruptPriority+0x62>
	}
 800cc0e:	bf00      	nop
 800cc10:	3714      	adds	r7, #20
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	e000e3f0 	.word	0xe000e3f0
 800cc20:	200015cc 	.word	0x200015cc
 800cc24:	e000ed0c 	.word	0xe000ed0c
 800cc28:	200015d0 	.word	0x200015d0

0800cc2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b08a      	sub	sp, #40	@ 0x28
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc34:	2300      	movs	r3, #0
 800cc36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc38:	f7fe f966 	bl	800af08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc3c:	4b5f      	ldr	r3, [pc, #380]	@ (800cdbc <pvPortMalloc+0x190>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d101      	bne.n	800cc48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc44:	f000 f92a 	bl	800ce9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc48:	4b5d      	ldr	r3, [pc, #372]	@ (800cdc0 <pvPortMalloc+0x194>)
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	4013      	ands	r3, r2
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f040 8095 	bne.w	800cd80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d01e      	beq.n	800cc9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cc5c:	2208      	movs	r2, #8
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4413      	add	r3, r2
 800cc62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f003 0307 	and.w	r3, r3, #7
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d015      	beq.n	800cc9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f023 0307 	bic.w	r3, r3, #7
 800cc74:	3308      	adds	r3, #8
 800cc76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f003 0307 	and.w	r3, r3, #7
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00b      	beq.n	800cc9a <pvPortMalloc+0x6e>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	617b      	str	r3, [r7, #20]
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	e7fd      	b.n	800cc96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d06f      	beq.n	800cd80 <pvPortMalloc+0x154>
 800cca0:	4b48      	ldr	r3, [pc, #288]	@ (800cdc4 <pvPortMalloc+0x198>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d86a      	bhi.n	800cd80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ccaa:	4b47      	ldr	r3, [pc, #284]	@ (800cdc8 <pvPortMalloc+0x19c>)
 800ccac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ccae:	4b46      	ldr	r3, [pc, #280]	@ (800cdc8 <pvPortMalloc+0x19c>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ccb4:	e004      	b.n	800ccc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ccba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d903      	bls.n	800ccd2 <pvPortMalloc+0xa6>
 800ccca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1f1      	bne.n	800ccb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ccd2:	4b3a      	ldr	r3, [pc, #232]	@ (800cdbc <pvPortMalloc+0x190>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d051      	beq.n	800cd80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ccdc:	6a3b      	ldr	r3, [r7, #32]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	2208      	movs	r2, #8
 800cce2:	4413      	add	r3, r2
 800cce4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ccee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf0:	685a      	ldr	r2, [r3, #4]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	1ad2      	subs	r2, r2, r3
 800ccf6:	2308      	movs	r3, #8
 800ccf8:	005b      	lsls	r3, r3, #1
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d920      	bls.n	800cd40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ccfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	4413      	add	r3, r2
 800cd04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	f003 0307 	and.w	r3, r3, #7
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d00b      	beq.n	800cd28 <pvPortMalloc+0xfc>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	613b      	str	r3, [r7, #16]
}
 800cd22:	bf00      	nop
 800cd24:	bf00      	nop
 800cd26:	e7fd      	b.n	800cd24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	1ad2      	subs	r2, r2, r3
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd3a:	69b8      	ldr	r0, [r7, #24]
 800cd3c:	f000 f910 	bl	800cf60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd40:	4b20      	ldr	r3, [pc, #128]	@ (800cdc4 <pvPortMalloc+0x198>)
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	4a1e      	ldr	r2, [pc, #120]	@ (800cdc4 <pvPortMalloc+0x198>)
 800cd4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd4e:	4b1d      	ldr	r3, [pc, #116]	@ (800cdc4 <pvPortMalloc+0x198>)
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	4b1e      	ldr	r3, [pc, #120]	@ (800cdcc <pvPortMalloc+0x1a0>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d203      	bcs.n	800cd62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd5a:	4b1a      	ldr	r3, [pc, #104]	@ (800cdc4 <pvPortMalloc+0x198>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a1b      	ldr	r2, [pc, #108]	@ (800cdcc <pvPortMalloc+0x1a0>)
 800cd60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd64:	685a      	ldr	r2, [r3, #4]
 800cd66:	4b16      	ldr	r3, [pc, #88]	@ (800cdc0 <pvPortMalloc+0x194>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	431a      	orrs	r2, r3
 800cd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd72:	2200      	movs	r2, #0
 800cd74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd76:	4b16      	ldr	r3, [pc, #88]	@ (800cdd0 <pvPortMalloc+0x1a4>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	4a14      	ldr	r2, [pc, #80]	@ (800cdd0 <pvPortMalloc+0x1a4>)
 800cd7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd80:	f7fe f8d0 	bl	800af24 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d101      	bne.n	800cd8e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800cd8a:	f7f5 f8e8 	bl	8001f5e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	f003 0307 	and.w	r3, r3, #7
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00b      	beq.n	800cdb0 <pvPortMalloc+0x184>
	__asm volatile
 800cd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd9c:	f383 8811 	msr	BASEPRI, r3
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	60fb      	str	r3, [r7, #12]
}
 800cdaa:	bf00      	nop
 800cdac:	bf00      	nop
 800cdae:	e7fd      	b.n	800cdac <pvPortMalloc+0x180>
	return pvReturn;
 800cdb0:	69fb      	ldr	r3, [r7, #28]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3728      	adds	r7, #40	@ 0x28
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	200092dc 	.word	0x200092dc
 800cdc0:	200092f0 	.word	0x200092f0
 800cdc4:	200092e0 	.word	0x200092e0
 800cdc8:	200092d4 	.word	0x200092d4
 800cdcc:	200092e4 	.word	0x200092e4
 800cdd0:	200092e8 	.word	0x200092e8

0800cdd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d04f      	beq.n	800ce86 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cde6:	2308      	movs	r3, #8
 800cde8:	425b      	negs	r3, r3
 800cdea:	697a      	ldr	r2, [r7, #20]
 800cdec:	4413      	add	r3, r2
 800cdee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	685a      	ldr	r2, [r3, #4]
 800cdf8:	4b25      	ldr	r3, [pc, #148]	@ (800ce90 <vPortFree+0xbc>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d10b      	bne.n	800ce1a <vPortFree+0x46>
	__asm volatile
 800ce02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce06:	f383 8811 	msr	BASEPRI, r3
 800ce0a:	f3bf 8f6f 	isb	sy
 800ce0e:	f3bf 8f4f 	dsb	sy
 800ce12:	60fb      	str	r3, [r7, #12]
}
 800ce14:	bf00      	nop
 800ce16:	bf00      	nop
 800ce18:	e7fd      	b.n	800ce16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00b      	beq.n	800ce3a <vPortFree+0x66>
	__asm volatile
 800ce22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce26:	f383 8811 	msr	BASEPRI, r3
 800ce2a:	f3bf 8f6f 	isb	sy
 800ce2e:	f3bf 8f4f 	dsb	sy
 800ce32:	60bb      	str	r3, [r7, #8]
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop
 800ce38:	e7fd      	b.n	800ce36 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	685a      	ldr	r2, [r3, #4]
 800ce3e:	4b14      	ldr	r3, [pc, #80]	@ (800ce90 <vPortFree+0xbc>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4013      	ands	r3, r2
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d01e      	beq.n	800ce86 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d11a      	bne.n	800ce86 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	685a      	ldr	r2, [r3, #4]
 800ce54:	4b0e      	ldr	r3, [pc, #56]	@ (800ce90 <vPortFree+0xbc>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	43db      	mvns	r3, r3
 800ce5a:	401a      	ands	r2, r3
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce60:	f7fe f852 	bl	800af08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	685a      	ldr	r2, [r3, #4]
 800ce68:	4b0a      	ldr	r3, [pc, #40]	@ (800ce94 <vPortFree+0xc0>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	4a09      	ldr	r2, [pc, #36]	@ (800ce94 <vPortFree+0xc0>)
 800ce70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce72:	6938      	ldr	r0, [r7, #16]
 800ce74:	f000 f874 	bl	800cf60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce78:	4b07      	ldr	r3, [pc, #28]	@ (800ce98 <vPortFree+0xc4>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	4a06      	ldr	r2, [pc, #24]	@ (800ce98 <vPortFree+0xc4>)
 800ce80:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce82:	f7fe f84f 	bl	800af24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce86:	bf00      	nop
 800ce88:	3718      	adds	r7, #24
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	200092f0 	.word	0x200092f0
 800ce94:	200092e0 	.word	0x200092e0
 800ce98:	200092ec 	.word	0x200092ec

0800ce9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b085      	sub	sp, #20
 800cea0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cea2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800cea6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cea8:	4b27      	ldr	r3, [pc, #156]	@ (800cf48 <prvHeapInit+0xac>)
 800ceaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f003 0307 	and.w	r3, r3, #7
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00c      	beq.n	800ced0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	3307      	adds	r3, #7
 800ceba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f023 0307 	bic.w	r3, r3, #7
 800cec2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	4a1f      	ldr	r2, [pc, #124]	@ (800cf48 <prvHeapInit+0xac>)
 800cecc:	4413      	add	r3, r2
 800cece:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ced4:	4a1d      	ldr	r2, [pc, #116]	@ (800cf4c <prvHeapInit+0xb0>)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ceda:	4b1c      	ldr	r3, [pc, #112]	@ (800cf4c <prvHeapInit+0xb0>)
 800cedc:	2200      	movs	r2, #0
 800cede:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	4413      	add	r3, r2
 800cee6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cee8:	2208      	movs	r2, #8
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	1a9b      	subs	r3, r3, r2
 800ceee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f023 0307 	bic.w	r3, r3, #7
 800cef6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	4a15      	ldr	r2, [pc, #84]	@ (800cf50 <prvHeapInit+0xb4>)
 800cefc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cefe:	4b14      	ldr	r3, [pc, #80]	@ (800cf50 <prvHeapInit+0xb4>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2200      	movs	r2, #0
 800cf04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf06:	4b12      	ldr	r3, [pc, #72]	@ (800cf50 <prvHeapInit+0xb4>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	1ad2      	subs	r2, r2, r3
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf1c:	4b0c      	ldr	r3, [pc, #48]	@ (800cf50 <prvHeapInit+0xb4>)
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	4a0a      	ldr	r2, [pc, #40]	@ (800cf54 <prvHeapInit+0xb8>)
 800cf2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	4a09      	ldr	r2, [pc, #36]	@ (800cf58 <prvHeapInit+0xbc>)
 800cf32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf34:	4b09      	ldr	r3, [pc, #36]	@ (800cf5c <prvHeapInit+0xc0>)
 800cf36:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cf3a:	601a      	str	r2, [r3, #0]
}
 800cf3c:	bf00      	nop
 800cf3e:	3714      	adds	r7, #20
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	200015d4 	.word	0x200015d4
 800cf4c:	200092d4 	.word	0x200092d4
 800cf50:	200092dc 	.word	0x200092dc
 800cf54:	200092e4 	.word	0x200092e4
 800cf58:	200092e0 	.word	0x200092e0
 800cf5c:	200092f0 	.word	0x200092f0

0800cf60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf60:	b480      	push	{r7}
 800cf62:	b085      	sub	sp, #20
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf68:	4b28      	ldr	r3, [pc, #160]	@ (800d00c <prvInsertBlockIntoFreeList+0xac>)
 800cf6a:	60fb      	str	r3, [r7, #12]
 800cf6c:	e002      	b.n	800cf74 <prvInsertBlockIntoFreeList+0x14>
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	60fb      	str	r3, [r7, #12]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d8f7      	bhi.n	800cf6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	4413      	add	r3, r2
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d108      	bne.n	800cfa2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	685a      	ldr	r2, [r3, #4]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	441a      	add	r2, r3
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	68ba      	ldr	r2, [r7, #8]
 800cfac:	441a      	add	r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d118      	bne.n	800cfe8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	4b15      	ldr	r3, [pc, #84]	@ (800d010 <prvInsertBlockIntoFreeList+0xb0>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d00d      	beq.n	800cfde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	685a      	ldr	r2, [r3, #4]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	441a      	add	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	601a      	str	r2, [r3, #0]
 800cfdc:	e008      	b.n	800cff0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cfde:	4b0c      	ldr	r3, [pc, #48]	@ (800d010 <prvInsertBlockIntoFreeList+0xb0>)
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	601a      	str	r2, [r3, #0]
 800cfe6:	e003      	b.n	800cff0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d002      	beq.n	800cffe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cffe:	bf00      	nop
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	200092d4 	.word	0x200092d4
 800d010:	200092dc 	.word	0x200092dc

0800d014 <arm_rfft_fast_init_f32>:
 800d014:	084b      	lsrs	r3, r1, #1
 800d016:	2b80      	cmp	r3, #128	@ 0x80
 800d018:	b410      	push	{r4}
 800d01a:	8201      	strh	r1, [r0, #16]
 800d01c:	8003      	strh	r3, [r0, #0]
 800d01e:	d047      	beq.n	800d0b0 <arm_rfft_fast_init_f32+0x9c>
 800d020:	d917      	bls.n	800d052 <arm_rfft_fast_init_f32+0x3e>
 800d022:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d026:	d03d      	beq.n	800d0a4 <arm_rfft_fast_init_f32+0x90>
 800d028:	d929      	bls.n	800d07e <arm_rfft_fast_init_f32+0x6a>
 800d02a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d02e:	d020      	beq.n	800d072 <arm_rfft_fast_init_f32+0x5e>
 800d030:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d034:	d113      	bne.n	800d05e <arm_rfft_fast_init_f32+0x4a>
 800d036:	4921      	ldr	r1, [pc, #132]	@ (800d0bc <arm_rfft_fast_init_f32+0xa8>)
 800d038:	4a21      	ldr	r2, [pc, #132]	@ (800d0c0 <arm_rfft_fast_init_f32+0xac>)
 800d03a:	4b22      	ldr	r3, [pc, #136]	@ (800d0c4 <arm_rfft_fast_init_f32+0xb0>)
 800d03c:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800d040:	8184      	strh	r4, [r0, #12]
 800d042:	6081      	str	r1, [r0, #8]
 800d044:	6042      	str	r2, [r0, #4]
 800d046:	6143      	str	r3, [r0, #20]
 800d048:	2000      	movs	r0, #0
 800d04a:	b240      	sxtb	r0, r0
 800d04c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	2b20      	cmp	r3, #32
 800d054:	d01c      	beq.n	800d090 <arm_rfft_fast_init_f32+0x7c>
 800d056:	2b40      	cmp	r3, #64	@ 0x40
 800d058:	d006      	beq.n	800d068 <arm_rfft_fast_init_f32+0x54>
 800d05a:	2b10      	cmp	r3, #16
 800d05c:	d01d      	beq.n	800d09a <arm_rfft_fast_init_f32+0x86>
 800d05e:	20ff      	movs	r0, #255	@ 0xff
 800d060:	b240      	sxtb	r0, r0
 800d062:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	2438      	movs	r4, #56	@ 0x38
 800d06a:	4917      	ldr	r1, [pc, #92]	@ (800d0c8 <arm_rfft_fast_init_f32+0xb4>)
 800d06c:	4a17      	ldr	r2, [pc, #92]	@ (800d0cc <arm_rfft_fast_init_f32+0xb8>)
 800d06e:	4b18      	ldr	r3, [pc, #96]	@ (800d0d0 <arm_rfft_fast_init_f32+0xbc>)
 800d070:	e7e6      	b.n	800d040 <arm_rfft_fast_init_f32+0x2c>
 800d072:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800d076:	4917      	ldr	r1, [pc, #92]	@ (800d0d4 <arm_rfft_fast_init_f32+0xc0>)
 800d078:	4a17      	ldr	r2, [pc, #92]	@ (800d0d8 <arm_rfft_fast_init_f32+0xc4>)
 800d07a:	4b18      	ldr	r3, [pc, #96]	@ (800d0dc <arm_rfft_fast_init_f32+0xc8>)
 800d07c:	e7e0      	b.n	800d040 <arm_rfft_fast_init_f32+0x2c>
 800d07e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d082:	d1ec      	bne.n	800d05e <arm_rfft_fast_init_f32+0x4a>
 800d084:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800d088:	4915      	ldr	r1, [pc, #84]	@ (800d0e0 <arm_rfft_fast_init_f32+0xcc>)
 800d08a:	4a16      	ldr	r2, [pc, #88]	@ (800d0e4 <arm_rfft_fast_init_f32+0xd0>)
 800d08c:	4b16      	ldr	r3, [pc, #88]	@ (800d0e8 <arm_rfft_fast_init_f32+0xd4>)
 800d08e:	e7d7      	b.n	800d040 <arm_rfft_fast_init_f32+0x2c>
 800d090:	2430      	movs	r4, #48	@ 0x30
 800d092:	4916      	ldr	r1, [pc, #88]	@ (800d0ec <arm_rfft_fast_init_f32+0xd8>)
 800d094:	4a16      	ldr	r2, [pc, #88]	@ (800d0f0 <arm_rfft_fast_init_f32+0xdc>)
 800d096:	4b17      	ldr	r3, [pc, #92]	@ (800d0f4 <arm_rfft_fast_init_f32+0xe0>)
 800d098:	e7d2      	b.n	800d040 <arm_rfft_fast_init_f32+0x2c>
 800d09a:	2414      	movs	r4, #20
 800d09c:	4916      	ldr	r1, [pc, #88]	@ (800d0f8 <arm_rfft_fast_init_f32+0xe4>)
 800d09e:	4a17      	ldr	r2, [pc, #92]	@ (800d0fc <arm_rfft_fast_init_f32+0xe8>)
 800d0a0:	4b17      	ldr	r3, [pc, #92]	@ (800d100 <arm_rfft_fast_init_f32+0xec>)
 800d0a2:	e7cd      	b.n	800d040 <arm_rfft_fast_init_f32+0x2c>
 800d0a4:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800d0a8:	4916      	ldr	r1, [pc, #88]	@ (800d104 <arm_rfft_fast_init_f32+0xf0>)
 800d0aa:	4a17      	ldr	r2, [pc, #92]	@ (800d108 <arm_rfft_fast_init_f32+0xf4>)
 800d0ac:	4b17      	ldr	r3, [pc, #92]	@ (800d10c <arm_rfft_fast_init_f32+0xf8>)
 800d0ae:	e7c7      	b.n	800d040 <arm_rfft_fast_init_f32+0x2c>
 800d0b0:	24d0      	movs	r4, #208	@ 0xd0
 800d0b2:	4917      	ldr	r1, [pc, #92]	@ (800d110 <arm_rfft_fast_init_f32+0xfc>)
 800d0b4:	4a17      	ldr	r2, [pc, #92]	@ (800d114 <arm_rfft_fast_init_f32+0x100>)
 800d0b6:	4b18      	ldr	r3, [pc, #96]	@ (800d118 <arm_rfft_fast_init_f32+0x104>)
 800d0b8:	e7c2      	b.n	800d040 <arm_rfft_fast_init_f32+0x2c>
 800d0ba:	bf00      	nop
 800d0bc:	08021d30 	.word	0x08021d30
 800d0c0:	08012f28 	.word	0x08012f28
 800d0c4:	08019098 	.word	0x08019098
 800d0c8:	08017028 	.word	0x08017028
 800d0cc:	08023af0 	.word	0x08023af0
 800d0d0:	08025fe0 	.word	0x08025fe0
 800d0d4:	0801fa18 	.word	0x0801fa18
 800d0d8:	0801d918 	.word	0x0801d918
 800d0dc:	08017098 	.word	0x08017098
 800d0e0:	08025c70 	.word	0x08025c70
 800d0e4:	0801d098 	.word	0x0801d098
 800d0e8:	08023cf0 	.word	0x08023cf0
 800d0ec:	080208d0 	.word	0x080208d0
 800d0f0:	0801f918 	.word	0x0801f918
 800d0f4:	08016f28 	.word	0x08016f28
 800d0f8:	08020828 	.word	0x08020828
 800d0fc:	0801d898 	.word	0x0801d898
 800d100:	08020850 	.word	0x08020850
 800d104:	080244f0 	.word	0x080244f0
 800d108:	08020d30 	.word	0x08020d30
 800d10c:	08024870 	.word	0x08024870
 800d110:	080261e0 	.word	0x080261e0
 800d114:	08020930 	.word	0x08020930
 800d118:	08025870 	.word	0x08025870

0800d11c <arm_rfft_fast_f32>:
 800d11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d120:	8a06      	ldrh	r6, [r0, #16]
 800d122:	0876      	lsrs	r6, r6, #1
 800d124:	4607      	mov	r7, r0
 800d126:	4615      	mov	r5, r2
 800d128:	8006      	strh	r6, [r0, #0]
 800d12a:	460c      	mov	r4, r1
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d15c      	bne.n	800d1ea <arm_rfft_fast_f32+0xce>
 800d130:	461a      	mov	r2, r3
 800d132:	2301      	movs	r3, #1
 800d134:	f000 fbe6 	bl	800d904 <arm_cfft_f32>
 800d138:	edd4 7a00 	vldr	s15, [r4]
 800d13c:	ed94 7a01 	vldr	s14, [r4, #4]
 800d140:	883e      	ldrh	r6, [r7, #0]
 800d142:	6978      	ldr	r0, [r7, #20]
 800d144:	ee37 7a07 	vadd.f32	s14, s14, s14
 800d148:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d14c:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800d150:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d154:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d158:	3e01      	subs	r6, #1
 800d15a:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800d15e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800d162:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800d166:	ed85 7a00 	vstr	s14, [r5]
 800d16a:	edc5 7a01 	vstr	s15, [r5, #4]
 800d16e:	3010      	adds	r0, #16
 800d170:	f105 0210 	add.w	r2, r5, #16
 800d174:	3b08      	subs	r3, #8
 800d176:	f104 0110 	add.w	r1, r4, #16
 800d17a:	ed51 4a02 	vldr	s9, [r1, #-8]
 800d17e:	ed93 5a02 	vldr	s10, [r3, #8]
 800d182:	ed11 7a01 	vldr	s14, [r1, #-4]
 800d186:	ed10 6a02 	vldr	s12, [r0, #-8]
 800d18a:	edd3 5a03 	vldr	s11, [r3, #12]
 800d18e:	ed50 6a01 	vldr	s13, [r0, #-4]
 800d192:	ee75 7a64 	vsub.f32	s15, s10, s9
 800d196:	ee35 4a87 	vadd.f32	s8, s11, s14
 800d19a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800d19e:	ee77 5a65 	vsub.f32	s11, s14, s11
 800d1a2:	ee66 4a27 	vmul.f32	s9, s12, s15
 800d1a6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800d1aa:	ee34 5a85 	vadd.f32	s10, s9, s10
 800d1ae:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d1b2:	ee66 6a84 	vmul.f32	s13, s13, s8
 800d1b6:	ee77 7a25 	vadd.f32	s15, s14, s11
 800d1ba:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d1be:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d1c2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800d1c6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800d1ca:	3e01      	subs	r6, #1
 800d1cc:	ed42 6a02 	vstr	s13, [r2, #-8]
 800d1d0:	ed42 7a01 	vstr	s15, [r2, #-4]
 800d1d4:	f1a3 0308 	sub.w	r3, r3, #8
 800d1d8:	f101 0108 	add.w	r1, r1, #8
 800d1dc:	f100 0008 	add.w	r0, r0, #8
 800d1e0:	f102 0208 	add.w	r2, r2, #8
 800d1e4:	d1c9      	bne.n	800d17a <arm_rfft_fast_f32+0x5e>
 800d1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ea:	edd1 7a00 	vldr	s15, [r1]
 800d1ee:	edd1 6a01 	vldr	s13, [r1, #4]
 800d1f2:	6941      	ldr	r1, [r0, #20]
 800d1f4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d1f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d1fc:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800d200:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d204:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800d208:	3e01      	subs	r6, #1
 800d20a:	ed82 7a00 	vstr	s14, [r2]
 800d20e:	edc2 7a01 	vstr	s15, [r2, #4]
 800d212:	00f0      	lsls	r0, r6, #3
 800d214:	b3ee      	cbz	r6, 800d292 <arm_rfft_fast_f32+0x176>
 800d216:	3808      	subs	r0, #8
 800d218:	f101 0e10 	add.w	lr, r1, #16
 800d21c:	4420      	add	r0, r4
 800d21e:	f104 0110 	add.w	r1, r4, #16
 800d222:	f102 0c10 	add.w	ip, r2, #16
 800d226:	ed90 7a02 	vldr	s14, [r0, #8]
 800d22a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800d22e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800d232:	ed90 4a03 	vldr	s8, [r0, #12]
 800d236:	ed11 5a01 	vldr	s10, [r1, #-4]
 800d23a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800d23e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800d242:	ee74 4a05 	vadd.f32	s9, s8, s10
 800d246:	ee26 3a27 	vmul.f32	s6, s12, s15
 800d24a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800d24e:	ee35 5a44 	vsub.f32	s10, s10, s8
 800d252:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800d256:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800d25a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800d25e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800d262:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800d266:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d26a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800d26e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800d272:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d276:	3e01      	subs	r6, #1
 800d278:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800d27c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800d280:	f1a0 0008 	sub.w	r0, r0, #8
 800d284:	f101 0108 	add.w	r1, r1, #8
 800d288:	f10e 0e08 	add.w	lr, lr, #8
 800d28c:	f10c 0c08 	add.w	ip, ip, #8
 800d290:	d1c9      	bne.n	800d226 <arm_rfft_fast_f32+0x10a>
 800d292:	4638      	mov	r0, r7
 800d294:	4629      	mov	r1, r5
 800d296:	461a      	mov	r2, r3
 800d298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d29c:	2301      	movs	r3, #1
 800d29e:	f000 bb31 	b.w	800d904 <arm_cfft_f32>
 800d2a2:	bf00      	nop

0800d2a4 <arm_cfft_radix8by2_f32>:
 800d2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a8:	ed2d 8b08 	vpush	{d8-d11}
 800d2ac:	f8b0 e000 	ldrh.w	lr, [r0]
 800d2b0:	6842      	ldr	r2, [r0, #4]
 800d2b2:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800d2b6:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800d2ba:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800d2be:	4607      	mov	r7, r0
 800d2c0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800d2c4:	f000 80af 	beq.w	800d426 <arm_cfft_radix8by2_f32+0x182>
 800d2c8:	3310      	adds	r3, #16
 800d2ca:	18ce      	adds	r6, r1, r3
 800d2cc:	3210      	adds	r2, #16
 800d2ce:	4443      	add	r3, r8
 800d2d0:	f101 0510 	add.w	r5, r1, #16
 800d2d4:	f108 0410 	add.w	r4, r8, #16
 800d2d8:	ed54 1a04 	vldr	s3, [r4, #-16]
 800d2dc:	ed13 4a04 	vldr	s8, [r3, #-16]
 800d2e0:	ed53 3a03 	vldr	s7, [r3, #-12]
 800d2e4:	ed53 5a02 	vldr	s11, [r3, #-8]
 800d2e8:	ed13 5a01 	vldr	s10, [r3, #-4]
 800d2ec:	ed54 6a03 	vldr	s13, [r4, #-12]
 800d2f0:	ed14 0a02 	vldr	s0, [r4, #-8]
 800d2f4:	ed16 2a04 	vldr	s4, [r6, #-16]
 800d2f8:	ed56 2a03 	vldr	s5, [r6, #-12]
 800d2fc:	ed15 6a03 	vldr	s12, [r5, #-12]
 800d300:	ed15 7a01 	vldr	s14, [r5, #-4]
 800d304:	ed15 3a04 	vldr	s6, [r5, #-16]
 800d308:	ed54 7a01 	vldr	s15, [r4, #-4]
 800d30c:	ed56 0a02 	vldr	s1, [r6, #-8]
 800d310:	ed16 1a01 	vldr	s2, [r6, #-4]
 800d314:	ed55 4a02 	vldr	s9, [r5, #-8]
 800d318:	ee73 ba21 	vadd.f32	s23, s6, s3
 800d31c:	ee36 ba26 	vadd.f32	s22, s12, s13
 800d320:	ee37 aa27 	vadd.f32	s20, s14, s15
 800d324:	ee72 9a04 	vadd.f32	s19, s4, s8
 800d328:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800d32c:	ee31 8a05 	vadd.f32	s16, s2, s10
 800d330:	ee74 aa80 	vadd.f32	s21, s9, s0
 800d334:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800d338:	ed45 ba04 	vstr	s23, [r5, #-16]
 800d33c:	ed05 ba03 	vstr	s22, [r5, #-12]
 800d340:	ed45 aa02 	vstr	s21, [r5, #-8]
 800d344:	ed05 aa01 	vstr	s20, [r5, #-4]
 800d348:	ed06 8a01 	vstr	s16, [r6, #-4]
 800d34c:	ed46 9a04 	vstr	s19, [r6, #-16]
 800d350:	ed06 9a03 	vstr	s18, [r6, #-12]
 800d354:	ed46 8a02 	vstr	s17, [r6, #-8]
 800d358:	ee76 6a66 	vsub.f32	s13, s12, s13
 800d35c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800d360:	ed12 6a03 	vldr	s12, [r2, #-12]
 800d364:	ed52 2a04 	vldr	s5, [r2, #-16]
 800d368:	ee33 3a61 	vsub.f32	s6, s6, s3
 800d36c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800d370:	ee26 8a86 	vmul.f32	s16, s13, s12
 800d374:	ee24 2a06 	vmul.f32	s4, s8, s12
 800d378:	ee63 1a22 	vmul.f32	s3, s6, s5
 800d37c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800d380:	ee23 3a06 	vmul.f32	s6, s6, s12
 800d384:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800d388:	ee23 6a86 	vmul.f32	s12, s7, s12
 800d38c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800d390:	ee36 6a04 	vadd.f32	s12, s12, s8
 800d394:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800d398:	ee72 3a63 	vsub.f32	s7, s4, s7
 800d39c:	ee71 2a88 	vadd.f32	s5, s3, s16
 800d3a0:	ed44 6a03 	vstr	s13, [r4, #-12]
 800d3a4:	ed44 2a04 	vstr	s5, [r4, #-16]
 800d3a8:	ed43 3a04 	vstr	s7, [r3, #-16]
 800d3ac:	ed03 6a03 	vstr	s12, [r3, #-12]
 800d3b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3b4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800d3b8:	ed12 7a01 	vldr	s14, [r2, #-4]
 800d3bc:	ed52 5a02 	vldr	s11, [r2, #-8]
 800d3c0:	ee35 6a41 	vsub.f32	s12, s10, s2
 800d3c4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800d3c8:	ee67 3a87 	vmul.f32	s7, s15, s14
 800d3cc:	ee26 5a87 	vmul.f32	s10, s13, s14
 800d3d0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800d3d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d3d8:	ee64 4a87 	vmul.f32	s9, s9, s14
 800d3dc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800d3e0:	ee26 7a07 	vmul.f32	s14, s12, s14
 800d3e4:	ee26 6a25 	vmul.f32	s12, s12, s11
 800d3e8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800d3ec:	ee74 5a23 	vadd.f32	s11, s8, s7
 800d3f0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d3f4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d3f8:	f1be 0e01 	subs.w	lr, lr, #1
 800d3fc:	ed44 5a02 	vstr	s11, [r4, #-8]
 800d400:	f105 0510 	add.w	r5, r5, #16
 800d404:	ed44 7a01 	vstr	s15, [r4, #-4]
 800d408:	f106 0610 	add.w	r6, r6, #16
 800d40c:	ed03 6a02 	vstr	s12, [r3, #-8]
 800d410:	ed03 7a01 	vstr	s14, [r3, #-4]
 800d414:	f102 0210 	add.w	r2, r2, #16
 800d418:	f104 0410 	add.w	r4, r4, #16
 800d41c:	f103 0310 	add.w	r3, r3, #16
 800d420:	f47f af5a 	bne.w	800d2d8 <arm_cfft_radix8by2_f32+0x34>
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	fa1f f48c 	uxth.w	r4, ip
 800d42a:	4608      	mov	r0, r1
 800d42c:	2302      	movs	r3, #2
 800d42e:	4621      	mov	r1, r4
 800d430:	f000 fae2 	bl	800d9f8 <arm_radix8_butterfly_f32>
 800d434:	ecbd 8b08 	vpop	{d8-d11}
 800d438:	4640      	mov	r0, r8
 800d43a:	4621      	mov	r1, r4
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	2302      	movs	r3, #2
 800d440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d444:	f000 bad8 	b.w	800d9f8 <arm_radix8_butterfly_f32>

0800d448 <arm_cfft_radix8by4_f32>:
 800d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	ed2d 8b0a 	vpush	{d8-d12}
 800d450:	8802      	ldrh	r2, [r0, #0]
 800d452:	ed91 6a00 	vldr	s12, [r1]
 800d456:	b08f      	sub	sp, #60	@ 0x3c
 800d458:	460f      	mov	r7, r1
 800d45a:	0852      	lsrs	r2, r2, #1
 800d45c:	0093      	lsls	r3, r2, #2
 800d45e:	900c      	str	r0, [sp, #48]	@ 0x30
 800d460:	9103      	str	r1, [sp, #12]
 800d462:	6841      	ldr	r1, [r0, #4]
 800d464:	ed97 7a01 	vldr	s14, [r7, #4]
 800d468:	4638      	mov	r0, r7
 800d46a:	4418      	add	r0, r3
 800d46c:	4606      	mov	r6, r0
 800d46e:	9009      	str	r0, [sp, #36]	@ 0x24
 800d470:	4418      	add	r0, r3
 800d472:	edd0 6a00 	vldr	s13, [r0]
 800d476:	edd6 3a00 	vldr	s7, [r6]
 800d47a:	edd6 2a01 	vldr	s5, [r6, #4]
 800d47e:	edd0 7a01 	vldr	s15, [r0, #4]
 800d482:	900a      	str	r0, [sp, #40]	@ 0x28
 800d484:	ee76 5a26 	vadd.f32	s11, s12, s13
 800d488:	4604      	mov	r4, r0
 800d48a:	4625      	mov	r5, r4
 800d48c:	441c      	add	r4, r3
 800d48e:	ed94 4a00 	vldr	s8, [r4]
 800d492:	ed94 5a01 	vldr	s10, [r4, #4]
 800d496:	9401      	str	r4, [sp, #4]
 800d498:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800d49c:	4630      	mov	r0, r6
 800d49e:	ee74 4a24 	vadd.f32	s9, s8, s9
 800d4a2:	463e      	mov	r6, r7
 800d4a4:	ee14 ea90 	vmov	lr, s9
 800d4a8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800d4ac:	f846 eb08 	str.w	lr, [r6], #8
 800d4b0:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d4b4:	edd0 4a01 	vldr	s9, [r0, #4]
 800d4b8:	9604      	str	r6, [sp, #16]
 800d4ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4be:	9e01      	ldr	r6, [sp, #4]
 800d4c0:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800d4c4:	ed96 2a01 	vldr	s4, [r6, #4]
 800d4c8:	ee36 7a24 	vadd.f32	s14, s12, s9
 800d4cc:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800d4d0:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800d4d4:	ee36 6a62 	vsub.f32	s12, s12, s5
 800d4d8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800d4dc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800d4e0:	ee73 3a45 	vsub.f32	s7, s6, s10
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	ee36 6a45 	vsub.f32	s12, s12, s10
 800d4ea:	ee75 6a26 	vadd.f32	s13, s10, s13
 800d4ee:	46a3      	mov	fp, r4
 800d4f0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800d4f4:	ee34 5a84 	vadd.f32	s10, s9, s8
 800d4f8:	ee13 8a90 	vmov	r8, s7
 800d4fc:	46a4      	mov	ip, r4
 800d4fe:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800d502:	ed87 7a01 	vstr	s14, [r7, #4]
 800d506:	f84b 8b08 	str.w	r8, [fp], #8
 800d50a:	f1ac 0704 	sub.w	r7, ip, #4
 800d50e:	ed8c 5a01 	vstr	s10, [ip, #4]
 800d512:	f101 0c08 	add.w	ip, r1, #8
 800d516:	462c      	mov	r4, r5
 800d518:	f8cd c014 	str.w	ip, [sp, #20]
 800d51c:	ee15 ca90 	vmov	ip, s11
 800d520:	f844 cb08 	str.w	ip, [r4], #8
 800d524:	9407      	str	r4, [sp, #28]
 800d526:	f101 0410 	add.w	r4, r1, #16
 800d52a:	ed85 6a01 	vstr	s12, [r5, #4]
 800d52e:	0852      	lsrs	r2, r2, #1
 800d530:	9402      	str	r4, [sp, #8]
 800d532:	462c      	mov	r4, r5
 800d534:	f101 0518 	add.w	r5, r1, #24
 800d538:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d53a:	46b2      	mov	sl, r6
 800d53c:	9506      	str	r5, [sp, #24]
 800d53e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800d542:	3a02      	subs	r2, #2
 800d544:	ee16 5a90 	vmov	r5, s13
 800d548:	46b6      	mov	lr, r6
 800d54a:	4630      	mov	r0, r6
 800d54c:	0852      	lsrs	r2, r2, #1
 800d54e:	f84a 5b08 	str.w	r5, [sl], #8
 800d552:	f1a0 0604 	sub.w	r6, r0, #4
 800d556:	edce 7a01 	vstr	s15, [lr, #4]
 800d55a:	9208      	str	r2, [sp, #32]
 800d55c:	f000 8130 	beq.w	800d7c0 <arm_cfft_radix8by4_f32+0x378>
 800d560:	4691      	mov	r9, r2
 800d562:	9a03      	ldr	r2, [sp, #12]
 800d564:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d568:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800d56c:	3b08      	subs	r3, #8
 800d56e:	f102 0510 	add.w	r5, r2, #16
 800d572:	f101 0c20 	add.w	ip, r1, #32
 800d576:	f1a4 020c 	sub.w	r2, r4, #12
 800d57a:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800d57e:	4433      	add	r3, r6
 800d580:	3410      	adds	r4, #16
 800d582:	4650      	mov	r0, sl
 800d584:	4659      	mov	r1, fp
 800d586:	ed55 3a02 	vldr	s7, [r5, #-8]
 800d58a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800d58e:	ed91 7a00 	vldr	s14, [r1]
 800d592:	edd0 7a00 	vldr	s15, [r0]
 800d596:	ed15 4a01 	vldr	s8, [r5, #-4]
 800d59a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800d59e:	edd0 6a01 	vldr	s13, [r0, #4]
 800d5a2:	ed91 6a01 	vldr	s12, [r1, #4]
 800d5a6:	ee33 8a85 	vadd.f32	s16, s7, s10
 800d5aa:	ee34 0a25 	vadd.f32	s0, s8, s11
 800d5ae:	ee78 4a07 	vadd.f32	s9, s16, s14
 800d5b2:	ee74 5a65 	vsub.f32	s11, s8, s11
 800d5b6:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800d5ba:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800d5be:	ed45 4a02 	vstr	s9, [r5, #-8]
 800d5c2:	edd1 4a01 	vldr	s9, [r1, #4]
 800d5c6:	ed90 4a01 	vldr	s8, [r0, #4]
 800d5ca:	ee70 4a24 	vadd.f32	s9, s0, s9
 800d5ce:	ee76 aa05 	vadd.f32	s21, s12, s10
 800d5d2:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d5d6:	ee35 aac7 	vsub.f32	s20, s11, s14
 800d5da:	ed45 4a01 	vstr	s9, [r5, #-4]
 800d5de:	edd6 1a00 	vldr	s3, [r6]
 800d5e2:	edd7 0a00 	vldr	s1, [r7]
 800d5e6:	ed92 4a02 	vldr	s8, [r2, #8]
 800d5ea:	edd3 3a02 	vldr	s7, [r3, #8]
 800d5ee:	ed93 2a01 	vldr	s4, [r3, #4]
 800d5f2:	ed16 1a01 	vldr	s2, [r6, #-4]
 800d5f6:	edd2 2a01 	vldr	s5, [r2, #4]
 800d5fa:	ed57 9a01 	vldr	s19, [r7, #-4]
 800d5fe:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800d602:	ee39 3a81 	vadd.f32	s6, s19, s2
 800d606:	ee74 8a84 	vadd.f32	s17, s9, s8
 800d60a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800d60e:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800d612:	ee7a aae6 	vsub.f32	s21, s21, s13
 800d616:	ee18 aa90 	vmov	sl, s17
 800d61a:	f847 a908 	str.w	sl, [r7], #-8
 800d61e:	edd2 8a01 	vldr	s17, [r2, #4]
 800d622:	ed93 9a01 	vldr	s18, [r3, #4]
 800d626:	ee73 8a28 	vadd.f32	s17, s6, s17
 800d62a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800d62e:	ee78 8a89 	vadd.f32	s17, s17, s18
 800d632:	ee74 0a63 	vsub.f32	s1, s8, s7
 800d636:	edc7 8a01 	vstr	s17, [r7, #4]
 800d63a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800d63e:	ed58 8a01 	vldr	s17, [r8, #-4]
 800d642:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800d646:	ee6a ba28 	vmul.f32	s23, s20, s17
 800d64a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800d64e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800d652:	ee30 9a81 	vadd.f32	s18, s1, s2
 800d656:	ee79 9a82 	vadd.f32	s19, s19, s4
 800d65a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800d65e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800d662:	ee69 baa8 	vmul.f32	s23, s19, s17
 800d666:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800d66a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800d66e:	ee69 8a28 	vmul.f32	s17, s18, s17
 800d672:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800d676:	ee1c aa10 	vmov	sl, s24
 800d67a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800d67e:	f841 ab08 	str.w	sl, [r1], #8
 800d682:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800d686:	ee3b bacb 	vsub.f32	s22, s23, s22
 800d68a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800d68e:	ee33 3a62 	vsub.f32	s6, s6, s5
 800d692:	ed01 aa01 	vstr	s20, [r1, #-4]
 800d696:	edc2 8a01 	vstr	s17, [r2, #4]
 800d69a:	ed82 ba02 	vstr	s22, [r2, #8]
 800d69e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800d6a2:	ee74 3a63 	vsub.f32	s7, s8, s7
 800d6a6:	ee38 8a47 	vsub.f32	s16, s16, s14
 800d6aa:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800d6ae:	ee30 0a46 	vsub.f32	s0, s0, s12
 800d6b2:	ee33 3a42 	vsub.f32	s6, s6, s4
 800d6b6:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d6ba:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d6be:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800d6c2:	ee63 8a04 	vmul.f32	s17, s6, s8
 800d6c6:	ee28 aa24 	vmul.f32	s20, s16, s9
 800d6ca:	ee60 9a04 	vmul.f32	s19, s0, s8
 800d6ce:	ee28 8a04 	vmul.f32	s16, s16, s8
 800d6d2:	ee20 0a24 	vmul.f32	s0, s0, s9
 800d6d6:	ee63 3a84 	vmul.f32	s7, s7, s8
 800d6da:	ee39 4a68 	vsub.f32	s8, s18, s17
 800d6de:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800d6e2:	ee14 aa10 	vmov	sl, s8
 800d6e6:	ee30 0a48 	vsub.f32	s0, s0, s16
 800d6ea:	ee63 4a24 	vmul.f32	s9, s6, s9
 800d6ee:	ed44 9a02 	vstr	s19, [r4, #-8]
 800d6f2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800d6f6:	ed04 0a01 	vstr	s0, [r4, #-4]
 800d6fa:	f846 a908 	str.w	sl, [r6], #-8
 800d6fe:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d702:	ee35 7a87 	vadd.f32	s14, s11, s14
 800d706:	edc6 3a01 	vstr	s7, [r6, #4]
 800d70a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d70e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d712:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 800d716:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 800d71a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800d71e:	ee26 5a87 	vmul.f32	s10, s13, s14
 800d722:	ee72 2a62 	vsub.f32	s5, s4, s5
 800d726:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800d72a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800d72e:	ee75 5a25 	vadd.f32	s11, s10, s11
 800d732:	ee62 0a86 	vmul.f32	s1, s5, s12
 800d736:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d73a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d73e:	ee21 6a06 	vmul.f32	s12, s2, s12
 800d742:	ee62 2a87 	vmul.f32	s5, s5, s14
 800d746:	ee21 1a07 	vmul.f32	s2, s2, s14
 800d74a:	ee15 aa90 	vmov	sl, s11
 800d74e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d752:	f840 ab08 	str.w	sl, [r0], #8
 800d756:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800d75a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800d75e:	f1b9 0901 	subs.w	r9, r9, #1
 800d762:	ed40 7a01 	vstr	s15, [r0, #-4]
 800d766:	f105 0508 	add.w	r5, r5, #8
 800d76a:	ed83 1a02 	vstr	s2, [r3, #8]
 800d76e:	edc3 2a01 	vstr	s5, [r3, #4]
 800d772:	f108 0808 	add.w	r8, r8, #8
 800d776:	f1a2 0208 	sub.w	r2, r2, #8
 800d77a:	f10c 0c10 	add.w	ip, ip, #16
 800d77e:	f104 0408 	add.w	r4, r4, #8
 800d782:	f10e 0e18 	add.w	lr, lr, #24
 800d786:	f1a3 0308 	sub.w	r3, r3, #8
 800d78a:	f47f aefc 	bne.w	800d586 <arm_cfft_radix8by4_f32+0x13e>
 800d78e:	9908      	ldr	r1, [sp, #32]
 800d790:	9802      	ldr	r0, [sp, #8]
 800d792:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800d796:	00cb      	lsls	r3, r1, #3
 800d798:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800d79c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800d7a0:	9102      	str	r1, [sp, #8]
 800d7a2:	9904      	ldr	r1, [sp, #16]
 800d7a4:	4419      	add	r1, r3
 800d7a6:	9104      	str	r1, [sp, #16]
 800d7a8:	9905      	ldr	r1, [sp, #20]
 800d7aa:	4419      	add	r1, r3
 800d7ac:	9105      	str	r1, [sp, #20]
 800d7ae:	9907      	ldr	r1, [sp, #28]
 800d7b0:	449b      	add	fp, r3
 800d7b2:	4419      	add	r1, r3
 800d7b4:	449a      	add	sl, r3
 800d7b6:	9b06      	ldr	r3, [sp, #24]
 800d7b8:	9107      	str	r1, [sp, #28]
 800d7ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7be:	9306      	str	r3, [sp, #24]
 800d7c0:	9a04      	ldr	r2, [sp, #16]
 800d7c2:	9807      	ldr	r0, [sp, #28]
 800d7c4:	edd2 3a00 	vldr	s7, [r2]
 800d7c8:	ed90 4a00 	vldr	s8, [r0]
 800d7cc:	eddb 7a00 	vldr	s15, [fp]
 800d7d0:	ed9a 3a00 	vldr	s6, [sl]
 800d7d4:	edd2 4a01 	vldr	s9, [r2, #4]
 800d7d8:	ed90 7a01 	vldr	s14, [r0, #4]
 800d7dc:	ed9b 2a01 	vldr	s4, [fp, #4]
 800d7e0:	edda 5a01 	vldr	s11, [sl, #4]
 800d7e4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800d7e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d7ea:	ee73 6a84 	vadd.f32	s13, s7, s8
 800d7ee:	ee34 6a87 	vadd.f32	s12, s9, s14
 800d7f2:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800d7f6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800d7fa:	ee33 5a05 	vadd.f32	s10, s6, s10
 800d7fe:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800d802:	ed82 5a00 	vstr	s10, [r2]
 800d806:	ed9b 5a01 	vldr	s10, [fp, #4]
 800d80a:	edda 4a01 	vldr	s9, [sl, #4]
 800d80e:	ee36 5a05 	vadd.f32	s10, s12, s10
 800d812:	ee72 3a04 	vadd.f32	s7, s4, s8
 800d816:	ee35 5a24 	vadd.f32	s10, s10, s9
 800d81a:	ee77 4a67 	vsub.f32	s9, s14, s15
 800d81e:	ed82 5a01 	vstr	s10, [r2, #4]
 800d822:	9a05      	ldr	r2, [sp, #20]
 800d824:	ee34 5a83 	vadd.f32	s10, s9, s6
 800d828:	edd2 1a00 	vldr	s3, [r2]
 800d82c:	edd2 2a01 	vldr	s5, [r2, #4]
 800d830:	9a02      	ldr	r2, [sp, #8]
 800d832:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800d836:	ee36 6a42 	vsub.f32	s12, s12, s4
 800d83a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800d83e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800d842:	ee65 2a22 	vmul.f32	s5, s10, s5
 800d846:	ee25 5a21 	vmul.f32	s10, s10, s3
 800d84a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800d84e:	ee35 5a63 	vsub.f32	s10, s10, s7
 800d852:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d856:	edcb 2a00 	vstr	s5, [fp]
 800d85a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800d85e:	edd2 3a01 	vldr	s7, [r2, #4]
 800d862:	ed92 5a00 	vldr	s10, [r2]
 800d866:	9a06      	ldr	r2, [sp, #24]
 800d868:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800d86c:	ee36 6a65 	vsub.f32	s12, s12, s11
 800d870:	ee66 4a85 	vmul.f32	s9, s13, s10
 800d874:	ee26 5a05 	vmul.f32	s10, s12, s10
 800d878:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800d87c:	ee26 6a23 	vmul.f32	s12, s12, s7
 800d880:	ee75 6a66 	vsub.f32	s13, s10, s13
 800d884:	ee34 6a86 	vadd.f32	s12, s9, s12
 800d888:	ee34 4a42 	vsub.f32	s8, s8, s4
 800d88c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d890:	edc0 6a01 	vstr	s13, [r0, #4]
 800d894:	ed80 6a00 	vstr	s12, [r0]
 800d898:	ed92 6a01 	vldr	s12, [r2, #4]
 800d89c:	9803      	ldr	r0, [sp, #12]
 800d89e:	ee77 7a43 	vsub.f32	s15, s14, s6
 800d8a2:	ee75 5a84 	vadd.f32	s11, s11, s8
 800d8a6:	ed92 7a00 	vldr	s14, [r2]
 800d8aa:	ee65 6a87 	vmul.f32	s13, s11, s14
 800d8ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d8b2:	ee65 5a86 	vmul.f32	s11, s11, s12
 800d8b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d8ba:	ee77 5a65 	vsub.f32	s11, s14, s11
 800d8be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8c2:	edca 5a01 	vstr	s11, [sl, #4]
 800d8c6:	edca 7a00 	vstr	s15, [sl]
 800d8ca:	6872      	ldr	r2, [r6, #4]
 800d8cc:	4621      	mov	r1, r4
 800d8ce:	2304      	movs	r3, #4
 800d8d0:	f000 f892 	bl	800d9f8 <arm_radix8_butterfly_f32>
 800d8d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8d6:	6872      	ldr	r2, [r6, #4]
 800d8d8:	4621      	mov	r1, r4
 800d8da:	2304      	movs	r3, #4
 800d8dc:	f000 f88c 	bl	800d9f8 <arm_radix8_butterfly_f32>
 800d8e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d8e2:	6872      	ldr	r2, [r6, #4]
 800d8e4:	4621      	mov	r1, r4
 800d8e6:	2304      	movs	r3, #4
 800d8e8:	f000 f886 	bl	800d9f8 <arm_radix8_butterfly_f32>
 800d8ec:	9801      	ldr	r0, [sp, #4]
 800d8ee:	6872      	ldr	r2, [r6, #4]
 800d8f0:	4621      	mov	r1, r4
 800d8f2:	2304      	movs	r3, #4
 800d8f4:	b00f      	add	sp, #60	@ 0x3c
 800d8f6:	ecbd 8b0a 	vpop	{d8-d12}
 800d8fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fe:	f000 b87b 	b.w	800d9f8 <arm_radix8_butterfly_f32>
 800d902:	bf00      	nop

0800d904 <arm_cfft_f32>:
 800d904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d908:	2a01      	cmp	r2, #1
 800d90a:	4606      	mov	r6, r0
 800d90c:	4617      	mov	r7, r2
 800d90e:	460c      	mov	r4, r1
 800d910:	4698      	mov	r8, r3
 800d912:	8805      	ldrh	r5, [r0, #0]
 800d914:	d054      	beq.n	800d9c0 <arm_cfft_f32+0xbc>
 800d916:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800d91a:	d04c      	beq.n	800d9b6 <arm_cfft_f32+0xb2>
 800d91c:	d916      	bls.n	800d94c <arm_cfft_f32+0x48>
 800d91e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800d922:	d01a      	beq.n	800d95a <arm_cfft_f32+0x56>
 800d924:	d95c      	bls.n	800d9e0 <arm_cfft_f32+0xdc>
 800d926:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800d92a:	d044      	beq.n	800d9b6 <arm_cfft_f32+0xb2>
 800d92c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800d930:	d105      	bne.n	800d93e <arm_cfft_f32+0x3a>
 800d932:	4620      	mov	r0, r4
 800d934:	4629      	mov	r1, r5
 800d936:	6872      	ldr	r2, [r6, #4]
 800d938:	2301      	movs	r3, #1
 800d93a:	f000 f85d 	bl	800d9f8 <arm_radix8_butterfly_f32>
 800d93e:	f1b8 0f00 	cmp.w	r8, #0
 800d942:	d111      	bne.n	800d968 <arm_cfft_f32+0x64>
 800d944:	2f01      	cmp	r7, #1
 800d946:	d016      	beq.n	800d976 <arm_cfft_f32+0x72>
 800d948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d94c:	2d20      	cmp	r5, #32
 800d94e:	d032      	beq.n	800d9b6 <arm_cfft_f32+0xb2>
 800d950:	d94a      	bls.n	800d9e8 <arm_cfft_f32+0xe4>
 800d952:	2d40      	cmp	r5, #64	@ 0x40
 800d954:	d0ed      	beq.n	800d932 <arm_cfft_f32+0x2e>
 800d956:	2d80      	cmp	r5, #128	@ 0x80
 800d958:	d1f1      	bne.n	800d93e <arm_cfft_f32+0x3a>
 800d95a:	4630      	mov	r0, r6
 800d95c:	4621      	mov	r1, r4
 800d95e:	f7ff fca1 	bl	800d2a4 <arm_cfft_radix8by2_f32>
 800d962:	f1b8 0f00 	cmp.w	r8, #0
 800d966:	d0ed      	beq.n	800d944 <arm_cfft_f32+0x40>
 800d968:	4620      	mov	r0, r4
 800d96a:	89b1      	ldrh	r1, [r6, #12]
 800d96c:	68b2      	ldr	r2, [r6, #8]
 800d96e:	f7f2 fc37 	bl	80001e0 <arm_bitreversal_32>
 800d972:	2f01      	cmp	r7, #1
 800d974:	d1e8      	bne.n	800d948 <arm_cfft_f32+0x44>
 800d976:	ee07 5a90 	vmov	s15, r5
 800d97a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d97e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d982:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800d986:	2d00      	cmp	r5, #0
 800d988:	d0de      	beq.n	800d948 <arm_cfft_f32+0x44>
 800d98a:	f104 0108 	add.w	r1, r4, #8
 800d98e:	2300      	movs	r3, #0
 800d990:	3301      	adds	r3, #1
 800d992:	429d      	cmp	r5, r3
 800d994:	f101 0108 	add.w	r1, r1, #8
 800d998:	ed11 7a04 	vldr	s14, [r1, #-16]
 800d99c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800d9a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d9a4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d9a8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800d9ac:	ed41 7a03 	vstr	s15, [r1, #-12]
 800d9b0:	d1ee      	bne.n	800d990 <arm_cfft_f32+0x8c>
 800d9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b6:	4630      	mov	r0, r6
 800d9b8:	4621      	mov	r1, r4
 800d9ba:	f7ff fd45 	bl	800d448 <arm_cfft_radix8by4_f32>
 800d9be:	e7be      	b.n	800d93e <arm_cfft_f32+0x3a>
 800d9c0:	b1ad      	cbz	r5, 800d9ee <arm_cfft_f32+0xea>
 800d9c2:	f101 030c 	add.w	r3, r1, #12
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	ed53 7a02 	vldr	s15, [r3, #-8]
 800d9cc:	3201      	adds	r2, #1
 800d9ce:	eef1 7a67 	vneg.f32	s15, s15
 800d9d2:	4295      	cmp	r5, r2
 800d9d4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800d9d8:	f103 0308 	add.w	r3, r3, #8
 800d9dc:	d1f4      	bne.n	800d9c8 <arm_cfft_f32+0xc4>
 800d9de:	e79a      	b.n	800d916 <arm_cfft_f32+0x12>
 800d9e0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800d9e4:	d0a5      	beq.n	800d932 <arm_cfft_f32+0x2e>
 800d9e6:	e7aa      	b.n	800d93e <arm_cfft_f32+0x3a>
 800d9e8:	2d10      	cmp	r5, #16
 800d9ea:	d0b6      	beq.n	800d95a <arm_cfft_f32+0x56>
 800d9ec:	e7a7      	b.n	800d93e <arm_cfft_f32+0x3a>
 800d9ee:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800d9f2:	d894      	bhi.n	800d91e <arm_cfft_f32+0x1a>
 800d9f4:	e7aa      	b.n	800d94c <arm_cfft_f32+0x48>
 800d9f6:	bf00      	nop

0800d9f8 <arm_radix8_butterfly_f32>:
 800d9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fc:	ed2d 8b10 	vpush	{d8-d15}
 800da00:	b09d      	sub	sp, #116	@ 0x74
 800da02:	461c      	mov	r4, r3
 800da04:	ed9f bac8 	vldr	s22, [pc, #800]	@ 800dd28 <arm_radix8_butterfly_f32+0x330>
 800da08:	921a      	str	r2, [sp, #104]	@ 0x68
 800da0a:	1d03      	adds	r3, r0, #4
 800da0c:	4682      	mov	sl, r0
 800da0e:	4689      	mov	r9, r1
 800da10:	468b      	mov	fp, r1
 800da12:	931b      	str	r3, [sp, #108]	@ 0x6c
 800da14:	9400      	str	r4, [sp, #0]
 800da16:	469e      	mov	lr, r3
 800da18:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800da1c:	005a      	lsls	r2, r3, #1
 800da1e:	18d6      	adds	r6, r2, r3
 800da20:	18f5      	adds	r5, r6, r3
 800da22:	9203      	str	r2, [sp, #12]
 800da24:	195a      	adds	r2, r3, r5
 800da26:	18d0      	adds	r0, r2, r3
 800da28:	00df      	lsls	r7, r3, #3
 800da2a:	1819      	adds	r1, r3, r0
 800da2c:	463c      	mov	r4, r7
 800da2e:	9701      	str	r7, [sp, #4]
 800da30:	4457      	add	r7, sl
 800da32:	930c      	str	r3, [sp, #48]	@ 0x30
 800da34:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800da38:	011b      	lsls	r3, r3, #4
 800da3a:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800da3e:	eb07 0c04 	add.w	ip, r7, r4
 800da42:	9c00      	ldr	r4, [sp, #0]
 800da44:	9302      	str	r3, [sp, #8]
 800da46:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800da4a:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800da4e:	3204      	adds	r2, #4
 800da50:	3104      	adds	r1, #4
 800da52:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800da56:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800da5a:	f04f 0800 	mov.w	r8, #0
 800da5e:	eddc 7a00 	vldr	s15, [ip]
 800da62:	edd7 6a00 	vldr	s13, [r7]
 800da66:	edd6 3a00 	vldr	s7, [r6]
 800da6a:	ed5e aa01 	vldr	s21, [lr, #-4]
 800da6e:	edd5 4a00 	vldr	s9, [r5]
 800da72:	ed90 2a00 	vldr	s4, [r0]
 800da76:	ed12 7a01 	vldr	s14, [r2, #-4]
 800da7a:	ed51 0a01 	vldr	s1, [r1, #-4]
 800da7e:	ee77 8a82 	vadd.f32	s17, s15, s4
 800da82:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800da86:	ee76 1a87 	vadd.f32	s3, s13, s14
 800da8a:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800da8e:	ee31 6a84 	vadd.f32	s12, s3, s8
 800da92:	ee33 5a28 	vadd.f32	s10, s6, s17
 800da96:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800da9a:	ee75 6a06 	vadd.f32	s13, s10, s12
 800da9e:	ee35 5a46 	vsub.f32	s10, s10, s12
 800daa2:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800daa6:	ed85 5a00 	vstr	s10, [r5]
 800daaa:	ed96 1a01 	vldr	s2, [r6, #4]
 800daae:	edd7 5a01 	vldr	s11, [r7, #4]
 800dab2:	ed92 aa00 	vldr	s20, [r2]
 800dab6:	ed91 6a00 	vldr	s12, [r1]
 800daba:	ed9e 9a00 	vldr	s18, [lr]
 800dabe:	ed95 5a01 	vldr	s10, [r5, #4]
 800dac2:	eddc 6a01 	vldr	s13, [ip, #4]
 800dac6:	edd0 9a01 	vldr	s19, [r0, #4]
 800daca:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800dace:	ee71 2a46 	vsub.f32	s5, s2, s12
 800dad2:	ee75 3aca 	vsub.f32	s7, s11, s20
 800dad6:	ee37 0a60 	vsub.f32	s0, s14, s1
 800dada:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800dade:	ee37 7a20 	vadd.f32	s14, s14, s1
 800dae2:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800dae6:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800daea:	ee79 3a05 	vadd.f32	s7, s18, s10
 800daee:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800daf2:	ee39 5a45 	vsub.f32	s10, s18, s10
 800daf6:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800dafa:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800dafe:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800db02:	ee31 6a06 	vadd.f32	s12, s2, s12
 800db06:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800db0a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800db0e:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800db12:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800db16:	ee33 3a68 	vsub.f32	s6, s6, s17
 800db1a:	ee36 0a88 	vadd.f32	s0, s13, s16
 800db1e:	ee75 8a86 	vadd.f32	s17, s11, s12
 800db22:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800db26:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800db2a:	ee75 6a62 	vsub.f32	s13, s10, s5
 800db2e:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800db32:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800db36:	ee33 1a89 	vadd.f32	s2, s7, s18
 800db3a:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800db3e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800db42:	ee75 4a22 	vadd.f32	s9, s10, s5
 800db46:	ee32 5a27 	vadd.f32	s10, s4, s15
 800db4a:	ee72 7a67 	vsub.f32	s15, s4, s15
 800db4e:	ee33 8a06 	vadd.f32	s16, s6, s12
 800db52:	ee75 2a87 	vadd.f32	s5, s11, s14
 800db56:	ee31 9a28 	vadd.f32	s18, s2, s17
 800db5a:	ee33 6a46 	vsub.f32	s12, s6, s12
 800db5e:	ee74 0a61 	vsub.f32	s1, s8, s3
 800db62:	ee33 2a80 	vadd.f32	s4, s7, s0
 800db66:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800db6a:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800db6e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800db72:	ee31 1a68 	vsub.f32	s2, s2, s17
 800db76:	ee34 4a21 	vadd.f32	s8, s8, s3
 800db7a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800db7e:	ee74 4a85 	vadd.f32	s9, s9, s10
 800db82:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800db86:	44d8      	add	r8, fp
 800db88:	45c1      	cmp	r9, r8
 800db8a:	ed8e 9a00 	vstr	s18, [lr]
 800db8e:	ed85 1a01 	vstr	s2, [r5, #4]
 800db92:	449e      	add	lr, r3
 800db94:	ed8c 8a00 	vstr	s16, [ip]
 800db98:	441d      	add	r5, r3
 800db9a:	ed80 6a00 	vstr	s12, [r0]
 800db9e:	edcc 0a01 	vstr	s1, [ip, #4]
 800dba2:	ed80 4a01 	vstr	s8, [r0, #4]
 800dba6:	449c      	add	ip, r3
 800dba8:	ed87 2a00 	vstr	s4, [r7]
 800dbac:	4418      	add	r0, r3
 800dbae:	ed41 3a01 	vstr	s7, [r1, #-4]
 800dbb2:	ed42 2a01 	vstr	s5, [r2, #-4]
 800dbb6:	ed86 7a00 	vstr	s14, [r6]
 800dbba:	ed87 3a01 	vstr	s6, [r7, #4]
 800dbbe:	edc1 4a00 	vstr	s9, [r1]
 800dbc2:	441f      	add	r7, r3
 800dbc4:	edc2 5a00 	vstr	s11, [r2]
 800dbc8:	4419      	add	r1, r3
 800dbca:	edc6 6a01 	vstr	s13, [r6, #4]
 800dbce:	441a      	add	r2, r3
 800dbd0:	441e      	add	r6, r3
 800dbd2:	f63f af44 	bhi.w	800da5e <arm_radix8_butterfly_f32+0x66>
 800dbd6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dbd8:	2907      	cmp	r1, #7
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f240 81e9 	bls.w	800dfb2 <arm_radix8_butterfly_f32+0x5ba>
 800dbe0:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800dbe4:	193e      	adds	r6, r7, r4
 800dbe6:	1935      	adds	r5, r6, r4
 800dbe8:	9c03      	ldr	r4, [sp, #12]
 800dbea:	9000      	str	r0, [sp, #0]
 800dbec:	4622      	mov	r2, r4
 800dbee:	3201      	adds	r2, #1
 800dbf0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800dbf4:	9900      	ldr	r1, [sp, #0]
 800dbf6:	1828      	adds	r0, r5, r0
 800dbf8:	eb00 0e01 	add.w	lr, r0, r1
 800dbfc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dbfe:	440a      	add	r2, r1
 800dc00:	eb04 0c01 	add.w	ip, r4, r1
 800dc04:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800dc08:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800dc0c:	9a00      	ldr	r2, [sp, #0]
 800dc0e:	940f      	str	r4, [sp, #60]	@ 0x3c
 800dc10:	00ed      	lsls	r5, r5, #3
 800dc12:	9511      	str	r5, [sp, #68]	@ 0x44
 800dc14:	00d5      	lsls	r5, r2, #3
 800dc16:	950d      	str	r5, [sp, #52]	@ 0x34
 800dc18:	9d01      	ldr	r5, [sp, #4]
 800dc1a:	3508      	adds	r5, #8
 800dc1c:	9516      	str	r5, [sp, #88]	@ 0x58
 800dc1e:	9d02      	ldr	r5, [sp, #8]
 800dc20:	3508      	adds	r5, #8
 800dc22:	0114      	lsls	r4, r2, #4
 800dc24:	9517      	str	r5, [sp, #92]	@ 0x5c
 800dc26:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dc28:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800dc2a:	940e      	str	r4, [sp, #56]	@ 0x38
 800dc2c:	00c0      	lsls	r0, r0, #3
 800dc2e:	9010      	str	r0, [sp, #64]	@ 0x40
 800dc30:	18aa      	adds	r2, r5, r2
 800dc32:	9207      	str	r2, [sp, #28]
 800dc34:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800dc36:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800dc38:	18aa      	adds	r2, r5, r2
 800dc3a:	9208      	str	r2, [sp, #32]
 800dc3c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dc3e:	18aa      	adds	r2, r5, r2
 800dc40:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc42:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800dc46:	f10e 0204 	add.w	r2, lr, #4
 800dc4a:	920a      	str	r2, [sp, #40]	@ 0x28
 800dc4c:	00c9      	lsls	r1, r1, #3
 800dc4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dc50:	310c      	adds	r1, #12
 800dc52:	00f6      	lsls	r6, r6, #3
 800dc54:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800dc58:	9114      	str	r1, [sp, #80]	@ 0x50
 800dc5a:	18a9      	adds	r1, r5, r2
 800dc5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc5e:	9612      	str	r6, [sp, #72]	@ 0x48
 800dc60:	00ff      	lsls	r7, r7, #3
 800dc62:	19ae      	adds	r6, r5, r6
 800dc64:	3008      	adds	r0, #8
 800dc66:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800dc6a:	9606      	str	r6, [sp, #24]
 800dc6c:	9019      	str	r0, [sp, #100]	@ 0x64
 800dc6e:	18aa      	adds	r2, r5, r2
 800dc70:	0164      	lsls	r4, r4, #5
 800dc72:	19ee      	adds	r6, r5, r7
 800dc74:	f10c 000c 	add.w	r0, ip, #12
 800dc78:	9713      	str	r7, [sp, #76]	@ 0x4c
 800dc7a:	9604      	str	r6, [sp, #16]
 800dc7c:	9015      	str	r0, [sp, #84]	@ 0x54
 800dc7e:	9103      	str	r1, [sp, #12]
 800dc80:	9205      	str	r2, [sp, #20]
 800dc82:	f104 0208 	add.w	r2, r4, #8
 800dc86:	9218      	str	r2, [sp, #96]	@ 0x60
 800dc88:	f04f 0801 	mov.w	r8, #1
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f102 0108 	add.w	r1, r2, #8
 800dc92:	460f      	mov	r7, r1
 800dc94:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dc96:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800dc98:	188e      	adds	r6, r1, r2
 800dc9a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800dc9c:	188d      	adds	r5, r1, r2
 800dc9e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800dca0:	188c      	adds	r4, r1, r2
 800dca2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800dca4:	1888      	adds	r0, r1, r2
 800dca6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800dca8:	eb01 0c02 	add.w	ip, r1, r2
 800dcac:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800dcae:	440a      	add	r2, r1
 800dcb0:	9903      	ldr	r1, [sp, #12]
 800dcb2:	edd1 fa00 	vldr	s31, [r1]
 800dcb6:	9905      	ldr	r1, [sp, #20]
 800dcb8:	ed91 fa00 	vldr	s30, [r1]
 800dcbc:	9904      	ldr	r1, [sp, #16]
 800dcbe:	edd1 ea00 	vldr	s29, [r1]
 800dcc2:	9906      	ldr	r1, [sp, #24]
 800dcc4:	ed91 ea00 	vldr	s28, [r1]
 800dcc8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dcca:	edd1 da00 	vldr	s27, [r1]
 800dcce:	9908      	ldr	r1, [sp, #32]
 800dcd0:	ed91 da00 	vldr	s26, [r1]
 800dcd4:	9907      	ldr	r1, [sp, #28]
 800dcd6:	edd1 ca00 	vldr	s25, [r1]
 800dcda:	9903      	ldr	r1, [sp, #12]
 800dcdc:	ed91 ca01 	vldr	s24, [r1, #4]
 800dce0:	9905      	ldr	r1, [sp, #20]
 800dce2:	edd1 ba01 	vldr	s23, [r1, #4]
 800dce6:	9904      	ldr	r1, [sp, #16]
 800dce8:	edd1 aa01 	vldr	s21, [r1, #4]
 800dcec:	9906      	ldr	r1, [sp, #24]
 800dcee:	ed91 aa01 	vldr	s20, [r1, #4]
 800dcf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dcf4:	edd1 7a01 	vldr	s15, [r1, #4]
 800dcf8:	9908      	ldr	r1, [sp, #32]
 800dcfa:	edcd 7a00 	vstr	s15, [sp]
 800dcfe:	edd1 7a01 	vldr	s15, [r1, #4]
 800dd02:	9907      	ldr	r1, [sp, #28]
 800dd04:	edcd 7a01 	vstr	s15, [sp, #4]
 800dd08:	edd1 7a01 	vldr	s15, [r1, #4]
 800dd0c:	eb0a 0e07 	add.w	lr, sl, r7
 800dd10:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800dd12:	edcd 7a02 	vstr	s15, [sp, #8]
 800dd16:	eb0c 010a 	add.w	r1, ip, sl
 800dd1a:	4456      	add	r6, sl
 800dd1c:	4455      	add	r5, sl
 800dd1e:	4454      	add	r4, sl
 800dd20:	4450      	add	r0, sl
 800dd22:	4452      	add	r2, sl
 800dd24:	46c4      	mov	ip, r8
 800dd26:	e001      	b.n	800dd2c <arm_radix8_butterfly_f32+0x334>
 800dd28:	3f3504f3 	.word	0x3f3504f3
 800dd2c:	ed96 5a00 	vldr	s10, [r6]
 800dd30:	ed52 9a01 	vldr	s19, [r2, #-4]
 800dd34:	ed11 6a01 	vldr	s12, [r1, #-4]
 800dd38:	edd0 7a00 	vldr	s15, [r0]
 800dd3c:	ed17 7a01 	vldr	s14, [r7, #-4]
 800dd40:	edde 3a00 	vldr	s7, [lr]
 800dd44:	ed94 3a00 	vldr	s6, [r4]
 800dd48:	ed95 2a00 	vldr	s4, [r5]
 800dd4c:	ed9e 0a01 	vldr	s0, [lr, #4]
 800dd50:	ee33 8a85 	vadd.f32	s16, s7, s10
 800dd54:	ee32 1a06 	vadd.f32	s2, s4, s12
 800dd58:	ee33 4a29 	vadd.f32	s8, s6, s19
 800dd5c:	ee77 4a87 	vadd.f32	s9, s15, s14
 800dd60:	ee78 1a04 	vadd.f32	s3, s16, s8
 800dd64:	ee71 6a24 	vadd.f32	s13, s2, s9
 800dd68:	ee32 2a46 	vsub.f32	s4, s4, s12
 800dd6c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800dd70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd74:	ed8e 6a00 	vstr	s12, [lr]
 800dd78:	edd0 8a01 	vldr	s17, [r0, #4]
 800dd7c:	ed95 9a01 	vldr	s18, [r5, #4]
 800dd80:	edd1 2a00 	vldr	s5, [r1]
 800dd84:	ed97 7a00 	vldr	s14, [r7]
 800dd88:	edd4 0a01 	vldr	s1, [r4, #4]
 800dd8c:	ed96 6a01 	vldr	s12, [r6, #4]
 800dd90:	edd2 5a00 	vldr	s11, [r2]
 800dd94:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800dd98:	ee33 3a69 	vsub.f32	s6, s6, s19
 800dd9c:	ee39 5a62 	vsub.f32	s10, s18, s5
 800dda0:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800dda4:	ee38 4a44 	vsub.f32	s8, s16, s8
 800dda8:	ee38 7a87 	vadd.f32	s14, s17, s14
 800ddac:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800ddb0:	ee79 2a22 	vadd.f32	s5, s18, s5
 800ddb4:	ee75 8a69 	vsub.f32	s17, s10, s19
 800ddb8:	ee32 9a27 	vadd.f32	s18, s4, s15
 800ddbc:	ee35 5a29 	vadd.f32	s10, s10, s19
 800ddc0:	ee72 7a67 	vsub.f32	s15, s4, s15
 800ddc4:	ee30 2a06 	vadd.f32	s4, s0, s12
 800ddc8:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800ddcc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800ddd0:	ee32 9a08 	vadd.f32	s18, s4, s16
 800ddd4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800ddd8:	ee32 2a48 	vsub.f32	s4, s4, s16
 800dddc:	ee71 4a64 	vsub.f32	s9, s2, s9
 800dde0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800dde4:	ee32 1a87 	vadd.f32	s2, s5, s14
 800dde8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800ddec:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800ddf0:	ee30 6a46 	vsub.f32	s12, s0, s12
 800ddf4:	ee73 0a29 	vadd.f32	s1, s6, s19
 800ddf8:	ee36 0a28 	vadd.f32	s0, s12, s17
 800ddfc:	ee33 3a69 	vsub.f32	s6, s6, s19
 800de00:	ee32 7a64 	vsub.f32	s14, s4, s9
 800de04:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800de08:	ee36 6a68 	vsub.f32	s12, s12, s17
 800de0c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800de10:	ee75 8a85 	vadd.f32	s17, s11, s10
 800de14:	ee74 3a22 	vadd.f32	s7, s8, s5
 800de18:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800de1c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800de20:	ee79 1a41 	vsub.f32	s3, s18, s2
 800de24:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800de28:	ee76 5a43 	vsub.f32	s11, s12, s6
 800de2c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800de30:	ee72 4a24 	vadd.f32	s9, s4, s9
 800de34:	ee30 4a60 	vsub.f32	s8, s0, s1
 800de38:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800de3c:	ee30 0a20 	vadd.f32	s0, s0, s1
 800de40:	ee77 9a85 	vadd.f32	s19, s15, s10
 800de44:	ee36 6a03 	vadd.f32	s12, s12, s6
 800de48:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800de4c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800de50:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800de54:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800de58:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800de5c:	ee39 1a01 	vadd.f32	s2, s18, s2
 800de60:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800de64:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800de68:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800de6c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800de70:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800de74:	ee35 3a03 	vadd.f32	s6, s10, s6
 800de78:	ee72 6a66 	vsub.f32	s13, s4, s13
 800de7c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800de80:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800de84:	ed9d 4a02 	vldr	s8, [sp, #8]
 800de88:	ed8e 1a01 	vstr	s2, [lr, #4]
 800de8c:	ee77 3a63 	vsub.f32	s7, s14, s7
 800de90:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800de94:	ed9d 7a01 	vldr	s14, [sp, #4]
 800de98:	ed86 3a00 	vstr	s6, [r6]
 800de9c:	ee30 9a89 	vadd.f32	s18, s1, s18
 800dea0:	ee32 2a05 	vadd.f32	s4, s4, s10
 800dea4:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800dea8:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800deac:	ee67 2a22 	vmul.f32	s5, s14, s5
 800deb0:	ee64 1a00 	vmul.f32	s3, s8, s0
 800deb4:	ee27 7a24 	vmul.f32	s14, s14, s9
 800deb8:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800debc:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800dec0:	ee64 8a28 	vmul.f32	s17, s8, s17
 800dec4:	ed9d 4a00 	vldr	s8, [sp]
 800dec8:	edc6 6a01 	vstr	s13, [r6, #4]
 800decc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800ded0:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800ded4:	ee64 9a29 	vmul.f32	s19, s8, s19
 800ded8:	ee24 4a25 	vmul.f32	s8, s8, s11
 800dedc:	ee30 7a87 	vadd.f32	s14, s1, s14
 800dee0:	ee74 4a84 	vadd.f32	s9, s9, s8
 800dee4:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800dee8:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800deec:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800def0:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800def4:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800def8:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800defc:	ee75 1a21 	vadd.f32	s3, s10, s3
 800df00:	ee30 0a68 	vsub.f32	s0, s0, s17
 800df04:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800df08:	ee70 0a84 	vadd.f32	s1, s1, s8
 800df0c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800df10:	44dc      	add	ip, fp
 800df12:	45e1      	cmp	r9, ip
 800df14:	ed84 9a00 	vstr	s18, [r4]
 800df18:	edc4 3a01 	vstr	s7, [r4, #4]
 800df1c:	449e      	add	lr, r3
 800df1e:	ed02 7a01 	vstr	s14, [r2, #-4]
 800df22:	edc2 2a00 	vstr	s5, [r2]
 800df26:	441e      	add	r6, r3
 800df28:	ed85 2a00 	vstr	s4, [r5]
 800df2c:	ed85 8a01 	vstr	s16, [r5, #4]
 800df30:	441c      	add	r4, r3
 800df32:	ed47 1a01 	vstr	s3, [r7, #-4]
 800df36:	ed87 0a00 	vstr	s0, [r7]
 800df3a:	441a      	add	r2, r3
 800df3c:	ed41 4a01 	vstr	s9, [r1, #-4]
 800df40:	edc1 9a00 	vstr	s19, [r1]
 800df44:	441d      	add	r5, r3
 800df46:	edc0 0a00 	vstr	s1, [r0]
 800df4a:	441f      	add	r7, r3
 800df4c:	ed80 6a01 	vstr	s12, [r0, #4]
 800df50:	4419      	add	r1, r3
 800df52:	4418      	add	r0, r3
 800df54:	f63f aeea 	bhi.w	800dd2c <arm_radix8_butterfly_f32+0x334>
 800df58:	9a03      	ldr	r2, [sp, #12]
 800df5a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800df5c:	440a      	add	r2, r1
 800df5e:	9203      	str	r2, [sp, #12]
 800df60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800df62:	9a05      	ldr	r2, [sp, #20]
 800df64:	440a      	add	r2, r1
 800df66:	9205      	str	r2, [sp, #20]
 800df68:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800df6a:	9a04      	ldr	r2, [sp, #16]
 800df6c:	440a      	add	r2, r1
 800df6e:	9204      	str	r2, [sp, #16]
 800df70:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800df72:	9a06      	ldr	r2, [sp, #24]
 800df74:	440a      	add	r2, r1
 800df76:	9206      	str	r2, [sp, #24]
 800df78:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800df7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df7c:	440a      	add	r2, r1
 800df7e:	9209      	str	r2, [sp, #36]	@ 0x24
 800df80:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800df82:	9a08      	ldr	r2, [sp, #32]
 800df84:	440a      	add	r2, r1
 800df86:	9208      	str	r2, [sp, #32]
 800df88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800df8a:	9a07      	ldr	r2, [sp, #28]
 800df8c:	440a      	add	r2, r1
 800df8e:	9207      	str	r2, [sp, #28]
 800df90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800df92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df94:	f108 0801 	add.w	r8, r8, #1
 800df98:	3208      	adds	r2, #8
 800df9a:	4588      	cmp	r8, r1
 800df9c:	920a      	str	r2, [sp, #40]	@ 0x28
 800df9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dfa0:	f47f ae75 	bne.w	800dc8e <arm_radix8_butterfly_f32+0x296>
 800dfa4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	46c3      	mov	fp, r8
 800dfac:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 800dfb0:	e532      	b.n	800da18 <arm_radix8_butterfly_f32+0x20>
 800dfb2:	b01d      	add	sp, #116	@ 0x74
 800dfb4:	ecbd 8b10 	vpop	{d8-d15}
 800dfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfbc <__cvt>:
 800dfbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc0:	ec57 6b10 	vmov	r6, r7, d0
 800dfc4:	2f00      	cmp	r7, #0
 800dfc6:	460c      	mov	r4, r1
 800dfc8:	4619      	mov	r1, r3
 800dfca:	463b      	mov	r3, r7
 800dfcc:	bfbb      	ittet	lt
 800dfce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dfd2:	461f      	movlt	r7, r3
 800dfd4:	2300      	movge	r3, #0
 800dfd6:	232d      	movlt	r3, #45	@ 0x2d
 800dfd8:	700b      	strb	r3, [r1, #0]
 800dfda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dfdc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dfe0:	4691      	mov	r9, r2
 800dfe2:	f023 0820 	bic.w	r8, r3, #32
 800dfe6:	bfbc      	itt	lt
 800dfe8:	4632      	movlt	r2, r6
 800dfea:	4616      	movlt	r6, r2
 800dfec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dff0:	d005      	beq.n	800dffe <__cvt+0x42>
 800dff2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dff6:	d100      	bne.n	800dffa <__cvt+0x3e>
 800dff8:	3401      	adds	r4, #1
 800dffa:	2102      	movs	r1, #2
 800dffc:	e000      	b.n	800e000 <__cvt+0x44>
 800dffe:	2103      	movs	r1, #3
 800e000:	ab03      	add	r3, sp, #12
 800e002:	9301      	str	r3, [sp, #4]
 800e004:	ab02      	add	r3, sp, #8
 800e006:	9300      	str	r3, [sp, #0]
 800e008:	ec47 6b10 	vmov	d0, r6, r7
 800e00c:	4653      	mov	r3, sl
 800e00e:	4622      	mov	r2, r4
 800e010:	f001 f8da 	bl	800f1c8 <_dtoa_r>
 800e014:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e018:	4605      	mov	r5, r0
 800e01a:	d119      	bne.n	800e050 <__cvt+0x94>
 800e01c:	f019 0f01 	tst.w	r9, #1
 800e020:	d00e      	beq.n	800e040 <__cvt+0x84>
 800e022:	eb00 0904 	add.w	r9, r0, r4
 800e026:	2200      	movs	r2, #0
 800e028:	2300      	movs	r3, #0
 800e02a:	4630      	mov	r0, r6
 800e02c:	4639      	mov	r1, r7
 800e02e:	f7f2 fdb3 	bl	8000b98 <__aeabi_dcmpeq>
 800e032:	b108      	cbz	r0, 800e038 <__cvt+0x7c>
 800e034:	f8cd 900c 	str.w	r9, [sp, #12]
 800e038:	2230      	movs	r2, #48	@ 0x30
 800e03a:	9b03      	ldr	r3, [sp, #12]
 800e03c:	454b      	cmp	r3, r9
 800e03e:	d31e      	bcc.n	800e07e <__cvt+0xc2>
 800e040:	9b03      	ldr	r3, [sp, #12]
 800e042:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e044:	1b5b      	subs	r3, r3, r5
 800e046:	4628      	mov	r0, r5
 800e048:	6013      	str	r3, [r2, #0]
 800e04a:	b004      	add	sp, #16
 800e04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e050:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e054:	eb00 0904 	add.w	r9, r0, r4
 800e058:	d1e5      	bne.n	800e026 <__cvt+0x6a>
 800e05a:	7803      	ldrb	r3, [r0, #0]
 800e05c:	2b30      	cmp	r3, #48	@ 0x30
 800e05e:	d10a      	bne.n	800e076 <__cvt+0xba>
 800e060:	2200      	movs	r2, #0
 800e062:	2300      	movs	r3, #0
 800e064:	4630      	mov	r0, r6
 800e066:	4639      	mov	r1, r7
 800e068:	f7f2 fd96 	bl	8000b98 <__aeabi_dcmpeq>
 800e06c:	b918      	cbnz	r0, 800e076 <__cvt+0xba>
 800e06e:	f1c4 0401 	rsb	r4, r4, #1
 800e072:	f8ca 4000 	str.w	r4, [sl]
 800e076:	f8da 3000 	ldr.w	r3, [sl]
 800e07a:	4499      	add	r9, r3
 800e07c:	e7d3      	b.n	800e026 <__cvt+0x6a>
 800e07e:	1c59      	adds	r1, r3, #1
 800e080:	9103      	str	r1, [sp, #12]
 800e082:	701a      	strb	r2, [r3, #0]
 800e084:	e7d9      	b.n	800e03a <__cvt+0x7e>

0800e086 <__exponent>:
 800e086:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e088:	2900      	cmp	r1, #0
 800e08a:	bfba      	itte	lt
 800e08c:	4249      	neglt	r1, r1
 800e08e:	232d      	movlt	r3, #45	@ 0x2d
 800e090:	232b      	movge	r3, #43	@ 0x2b
 800e092:	2909      	cmp	r1, #9
 800e094:	7002      	strb	r2, [r0, #0]
 800e096:	7043      	strb	r3, [r0, #1]
 800e098:	dd29      	ble.n	800e0ee <__exponent+0x68>
 800e09a:	f10d 0307 	add.w	r3, sp, #7
 800e09e:	461d      	mov	r5, r3
 800e0a0:	270a      	movs	r7, #10
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	fbb1 f6f7 	udiv	r6, r1, r7
 800e0a8:	fb07 1416 	mls	r4, r7, r6, r1
 800e0ac:	3430      	adds	r4, #48	@ 0x30
 800e0ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	2c63      	cmp	r4, #99	@ 0x63
 800e0b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e0ba:	4631      	mov	r1, r6
 800e0bc:	dcf1      	bgt.n	800e0a2 <__exponent+0x1c>
 800e0be:	3130      	adds	r1, #48	@ 0x30
 800e0c0:	1e94      	subs	r4, r2, #2
 800e0c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e0c6:	1c41      	adds	r1, r0, #1
 800e0c8:	4623      	mov	r3, r4
 800e0ca:	42ab      	cmp	r3, r5
 800e0cc:	d30a      	bcc.n	800e0e4 <__exponent+0x5e>
 800e0ce:	f10d 0309 	add.w	r3, sp, #9
 800e0d2:	1a9b      	subs	r3, r3, r2
 800e0d4:	42ac      	cmp	r4, r5
 800e0d6:	bf88      	it	hi
 800e0d8:	2300      	movhi	r3, #0
 800e0da:	3302      	adds	r3, #2
 800e0dc:	4403      	add	r3, r0
 800e0de:	1a18      	subs	r0, r3, r0
 800e0e0:	b003      	add	sp, #12
 800e0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e0e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e0ec:	e7ed      	b.n	800e0ca <__exponent+0x44>
 800e0ee:	2330      	movs	r3, #48	@ 0x30
 800e0f0:	3130      	adds	r1, #48	@ 0x30
 800e0f2:	7083      	strb	r3, [r0, #2]
 800e0f4:	70c1      	strb	r1, [r0, #3]
 800e0f6:	1d03      	adds	r3, r0, #4
 800e0f8:	e7f1      	b.n	800e0de <__exponent+0x58>
	...

0800e0fc <_printf_float>:
 800e0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e100:	b08d      	sub	sp, #52	@ 0x34
 800e102:	460c      	mov	r4, r1
 800e104:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e108:	4616      	mov	r6, r2
 800e10a:	461f      	mov	r7, r3
 800e10c:	4605      	mov	r5, r0
 800e10e:	f000 feef 	bl	800eef0 <_localeconv_r>
 800e112:	6803      	ldr	r3, [r0, #0]
 800e114:	9304      	str	r3, [sp, #16]
 800e116:	4618      	mov	r0, r3
 800e118:	f7f2 f912 	bl	8000340 <strlen>
 800e11c:	2300      	movs	r3, #0
 800e11e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e120:	f8d8 3000 	ldr.w	r3, [r8]
 800e124:	9005      	str	r0, [sp, #20]
 800e126:	3307      	adds	r3, #7
 800e128:	f023 0307 	bic.w	r3, r3, #7
 800e12c:	f103 0208 	add.w	r2, r3, #8
 800e130:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e134:	f8d4 b000 	ldr.w	fp, [r4]
 800e138:	f8c8 2000 	str.w	r2, [r8]
 800e13c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e140:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e144:	9307      	str	r3, [sp, #28]
 800e146:	f8cd 8018 	str.w	r8, [sp, #24]
 800e14a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e14e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e152:	4b9c      	ldr	r3, [pc, #624]	@ (800e3c4 <_printf_float+0x2c8>)
 800e154:	f04f 32ff 	mov.w	r2, #4294967295
 800e158:	f7f2 fd50 	bl	8000bfc <__aeabi_dcmpun>
 800e15c:	bb70      	cbnz	r0, 800e1bc <_printf_float+0xc0>
 800e15e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e162:	4b98      	ldr	r3, [pc, #608]	@ (800e3c4 <_printf_float+0x2c8>)
 800e164:	f04f 32ff 	mov.w	r2, #4294967295
 800e168:	f7f2 fd2a 	bl	8000bc0 <__aeabi_dcmple>
 800e16c:	bb30      	cbnz	r0, 800e1bc <_printf_float+0xc0>
 800e16e:	2200      	movs	r2, #0
 800e170:	2300      	movs	r3, #0
 800e172:	4640      	mov	r0, r8
 800e174:	4649      	mov	r1, r9
 800e176:	f7f2 fd19 	bl	8000bac <__aeabi_dcmplt>
 800e17a:	b110      	cbz	r0, 800e182 <_printf_float+0x86>
 800e17c:	232d      	movs	r3, #45	@ 0x2d
 800e17e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e182:	4a91      	ldr	r2, [pc, #580]	@ (800e3c8 <_printf_float+0x2cc>)
 800e184:	4b91      	ldr	r3, [pc, #580]	@ (800e3cc <_printf_float+0x2d0>)
 800e186:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e18a:	bf94      	ite	ls
 800e18c:	4690      	movls	r8, r2
 800e18e:	4698      	movhi	r8, r3
 800e190:	2303      	movs	r3, #3
 800e192:	6123      	str	r3, [r4, #16]
 800e194:	f02b 0304 	bic.w	r3, fp, #4
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	f04f 0900 	mov.w	r9, #0
 800e19e:	9700      	str	r7, [sp, #0]
 800e1a0:	4633      	mov	r3, r6
 800e1a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e1a4:	4621      	mov	r1, r4
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f000 f9d2 	bl	800e550 <_printf_common>
 800e1ac:	3001      	adds	r0, #1
 800e1ae:	f040 808d 	bne.w	800e2cc <_printf_float+0x1d0>
 800e1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b6:	b00d      	add	sp, #52	@ 0x34
 800e1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1bc:	4642      	mov	r2, r8
 800e1be:	464b      	mov	r3, r9
 800e1c0:	4640      	mov	r0, r8
 800e1c2:	4649      	mov	r1, r9
 800e1c4:	f7f2 fd1a 	bl	8000bfc <__aeabi_dcmpun>
 800e1c8:	b140      	cbz	r0, 800e1dc <_printf_float+0xe0>
 800e1ca:	464b      	mov	r3, r9
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	bfbc      	itt	lt
 800e1d0:	232d      	movlt	r3, #45	@ 0x2d
 800e1d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e1d6:	4a7e      	ldr	r2, [pc, #504]	@ (800e3d0 <_printf_float+0x2d4>)
 800e1d8:	4b7e      	ldr	r3, [pc, #504]	@ (800e3d4 <_printf_float+0x2d8>)
 800e1da:	e7d4      	b.n	800e186 <_printf_float+0x8a>
 800e1dc:	6863      	ldr	r3, [r4, #4]
 800e1de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e1e2:	9206      	str	r2, [sp, #24]
 800e1e4:	1c5a      	adds	r2, r3, #1
 800e1e6:	d13b      	bne.n	800e260 <_printf_float+0x164>
 800e1e8:	2306      	movs	r3, #6
 800e1ea:	6063      	str	r3, [r4, #4]
 800e1ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	6022      	str	r2, [r4, #0]
 800e1f4:	9303      	str	r3, [sp, #12]
 800e1f6:	ab0a      	add	r3, sp, #40	@ 0x28
 800e1f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e1fc:	ab09      	add	r3, sp, #36	@ 0x24
 800e1fe:	9300      	str	r3, [sp, #0]
 800e200:	6861      	ldr	r1, [r4, #4]
 800e202:	ec49 8b10 	vmov	d0, r8, r9
 800e206:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e20a:	4628      	mov	r0, r5
 800e20c:	f7ff fed6 	bl	800dfbc <__cvt>
 800e210:	9b06      	ldr	r3, [sp, #24]
 800e212:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e214:	2b47      	cmp	r3, #71	@ 0x47
 800e216:	4680      	mov	r8, r0
 800e218:	d129      	bne.n	800e26e <_printf_float+0x172>
 800e21a:	1cc8      	adds	r0, r1, #3
 800e21c:	db02      	blt.n	800e224 <_printf_float+0x128>
 800e21e:	6863      	ldr	r3, [r4, #4]
 800e220:	4299      	cmp	r1, r3
 800e222:	dd41      	ble.n	800e2a8 <_printf_float+0x1ac>
 800e224:	f1aa 0a02 	sub.w	sl, sl, #2
 800e228:	fa5f fa8a 	uxtb.w	sl, sl
 800e22c:	3901      	subs	r1, #1
 800e22e:	4652      	mov	r2, sl
 800e230:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e234:	9109      	str	r1, [sp, #36]	@ 0x24
 800e236:	f7ff ff26 	bl	800e086 <__exponent>
 800e23a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e23c:	1813      	adds	r3, r2, r0
 800e23e:	2a01      	cmp	r2, #1
 800e240:	4681      	mov	r9, r0
 800e242:	6123      	str	r3, [r4, #16]
 800e244:	dc02      	bgt.n	800e24c <_printf_float+0x150>
 800e246:	6822      	ldr	r2, [r4, #0]
 800e248:	07d2      	lsls	r2, r2, #31
 800e24a:	d501      	bpl.n	800e250 <_printf_float+0x154>
 800e24c:	3301      	adds	r3, #1
 800e24e:	6123      	str	r3, [r4, #16]
 800e250:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e254:	2b00      	cmp	r3, #0
 800e256:	d0a2      	beq.n	800e19e <_printf_float+0xa2>
 800e258:	232d      	movs	r3, #45	@ 0x2d
 800e25a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e25e:	e79e      	b.n	800e19e <_printf_float+0xa2>
 800e260:	9a06      	ldr	r2, [sp, #24]
 800e262:	2a47      	cmp	r2, #71	@ 0x47
 800e264:	d1c2      	bne.n	800e1ec <_printf_float+0xf0>
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1c0      	bne.n	800e1ec <_printf_float+0xf0>
 800e26a:	2301      	movs	r3, #1
 800e26c:	e7bd      	b.n	800e1ea <_printf_float+0xee>
 800e26e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e272:	d9db      	bls.n	800e22c <_printf_float+0x130>
 800e274:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e278:	d118      	bne.n	800e2ac <_printf_float+0x1b0>
 800e27a:	2900      	cmp	r1, #0
 800e27c:	6863      	ldr	r3, [r4, #4]
 800e27e:	dd0b      	ble.n	800e298 <_printf_float+0x19c>
 800e280:	6121      	str	r1, [r4, #16]
 800e282:	b913      	cbnz	r3, 800e28a <_printf_float+0x18e>
 800e284:	6822      	ldr	r2, [r4, #0]
 800e286:	07d0      	lsls	r0, r2, #31
 800e288:	d502      	bpl.n	800e290 <_printf_float+0x194>
 800e28a:	3301      	adds	r3, #1
 800e28c:	440b      	add	r3, r1
 800e28e:	6123      	str	r3, [r4, #16]
 800e290:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e292:	f04f 0900 	mov.w	r9, #0
 800e296:	e7db      	b.n	800e250 <_printf_float+0x154>
 800e298:	b913      	cbnz	r3, 800e2a0 <_printf_float+0x1a4>
 800e29a:	6822      	ldr	r2, [r4, #0]
 800e29c:	07d2      	lsls	r2, r2, #31
 800e29e:	d501      	bpl.n	800e2a4 <_printf_float+0x1a8>
 800e2a0:	3302      	adds	r3, #2
 800e2a2:	e7f4      	b.n	800e28e <_printf_float+0x192>
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	e7f2      	b.n	800e28e <_printf_float+0x192>
 800e2a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e2ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2ae:	4299      	cmp	r1, r3
 800e2b0:	db05      	blt.n	800e2be <_printf_float+0x1c2>
 800e2b2:	6823      	ldr	r3, [r4, #0]
 800e2b4:	6121      	str	r1, [r4, #16]
 800e2b6:	07d8      	lsls	r0, r3, #31
 800e2b8:	d5ea      	bpl.n	800e290 <_printf_float+0x194>
 800e2ba:	1c4b      	adds	r3, r1, #1
 800e2bc:	e7e7      	b.n	800e28e <_printf_float+0x192>
 800e2be:	2900      	cmp	r1, #0
 800e2c0:	bfd4      	ite	le
 800e2c2:	f1c1 0202 	rsble	r2, r1, #2
 800e2c6:	2201      	movgt	r2, #1
 800e2c8:	4413      	add	r3, r2
 800e2ca:	e7e0      	b.n	800e28e <_printf_float+0x192>
 800e2cc:	6823      	ldr	r3, [r4, #0]
 800e2ce:	055a      	lsls	r2, r3, #21
 800e2d0:	d407      	bmi.n	800e2e2 <_printf_float+0x1e6>
 800e2d2:	6923      	ldr	r3, [r4, #16]
 800e2d4:	4642      	mov	r2, r8
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	4628      	mov	r0, r5
 800e2da:	47b8      	blx	r7
 800e2dc:	3001      	adds	r0, #1
 800e2de:	d12b      	bne.n	800e338 <_printf_float+0x23c>
 800e2e0:	e767      	b.n	800e1b2 <_printf_float+0xb6>
 800e2e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e2e6:	f240 80dd 	bls.w	800e4a4 <_printf_float+0x3a8>
 800e2ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	f7f2 fc51 	bl	8000b98 <__aeabi_dcmpeq>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	d033      	beq.n	800e362 <_printf_float+0x266>
 800e2fa:	4a37      	ldr	r2, [pc, #220]	@ (800e3d8 <_printf_float+0x2dc>)
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	4631      	mov	r1, r6
 800e300:	4628      	mov	r0, r5
 800e302:	47b8      	blx	r7
 800e304:	3001      	adds	r0, #1
 800e306:	f43f af54 	beq.w	800e1b2 <_printf_float+0xb6>
 800e30a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e30e:	4543      	cmp	r3, r8
 800e310:	db02      	blt.n	800e318 <_printf_float+0x21c>
 800e312:	6823      	ldr	r3, [r4, #0]
 800e314:	07d8      	lsls	r0, r3, #31
 800e316:	d50f      	bpl.n	800e338 <_printf_float+0x23c>
 800e318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e31c:	4631      	mov	r1, r6
 800e31e:	4628      	mov	r0, r5
 800e320:	47b8      	blx	r7
 800e322:	3001      	adds	r0, #1
 800e324:	f43f af45 	beq.w	800e1b2 <_printf_float+0xb6>
 800e328:	f04f 0900 	mov.w	r9, #0
 800e32c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e330:	f104 0a1a 	add.w	sl, r4, #26
 800e334:	45c8      	cmp	r8, r9
 800e336:	dc09      	bgt.n	800e34c <_printf_float+0x250>
 800e338:	6823      	ldr	r3, [r4, #0]
 800e33a:	079b      	lsls	r3, r3, #30
 800e33c:	f100 8103 	bmi.w	800e546 <_printf_float+0x44a>
 800e340:	68e0      	ldr	r0, [r4, #12]
 800e342:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e344:	4298      	cmp	r0, r3
 800e346:	bfb8      	it	lt
 800e348:	4618      	movlt	r0, r3
 800e34a:	e734      	b.n	800e1b6 <_printf_float+0xba>
 800e34c:	2301      	movs	r3, #1
 800e34e:	4652      	mov	r2, sl
 800e350:	4631      	mov	r1, r6
 800e352:	4628      	mov	r0, r5
 800e354:	47b8      	blx	r7
 800e356:	3001      	adds	r0, #1
 800e358:	f43f af2b 	beq.w	800e1b2 <_printf_float+0xb6>
 800e35c:	f109 0901 	add.w	r9, r9, #1
 800e360:	e7e8      	b.n	800e334 <_printf_float+0x238>
 800e362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e364:	2b00      	cmp	r3, #0
 800e366:	dc39      	bgt.n	800e3dc <_printf_float+0x2e0>
 800e368:	4a1b      	ldr	r2, [pc, #108]	@ (800e3d8 <_printf_float+0x2dc>)
 800e36a:	2301      	movs	r3, #1
 800e36c:	4631      	mov	r1, r6
 800e36e:	4628      	mov	r0, r5
 800e370:	47b8      	blx	r7
 800e372:	3001      	adds	r0, #1
 800e374:	f43f af1d 	beq.w	800e1b2 <_printf_float+0xb6>
 800e378:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e37c:	ea59 0303 	orrs.w	r3, r9, r3
 800e380:	d102      	bne.n	800e388 <_printf_float+0x28c>
 800e382:	6823      	ldr	r3, [r4, #0]
 800e384:	07d9      	lsls	r1, r3, #31
 800e386:	d5d7      	bpl.n	800e338 <_printf_float+0x23c>
 800e388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e38c:	4631      	mov	r1, r6
 800e38e:	4628      	mov	r0, r5
 800e390:	47b8      	blx	r7
 800e392:	3001      	adds	r0, #1
 800e394:	f43f af0d 	beq.w	800e1b2 <_printf_float+0xb6>
 800e398:	f04f 0a00 	mov.w	sl, #0
 800e39c:	f104 0b1a 	add.w	fp, r4, #26
 800e3a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3a2:	425b      	negs	r3, r3
 800e3a4:	4553      	cmp	r3, sl
 800e3a6:	dc01      	bgt.n	800e3ac <_printf_float+0x2b0>
 800e3a8:	464b      	mov	r3, r9
 800e3aa:	e793      	b.n	800e2d4 <_printf_float+0x1d8>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	465a      	mov	r2, fp
 800e3b0:	4631      	mov	r1, r6
 800e3b2:	4628      	mov	r0, r5
 800e3b4:	47b8      	blx	r7
 800e3b6:	3001      	adds	r0, #1
 800e3b8:	f43f aefb 	beq.w	800e1b2 <_printf_float+0xb6>
 800e3bc:	f10a 0a01 	add.w	sl, sl, #1
 800e3c0:	e7ee      	b.n	800e3a0 <_printf_float+0x2a4>
 800e3c2:	bf00      	nop
 800e3c4:	7fefffff 	.word	0x7fefffff
 800e3c8:	08026380 	.word	0x08026380
 800e3cc:	08026384 	.word	0x08026384
 800e3d0:	08026388 	.word	0x08026388
 800e3d4:	0802638c 	.word	0x0802638c
 800e3d8:	08026390 	.word	0x08026390
 800e3dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e3de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e3e2:	4553      	cmp	r3, sl
 800e3e4:	bfa8      	it	ge
 800e3e6:	4653      	movge	r3, sl
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	4699      	mov	r9, r3
 800e3ec:	dc36      	bgt.n	800e45c <_printf_float+0x360>
 800e3ee:	f04f 0b00 	mov.w	fp, #0
 800e3f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e3f6:	f104 021a 	add.w	r2, r4, #26
 800e3fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e3fc:	9306      	str	r3, [sp, #24]
 800e3fe:	eba3 0309 	sub.w	r3, r3, r9
 800e402:	455b      	cmp	r3, fp
 800e404:	dc31      	bgt.n	800e46a <_printf_float+0x36e>
 800e406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e408:	459a      	cmp	sl, r3
 800e40a:	dc3a      	bgt.n	800e482 <_printf_float+0x386>
 800e40c:	6823      	ldr	r3, [r4, #0]
 800e40e:	07da      	lsls	r2, r3, #31
 800e410:	d437      	bmi.n	800e482 <_printf_float+0x386>
 800e412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e414:	ebaa 0903 	sub.w	r9, sl, r3
 800e418:	9b06      	ldr	r3, [sp, #24]
 800e41a:	ebaa 0303 	sub.w	r3, sl, r3
 800e41e:	4599      	cmp	r9, r3
 800e420:	bfa8      	it	ge
 800e422:	4699      	movge	r9, r3
 800e424:	f1b9 0f00 	cmp.w	r9, #0
 800e428:	dc33      	bgt.n	800e492 <_printf_float+0x396>
 800e42a:	f04f 0800 	mov.w	r8, #0
 800e42e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e432:	f104 0b1a 	add.w	fp, r4, #26
 800e436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e438:	ebaa 0303 	sub.w	r3, sl, r3
 800e43c:	eba3 0309 	sub.w	r3, r3, r9
 800e440:	4543      	cmp	r3, r8
 800e442:	f77f af79 	ble.w	800e338 <_printf_float+0x23c>
 800e446:	2301      	movs	r3, #1
 800e448:	465a      	mov	r2, fp
 800e44a:	4631      	mov	r1, r6
 800e44c:	4628      	mov	r0, r5
 800e44e:	47b8      	blx	r7
 800e450:	3001      	adds	r0, #1
 800e452:	f43f aeae 	beq.w	800e1b2 <_printf_float+0xb6>
 800e456:	f108 0801 	add.w	r8, r8, #1
 800e45a:	e7ec      	b.n	800e436 <_printf_float+0x33a>
 800e45c:	4642      	mov	r2, r8
 800e45e:	4631      	mov	r1, r6
 800e460:	4628      	mov	r0, r5
 800e462:	47b8      	blx	r7
 800e464:	3001      	adds	r0, #1
 800e466:	d1c2      	bne.n	800e3ee <_printf_float+0x2f2>
 800e468:	e6a3      	b.n	800e1b2 <_printf_float+0xb6>
 800e46a:	2301      	movs	r3, #1
 800e46c:	4631      	mov	r1, r6
 800e46e:	4628      	mov	r0, r5
 800e470:	9206      	str	r2, [sp, #24]
 800e472:	47b8      	blx	r7
 800e474:	3001      	adds	r0, #1
 800e476:	f43f ae9c 	beq.w	800e1b2 <_printf_float+0xb6>
 800e47a:	9a06      	ldr	r2, [sp, #24]
 800e47c:	f10b 0b01 	add.w	fp, fp, #1
 800e480:	e7bb      	b.n	800e3fa <_printf_float+0x2fe>
 800e482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e486:	4631      	mov	r1, r6
 800e488:	4628      	mov	r0, r5
 800e48a:	47b8      	blx	r7
 800e48c:	3001      	adds	r0, #1
 800e48e:	d1c0      	bne.n	800e412 <_printf_float+0x316>
 800e490:	e68f      	b.n	800e1b2 <_printf_float+0xb6>
 800e492:	9a06      	ldr	r2, [sp, #24]
 800e494:	464b      	mov	r3, r9
 800e496:	4442      	add	r2, r8
 800e498:	4631      	mov	r1, r6
 800e49a:	4628      	mov	r0, r5
 800e49c:	47b8      	blx	r7
 800e49e:	3001      	adds	r0, #1
 800e4a0:	d1c3      	bne.n	800e42a <_printf_float+0x32e>
 800e4a2:	e686      	b.n	800e1b2 <_printf_float+0xb6>
 800e4a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e4a8:	f1ba 0f01 	cmp.w	sl, #1
 800e4ac:	dc01      	bgt.n	800e4b2 <_printf_float+0x3b6>
 800e4ae:	07db      	lsls	r3, r3, #31
 800e4b0:	d536      	bpl.n	800e520 <_printf_float+0x424>
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	4642      	mov	r2, r8
 800e4b6:	4631      	mov	r1, r6
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	47b8      	blx	r7
 800e4bc:	3001      	adds	r0, #1
 800e4be:	f43f ae78 	beq.w	800e1b2 <_printf_float+0xb6>
 800e4c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4c6:	4631      	mov	r1, r6
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	47b8      	blx	r7
 800e4cc:	3001      	adds	r0, #1
 800e4ce:	f43f ae70 	beq.w	800e1b2 <_printf_float+0xb6>
 800e4d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	2300      	movs	r3, #0
 800e4da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4de:	f7f2 fb5b 	bl	8000b98 <__aeabi_dcmpeq>
 800e4e2:	b9c0      	cbnz	r0, 800e516 <_printf_float+0x41a>
 800e4e4:	4653      	mov	r3, sl
 800e4e6:	f108 0201 	add.w	r2, r8, #1
 800e4ea:	4631      	mov	r1, r6
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	47b8      	blx	r7
 800e4f0:	3001      	adds	r0, #1
 800e4f2:	d10c      	bne.n	800e50e <_printf_float+0x412>
 800e4f4:	e65d      	b.n	800e1b2 <_printf_float+0xb6>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	465a      	mov	r2, fp
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	4628      	mov	r0, r5
 800e4fe:	47b8      	blx	r7
 800e500:	3001      	adds	r0, #1
 800e502:	f43f ae56 	beq.w	800e1b2 <_printf_float+0xb6>
 800e506:	f108 0801 	add.w	r8, r8, #1
 800e50a:	45d0      	cmp	r8, sl
 800e50c:	dbf3      	blt.n	800e4f6 <_printf_float+0x3fa>
 800e50e:	464b      	mov	r3, r9
 800e510:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e514:	e6df      	b.n	800e2d6 <_printf_float+0x1da>
 800e516:	f04f 0800 	mov.w	r8, #0
 800e51a:	f104 0b1a 	add.w	fp, r4, #26
 800e51e:	e7f4      	b.n	800e50a <_printf_float+0x40e>
 800e520:	2301      	movs	r3, #1
 800e522:	4642      	mov	r2, r8
 800e524:	e7e1      	b.n	800e4ea <_printf_float+0x3ee>
 800e526:	2301      	movs	r3, #1
 800e528:	464a      	mov	r2, r9
 800e52a:	4631      	mov	r1, r6
 800e52c:	4628      	mov	r0, r5
 800e52e:	47b8      	blx	r7
 800e530:	3001      	adds	r0, #1
 800e532:	f43f ae3e 	beq.w	800e1b2 <_printf_float+0xb6>
 800e536:	f108 0801 	add.w	r8, r8, #1
 800e53a:	68e3      	ldr	r3, [r4, #12]
 800e53c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e53e:	1a5b      	subs	r3, r3, r1
 800e540:	4543      	cmp	r3, r8
 800e542:	dcf0      	bgt.n	800e526 <_printf_float+0x42a>
 800e544:	e6fc      	b.n	800e340 <_printf_float+0x244>
 800e546:	f04f 0800 	mov.w	r8, #0
 800e54a:	f104 0919 	add.w	r9, r4, #25
 800e54e:	e7f4      	b.n	800e53a <_printf_float+0x43e>

0800e550 <_printf_common>:
 800e550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e554:	4616      	mov	r6, r2
 800e556:	4698      	mov	r8, r3
 800e558:	688a      	ldr	r2, [r1, #8]
 800e55a:	690b      	ldr	r3, [r1, #16]
 800e55c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e560:	4293      	cmp	r3, r2
 800e562:	bfb8      	it	lt
 800e564:	4613      	movlt	r3, r2
 800e566:	6033      	str	r3, [r6, #0]
 800e568:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e56c:	4607      	mov	r7, r0
 800e56e:	460c      	mov	r4, r1
 800e570:	b10a      	cbz	r2, 800e576 <_printf_common+0x26>
 800e572:	3301      	adds	r3, #1
 800e574:	6033      	str	r3, [r6, #0]
 800e576:	6823      	ldr	r3, [r4, #0]
 800e578:	0699      	lsls	r1, r3, #26
 800e57a:	bf42      	ittt	mi
 800e57c:	6833      	ldrmi	r3, [r6, #0]
 800e57e:	3302      	addmi	r3, #2
 800e580:	6033      	strmi	r3, [r6, #0]
 800e582:	6825      	ldr	r5, [r4, #0]
 800e584:	f015 0506 	ands.w	r5, r5, #6
 800e588:	d106      	bne.n	800e598 <_printf_common+0x48>
 800e58a:	f104 0a19 	add.w	sl, r4, #25
 800e58e:	68e3      	ldr	r3, [r4, #12]
 800e590:	6832      	ldr	r2, [r6, #0]
 800e592:	1a9b      	subs	r3, r3, r2
 800e594:	42ab      	cmp	r3, r5
 800e596:	dc26      	bgt.n	800e5e6 <_printf_common+0x96>
 800e598:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e59c:	6822      	ldr	r2, [r4, #0]
 800e59e:	3b00      	subs	r3, #0
 800e5a0:	bf18      	it	ne
 800e5a2:	2301      	movne	r3, #1
 800e5a4:	0692      	lsls	r2, r2, #26
 800e5a6:	d42b      	bmi.n	800e600 <_printf_common+0xb0>
 800e5a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5ac:	4641      	mov	r1, r8
 800e5ae:	4638      	mov	r0, r7
 800e5b0:	47c8      	blx	r9
 800e5b2:	3001      	adds	r0, #1
 800e5b4:	d01e      	beq.n	800e5f4 <_printf_common+0xa4>
 800e5b6:	6823      	ldr	r3, [r4, #0]
 800e5b8:	6922      	ldr	r2, [r4, #16]
 800e5ba:	f003 0306 	and.w	r3, r3, #6
 800e5be:	2b04      	cmp	r3, #4
 800e5c0:	bf02      	ittt	eq
 800e5c2:	68e5      	ldreq	r5, [r4, #12]
 800e5c4:	6833      	ldreq	r3, [r6, #0]
 800e5c6:	1aed      	subeq	r5, r5, r3
 800e5c8:	68a3      	ldr	r3, [r4, #8]
 800e5ca:	bf0c      	ite	eq
 800e5cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5d0:	2500      	movne	r5, #0
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	bfc4      	itt	gt
 800e5d6:	1a9b      	subgt	r3, r3, r2
 800e5d8:	18ed      	addgt	r5, r5, r3
 800e5da:	2600      	movs	r6, #0
 800e5dc:	341a      	adds	r4, #26
 800e5de:	42b5      	cmp	r5, r6
 800e5e0:	d11a      	bne.n	800e618 <_printf_common+0xc8>
 800e5e2:	2000      	movs	r0, #0
 800e5e4:	e008      	b.n	800e5f8 <_printf_common+0xa8>
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	4652      	mov	r2, sl
 800e5ea:	4641      	mov	r1, r8
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	47c8      	blx	r9
 800e5f0:	3001      	adds	r0, #1
 800e5f2:	d103      	bne.n	800e5fc <_printf_common+0xac>
 800e5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5fc:	3501      	adds	r5, #1
 800e5fe:	e7c6      	b.n	800e58e <_printf_common+0x3e>
 800e600:	18e1      	adds	r1, r4, r3
 800e602:	1c5a      	adds	r2, r3, #1
 800e604:	2030      	movs	r0, #48	@ 0x30
 800e606:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e60a:	4422      	add	r2, r4
 800e60c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e610:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e614:	3302      	adds	r3, #2
 800e616:	e7c7      	b.n	800e5a8 <_printf_common+0x58>
 800e618:	2301      	movs	r3, #1
 800e61a:	4622      	mov	r2, r4
 800e61c:	4641      	mov	r1, r8
 800e61e:	4638      	mov	r0, r7
 800e620:	47c8      	blx	r9
 800e622:	3001      	adds	r0, #1
 800e624:	d0e6      	beq.n	800e5f4 <_printf_common+0xa4>
 800e626:	3601      	adds	r6, #1
 800e628:	e7d9      	b.n	800e5de <_printf_common+0x8e>
	...

0800e62c <_printf_i>:
 800e62c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e630:	7e0f      	ldrb	r7, [r1, #24]
 800e632:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e634:	2f78      	cmp	r7, #120	@ 0x78
 800e636:	4691      	mov	r9, r2
 800e638:	4680      	mov	r8, r0
 800e63a:	460c      	mov	r4, r1
 800e63c:	469a      	mov	sl, r3
 800e63e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e642:	d807      	bhi.n	800e654 <_printf_i+0x28>
 800e644:	2f62      	cmp	r7, #98	@ 0x62
 800e646:	d80a      	bhi.n	800e65e <_printf_i+0x32>
 800e648:	2f00      	cmp	r7, #0
 800e64a:	f000 80d2 	beq.w	800e7f2 <_printf_i+0x1c6>
 800e64e:	2f58      	cmp	r7, #88	@ 0x58
 800e650:	f000 80b9 	beq.w	800e7c6 <_printf_i+0x19a>
 800e654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e658:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e65c:	e03a      	b.n	800e6d4 <_printf_i+0xa8>
 800e65e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e662:	2b15      	cmp	r3, #21
 800e664:	d8f6      	bhi.n	800e654 <_printf_i+0x28>
 800e666:	a101      	add	r1, pc, #4	@ (adr r1, 800e66c <_printf_i+0x40>)
 800e668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e66c:	0800e6c5 	.word	0x0800e6c5
 800e670:	0800e6d9 	.word	0x0800e6d9
 800e674:	0800e655 	.word	0x0800e655
 800e678:	0800e655 	.word	0x0800e655
 800e67c:	0800e655 	.word	0x0800e655
 800e680:	0800e655 	.word	0x0800e655
 800e684:	0800e6d9 	.word	0x0800e6d9
 800e688:	0800e655 	.word	0x0800e655
 800e68c:	0800e655 	.word	0x0800e655
 800e690:	0800e655 	.word	0x0800e655
 800e694:	0800e655 	.word	0x0800e655
 800e698:	0800e7d9 	.word	0x0800e7d9
 800e69c:	0800e703 	.word	0x0800e703
 800e6a0:	0800e793 	.word	0x0800e793
 800e6a4:	0800e655 	.word	0x0800e655
 800e6a8:	0800e655 	.word	0x0800e655
 800e6ac:	0800e7fb 	.word	0x0800e7fb
 800e6b0:	0800e655 	.word	0x0800e655
 800e6b4:	0800e703 	.word	0x0800e703
 800e6b8:	0800e655 	.word	0x0800e655
 800e6bc:	0800e655 	.word	0x0800e655
 800e6c0:	0800e79b 	.word	0x0800e79b
 800e6c4:	6833      	ldr	r3, [r6, #0]
 800e6c6:	1d1a      	adds	r2, r3, #4
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	6032      	str	r2, [r6, #0]
 800e6cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e09d      	b.n	800e814 <_printf_i+0x1e8>
 800e6d8:	6833      	ldr	r3, [r6, #0]
 800e6da:	6820      	ldr	r0, [r4, #0]
 800e6dc:	1d19      	adds	r1, r3, #4
 800e6de:	6031      	str	r1, [r6, #0]
 800e6e0:	0606      	lsls	r6, r0, #24
 800e6e2:	d501      	bpl.n	800e6e8 <_printf_i+0xbc>
 800e6e4:	681d      	ldr	r5, [r3, #0]
 800e6e6:	e003      	b.n	800e6f0 <_printf_i+0xc4>
 800e6e8:	0645      	lsls	r5, r0, #25
 800e6ea:	d5fb      	bpl.n	800e6e4 <_printf_i+0xb8>
 800e6ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e6f0:	2d00      	cmp	r5, #0
 800e6f2:	da03      	bge.n	800e6fc <_printf_i+0xd0>
 800e6f4:	232d      	movs	r3, #45	@ 0x2d
 800e6f6:	426d      	negs	r5, r5
 800e6f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6fc:	4859      	ldr	r0, [pc, #356]	@ (800e864 <_printf_i+0x238>)
 800e6fe:	230a      	movs	r3, #10
 800e700:	e011      	b.n	800e726 <_printf_i+0xfa>
 800e702:	6821      	ldr	r1, [r4, #0]
 800e704:	6833      	ldr	r3, [r6, #0]
 800e706:	0608      	lsls	r0, r1, #24
 800e708:	f853 5b04 	ldr.w	r5, [r3], #4
 800e70c:	d402      	bmi.n	800e714 <_printf_i+0xe8>
 800e70e:	0649      	lsls	r1, r1, #25
 800e710:	bf48      	it	mi
 800e712:	b2ad      	uxthmi	r5, r5
 800e714:	2f6f      	cmp	r7, #111	@ 0x6f
 800e716:	4853      	ldr	r0, [pc, #332]	@ (800e864 <_printf_i+0x238>)
 800e718:	6033      	str	r3, [r6, #0]
 800e71a:	bf14      	ite	ne
 800e71c:	230a      	movne	r3, #10
 800e71e:	2308      	moveq	r3, #8
 800e720:	2100      	movs	r1, #0
 800e722:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e726:	6866      	ldr	r6, [r4, #4]
 800e728:	60a6      	str	r6, [r4, #8]
 800e72a:	2e00      	cmp	r6, #0
 800e72c:	bfa2      	ittt	ge
 800e72e:	6821      	ldrge	r1, [r4, #0]
 800e730:	f021 0104 	bicge.w	r1, r1, #4
 800e734:	6021      	strge	r1, [r4, #0]
 800e736:	b90d      	cbnz	r5, 800e73c <_printf_i+0x110>
 800e738:	2e00      	cmp	r6, #0
 800e73a:	d04b      	beq.n	800e7d4 <_printf_i+0x1a8>
 800e73c:	4616      	mov	r6, r2
 800e73e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e742:	fb03 5711 	mls	r7, r3, r1, r5
 800e746:	5dc7      	ldrb	r7, [r0, r7]
 800e748:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e74c:	462f      	mov	r7, r5
 800e74e:	42bb      	cmp	r3, r7
 800e750:	460d      	mov	r5, r1
 800e752:	d9f4      	bls.n	800e73e <_printf_i+0x112>
 800e754:	2b08      	cmp	r3, #8
 800e756:	d10b      	bne.n	800e770 <_printf_i+0x144>
 800e758:	6823      	ldr	r3, [r4, #0]
 800e75a:	07df      	lsls	r7, r3, #31
 800e75c:	d508      	bpl.n	800e770 <_printf_i+0x144>
 800e75e:	6923      	ldr	r3, [r4, #16]
 800e760:	6861      	ldr	r1, [r4, #4]
 800e762:	4299      	cmp	r1, r3
 800e764:	bfde      	ittt	le
 800e766:	2330      	movle	r3, #48	@ 0x30
 800e768:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e76c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e770:	1b92      	subs	r2, r2, r6
 800e772:	6122      	str	r2, [r4, #16]
 800e774:	f8cd a000 	str.w	sl, [sp]
 800e778:	464b      	mov	r3, r9
 800e77a:	aa03      	add	r2, sp, #12
 800e77c:	4621      	mov	r1, r4
 800e77e:	4640      	mov	r0, r8
 800e780:	f7ff fee6 	bl	800e550 <_printf_common>
 800e784:	3001      	adds	r0, #1
 800e786:	d14a      	bne.n	800e81e <_printf_i+0x1f2>
 800e788:	f04f 30ff 	mov.w	r0, #4294967295
 800e78c:	b004      	add	sp, #16
 800e78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e792:	6823      	ldr	r3, [r4, #0]
 800e794:	f043 0320 	orr.w	r3, r3, #32
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	4833      	ldr	r0, [pc, #204]	@ (800e868 <_printf_i+0x23c>)
 800e79c:	2778      	movs	r7, #120	@ 0x78
 800e79e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7a2:	6823      	ldr	r3, [r4, #0]
 800e7a4:	6831      	ldr	r1, [r6, #0]
 800e7a6:	061f      	lsls	r7, r3, #24
 800e7a8:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7ac:	d402      	bmi.n	800e7b4 <_printf_i+0x188>
 800e7ae:	065f      	lsls	r7, r3, #25
 800e7b0:	bf48      	it	mi
 800e7b2:	b2ad      	uxthmi	r5, r5
 800e7b4:	6031      	str	r1, [r6, #0]
 800e7b6:	07d9      	lsls	r1, r3, #31
 800e7b8:	bf44      	itt	mi
 800e7ba:	f043 0320 	orrmi.w	r3, r3, #32
 800e7be:	6023      	strmi	r3, [r4, #0]
 800e7c0:	b11d      	cbz	r5, 800e7ca <_printf_i+0x19e>
 800e7c2:	2310      	movs	r3, #16
 800e7c4:	e7ac      	b.n	800e720 <_printf_i+0xf4>
 800e7c6:	4827      	ldr	r0, [pc, #156]	@ (800e864 <_printf_i+0x238>)
 800e7c8:	e7e9      	b.n	800e79e <_printf_i+0x172>
 800e7ca:	6823      	ldr	r3, [r4, #0]
 800e7cc:	f023 0320 	bic.w	r3, r3, #32
 800e7d0:	6023      	str	r3, [r4, #0]
 800e7d2:	e7f6      	b.n	800e7c2 <_printf_i+0x196>
 800e7d4:	4616      	mov	r6, r2
 800e7d6:	e7bd      	b.n	800e754 <_printf_i+0x128>
 800e7d8:	6833      	ldr	r3, [r6, #0]
 800e7da:	6825      	ldr	r5, [r4, #0]
 800e7dc:	6961      	ldr	r1, [r4, #20]
 800e7de:	1d18      	adds	r0, r3, #4
 800e7e0:	6030      	str	r0, [r6, #0]
 800e7e2:	062e      	lsls	r6, r5, #24
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	d501      	bpl.n	800e7ec <_printf_i+0x1c0>
 800e7e8:	6019      	str	r1, [r3, #0]
 800e7ea:	e002      	b.n	800e7f2 <_printf_i+0x1c6>
 800e7ec:	0668      	lsls	r0, r5, #25
 800e7ee:	d5fb      	bpl.n	800e7e8 <_printf_i+0x1bc>
 800e7f0:	8019      	strh	r1, [r3, #0]
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	6123      	str	r3, [r4, #16]
 800e7f6:	4616      	mov	r6, r2
 800e7f8:	e7bc      	b.n	800e774 <_printf_i+0x148>
 800e7fa:	6833      	ldr	r3, [r6, #0]
 800e7fc:	1d1a      	adds	r2, r3, #4
 800e7fe:	6032      	str	r2, [r6, #0]
 800e800:	681e      	ldr	r6, [r3, #0]
 800e802:	6862      	ldr	r2, [r4, #4]
 800e804:	2100      	movs	r1, #0
 800e806:	4630      	mov	r0, r6
 800e808:	f7f1 fd4a 	bl	80002a0 <memchr>
 800e80c:	b108      	cbz	r0, 800e812 <_printf_i+0x1e6>
 800e80e:	1b80      	subs	r0, r0, r6
 800e810:	6060      	str	r0, [r4, #4]
 800e812:	6863      	ldr	r3, [r4, #4]
 800e814:	6123      	str	r3, [r4, #16]
 800e816:	2300      	movs	r3, #0
 800e818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e81c:	e7aa      	b.n	800e774 <_printf_i+0x148>
 800e81e:	6923      	ldr	r3, [r4, #16]
 800e820:	4632      	mov	r2, r6
 800e822:	4649      	mov	r1, r9
 800e824:	4640      	mov	r0, r8
 800e826:	47d0      	blx	sl
 800e828:	3001      	adds	r0, #1
 800e82a:	d0ad      	beq.n	800e788 <_printf_i+0x15c>
 800e82c:	6823      	ldr	r3, [r4, #0]
 800e82e:	079b      	lsls	r3, r3, #30
 800e830:	d413      	bmi.n	800e85a <_printf_i+0x22e>
 800e832:	68e0      	ldr	r0, [r4, #12]
 800e834:	9b03      	ldr	r3, [sp, #12]
 800e836:	4298      	cmp	r0, r3
 800e838:	bfb8      	it	lt
 800e83a:	4618      	movlt	r0, r3
 800e83c:	e7a6      	b.n	800e78c <_printf_i+0x160>
 800e83e:	2301      	movs	r3, #1
 800e840:	4632      	mov	r2, r6
 800e842:	4649      	mov	r1, r9
 800e844:	4640      	mov	r0, r8
 800e846:	47d0      	blx	sl
 800e848:	3001      	adds	r0, #1
 800e84a:	d09d      	beq.n	800e788 <_printf_i+0x15c>
 800e84c:	3501      	adds	r5, #1
 800e84e:	68e3      	ldr	r3, [r4, #12]
 800e850:	9903      	ldr	r1, [sp, #12]
 800e852:	1a5b      	subs	r3, r3, r1
 800e854:	42ab      	cmp	r3, r5
 800e856:	dcf2      	bgt.n	800e83e <_printf_i+0x212>
 800e858:	e7eb      	b.n	800e832 <_printf_i+0x206>
 800e85a:	2500      	movs	r5, #0
 800e85c:	f104 0619 	add.w	r6, r4, #25
 800e860:	e7f5      	b.n	800e84e <_printf_i+0x222>
 800e862:	bf00      	nop
 800e864:	08026392 	.word	0x08026392
 800e868:	080263a3 	.word	0x080263a3

0800e86c <_scanf_float>:
 800e86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e870:	b087      	sub	sp, #28
 800e872:	4617      	mov	r7, r2
 800e874:	9303      	str	r3, [sp, #12]
 800e876:	688b      	ldr	r3, [r1, #8]
 800e878:	1e5a      	subs	r2, r3, #1
 800e87a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e87e:	bf81      	itttt	hi
 800e880:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e884:	eb03 0b05 	addhi.w	fp, r3, r5
 800e888:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e88c:	608b      	strhi	r3, [r1, #8]
 800e88e:	680b      	ldr	r3, [r1, #0]
 800e890:	460a      	mov	r2, r1
 800e892:	f04f 0500 	mov.w	r5, #0
 800e896:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e89a:	f842 3b1c 	str.w	r3, [r2], #28
 800e89e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e8a2:	4680      	mov	r8, r0
 800e8a4:	460c      	mov	r4, r1
 800e8a6:	bf98      	it	ls
 800e8a8:	f04f 0b00 	movls.w	fp, #0
 800e8ac:	9201      	str	r2, [sp, #4]
 800e8ae:	4616      	mov	r6, r2
 800e8b0:	46aa      	mov	sl, r5
 800e8b2:	46a9      	mov	r9, r5
 800e8b4:	9502      	str	r5, [sp, #8]
 800e8b6:	68a2      	ldr	r2, [r4, #8]
 800e8b8:	b152      	cbz	r2, 800e8d0 <_scanf_float+0x64>
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	2b4e      	cmp	r3, #78	@ 0x4e
 800e8c0:	d864      	bhi.n	800e98c <_scanf_float+0x120>
 800e8c2:	2b40      	cmp	r3, #64	@ 0x40
 800e8c4:	d83c      	bhi.n	800e940 <_scanf_float+0xd4>
 800e8c6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e8ca:	b2c8      	uxtb	r0, r1
 800e8cc:	280e      	cmp	r0, #14
 800e8ce:	d93a      	bls.n	800e946 <_scanf_float+0xda>
 800e8d0:	f1b9 0f00 	cmp.w	r9, #0
 800e8d4:	d003      	beq.n	800e8de <_scanf_float+0x72>
 800e8d6:	6823      	ldr	r3, [r4, #0]
 800e8d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e8dc:	6023      	str	r3, [r4, #0]
 800e8de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8e2:	f1ba 0f01 	cmp.w	sl, #1
 800e8e6:	f200 8117 	bhi.w	800eb18 <_scanf_float+0x2ac>
 800e8ea:	9b01      	ldr	r3, [sp, #4]
 800e8ec:	429e      	cmp	r6, r3
 800e8ee:	f200 8108 	bhi.w	800eb02 <_scanf_float+0x296>
 800e8f2:	2001      	movs	r0, #1
 800e8f4:	b007      	add	sp, #28
 800e8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8fa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e8fe:	2a0d      	cmp	r2, #13
 800e900:	d8e6      	bhi.n	800e8d0 <_scanf_float+0x64>
 800e902:	a101      	add	r1, pc, #4	@ (adr r1, 800e908 <_scanf_float+0x9c>)
 800e904:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e908:	0800ea4f 	.word	0x0800ea4f
 800e90c:	0800e8d1 	.word	0x0800e8d1
 800e910:	0800e8d1 	.word	0x0800e8d1
 800e914:	0800e8d1 	.word	0x0800e8d1
 800e918:	0800eaaf 	.word	0x0800eaaf
 800e91c:	0800ea87 	.word	0x0800ea87
 800e920:	0800e8d1 	.word	0x0800e8d1
 800e924:	0800e8d1 	.word	0x0800e8d1
 800e928:	0800ea5d 	.word	0x0800ea5d
 800e92c:	0800e8d1 	.word	0x0800e8d1
 800e930:	0800e8d1 	.word	0x0800e8d1
 800e934:	0800e8d1 	.word	0x0800e8d1
 800e938:	0800e8d1 	.word	0x0800e8d1
 800e93c:	0800ea15 	.word	0x0800ea15
 800e940:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e944:	e7db      	b.n	800e8fe <_scanf_float+0x92>
 800e946:	290e      	cmp	r1, #14
 800e948:	d8c2      	bhi.n	800e8d0 <_scanf_float+0x64>
 800e94a:	a001      	add	r0, pc, #4	@ (adr r0, 800e950 <_scanf_float+0xe4>)
 800e94c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e950:	0800ea05 	.word	0x0800ea05
 800e954:	0800e8d1 	.word	0x0800e8d1
 800e958:	0800ea05 	.word	0x0800ea05
 800e95c:	0800ea9b 	.word	0x0800ea9b
 800e960:	0800e8d1 	.word	0x0800e8d1
 800e964:	0800e9ad 	.word	0x0800e9ad
 800e968:	0800e9eb 	.word	0x0800e9eb
 800e96c:	0800e9eb 	.word	0x0800e9eb
 800e970:	0800e9eb 	.word	0x0800e9eb
 800e974:	0800e9eb 	.word	0x0800e9eb
 800e978:	0800e9eb 	.word	0x0800e9eb
 800e97c:	0800e9eb 	.word	0x0800e9eb
 800e980:	0800e9eb 	.word	0x0800e9eb
 800e984:	0800e9eb 	.word	0x0800e9eb
 800e988:	0800e9eb 	.word	0x0800e9eb
 800e98c:	2b6e      	cmp	r3, #110	@ 0x6e
 800e98e:	d809      	bhi.n	800e9a4 <_scanf_float+0x138>
 800e990:	2b60      	cmp	r3, #96	@ 0x60
 800e992:	d8b2      	bhi.n	800e8fa <_scanf_float+0x8e>
 800e994:	2b54      	cmp	r3, #84	@ 0x54
 800e996:	d07b      	beq.n	800ea90 <_scanf_float+0x224>
 800e998:	2b59      	cmp	r3, #89	@ 0x59
 800e99a:	d199      	bne.n	800e8d0 <_scanf_float+0x64>
 800e99c:	2d07      	cmp	r5, #7
 800e99e:	d197      	bne.n	800e8d0 <_scanf_float+0x64>
 800e9a0:	2508      	movs	r5, #8
 800e9a2:	e02c      	b.n	800e9fe <_scanf_float+0x192>
 800e9a4:	2b74      	cmp	r3, #116	@ 0x74
 800e9a6:	d073      	beq.n	800ea90 <_scanf_float+0x224>
 800e9a8:	2b79      	cmp	r3, #121	@ 0x79
 800e9aa:	e7f6      	b.n	800e99a <_scanf_float+0x12e>
 800e9ac:	6821      	ldr	r1, [r4, #0]
 800e9ae:	05c8      	lsls	r0, r1, #23
 800e9b0:	d51b      	bpl.n	800e9ea <_scanf_float+0x17e>
 800e9b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e9b6:	6021      	str	r1, [r4, #0]
 800e9b8:	f109 0901 	add.w	r9, r9, #1
 800e9bc:	f1bb 0f00 	cmp.w	fp, #0
 800e9c0:	d003      	beq.n	800e9ca <_scanf_float+0x15e>
 800e9c2:	3201      	adds	r2, #1
 800e9c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e9c8:	60a2      	str	r2, [r4, #8]
 800e9ca:	68a3      	ldr	r3, [r4, #8]
 800e9cc:	3b01      	subs	r3, #1
 800e9ce:	60a3      	str	r3, [r4, #8]
 800e9d0:	6923      	ldr	r3, [r4, #16]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	6123      	str	r3, [r4, #16]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	607b      	str	r3, [r7, #4]
 800e9de:	f340 8087 	ble.w	800eaf0 <_scanf_float+0x284>
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	603b      	str	r3, [r7, #0]
 800e9e8:	e765      	b.n	800e8b6 <_scanf_float+0x4a>
 800e9ea:	eb1a 0105 	adds.w	r1, sl, r5
 800e9ee:	f47f af6f 	bne.w	800e8d0 <_scanf_float+0x64>
 800e9f2:	6822      	ldr	r2, [r4, #0]
 800e9f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e9f8:	6022      	str	r2, [r4, #0]
 800e9fa:	460d      	mov	r5, r1
 800e9fc:	468a      	mov	sl, r1
 800e9fe:	f806 3b01 	strb.w	r3, [r6], #1
 800ea02:	e7e2      	b.n	800e9ca <_scanf_float+0x15e>
 800ea04:	6822      	ldr	r2, [r4, #0]
 800ea06:	0610      	lsls	r0, r2, #24
 800ea08:	f57f af62 	bpl.w	800e8d0 <_scanf_float+0x64>
 800ea0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ea10:	6022      	str	r2, [r4, #0]
 800ea12:	e7f4      	b.n	800e9fe <_scanf_float+0x192>
 800ea14:	f1ba 0f00 	cmp.w	sl, #0
 800ea18:	d10e      	bne.n	800ea38 <_scanf_float+0x1cc>
 800ea1a:	f1b9 0f00 	cmp.w	r9, #0
 800ea1e:	d10e      	bne.n	800ea3e <_scanf_float+0x1d2>
 800ea20:	6822      	ldr	r2, [r4, #0]
 800ea22:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ea26:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ea2a:	d108      	bne.n	800ea3e <_scanf_float+0x1d2>
 800ea2c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ea30:	6022      	str	r2, [r4, #0]
 800ea32:	f04f 0a01 	mov.w	sl, #1
 800ea36:	e7e2      	b.n	800e9fe <_scanf_float+0x192>
 800ea38:	f1ba 0f02 	cmp.w	sl, #2
 800ea3c:	d055      	beq.n	800eaea <_scanf_float+0x27e>
 800ea3e:	2d01      	cmp	r5, #1
 800ea40:	d002      	beq.n	800ea48 <_scanf_float+0x1dc>
 800ea42:	2d04      	cmp	r5, #4
 800ea44:	f47f af44 	bne.w	800e8d0 <_scanf_float+0x64>
 800ea48:	3501      	adds	r5, #1
 800ea4a:	b2ed      	uxtb	r5, r5
 800ea4c:	e7d7      	b.n	800e9fe <_scanf_float+0x192>
 800ea4e:	f1ba 0f01 	cmp.w	sl, #1
 800ea52:	f47f af3d 	bne.w	800e8d0 <_scanf_float+0x64>
 800ea56:	f04f 0a02 	mov.w	sl, #2
 800ea5a:	e7d0      	b.n	800e9fe <_scanf_float+0x192>
 800ea5c:	b97d      	cbnz	r5, 800ea7e <_scanf_float+0x212>
 800ea5e:	f1b9 0f00 	cmp.w	r9, #0
 800ea62:	f47f af38 	bne.w	800e8d6 <_scanf_float+0x6a>
 800ea66:	6822      	ldr	r2, [r4, #0]
 800ea68:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ea6c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ea70:	f040 8108 	bne.w	800ec84 <_scanf_float+0x418>
 800ea74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ea78:	6022      	str	r2, [r4, #0]
 800ea7a:	2501      	movs	r5, #1
 800ea7c:	e7bf      	b.n	800e9fe <_scanf_float+0x192>
 800ea7e:	2d03      	cmp	r5, #3
 800ea80:	d0e2      	beq.n	800ea48 <_scanf_float+0x1dc>
 800ea82:	2d05      	cmp	r5, #5
 800ea84:	e7de      	b.n	800ea44 <_scanf_float+0x1d8>
 800ea86:	2d02      	cmp	r5, #2
 800ea88:	f47f af22 	bne.w	800e8d0 <_scanf_float+0x64>
 800ea8c:	2503      	movs	r5, #3
 800ea8e:	e7b6      	b.n	800e9fe <_scanf_float+0x192>
 800ea90:	2d06      	cmp	r5, #6
 800ea92:	f47f af1d 	bne.w	800e8d0 <_scanf_float+0x64>
 800ea96:	2507      	movs	r5, #7
 800ea98:	e7b1      	b.n	800e9fe <_scanf_float+0x192>
 800ea9a:	6822      	ldr	r2, [r4, #0]
 800ea9c:	0591      	lsls	r1, r2, #22
 800ea9e:	f57f af17 	bpl.w	800e8d0 <_scanf_float+0x64>
 800eaa2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800eaa6:	6022      	str	r2, [r4, #0]
 800eaa8:	f8cd 9008 	str.w	r9, [sp, #8]
 800eaac:	e7a7      	b.n	800e9fe <_scanf_float+0x192>
 800eaae:	6822      	ldr	r2, [r4, #0]
 800eab0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800eab4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800eab8:	d006      	beq.n	800eac8 <_scanf_float+0x25c>
 800eaba:	0550      	lsls	r0, r2, #21
 800eabc:	f57f af08 	bpl.w	800e8d0 <_scanf_float+0x64>
 800eac0:	f1b9 0f00 	cmp.w	r9, #0
 800eac4:	f000 80de 	beq.w	800ec84 <_scanf_float+0x418>
 800eac8:	0591      	lsls	r1, r2, #22
 800eaca:	bf58      	it	pl
 800eacc:	9902      	ldrpl	r1, [sp, #8]
 800eace:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ead2:	bf58      	it	pl
 800ead4:	eba9 0101 	subpl.w	r1, r9, r1
 800ead8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800eadc:	bf58      	it	pl
 800eade:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800eae2:	6022      	str	r2, [r4, #0]
 800eae4:	f04f 0900 	mov.w	r9, #0
 800eae8:	e789      	b.n	800e9fe <_scanf_float+0x192>
 800eaea:	f04f 0a03 	mov.w	sl, #3
 800eaee:	e786      	b.n	800e9fe <_scanf_float+0x192>
 800eaf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eaf4:	4639      	mov	r1, r7
 800eaf6:	4640      	mov	r0, r8
 800eaf8:	4798      	blx	r3
 800eafa:	2800      	cmp	r0, #0
 800eafc:	f43f aedb 	beq.w	800e8b6 <_scanf_float+0x4a>
 800eb00:	e6e6      	b.n	800e8d0 <_scanf_float+0x64>
 800eb02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb0a:	463a      	mov	r2, r7
 800eb0c:	4640      	mov	r0, r8
 800eb0e:	4798      	blx	r3
 800eb10:	6923      	ldr	r3, [r4, #16]
 800eb12:	3b01      	subs	r3, #1
 800eb14:	6123      	str	r3, [r4, #16]
 800eb16:	e6e8      	b.n	800e8ea <_scanf_float+0x7e>
 800eb18:	1e6b      	subs	r3, r5, #1
 800eb1a:	2b06      	cmp	r3, #6
 800eb1c:	d824      	bhi.n	800eb68 <_scanf_float+0x2fc>
 800eb1e:	2d02      	cmp	r5, #2
 800eb20:	d836      	bhi.n	800eb90 <_scanf_float+0x324>
 800eb22:	9b01      	ldr	r3, [sp, #4]
 800eb24:	429e      	cmp	r6, r3
 800eb26:	f67f aee4 	bls.w	800e8f2 <_scanf_float+0x86>
 800eb2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb32:	463a      	mov	r2, r7
 800eb34:	4640      	mov	r0, r8
 800eb36:	4798      	blx	r3
 800eb38:	6923      	ldr	r3, [r4, #16]
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	6123      	str	r3, [r4, #16]
 800eb3e:	e7f0      	b.n	800eb22 <_scanf_float+0x2b6>
 800eb40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb44:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800eb48:	463a      	mov	r2, r7
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	4798      	blx	r3
 800eb4e:	6923      	ldr	r3, [r4, #16]
 800eb50:	3b01      	subs	r3, #1
 800eb52:	6123      	str	r3, [r4, #16]
 800eb54:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb58:	fa5f fa8a 	uxtb.w	sl, sl
 800eb5c:	f1ba 0f02 	cmp.w	sl, #2
 800eb60:	d1ee      	bne.n	800eb40 <_scanf_float+0x2d4>
 800eb62:	3d03      	subs	r5, #3
 800eb64:	b2ed      	uxtb	r5, r5
 800eb66:	1b76      	subs	r6, r6, r5
 800eb68:	6823      	ldr	r3, [r4, #0]
 800eb6a:	05da      	lsls	r2, r3, #23
 800eb6c:	d530      	bpl.n	800ebd0 <_scanf_float+0x364>
 800eb6e:	055b      	lsls	r3, r3, #21
 800eb70:	d511      	bpl.n	800eb96 <_scanf_float+0x32a>
 800eb72:	9b01      	ldr	r3, [sp, #4]
 800eb74:	429e      	cmp	r6, r3
 800eb76:	f67f aebc 	bls.w	800e8f2 <_scanf_float+0x86>
 800eb7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb82:	463a      	mov	r2, r7
 800eb84:	4640      	mov	r0, r8
 800eb86:	4798      	blx	r3
 800eb88:	6923      	ldr	r3, [r4, #16]
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	6123      	str	r3, [r4, #16]
 800eb8e:	e7f0      	b.n	800eb72 <_scanf_float+0x306>
 800eb90:	46aa      	mov	sl, r5
 800eb92:	46b3      	mov	fp, r6
 800eb94:	e7de      	b.n	800eb54 <_scanf_float+0x2e8>
 800eb96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800eb9a:	6923      	ldr	r3, [r4, #16]
 800eb9c:	2965      	cmp	r1, #101	@ 0x65
 800eb9e:	f103 33ff 	add.w	r3, r3, #4294967295
 800eba2:	f106 35ff 	add.w	r5, r6, #4294967295
 800eba6:	6123      	str	r3, [r4, #16]
 800eba8:	d00c      	beq.n	800ebc4 <_scanf_float+0x358>
 800ebaa:	2945      	cmp	r1, #69	@ 0x45
 800ebac:	d00a      	beq.n	800ebc4 <_scanf_float+0x358>
 800ebae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebb2:	463a      	mov	r2, r7
 800ebb4:	4640      	mov	r0, r8
 800ebb6:	4798      	blx	r3
 800ebb8:	6923      	ldr	r3, [r4, #16]
 800ebba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ebbe:	3b01      	subs	r3, #1
 800ebc0:	1eb5      	subs	r5, r6, #2
 800ebc2:	6123      	str	r3, [r4, #16]
 800ebc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebc8:	463a      	mov	r2, r7
 800ebca:	4640      	mov	r0, r8
 800ebcc:	4798      	blx	r3
 800ebce:	462e      	mov	r6, r5
 800ebd0:	6822      	ldr	r2, [r4, #0]
 800ebd2:	f012 0210 	ands.w	r2, r2, #16
 800ebd6:	d001      	beq.n	800ebdc <_scanf_float+0x370>
 800ebd8:	2000      	movs	r0, #0
 800ebda:	e68b      	b.n	800e8f4 <_scanf_float+0x88>
 800ebdc:	7032      	strb	r2, [r6, #0]
 800ebde:	6823      	ldr	r3, [r4, #0]
 800ebe0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ebe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebe8:	d11c      	bne.n	800ec24 <_scanf_float+0x3b8>
 800ebea:	9b02      	ldr	r3, [sp, #8]
 800ebec:	454b      	cmp	r3, r9
 800ebee:	eba3 0209 	sub.w	r2, r3, r9
 800ebf2:	d123      	bne.n	800ec3c <_scanf_float+0x3d0>
 800ebf4:	9901      	ldr	r1, [sp, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	4640      	mov	r0, r8
 800ebfa:	f002 fc5d 	bl	80114b8 <_strtod_r>
 800ebfe:	9b03      	ldr	r3, [sp, #12]
 800ec00:	6821      	ldr	r1, [r4, #0]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f011 0f02 	tst.w	r1, #2
 800ec08:	ec57 6b10 	vmov	r6, r7, d0
 800ec0c:	f103 0204 	add.w	r2, r3, #4
 800ec10:	d01f      	beq.n	800ec52 <_scanf_float+0x3e6>
 800ec12:	9903      	ldr	r1, [sp, #12]
 800ec14:	600a      	str	r2, [r1, #0]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	e9c3 6700 	strd	r6, r7, [r3]
 800ec1c:	68e3      	ldr	r3, [r4, #12]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	60e3      	str	r3, [r4, #12]
 800ec22:	e7d9      	b.n	800ebd8 <_scanf_float+0x36c>
 800ec24:	9b04      	ldr	r3, [sp, #16]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d0e4      	beq.n	800ebf4 <_scanf_float+0x388>
 800ec2a:	9905      	ldr	r1, [sp, #20]
 800ec2c:	230a      	movs	r3, #10
 800ec2e:	3101      	adds	r1, #1
 800ec30:	4640      	mov	r0, r8
 800ec32:	f002 fcc1 	bl	80115b8 <_strtol_r>
 800ec36:	9b04      	ldr	r3, [sp, #16]
 800ec38:	9e05      	ldr	r6, [sp, #20]
 800ec3a:	1ac2      	subs	r2, r0, r3
 800ec3c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ec40:	429e      	cmp	r6, r3
 800ec42:	bf28      	it	cs
 800ec44:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ec48:	4910      	ldr	r1, [pc, #64]	@ (800ec8c <_scanf_float+0x420>)
 800ec4a:	4630      	mov	r0, r6
 800ec4c:	f000 f8e4 	bl	800ee18 <siprintf>
 800ec50:	e7d0      	b.n	800ebf4 <_scanf_float+0x388>
 800ec52:	f011 0f04 	tst.w	r1, #4
 800ec56:	9903      	ldr	r1, [sp, #12]
 800ec58:	600a      	str	r2, [r1, #0]
 800ec5a:	d1dc      	bne.n	800ec16 <_scanf_float+0x3aa>
 800ec5c:	681d      	ldr	r5, [r3, #0]
 800ec5e:	4632      	mov	r2, r6
 800ec60:	463b      	mov	r3, r7
 800ec62:	4630      	mov	r0, r6
 800ec64:	4639      	mov	r1, r7
 800ec66:	f7f1 ffc9 	bl	8000bfc <__aeabi_dcmpun>
 800ec6a:	b128      	cbz	r0, 800ec78 <_scanf_float+0x40c>
 800ec6c:	4808      	ldr	r0, [pc, #32]	@ (800ec90 <_scanf_float+0x424>)
 800ec6e:	f000 fa1b 	bl	800f0a8 <nanf>
 800ec72:	ed85 0a00 	vstr	s0, [r5]
 800ec76:	e7d1      	b.n	800ec1c <_scanf_float+0x3b0>
 800ec78:	4630      	mov	r0, r6
 800ec7a:	4639      	mov	r1, r7
 800ec7c:	f7f2 f81c 	bl	8000cb8 <__aeabi_d2f>
 800ec80:	6028      	str	r0, [r5, #0]
 800ec82:	e7cb      	b.n	800ec1c <_scanf_float+0x3b0>
 800ec84:	f04f 0900 	mov.w	r9, #0
 800ec88:	e629      	b.n	800e8de <_scanf_float+0x72>
 800ec8a:	bf00      	nop
 800ec8c:	080263b4 	.word	0x080263b4
 800ec90:	0802674d 	.word	0x0802674d

0800ec94 <std>:
 800ec94:	2300      	movs	r3, #0
 800ec96:	b510      	push	{r4, lr}
 800ec98:	4604      	mov	r4, r0
 800ec9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ec9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eca2:	6083      	str	r3, [r0, #8]
 800eca4:	8181      	strh	r1, [r0, #12]
 800eca6:	6643      	str	r3, [r0, #100]	@ 0x64
 800eca8:	81c2      	strh	r2, [r0, #14]
 800ecaa:	6183      	str	r3, [r0, #24]
 800ecac:	4619      	mov	r1, r3
 800ecae:	2208      	movs	r2, #8
 800ecb0:	305c      	adds	r0, #92	@ 0x5c
 800ecb2:	f000 f914 	bl	800eede <memset>
 800ecb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ecec <std+0x58>)
 800ecb8:	6263      	str	r3, [r4, #36]	@ 0x24
 800ecba:	4b0d      	ldr	r3, [pc, #52]	@ (800ecf0 <std+0x5c>)
 800ecbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ecbe:	4b0d      	ldr	r3, [pc, #52]	@ (800ecf4 <std+0x60>)
 800ecc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ecc2:	4b0d      	ldr	r3, [pc, #52]	@ (800ecf8 <std+0x64>)
 800ecc4:	6323      	str	r3, [r4, #48]	@ 0x30
 800ecc6:	4b0d      	ldr	r3, [pc, #52]	@ (800ecfc <std+0x68>)
 800ecc8:	6224      	str	r4, [r4, #32]
 800ecca:	429c      	cmp	r4, r3
 800eccc:	d006      	beq.n	800ecdc <std+0x48>
 800ecce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ecd2:	4294      	cmp	r4, r2
 800ecd4:	d002      	beq.n	800ecdc <std+0x48>
 800ecd6:	33d0      	adds	r3, #208	@ 0xd0
 800ecd8:	429c      	cmp	r4, r3
 800ecda:	d105      	bne.n	800ece8 <std+0x54>
 800ecdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ece0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ece4:	f000 b9ce 	b.w	800f084 <__retarget_lock_init_recursive>
 800ece8:	bd10      	pop	{r4, pc}
 800ecea:	bf00      	nop
 800ecec:	0800ee59 	.word	0x0800ee59
 800ecf0:	0800ee7b 	.word	0x0800ee7b
 800ecf4:	0800eeb3 	.word	0x0800eeb3
 800ecf8:	0800eed7 	.word	0x0800eed7
 800ecfc:	200092f4 	.word	0x200092f4

0800ed00 <stdio_exit_handler>:
 800ed00:	4a02      	ldr	r2, [pc, #8]	@ (800ed0c <stdio_exit_handler+0xc>)
 800ed02:	4903      	ldr	r1, [pc, #12]	@ (800ed10 <stdio_exit_handler+0x10>)
 800ed04:	4803      	ldr	r0, [pc, #12]	@ (800ed14 <stdio_exit_handler+0x14>)
 800ed06:	f000 b869 	b.w	800eddc <_fwalk_sglue>
 800ed0a:	bf00      	nop
 800ed0c:	20000014 	.word	0x20000014
 800ed10:	08011975 	.word	0x08011975
 800ed14:	20000024 	.word	0x20000024

0800ed18 <cleanup_stdio>:
 800ed18:	6841      	ldr	r1, [r0, #4]
 800ed1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ed4c <cleanup_stdio+0x34>)
 800ed1c:	4299      	cmp	r1, r3
 800ed1e:	b510      	push	{r4, lr}
 800ed20:	4604      	mov	r4, r0
 800ed22:	d001      	beq.n	800ed28 <cleanup_stdio+0x10>
 800ed24:	f002 fe26 	bl	8011974 <_fflush_r>
 800ed28:	68a1      	ldr	r1, [r4, #8]
 800ed2a:	4b09      	ldr	r3, [pc, #36]	@ (800ed50 <cleanup_stdio+0x38>)
 800ed2c:	4299      	cmp	r1, r3
 800ed2e:	d002      	beq.n	800ed36 <cleanup_stdio+0x1e>
 800ed30:	4620      	mov	r0, r4
 800ed32:	f002 fe1f 	bl	8011974 <_fflush_r>
 800ed36:	68e1      	ldr	r1, [r4, #12]
 800ed38:	4b06      	ldr	r3, [pc, #24]	@ (800ed54 <cleanup_stdio+0x3c>)
 800ed3a:	4299      	cmp	r1, r3
 800ed3c:	d004      	beq.n	800ed48 <cleanup_stdio+0x30>
 800ed3e:	4620      	mov	r0, r4
 800ed40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed44:	f002 be16 	b.w	8011974 <_fflush_r>
 800ed48:	bd10      	pop	{r4, pc}
 800ed4a:	bf00      	nop
 800ed4c:	200092f4 	.word	0x200092f4
 800ed50:	2000935c 	.word	0x2000935c
 800ed54:	200093c4 	.word	0x200093c4

0800ed58 <global_stdio_init.part.0>:
 800ed58:	b510      	push	{r4, lr}
 800ed5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ed88 <global_stdio_init.part.0+0x30>)
 800ed5c:	4c0b      	ldr	r4, [pc, #44]	@ (800ed8c <global_stdio_init.part.0+0x34>)
 800ed5e:	4a0c      	ldr	r2, [pc, #48]	@ (800ed90 <global_stdio_init.part.0+0x38>)
 800ed60:	601a      	str	r2, [r3, #0]
 800ed62:	4620      	mov	r0, r4
 800ed64:	2200      	movs	r2, #0
 800ed66:	2104      	movs	r1, #4
 800ed68:	f7ff ff94 	bl	800ec94 <std>
 800ed6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed70:	2201      	movs	r2, #1
 800ed72:	2109      	movs	r1, #9
 800ed74:	f7ff ff8e 	bl	800ec94 <std>
 800ed78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ed7c:	2202      	movs	r2, #2
 800ed7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed82:	2112      	movs	r1, #18
 800ed84:	f7ff bf86 	b.w	800ec94 <std>
 800ed88:	2000942c 	.word	0x2000942c
 800ed8c:	200092f4 	.word	0x200092f4
 800ed90:	0800ed01 	.word	0x0800ed01

0800ed94 <__sfp_lock_acquire>:
 800ed94:	4801      	ldr	r0, [pc, #4]	@ (800ed9c <__sfp_lock_acquire+0x8>)
 800ed96:	f000 b976 	b.w	800f086 <__retarget_lock_acquire_recursive>
 800ed9a:	bf00      	nop
 800ed9c:	20009435 	.word	0x20009435

0800eda0 <__sfp_lock_release>:
 800eda0:	4801      	ldr	r0, [pc, #4]	@ (800eda8 <__sfp_lock_release+0x8>)
 800eda2:	f000 b971 	b.w	800f088 <__retarget_lock_release_recursive>
 800eda6:	bf00      	nop
 800eda8:	20009435 	.word	0x20009435

0800edac <__sinit>:
 800edac:	b510      	push	{r4, lr}
 800edae:	4604      	mov	r4, r0
 800edb0:	f7ff fff0 	bl	800ed94 <__sfp_lock_acquire>
 800edb4:	6a23      	ldr	r3, [r4, #32]
 800edb6:	b11b      	cbz	r3, 800edc0 <__sinit+0x14>
 800edb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edbc:	f7ff bff0 	b.w	800eda0 <__sfp_lock_release>
 800edc0:	4b04      	ldr	r3, [pc, #16]	@ (800edd4 <__sinit+0x28>)
 800edc2:	6223      	str	r3, [r4, #32]
 800edc4:	4b04      	ldr	r3, [pc, #16]	@ (800edd8 <__sinit+0x2c>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1f5      	bne.n	800edb8 <__sinit+0xc>
 800edcc:	f7ff ffc4 	bl	800ed58 <global_stdio_init.part.0>
 800edd0:	e7f2      	b.n	800edb8 <__sinit+0xc>
 800edd2:	bf00      	nop
 800edd4:	0800ed19 	.word	0x0800ed19
 800edd8:	2000942c 	.word	0x2000942c

0800eddc <_fwalk_sglue>:
 800eddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ede0:	4607      	mov	r7, r0
 800ede2:	4688      	mov	r8, r1
 800ede4:	4614      	mov	r4, r2
 800ede6:	2600      	movs	r6, #0
 800ede8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800edec:	f1b9 0901 	subs.w	r9, r9, #1
 800edf0:	d505      	bpl.n	800edfe <_fwalk_sglue+0x22>
 800edf2:	6824      	ldr	r4, [r4, #0]
 800edf4:	2c00      	cmp	r4, #0
 800edf6:	d1f7      	bne.n	800ede8 <_fwalk_sglue+0xc>
 800edf8:	4630      	mov	r0, r6
 800edfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edfe:	89ab      	ldrh	r3, [r5, #12]
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d907      	bls.n	800ee14 <_fwalk_sglue+0x38>
 800ee04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	d003      	beq.n	800ee14 <_fwalk_sglue+0x38>
 800ee0c:	4629      	mov	r1, r5
 800ee0e:	4638      	mov	r0, r7
 800ee10:	47c0      	blx	r8
 800ee12:	4306      	orrs	r6, r0
 800ee14:	3568      	adds	r5, #104	@ 0x68
 800ee16:	e7e9      	b.n	800edec <_fwalk_sglue+0x10>

0800ee18 <siprintf>:
 800ee18:	b40e      	push	{r1, r2, r3}
 800ee1a:	b500      	push	{lr}
 800ee1c:	b09c      	sub	sp, #112	@ 0x70
 800ee1e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ee20:	9002      	str	r0, [sp, #8]
 800ee22:	9006      	str	r0, [sp, #24]
 800ee24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ee28:	4809      	ldr	r0, [pc, #36]	@ (800ee50 <siprintf+0x38>)
 800ee2a:	9107      	str	r1, [sp, #28]
 800ee2c:	9104      	str	r1, [sp, #16]
 800ee2e:	4909      	ldr	r1, [pc, #36]	@ (800ee54 <siprintf+0x3c>)
 800ee30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee34:	9105      	str	r1, [sp, #20]
 800ee36:	6800      	ldr	r0, [r0, #0]
 800ee38:	9301      	str	r3, [sp, #4]
 800ee3a:	a902      	add	r1, sp, #8
 800ee3c:	f002 fc1a 	bl	8011674 <_svfiprintf_r>
 800ee40:	9b02      	ldr	r3, [sp, #8]
 800ee42:	2200      	movs	r2, #0
 800ee44:	701a      	strb	r2, [r3, #0]
 800ee46:	b01c      	add	sp, #112	@ 0x70
 800ee48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee4c:	b003      	add	sp, #12
 800ee4e:	4770      	bx	lr
 800ee50:	20000020 	.word	0x20000020
 800ee54:	ffff0208 	.word	0xffff0208

0800ee58 <__sread>:
 800ee58:	b510      	push	{r4, lr}
 800ee5a:	460c      	mov	r4, r1
 800ee5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee60:	f000 f8c2 	bl	800efe8 <_read_r>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	bfab      	itete	ge
 800ee68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ee6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ee6c:	181b      	addge	r3, r3, r0
 800ee6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ee72:	bfac      	ite	ge
 800ee74:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ee76:	81a3      	strhlt	r3, [r4, #12]
 800ee78:	bd10      	pop	{r4, pc}

0800ee7a <__swrite>:
 800ee7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee7e:	461f      	mov	r7, r3
 800ee80:	898b      	ldrh	r3, [r1, #12]
 800ee82:	05db      	lsls	r3, r3, #23
 800ee84:	4605      	mov	r5, r0
 800ee86:	460c      	mov	r4, r1
 800ee88:	4616      	mov	r6, r2
 800ee8a:	d505      	bpl.n	800ee98 <__swrite+0x1e>
 800ee8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee90:	2302      	movs	r3, #2
 800ee92:	2200      	movs	r2, #0
 800ee94:	f000 f896 	bl	800efc4 <_lseek_r>
 800ee98:	89a3      	ldrh	r3, [r4, #12]
 800ee9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eea2:	81a3      	strh	r3, [r4, #12]
 800eea4:	4632      	mov	r2, r6
 800eea6:	463b      	mov	r3, r7
 800eea8:	4628      	mov	r0, r5
 800eeaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeae:	f000 b8ad 	b.w	800f00c <_write_r>

0800eeb2 <__sseek>:
 800eeb2:	b510      	push	{r4, lr}
 800eeb4:	460c      	mov	r4, r1
 800eeb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeba:	f000 f883 	bl	800efc4 <_lseek_r>
 800eebe:	1c43      	adds	r3, r0, #1
 800eec0:	89a3      	ldrh	r3, [r4, #12]
 800eec2:	bf15      	itete	ne
 800eec4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eec6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eeca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eece:	81a3      	strheq	r3, [r4, #12]
 800eed0:	bf18      	it	ne
 800eed2:	81a3      	strhne	r3, [r4, #12]
 800eed4:	bd10      	pop	{r4, pc}

0800eed6 <__sclose>:
 800eed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeda:	f000 b80d 	b.w	800eef8 <_close_r>

0800eede <memset>:
 800eede:	4402      	add	r2, r0
 800eee0:	4603      	mov	r3, r0
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d100      	bne.n	800eee8 <memset+0xa>
 800eee6:	4770      	bx	lr
 800eee8:	f803 1b01 	strb.w	r1, [r3], #1
 800eeec:	e7f9      	b.n	800eee2 <memset+0x4>
	...

0800eef0 <_localeconv_r>:
 800eef0:	4800      	ldr	r0, [pc, #0]	@ (800eef4 <_localeconv_r+0x4>)
 800eef2:	4770      	bx	lr
 800eef4:	20000160 	.word	0x20000160

0800eef8 <_close_r>:
 800eef8:	b538      	push	{r3, r4, r5, lr}
 800eefa:	4d06      	ldr	r5, [pc, #24]	@ (800ef14 <_close_r+0x1c>)
 800eefc:	2300      	movs	r3, #0
 800eefe:	4604      	mov	r4, r0
 800ef00:	4608      	mov	r0, r1
 800ef02:	602b      	str	r3, [r5, #0]
 800ef04:	f7f5 fa4a 	bl	800439c <_close>
 800ef08:	1c43      	adds	r3, r0, #1
 800ef0a:	d102      	bne.n	800ef12 <_close_r+0x1a>
 800ef0c:	682b      	ldr	r3, [r5, #0]
 800ef0e:	b103      	cbz	r3, 800ef12 <_close_r+0x1a>
 800ef10:	6023      	str	r3, [r4, #0]
 800ef12:	bd38      	pop	{r3, r4, r5, pc}
 800ef14:	20009430 	.word	0x20009430

0800ef18 <_reclaim_reent>:
 800ef18:	4b29      	ldr	r3, [pc, #164]	@ (800efc0 <_reclaim_reent+0xa8>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4283      	cmp	r3, r0
 800ef1e:	b570      	push	{r4, r5, r6, lr}
 800ef20:	4604      	mov	r4, r0
 800ef22:	d04b      	beq.n	800efbc <_reclaim_reent+0xa4>
 800ef24:	69c3      	ldr	r3, [r0, #28]
 800ef26:	b1ab      	cbz	r3, 800ef54 <_reclaim_reent+0x3c>
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	b16b      	cbz	r3, 800ef48 <_reclaim_reent+0x30>
 800ef2c:	2500      	movs	r5, #0
 800ef2e:	69e3      	ldr	r3, [r4, #28]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	5959      	ldr	r1, [r3, r5]
 800ef34:	2900      	cmp	r1, #0
 800ef36:	d13b      	bne.n	800efb0 <_reclaim_reent+0x98>
 800ef38:	3504      	adds	r5, #4
 800ef3a:	2d80      	cmp	r5, #128	@ 0x80
 800ef3c:	d1f7      	bne.n	800ef2e <_reclaim_reent+0x16>
 800ef3e:	69e3      	ldr	r3, [r4, #28]
 800ef40:	4620      	mov	r0, r4
 800ef42:	68d9      	ldr	r1, [r3, #12]
 800ef44:	f000 ff04 	bl	800fd50 <_free_r>
 800ef48:	69e3      	ldr	r3, [r4, #28]
 800ef4a:	6819      	ldr	r1, [r3, #0]
 800ef4c:	b111      	cbz	r1, 800ef54 <_reclaim_reent+0x3c>
 800ef4e:	4620      	mov	r0, r4
 800ef50:	f000 fefe 	bl	800fd50 <_free_r>
 800ef54:	6961      	ldr	r1, [r4, #20]
 800ef56:	b111      	cbz	r1, 800ef5e <_reclaim_reent+0x46>
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f000 fef9 	bl	800fd50 <_free_r>
 800ef5e:	69e1      	ldr	r1, [r4, #28]
 800ef60:	b111      	cbz	r1, 800ef68 <_reclaim_reent+0x50>
 800ef62:	4620      	mov	r0, r4
 800ef64:	f000 fef4 	bl	800fd50 <_free_r>
 800ef68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ef6a:	b111      	cbz	r1, 800ef72 <_reclaim_reent+0x5a>
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f000 feef 	bl	800fd50 <_free_r>
 800ef72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef74:	b111      	cbz	r1, 800ef7c <_reclaim_reent+0x64>
 800ef76:	4620      	mov	r0, r4
 800ef78:	f000 feea 	bl	800fd50 <_free_r>
 800ef7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ef7e:	b111      	cbz	r1, 800ef86 <_reclaim_reent+0x6e>
 800ef80:	4620      	mov	r0, r4
 800ef82:	f000 fee5 	bl	800fd50 <_free_r>
 800ef86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ef88:	b111      	cbz	r1, 800ef90 <_reclaim_reent+0x78>
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f000 fee0 	bl	800fd50 <_free_r>
 800ef90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ef92:	b111      	cbz	r1, 800ef9a <_reclaim_reent+0x82>
 800ef94:	4620      	mov	r0, r4
 800ef96:	f000 fedb 	bl	800fd50 <_free_r>
 800ef9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ef9c:	b111      	cbz	r1, 800efa4 <_reclaim_reent+0x8c>
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f000 fed6 	bl	800fd50 <_free_r>
 800efa4:	6a23      	ldr	r3, [r4, #32]
 800efa6:	b14b      	cbz	r3, 800efbc <_reclaim_reent+0xa4>
 800efa8:	4620      	mov	r0, r4
 800efaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efae:	4718      	bx	r3
 800efb0:	680e      	ldr	r6, [r1, #0]
 800efb2:	4620      	mov	r0, r4
 800efb4:	f000 fecc 	bl	800fd50 <_free_r>
 800efb8:	4631      	mov	r1, r6
 800efba:	e7bb      	b.n	800ef34 <_reclaim_reent+0x1c>
 800efbc:	bd70      	pop	{r4, r5, r6, pc}
 800efbe:	bf00      	nop
 800efc0:	20000020 	.word	0x20000020

0800efc4 <_lseek_r>:
 800efc4:	b538      	push	{r3, r4, r5, lr}
 800efc6:	4d07      	ldr	r5, [pc, #28]	@ (800efe4 <_lseek_r+0x20>)
 800efc8:	4604      	mov	r4, r0
 800efca:	4608      	mov	r0, r1
 800efcc:	4611      	mov	r1, r2
 800efce:	2200      	movs	r2, #0
 800efd0:	602a      	str	r2, [r5, #0]
 800efd2:	461a      	mov	r2, r3
 800efd4:	f7f5 fa09 	bl	80043ea <_lseek>
 800efd8:	1c43      	adds	r3, r0, #1
 800efda:	d102      	bne.n	800efe2 <_lseek_r+0x1e>
 800efdc:	682b      	ldr	r3, [r5, #0]
 800efde:	b103      	cbz	r3, 800efe2 <_lseek_r+0x1e>
 800efe0:	6023      	str	r3, [r4, #0]
 800efe2:	bd38      	pop	{r3, r4, r5, pc}
 800efe4:	20009430 	.word	0x20009430

0800efe8 <_read_r>:
 800efe8:	b538      	push	{r3, r4, r5, lr}
 800efea:	4d07      	ldr	r5, [pc, #28]	@ (800f008 <_read_r+0x20>)
 800efec:	4604      	mov	r4, r0
 800efee:	4608      	mov	r0, r1
 800eff0:	4611      	mov	r1, r2
 800eff2:	2200      	movs	r2, #0
 800eff4:	602a      	str	r2, [r5, #0]
 800eff6:	461a      	mov	r2, r3
 800eff8:	f7f5 f997 	bl	800432a <_read>
 800effc:	1c43      	adds	r3, r0, #1
 800effe:	d102      	bne.n	800f006 <_read_r+0x1e>
 800f000:	682b      	ldr	r3, [r5, #0]
 800f002:	b103      	cbz	r3, 800f006 <_read_r+0x1e>
 800f004:	6023      	str	r3, [r4, #0]
 800f006:	bd38      	pop	{r3, r4, r5, pc}
 800f008:	20009430 	.word	0x20009430

0800f00c <_write_r>:
 800f00c:	b538      	push	{r3, r4, r5, lr}
 800f00e:	4d07      	ldr	r5, [pc, #28]	@ (800f02c <_write_r+0x20>)
 800f010:	4604      	mov	r4, r0
 800f012:	4608      	mov	r0, r1
 800f014:	4611      	mov	r1, r2
 800f016:	2200      	movs	r2, #0
 800f018:	602a      	str	r2, [r5, #0]
 800f01a:	461a      	mov	r2, r3
 800f01c:	f7f5 f9a2 	bl	8004364 <_write>
 800f020:	1c43      	adds	r3, r0, #1
 800f022:	d102      	bne.n	800f02a <_write_r+0x1e>
 800f024:	682b      	ldr	r3, [r5, #0]
 800f026:	b103      	cbz	r3, 800f02a <_write_r+0x1e>
 800f028:	6023      	str	r3, [r4, #0]
 800f02a:	bd38      	pop	{r3, r4, r5, pc}
 800f02c:	20009430 	.word	0x20009430

0800f030 <__errno>:
 800f030:	4b01      	ldr	r3, [pc, #4]	@ (800f038 <__errno+0x8>)
 800f032:	6818      	ldr	r0, [r3, #0]
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	20000020 	.word	0x20000020

0800f03c <__libc_init_array>:
 800f03c:	b570      	push	{r4, r5, r6, lr}
 800f03e:	4d0d      	ldr	r5, [pc, #52]	@ (800f074 <__libc_init_array+0x38>)
 800f040:	4c0d      	ldr	r4, [pc, #52]	@ (800f078 <__libc_init_array+0x3c>)
 800f042:	1b64      	subs	r4, r4, r5
 800f044:	10a4      	asrs	r4, r4, #2
 800f046:	2600      	movs	r6, #0
 800f048:	42a6      	cmp	r6, r4
 800f04a:	d109      	bne.n	800f060 <__libc_init_array+0x24>
 800f04c:	4d0b      	ldr	r5, [pc, #44]	@ (800f07c <__libc_init_array+0x40>)
 800f04e:	4c0c      	ldr	r4, [pc, #48]	@ (800f080 <__libc_init_array+0x44>)
 800f050:	f003 fd0e 	bl	8012a70 <_init>
 800f054:	1b64      	subs	r4, r4, r5
 800f056:	10a4      	asrs	r4, r4, #2
 800f058:	2600      	movs	r6, #0
 800f05a:	42a6      	cmp	r6, r4
 800f05c:	d105      	bne.n	800f06a <__libc_init_array+0x2e>
 800f05e:	bd70      	pop	{r4, r5, r6, pc}
 800f060:	f855 3b04 	ldr.w	r3, [r5], #4
 800f064:	4798      	blx	r3
 800f066:	3601      	adds	r6, #1
 800f068:	e7ee      	b.n	800f048 <__libc_init_array+0xc>
 800f06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f06e:	4798      	blx	r3
 800f070:	3601      	adds	r6, #1
 800f072:	e7f2      	b.n	800f05a <__libc_init_array+0x1e>
 800f074:	080267b8 	.word	0x080267b8
 800f078:	080267b8 	.word	0x080267b8
 800f07c:	080267b8 	.word	0x080267b8
 800f080:	080267bc 	.word	0x080267bc

0800f084 <__retarget_lock_init_recursive>:
 800f084:	4770      	bx	lr

0800f086 <__retarget_lock_acquire_recursive>:
 800f086:	4770      	bx	lr

0800f088 <__retarget_lock_release_recursive>:
 800f088:	4770      	bx	lr

0800f08a <memcpy>:
 800f08a:	440a      	add	r2, r1
 800f08c:	4291      	cmp	r1, r2
 800f08e:	f100 33ff 	add.w	r3, r0, #4294967295
 800f092:	d100      	bne.n	800f096 <memcpy+0xc>
 800f094:	4770      	bx	lr
 800f096:	b510      	push	{r4, lr}
 800f098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f09c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0a0:	4291      	cmp	r1, r2
 800f0a2:	d1f9      	bne.n	800f098 <memcpy+0xe>
 800f0a4:	bd10      	pop	{r4, pc}
	...

0800f0a8 <nanf>:
 800f0a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f0b0 <nanf+0x8>
 800f0ac:	4770      	bx	lr
 800f0ae:	bf00      	nop
 800f0b0:	7fc00000 	.word	0x7fc00000

0800f0b4 <quorem>:
 800f0b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b8:	6903      	ldr	r3, [r0, #16]
 800f0ba:	690c      	ldr	r4, [r1, #16]
 800f0bc:	42a3      	cmp	r3, r4
 800f0be:	4607      	mov	r7, r0
 800f0c0:	db7e      	blt.n	800f1c0 <quorem+0x10c>
 800f0c2:	3c01      	subs	r4, #1
 800f0c4:	f101 0814 	add.w	r8, r1, #20
 800f0c8:	00a3      	lsls	r3, r4, #2
 800f0ca:	f100 0514 	add.w	r5, r0, #20
 800f0ce:	9300      	str	r3, [sp, #0]
 800f0d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0d4:	9301      	str	r3, [sp, #4]
 800f0d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f0da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f0e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800f0ea:	d32e      	bcc.n	800f14a <quorem+0x96>
 800f0ec:	f04f 0a00 	mov.w	sl, #0
 800f0f0:	46c4      	mov	ip, r8
 800f0f2:	46ae      	mov	lr, r5
 800f0f4:	46d3      	mov	fp, sl
 800f0f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f0fa:	b298      	uxth	r0, r3
 800f0fc:	fb06 a000 	mla	r0, r6, r0, sl
 800f100:	0c02      	lsrs	r2, r0, #16
 800f102:	0c1b      	lsrs	r3, r3, #16
 800f104:	fb06 2303 	mla	r3, r6, r3, r2
 800f108:	f8de 2000 	ldr.w	r2, [lr]
 800f10c:	b280      	uxth	r0, r0
 800f10e:	b292      	uxth	r2, r2
 800f110:	1a12      	subs	r2, r2, r0
 800f112:	445a      	add	r2, fp
 800f114:	f8de 0000 	ldr.w	r0, [lr]
 800f118:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f122:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f126:	b292      	uxth	r2, r2
 800f128:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f12c:	45e1      	cmp	r9, ip
 800f12e:	f84e 2b04 	str.w	r2, [lr], #4
 800f132:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f136:	d2de      	bcs.n	800f0f6 <quorem+0x42>
 800f138:	9b00      	ldr	r3, [sp, #0]
 800f13a:	58eb      	ldr	r3, [r5, r3]
 800f13c:	b92b      	cbnz	r3, 800f14a <quorem+0x96>
 800f13e:	9b01      	ldr	r3, [sp, #4]
 800f140:	3b04      	subs	r3, #4
 800f142:	429d      	cmp	r5, r3
 800f144:	461a      	mov	r2, r3
 800f146:	d32f      	bcc.n	800f1a8 <quorem+0xf4>
 800f148:	613c      	str	r4, [r7, #16]
 800f14a:	4638      	mov	r0, r7
 800f14c:	f001 f9c4 	bl	80104d8 <__mcmp>
 800f150:	2800      	cmp	r0, #0
 800f152:	db25      	blt.n	800f1a0 <quorem+0xec>
 800f154:	4629      	mov	r1, r5
 800f156:	2000      	movs	r0, #0
 800f158:	f858 2b04 	ldr.w	r2, [r8], #4
 800f15c:	f8d1 c000 	ldr.w	ip, [r1]
 800f160:	fa1f fe82 	uxth.w	lr, r2
 800f164:	fa1f f38c 	uxth.w	r3, ip
 800f168:	eba3 030e 	sub.w	r3, r3, lr
 800f16c:	4403      	add	r3, r0
 800f16e:	0c12      	lsrs	r2, r2, #16
 800f170:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f174:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f178:	b29b      	uxth	r3, r3
 800f17a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f17e:	45c1      	cmp	r9, r8
 800f180:	f841 3b04 	str.w	r3, [r1], #4
 800f184:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f188:	d2e6      	bcs.n	800f158 <quorem+0xa4>
 800f18a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f18e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f192:	b922      	cbnz	r2, 800f19e <quorem+0xea>
 800f194:	3b04      	subs	r3, #4
 800f196:	429d      	cmp	r5, r3
 800f198:	461a      	mov	r2, r3
 800f19a:	d30b      	bcc.n	800f1b4 <quorem+0x100>
 800f19c:	613c      	str	r4, [r7, #16]
 800f19e:	3601      	adds	r6, #1
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	b003      	add	sp, #12
 800f1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1a8:	6812      	ldr	r2, [r2, #0]
 800f1aa:	3b04      	subs	r3, #4
 800f1ac:	2a00      	cmp	r2, #0
 800f1ae:	d1cb      	bne.n	800f148 <quorem+0x94>
 800f1b0:	3c01      	subs	r4, #1
 800f1b2:	e7c6      	b.n	800f142 <quorem+0x8e>
 800f1b4:	6812      	ldr	r2, [r2, #0]
 800f1b6:	3b04      	subs	r3, #4
 800f1b8:	2a00      	cmp	r2, #0
 800f1ba:	d1ef      	bne.n	800f19c <quorem+0xe8>
 800f1bc:	3c01      	subs	r4, #1
 800f1be:	e7ea      	b.n	800f196 <quorem+0xe2>
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	e7ee      	b.n	800f1a2 <quorem+0xee>
 800f1c4:	0000      	movs	r0, r0
	...

0800f1c8 <_dtoa_r>:
 800f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1cc:	69c7      	ldr	r7, [r0, #28]
 800f1ce:	b099      	sub	sp, #100	@ 0x64
 800f1d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f1d4:	ec55 4b10 	vmov	r4, r5, d0
 800f1d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f1da:	9109      	str	r1, [sp, #36]	@ 0x24
 800f1dc:	4683      	mov	fp, r0
 800f1de:	920e      	str	r2, [sp, #56]	@ 0x38
 800f1e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f1e2:	b97f      	cbnz	r7, 800f204 <_dtoa_r+0x3c>
 800f1e4:	2010      	movs	r0, #16
 800f1e6:	f000 fdfd 	bl	800fde4 <malloc>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800f1f0:	b920      	cbnz	r0, 800f1fc <_dtoa_r+0x34>
 800f1f2:	4ba7      	ldr	r3, [pc, #668]	@ (800f490 <_dtoa_r+0x2c8>)
 800f1f4:	21ef      	movs	r1, #239	@ 0xef
 800f1f6:	48a7      	ldr	r0, [pc, #668]	@ (800f494 <_dtoa_r+0x2cc>)
 800f1f8:	f002 fc2a 	bl	8011a50 <__assert_func>
 800f1fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f200:	6007      	str	r7, [r0, #0]
 800f202:	60c7      	str	r7, [r0, #12]
 800f204:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f208:	6819      	ldr	r1, [r3, #0]
 800f20a:	b159      	cbz	r1, 800f224 <_dtoa_r+0x5c>
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	604a      	str	r2, [r1, #4]
 800f210:	2301      	movs	r3, #1
 800f212:	4093      	lsls	r3, r2
 800f214:	608b      	str	r3, [r1, #8]
 800f216:	4658      	mov	r0, fp
 800f218:	f000 feda 	bl	800ffd0 <_Bfree>
 800f21c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f220:	2200      	movs	r2, #0
 800f222:	601a      	str	r2, [r3, #0]
 800f224:	1e2b      	subs	r3, r5, #0
 800f226:	bfb9      	ittee	lt
 800f228:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f22c:	9303      	strlt	r3, [sp, #12]
 800f22e:	2300      	movge	r3, #0
 800f230:	6033      	strge	r3, [r6, #0]
 800f232:	9f03      	ldr	r7, [sp, #12]
 800f234:	4b98      	ldr	r3, [pc, #608]	@ (800f498 <_dtoa_r+0x2d0>)
 800f236:	bfbc      	itt	lt
 800f238:	2201      	movlt	r2, #1
 800f23a:	6032      	strlt	r2, [r6, #0]
 800f23c:	43bb      	bics	r3, r7
 800f23e:	d112      	bne.n	800f266 <_dtoa_r+0x9e>
 800f240:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f242:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f246:	6013      	str	r3, [r2, #0]
 800f248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f24c:	4323      	orrs	r3, r4
 800f24e:	f000 854d 	beq.w	800fcec <_dtoa_r+0xb24>
 800f252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f254:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f4ac <_dtoa_r+0x2e4>
 800f258:	2b00      	cmp	r3, #0
 800f25a:	f000 854f 	beq.w	800fcfc <_dtoa_r+0xb34>
 800f25e:	f10a 0303 	add.w	r3, sl, #3
 800f262:	f000 bd49 	b.w	800fcf8 <_dtoa_r+0xb30>
 800f266:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f26a:	2200      	movs	r2, #0
 800f26c:	ec51 0b17 	vmov	r0, r1, d7
 800f270:	2300      	movs	r3, #0
 800f272:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f276:	f7f1 fc8f 	bl	8000b98 <__aeabi_dcmpeq>
 800f27a:	4680      	mov	r8, r0
 800f27c:	b158      	cbz	r0, 800f296 <_dtoa_r+0xce>
 800f27e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f280:	2301      	movs	r3, #1
 800f282:	6013      	str	r3, [r2, #0]
 800f284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f286:	b113      	cbz	r3, 800f28e <_dtoa_r+0xc6>
 800f288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f28a:	4b84      	ldr	r3, [pc, #528]	@ (800f49c <_dtoa_r+0x2d4>)
 800f28c:	6013      	str	r3, [r2, #0]
 800f28e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f4b0 <_dtoa_r+0x2e8>
 800f292:	f000 bd33 	b.w	800fcfc <_dtoa_r+0xb34>
 800f296:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f29a:	aa16      	add	r2, sp, #88	@ 0x58
 800f29c:	a917      	add	r1, sp, #92	@ 0x5c
 800f29e:	4658      	mov	r0, fp
 800f2a0:	f001 fa3a 	bl	8010718 <__d2b>
 800f2a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f2a8:	4681      	mov	r9, r0
 800f2aa:	2e00      	cmp	r6, #0
 800f2ac:	d077      	beq.n	800f39e <_dtoa_r+0x1d6>
 800f2ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f2b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f2c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f2c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	4b74      	ldr	r3, [pc, #464]	@ (800f4a0 <_dtoa_r+0x2d8>)
 800f2ce:	f7f1 f843 	bl	8000358 <__aeabi_dsub>
 800f2d2:	a369      	add	r3, pc, #420	@ (adr r3, 800f478 <_dtoa_r+0x2b0>)
 800f2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d8:	f7f1 f9f6 	bl	80006c8 <__aeabi_dmul>
 800f2dc:	a368      	add	r3, pc, #416	@ (adr r3, 800f480 <_dtoa_r+0x2b8>)
 800f2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e2:	f7f1 f83b 	bl	800035c <__adddf3>
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	4630      	mov	r0, r6
 800f2ea:	460d      	mov	r5, r1
 800f2ec:	f7f1 f982 	bl	80005f4 <__aeabi_i2d>
 800f2f0:	a365      	add	r3, pc, #404	@ (adr r3, 800f488 <_dtoa_r+0x2c0>)
 800f2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f6:	f7f1 f9e7 	bl	80006c8 <__aeabi_dmul>
 800f2fa:	4602      	mov	r2, r0
 800f2fc:	460b      	mov	r3, r1
 800f2fe:	4620      	mov	r0, r4
 800f300:	4629      	mov	r1, r5
 800f302:	f7f1 f82b 	bl	800035c <__adddf3>
 800f306:	4604      	mov	r4, r0
 800f308:	460d      	mov	r5, r1
 800f30a:	f7f1 fc8d 	bl	8000c28 <__aeabi_d2iz>
 800f30e:	2200      	movs	r2, #0
 800f310:	4607      	mov	r7, r0
 800f312:	2300      	movs	r3, #0
 800f314:	4620      	mov	r0, r4
 800f316:	4629      	mov	r1, r5
 800f318:	f7f1 fc48 	bl	8000bac <__aeabi_dcmplt>
 800f31c:	b140      	cbz	r0, 800f330 <_dtoa_r+0x168>
 800f31e:	4638      	mov	r0, r7
 800f320:	f7f1 f968 	bl	80005f4 <__aeabi_i2d>
 800f324:	4622      	mov	r2, r4
 800f326:	462b      	mov	r3, r5
 800f328:	f7f1 fc36 	bl	8000b98 <__aeabi_dcmpeq>
 800f32c:	b900      	cbnz	r0, 800f330 <_dtoa_r+0x168>
 800f32e:	3f01      	subs	r7, #1
 800f330:	2f16      	cmp	r7, #22
 800f332:	d851      	bhi.n	800f3d8 <_dtoa_r+0x210>
 800f334:	4b5b      	ldr	r3, [pc, #364]	@ (800f4a4 <_dtoa_r+0x2dc>)
 800f336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f342:	f7f1 fc33 	bl	8000bac <__aeabi_dcmplt>
 800f346:	2800      	cmp	r0, #0
 800f348:	d048      	beq.n	800f3dc <_dtoa_r+0x214>
 800f34a:	3f01      	subs	r7, #1
 800f34c:	2300      	movs	r3, #0
 800f34e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f350:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f352:	1b9b      	subs	r3, r3, r6
 800f354:	1e5a      	subs	r2, r3, #1
 800f356:	bf44      	itt	mi
 800f358:	f1c3 0801 	rsbmi	r8, r3, #1
 800f35c:	2300      	movmi	r3, #0
 800f35e:	9208      	str	r2, [sp, #32]
 800f360:	bf54      	ite	pl
 800f362:	f04f 0800 	movpl.w	r8, #0
 800f366:	9308      	strmi	r3, [sp, #32]
 800f368:	2f00      	cmp	r7, #0
 800f36a:	db39      	blt.n	800f3e0 <_dtoa_r+0x218>
 800f36c:	9b08      	ldr	r3, [sp, #32]
 800f36e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f370:	443b      	add	r3, r7
 800f372:	9308      	str	r3, [sp, #32]
 800f374:	2300      	movs	r3, #0
 800f376:	930a      	str	r3, [sp, #40]	@ 0x28
 800f378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f37a:	2b09      	cmp	r3, #9
 800f37c:	d864      	bhi.n	800f448 <_dtoa_r+0x280>
 800f37e:	2b05      	cmp	r3, #5
 800f380:	bfc4      	itt	gt
 800f382:	3b04      	subgt	r3, #4
 800f384:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f388:	f1a3 0302 	sub.w	r3, r3, #2
 800f38c:	bfcc      	ite	gt
 800f38e:	2400      	movgt	r4, #0
 800f390:	2401      	movle	r4, #1
 800f392:	2b03      	cmp	r3, #3
 800f394:	d863      	bhi.n	800f45e <_dtoa_r+0x296>
 800f396:	e8df f003 	tbb	[pc, r3]
 800f39a:	372a      	.short	0x372a
 800f39c:	5535      	.short	0x5535
 800f39e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f3a2:	441e      	add	r6, r3
 800f3a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f3a8:	2b20      	cmp	r3, #32
 800f3aa:	bfc1      	itttt	gt
 800f3ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f3b0:	409f      	lslgt	r7, r3
 800f3b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f3b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f3ba:	bfd6      	itet	le
 800f3bc:	f1c3 0320 	rsble	r3, r3, #32
 800f3c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800f3c4:	fa04 f003 	lslle.w	r0, r4, r3
 800f3c8:	f7f1 f904 	bl	80005d4 <__aeabi_ui2d>
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f3d2:	3e01      	subs	r6, #1
 800f3d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800f3d6:	e777      	b.n	800f2c8 <_dtoa_r+0x100>
 800f3d8:	2301      	movs	r3, #1
 800f3da:	e7b8      	b.n	800f34e <_dtoa_r+0x186>
 800f3dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800f3de:	e7b7      	b.n	800f350 <_dtoa_r+0x188>
 800f3e0:	427b      	negs	r3, r7
 800f3e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	eba8 0807 	sub.w	r8, r8, r7
 800f3ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f3ec:	e7c4      	b.n	800f378 <_dtoa_r+0x1b0>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	dc35      	bgt.n	800f464 <_dtoa_r+0x29c>
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	9300      	str	r3, [sp, #0]
 800f3fc:	9307      	str	r3, [sp, #28]
 800f3fe:	461a      	mov	r2, r3
 800f400:	920e      	str	r2, [sp, #56]	@ 0x38
 800f402:	e00b      	b.n	800f41c <_dtoa_r+0x254>
 800f404:	2301      	movs	r3, #1
 800f406:	e7f3      	b.n	800f3f0 <_dtoa_r+0x228>
 800f408:	2300      	movs	r3, #0
 800f40a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f40c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f40e:	18fb      	adds	r3, r7, r3
 800f410:	9300      	str	r3, [sp, #0]
 800f412:	3301      	adds	r3, #1
 800f414:	2b01      	cmp	r3, #1
 800f416:	9307      	str	r3, [sp, #28]
 800f418:	bfb8      	it	lt
 800f41a:	2301      	movlt	r3, #1
 800f41c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f420:	2100      	movs	r1, #0
 800f422:	2204      	movs	r2, #4
 800f424:	f102 0514 	add.w	r5, r2, #20
 800f428:	429d      	cmp	r5, r3
 800f42a:	d91f      	bls.n	800f46c <_dtoa_r+0x2a4>
 800f42c:	6041      	str	r1, [r0, #4]
 800f42e:	4658      	mov	r0, fp
 800f430:	f000 fd8e 	bl	800ff50 <_Balloc>
 800f434:	4682      	mov	sl, r0
 800f436:	2800      	cmp	r0, #0
 800f438:	d13c      	bne.n	800f4b4 <_dtoa_r+0x2ec>
 800f43a:	4b1b      	ldr	r3, [pc, #108]	@ (800f4a8 <_dtoa_r+0x2e0>)
 800f43c:	4602      	mov	r2, r0
 800f43e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f442:	e6d8      	b.n	800f1f6 <_dtoa_r+0x2e>
 800f444:	2301      	movs	r3, #1
 800f446:	e7e0      	b.n	800f40a <_dtoa_r+0x242>
 800f448:	2401      	movs	r4, #1
 800f44a:	2300      	movs	r3, #0
 800f44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f44e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f450:	f04f 33ff 	mov.w	r3, #4294967295
 800f454:	9300      	str	r3, [sp, #0]
 800f456:	9307      	str	r3, [sp, #28]
 800f458:	2200      	movs	r2, #0
 800f45a:	2312      	movs	r3, #18
 800f45c:	e7d0      	b.n	800f400 <_dtoa_r+0x238>
 800f45e:	2301      	movs	r3, #1
 800f460:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f462:	e7f5      	b.n	800f450 <_dtoa_r+0x288>
 800f464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f466:	9300      	str	r3, [sp, #0]
 800f468:	9307      	str	r3, [sp, #28]
 800f46a:	e7d7      	b.n	800f41c <_dtoa_r+0x254>
 800f46c:	3101      	adds	r1, #1
 800f46e:	0052      	lsls	r2, r2, #1
 800f470:	e7d8      	b.n	800f424 <_dtoa_r+0x25c>
 800f472:	bf00      	nop
 800f474:	f3af 8000 	nop.w
 800f478:	636f4361 	.word	0x636f4361
 800f47c:	3fd287a7 	.word	0x3fd287a7
 800f480:	8b60c8b3 	.word	0x8b60c8b3
 800f484:	3fc68a28 	.word	0x3fc68a28
 800f488:	509f79fb 	.word	0x509f79fb
 800f48c:	3fd34413 	.word	0x3fd34413
 800f490:	080263c6 	.word	0x080263c6
 800f494:	080263dd 	.word	0x080263dd
 800f498:	7ff00000 	.word	0x7ff00000
 800f49c:	08026391 	.word	0x08026391
 800f4a0:	3ff80000 	.word	0x3ff80000
 800f4a4:	080264d8 	.word	0x080264d8
 800f4a8:	08026435 	.word	0x08026435
 800f4ac:	080263c2 	.word	0x080263c2
 800f4b0:	08026390 	.word	0x08026390
 800f4b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f4b8:	6018      	str	r0, [r3, #0]
 800f4ba:	9b07      	ldr	r3, [sp, #28]
 800f4bc:	2b0e      	cmp	r3, #14
 800f4be:	f200 80a4 	bhi.w	800f60a <_dtoa_r+0x442>
 800f4c2:	2c00      	cmp	r4, #0
 800f4c4:	f000 80a1 	beq.w	800f60a <_dtoa_r+0x442>
 800f4c8:	2f00      	cmp	r7, #0
 800f4ca:	dd33      	ble.n	800f534 <_dtoa_r+0x36c>
 800f4cc:	4bad      	ldr	r3, [pc, #692]	@ (800f784 <_dtoa_r+0x5bc>)
 800f4ce:	f007 020f 	and.w	r2, r7, #15
 800f4d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4d6:	ed93 7b00 	vldr	d7, [r3]
 800f4da:	05f8      	lsls	r0, r7, #23
 800f4dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f4e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f4e4:	d516      	bpl.n	800f514 <_dtoa_r+0x34c>
 800f4e6:	4ba8      	ldr	r3, [pc, #672]	@ (800f788 <_dtoa_r+0x5c0>)
 800f4e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f4ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f4f0:	f7f1 fa14 	bl	800091c <__aeabi_ddiv>
 800f4f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4f8:	f004 040f 	and.w	r4, r4, #15
 800f4fc:	2603      	movs	r6, #3
 800f4fe:	4da2      	ldr	r5, [pc, #648]	@ (800f788 <_dtoa_r+0x5c0>)
 800f500:	b954      	cbnz	r4, 800f518 <_dtoa_r+0x350>
 800f502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f50a:	f7f1 fa07 	bl	800091c <__aeabi_ddiv>
 800f50e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f512:	e028      	b.n	800f566 <_dtoa_r+0x39e>
 800f514:	2602      	movs	r6, #2
 800f516:	e7f2      	b.n	800f4fe <_dtoa_r+0x336>
 800f518:	07e1      	lsls	r1, r4, #31
 800f51a:	d508      	bpl.n	800f52e <_dtoa_r+0x366>
 800f51c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f520:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f524:	f7f1 f8d0 	bl	80006c8 <__aeabi_dmul>
 800f528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f52c:	3601      	adds	r6, #1
 800f52e:	1064      	asrs	r4, r4, #1
 800f530:	3508      	adds	r5, #8
 800f532:	e7e5      	b.n	800f500 <_dtoa_r+0x338>
 800f534:	f000 80d2 	beq.w	800f6dc <_dtoa_r+0x514>
 800f538:	427c      	negs	r4, r7
 800f53a:	4b92      	ldr	r3, [pc, #584]	@ (800f784 <_dtoa_r+0x5bc>)
 800f53c:	4d92      	ldr	r5, [pc, #584]	@ (800f788 <_dtoa_r+0x5c0>)
 800f53e:	f004 020f 	and.w	r2, r4, #15
 800f542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f54e:	f7f1 f8bb 	bl	80006c8 <__aeabi_dmul>
 800f552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f556:	1124      	asrs	r4, r4, #4
 800f558:	2300      	movs	r3, #0
 800f55a:	2602      	movs	r6, #2
 800f55c:	2c00      	cmp	r4, #0
 800f55e:	f040 80b2 	bne.w	800f6c6 <_dtoa_r+0x4fe>
 800f562:	2b00      	cmp	r3, #0
 800f564:	d1d3      	bne.n	800f50e <_dtoa_r+0x346>
 800f566:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f568:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	f000 80b7 	beq.w	800f6e0 <_dtoa_r+0x518>
 800f572:	4b86      	ldr	r3, [pc, #536]	@ (800f78c <_dtoa_r+0x5c4>)
 800f574:	2200      	movs	r2, #0
 800f576:	4620      	mov	r0, r4
 800f578:	4629      	mov	r1, r5
 800f57a:	f7f1 fb17 	bl	8000bac <__aeabi_dcmplt>
 800f57e:	2800      	cmp	r0, #0
 800f580:	f000 80ae 	beq.w	800f6e0 <_dtoa_r+0x518>
 800f584:	9b07      	ldr	r3, [sp, #28]
 800f586:	2b00      	cmp	r3, #0
 800f588:	f000 80aa 	beq.w	800f6e0 <_dtoa_r+0x518>
 800f58c:	9b00      	ldr	r3, [sp, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	dd37      	ble.n	800f602 <_dtoa_r+0x43a>
 800f592:	1e7b      	subs	r3, r7, #1
 800f594:	9304      	str	r3, [sp, #16]
 800f596:	4620      	mov	r0, r4
 800f598:	4b7d      	ldr	r3, [pc, #500]	@ (800f790 <_dtoa_r+0x5c8>)
 800f59a:	2200      	movs	r2, #0
 800f59c:	4629      	mov	r1, r5
 800f59e:	f7f1 f893 	bl	80006c8 <__aeabi_dmul>
 800f5a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5a6:	9c00      	ldr	r4, [sp, #0]
 800f5a8:	3601      	adds	r6, #1
 800f5aa:	4630      	mov	r0, r6
 800f5ac:	f7f1 f822 	bl	80005f4 <__aeabi_i2d>
 800f5b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5b4:	f7f1 f888 	bl	80006c8 <__aeabi_dmul>
 800f5b8:	4b76      	ldr	r3, [pc, #472]	@ (800f794 <_dtoa_r+0x5cc>)
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f7f0 fece 	bl	800035c <__adddf3>
 800f5c0:	4605      	mov	r5, r0
 800f5c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f5c6:	2c00      	cmp	r4, #0
 800f5c8:	f040 808d 	bne.w	800f6e6 <_dtoa_r+0x51e>
 800f5cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5d0:	4b71      	ldr	r3, [pc, #452]	@ (800f798 <_dtoa_r+0x5d0>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f7f0 fec0 	bl	8000358 <__aeabi_dsub>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	460b      	mov	r3, r1
 800f5dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f5e0:	462a      	mov	r2, r5
 800f5e2:	4633      	mov	r3, r6
 800f5e4:	f7f1 fb00 	bl	8000be8 <__aeabi_dcmpgt>
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	f040 828b 	bne.w	800fb04 <_dtoa_r+0x93c>
 800f5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5f2:	462a      	mov	r2, r5
 800f5f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f5f8:	f7f1 fad8 	bl	8000bac <__aeabi_dcmplt>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	f040 8128 	bne.w	800f852 <_dtoa_r+0x68a>
 800f602:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f606:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f60a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	f2c0 815a 	blt.w	800f8c6 <_dtoa_r+0x6fe>
 800f612:	2f0e      	cmp	r7, #14
 800f614:	f300 8157 	bgt.w	800f8c6 <_dtoa_r+0x6fe>
 800f618:	4b5a      	ldr	r3, [pc, #360]	@ (800f784 <_dtoa_r+0x5bc>)
 800f61a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f61e:	ed93 7b00 	vldr	d7, [r3]
 800f622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f624:	2b00      	cmp	r3, #0
 800f626:	ed8d 7b00 	vstr	d7, [sp]
 800f62a:	da03      	bge.n	800f634 <_dtoa_r+0x46c>
 800f62c:	9b07      	ldr	r3, [sp, #28]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f340 8101 	ble.w	800f836 <_dtoa_r+0x66e>
 800f634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f638:	4656      	mov	r6, sl
 800f63a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f63e:	4620      	mov	r0, r4
 800f640:	4629      	mov	r1, r5
 800f642:	f7f1 f96b 	bl	800091c <__aeabi_ddiv>
 800f646:	f7f1 faef 	bl	8000c28 <__aeabi_d2iz>
 800f64a:	4680      	mov	r8, r0
 800f64c:	f7f0 ffd2 	bl	80005f4 <__aeabi_i2d>
 800f650:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f654:	f7f1 f838 	bl	80006c8 <__aeabi_dmul>
 800f658:	4602      	mov	r2, r0
 800f65a:	460b      	mov	r3, r1
 800f65c:	4620      	mov	r0, r4
 800f65e:	4629      	mov	r1, r5
 800f660:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f664:	f7f0 fe78 	bl	8000358 <__aeabi_dsub>
 800f668:	f806 4b01 	strb.w	r4, [r6], #1
 800f66c:	9d07      	ldr	r5, [sp, #28]
 800f66e:	eba6 040a 	sub.w	r4, r6, sl
 800f672:	42a5      	cmp	r5, r4
 800f674:	4602      	mov	r2, r0
 800f676:	460b      	mov	r3, r1
 800f678:	f040 8117 	bne.w	800f8aa <_dtoa_r+0x6e2>
 800f67c:	f7f0 fe6e 	bl	800035c <__adddf3>
 800f680:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f684:	4604      	mov	r4, r0
 800f686:	460d      	mov	r5, r1
 800f688:	f7f1 faae 	bl	8000be8 <__aeabi_dcmpgt>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	f040 80f9 	bne.w	800f884 <_dtoa_r+0x6bc>
 800f692:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f696:	4620      	mov	r0, r4
 800f698:	4629      	mov	r1, r5
 800f69a:	f7f1 fa7d 	bl	8000b98 <__aeabi_dcmpeq>
 800f69e:	b118      	cbz	r0, 800f6a8 <_dtoa_r+0x4e0>
 800f6a0:	f018 0f01 	tst.w	r8, #1
 800f6a4:	f040 80ee 	bne.w	800f884 <_dtoa_r+0x6bc>
 800f6a8:	4649      	mov	r1, r9
 800f6aa:	4658      	mov	r0, fp
 800f6ac:	f000 fc90 	bl	800ffd0 <_Bfree>
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	7033      	strb	r3, [r6, #0]
 800f6b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f6b6:	3701      	adds	r7, #1
 800f6b8:	601f      	str	r7, [r3, #0]
 800f6ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	f000 831d 	beq.w	800fcfc <_dtoa_r+0xb34>
 800f6c2:	601e      	str	r6, [r3, #0]
 800f6c4:	e31a      	b.n	800fcfc <_dtoa_r+0xb34>
 800f6c6:	07e2      	lsls	r2, r4, #31
 800f6c8:	d505      	bpl.n	800f6d6 <_dtoa_r+0x50e>
 800f6ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f6ce:	f7f0 fffb 	bl	80006c8 <__aeabi_dmul>
 800f6d2:	3601      	adds	r6, #1
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	1064      	asrs	r4, r4, #1
 800f6d8:	3508      	adds	r5, #8
 800f6da:	e73f      	b.n	800f55c <_dtoa_r+0x394>
 800f6dc:	2602      	movs	r6, #2
 800f6de:	e742      	b.n	800f566 <_dtoa_r+0x39e>
 800f6e0:	9c07      	ldr	r4, [sp, #28]
 800f6e2:	9704      	str	r7, [sp, #16]
 800f6e4:	e761      	b.n	800f5aa <_dtoa_r+0x3e2>
 800f6e6:	4b27      	ldr	r3, [pc, #156]	@ (800f784 <_dtoa_r+0x5bc>)
 800f6e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f6ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f6ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f6f2:	4454      	add	r4, sl
 800f6f4:	2900      	cmp	r1, #0
 800f6f6:	d053      	beq.n	800f7a0 <_dtoa_r+0x5d8>
 800f6f8:	4928      	ldr	r1, [pc, #160]	@ (800f79c <_dtoa_r+0x5d4>)
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	f7f1 f90e 	bl	800091c <__aeabi_ddiv>
 800f700:	4633      	mov	r3, r6
 800f702:	462a      	mov	r2, r5
 800f704:	f7f0 fe28 	bl	8000358 <__aeabi_dsub>
 800f708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f70c:	4656      	mov	r6, sl
 800f70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f712:	f7f1 fa89 	bl	8000c28 <__aeabi_d2iz>
 800f716:	4605      	mov	r5, r0
 800f718:	f7f0 ff6c 	bl	80005f4 <__aeabi_i2d>
 800f71c:	4602      	mov	r2, r0
 800f71e:	460b      	mov	r3, r1
 800f720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f724:	f7f0 fe18 	bl	8000358 <__aeabi_dsub>
 800f728:	3530      	adds	r5, #48	@ 0x30
 800f72a:	4602      	mov	r2, r0
 800f72c:	460b      	mov	r3, r1
 800f72e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f732:	f806 5b01 	strb.w	r5, [r6], #1
 800f736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f73a:	f7f1 fa37 	bl	8000bac <__aeabi_dcmplt>
 800f73e:	2800      	cmp	r0, #0
 800f740:	d171      	bne.n	800f826 <_dtoa_r+0x65e>
 800f742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f746:	4911      	ldr	r1, [pc, #68]	@ (800f78c <_dtoa_r+0x5c4>)
 800f748:	2000      	movs	r0, #0
 800f74a:	f7f0 fe05 	bl	8000358 <__aeabi_dsub>
 800f74e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f752:	f7f1 fa2b 	bl	8000bac <__aeabi_dcmplt>
 800f756:	2800      	cmp	r0, #0
 800f758:	f040 8095 	bne.w	800f886 <_dtoa_r+0x6be>
 800f75c:	42a6      	cmp	r6, r4
 800f75e:	f43f af50 	beq.w	800f602 <_dtoa_r+0x43a>
 800f762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f766:	4b0a      	ldr	r3, [pc, #40]	@ (800f790 <_dtoa_r+0x5c8>)
 800f768:	2200      	movs	r2, #0
 800f76a:	f7f0 ffad 	bl	80006c8 <__aeabi_dmul>
 800f76e:	4b08      	ldr	r3, [pc, #32]	@ (800f790 <_dtoa_r+0x5c8>)
 800f770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f774:	2200      	movs	r2, #0
 800f776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f77a:	f7f0 ffa5 	bl	80006c8 <__aeabi_dmul>
 800f77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f782:	e7c4      	b.n	800f70e <_dtoa_r+0x546>
 800f784:	080264d8 	.word	0x080264d8
 800f788:	080264b0 	.word	0x080264b0
 800f78c:	3ff00000 	.word	0x3ff00000
 800f790:	40240000 	.word	0x40240000
 800f794:	401c0000 	.word	0x401c0000
 800f798:	40140000 	.word	0x40140000
 800f79c:	3fe00000 	.word	0x3fe00000
 800f7a0:	4631      	mov	r1, r6
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	f7f0 ff90 	bl	80006c8 <__aeabi_dmul>
 800f7a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f7ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800f7ae:	4656      	mov	r6, sl
 800f7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7b4:	f7f1 fa38 	bl	8000c28 <__aeabi_d2iz>
 800f7b8:	4605      	mov	r5, r0
 800f7ba:	f7f0 ff1b 	bl	80005f4 <__aeabi_i2d>
 800f7be:	4602      	mov	r2, r0
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7c6:	f7f0 fdc7 	bl	8000358 <__aeabi_dsub>
 800f7ca:	3530      	adds	r5, #48	@ 0x30
 800f7cc:	f806 5b01 	strb.w	r5, [r6], #1
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	42a6      	cmp	r6, r4
 800f7d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f7da:	f04f 0200 	mov.w	r2, #0
 800f7de:	d124      	bne.n	800f82a <_dtoa_r+0x662>
 800f7e0:	4bac      	ldr	r3, [pc, #688]	@ (800fa94 <_dtoa_r+0x8cc>)
 800f7e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f7e6:	f7f0 fdb9 	bl	800035c <__adddf3>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7f2:	f7f1 f9f9 	bl	8000be8 <__aeabi_dcmpgt>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d145      	bne.n	800f886 <_dtoa_r+0x6be>
 800f7fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f7fe:	49a5      	ldr	r1, [pc, #660]	@ (800fa94 <_dtoa_r+0x8cc>)
 800f800:	2000      	movs	r0, #0
 800f802:	f7f0 fda9 	bl	8000358 <__aeabi_dsub>
 800f806:	4602      	mov	r2, r0
 800f808:	460b      	mov	r3, r1
 800f80a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f80e:	f7f1 f9cd 	bl	8000bac <__aeabi_dcmplt>
 800f812:	2800      	cmp	r0, #0
 800f814:	f43f aef5 	beq.w	800f602 <_dtoa_r+0x43a>
 800f818:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f81a:	1e73      	subs	r3, r6, #1
 800f81c:	9315      	str	r3, [sp, #84]	@ 0x54
 800f81e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f822:	2b30      	cmp	r3, #48	@ 0x30
 800f824:	d0f8      	beq.n	800f818 <_dtoa_r+0x650>
 800f826:	9f04      	ldr	r7, [sp, #16]
 800f828:	e73e      	b.n	800f6a8 <_dtoa_r+0x4e0>
 800f82a:	4b9b      	ldr	r3, [pc, #620]	@ (800fa98 <_dtoa_r+0x8d0>)
 800f82c:	f7f0 ff4c 	bl	80006c8 <__aeabi_dmul>
 800f830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f834:	e7bc      	b.n	800f7b0 <_dtoa_r+0x5e8>
 800f836:	d10c      	bne.n	800f852 <_dtoa_r+0x68a>
 800f838:	4b98      	ldr	r3, [pc, #608]	@ (800fa9c <_dtoa_r+0x8d4>)
 800f83a:	2200      	movs	r2, #0
 800f83c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f840:	f7f0 ff42 	bl	80006c8 <__aeabi_dmul>
 800f844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f848:	f7f1 f9c4 	bl	8000bd4 <__aeabi_dcmpge>
 800f84c:	2800      	cmp	r0, #0
 800f84e:	f000 8157 	beq.w	800fb00 <_dtoa_r+0x938>
 800f852:	2400      	movs	r4, #0
 800f854:	4625      	mov	r5, r4
 800f856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f858:	43db      	mvns	r3, r3
 800f85a:	9304      	str	r3, [sp, #16]
 800f85c:	4656      	mov	r6, sl
 800f85e:	2700      	movs	r7, #0
 800f860:	4621      	mov	r1, r4
 800f862:	4658      	mov	r0, fp
 800f864:	f000 fbb4 	bl	800ffd0 <_Bfree>
 800f868:	2d00      	cmp	r5, #0
 800f86a:	d0dc      	beq.n	800f826 <_dtoa_r+0x65e>
 800f86c:	b12f      	cbz	r7, 800f87a <_dtoa_r+0x6b2>
 800f86e:	42af      	cmp	r7, r5
 800f870:	d003      	beq.n	800f87a <_dtoa_r+0x6b2>
 800f872:	4639      	mov	r1, r7
 800f874:	4658      	mov	r0, fp
 800f876:	f000 fbab 	bl	800ffd0 <_Bfree>
 800f87a:	4629      	mov	r1, r5
 800f87c:	4658      	mov	r0, fp
 800f87e:	f000 fba7 	bl	800ffd0 <_Bfree>
 800f882:	e7d0      	b.n	800f826 <_dtoa_r+0x65e>
 800f884:	9704      	str	r7, [sp, #16]
 800f886:	4633      	mov	r3, r6
 800f888:	461e      	mov	r6, r3
 800f88a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f88e:	2a39      	cmp	r2, #57	@ 0x39
 800f890:	d107      	bne.n	800f8a2 <_dtoa_r+0x6da>
 800f892:	459a      	cmp	sl, r3
 800f894:	d1f8      	bne.n	800f888 <_dtoa_r+0x6c0>
 800f896:	9a04      	ldr	r2, [sp, #16]
 800f898:	3201      	adds	r2, #1
 800f89a:	9204      	str	r2, [sp, #16]
 800f89c:	2230      	movs	r2, #48	@ 0x30
 800f89e:	f88a 2000 	strb.w	r2, [sl]
 800f8a2:	781a      	ldrb	r2, [r3, #0]
 800f8a4:	3201      	adds	r2, #1
 800f8a6:	701a      	strb	r2, [r3, #0]
 800f8a8:	e7bd      	b.n	800f826 <_dtoa_r+0x65e>
 800f8aa:	4b7b      	ldr	r3, [pc, #492]	@ (800fa98 <_dtoa_r+0x8d0>)
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	f7f0 ff0b 	bl	80006c8 <__aeabi_dmul>
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	460d      	mov	r5, r1
 800f8ba:	f7f1 f96d 	bl	8000b98 <__aeabi_dcmpeq>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	f43f aebb 	beq.w	800f63a <_dtoa_r+0x472>
 800f8c4:	e6f0      	b.n	800f6a8 <_dtoa_r+0x4e0>
 800f8c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f8c8:	2a00      	cmp	r2, #0
 800f8ca:	f000 80db 	beq.w	800fa84 <_dtoa_r+0x8bc>
 800f8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8d0:	2a01      	cmp	r2, #1
 800f8d2:	f300 80bf 	bgt.w	800fa54 <_dtoa_r+0x88c>
 800f8d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f8d8:	2a00      	cmp	r2, #0
 800f8da:	f000 80b7 	beq.w	800fa4c <_dtoa_r+0x884>
 800f8de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f8e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f8e4:	4646      	mov	r6, r8
 800f8e6:	9a08      	ldr	r2, [sp, #32]
 800f8e8:	2101      	movs	r1, #1
 800f8ea:	441a      	add	r2, r3
 800f8ec:	4658      	mov	r0, fp
 800f8ee:	4498      	add	r8, r3
 800f8f0:	9208      	str	r2, [sp, #32]
 800f8f2:	f000 fc6b 	bl	80101cc <__i2b>
 800f8f6:	4605      	mov	r5, r0
 800f8f8:	b15e      	cbz	r6, 800f912 <_dtoa_r+0x74a>
 800f8fa:	9b08      	ldr	r3, [sp, #32]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	dd08      	ble.n	800f912 <_dtoa_r+0x74a>
 800f900:	42b3      	cmp	r3, r6
 800f902:	9a08      	ldr	r2, [sp, #32]
 800f904:	bfa8      	it	ge
 800f906:	4633      	movge	r3, r6
 800f908:	eba8 0803 	sub.w	r8, r8, r3
 800f90c:	1af6      	subs	r6, r6, r3
 800f90e:	1ad3      	subs	r3, r2, r3
 800f910:	9308      	str	r3, [sp, #32]
 800f912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f914:	b1f3      	cbz	r3, 800f954 <_dtoa_r+0x78c>
 800f916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f918:	2b00      	cmp	r3, #0
 800f91a:	f000 80b7 	beq.w	800fa8c <_dtoa_r+0x8c4>
 800f91e:	b18c      	cbz	r4, 800f944 <_dtoa_r+0x77c>
 800f920:	4629      	mov	r1, r5
 800f922:	4622      	mov	r2, r4
 800f924:	4658      	mov	r0, fp
 800f926:	f000 fd11 	bl	801034c <__pow5mult>
 800f92a:	464a      	mov	r2, r9
 800f92c:	4601      	mov	r1, r0
 800f92e:	4605      	mov	r5, r0
 800f930:	4658      	mov	r0, fp
 800f932:	f000 fc61 	bl	80101f8 <__multiply>
 800f936:	4649      	mov	r1, r9
 800f938:	9004      	str	r0, [sp, #16]
 800f93a:	4658      	mov	r0, fp
 800f93c:	f000 fb48 	bl	800ffd0 <_Bfree>
 800f940:	9b04      	ldr	r3, [sp, #16]
 800f942:	4699      	mov	r9, r3
 800f944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f946:	1b1a      	subs	r2, r3, r4
 800f948:	d004      	beq.n	800f954 <_dtoa_r+0x78c>
 800f94a:	4649      	mov	r1, r9
 800f94c:	4658      	mov	r0, fp
 800f94e:	f000 fcfd 	bl	801034c <__pow5mult>
 800f952:	4681      	mov	r9, r0
 800f954:	2101      	movs	r1, #1
 800f956:	4658      	mov	r0, fp
 800f958:	f000 fc38 	bl	80101cc <__i2b>
 800f95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f95e:	4604      	mov	r4, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	f000 81cf 	beq.w	800fd04 <_dtoa_r+0xb3c>
 800f966:	461a      	mov	r2, r3
 800f968:	4601      	mov	r1, r0
 800f96a:	4658      	mov	r0, fp
 800f96c:	f000 fcee 	bl	801034c <__pow5mult>
 800f970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f972:	2b01      	cmp	r3, #1
 800f974:	4604      	mov	r4, r0
 800f976:	f300 8095 	bgt.w	800faa4 <_dtoa_r+0x8dc>
 800f97a:	9b02      	ldr	r3, [sp, #8]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	f040 8087 	bne.w	800fa90 <_dtoa_r+0x8c8>
 800f982:	9b03      	ldr	r3, [sp, #12]
 800f984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f988:	2b00      	cmp	r3, #0
 800f98a:	f040 8089 	bne.w	800faa0 <_dtoa_r+0x8d8>
 800f98e:	9b03      	ldr	r3, [sp, #12]
 800f990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f994:	0d1b      	lsrs	r3, r3, #20
 800f996:	051b      	lsls	r3, r3, #20
 800f998:	b12b      	cbz	r3, 800f9a6 <_dtoa_r+0x7de>
 800f99a:	9b08      	ldr	r3, [sp, #32]
 800f99c:	3301      	adds	r3, #1
 800f99e:	9308      	str	r3, [sp, #32]
 800f9a0:	f108 0801 	add.w	r8, r8, #1
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	f000 81b0 	beq.w	800fd10 <_dtoa_r+0xb48>
 800f9b0:	6923      	ldr	r3, [r4, #16]
 800f9b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f9b6:	6918      	ldr	r0, [r3, #16]
 800f9b8:	f000 fbbc 	bl	8010134 <__hi0bits>
 800f9bc:	f1c0 0020 	rsb	r0, r0, #32
 800f9c0:	9b08      	ldr	r3, [sp, #32]
 800f9c2:	4418      	add	r0, r3
 800f9c4:	f010 001f 	ands.w	r0, r0, #31
 800f9c8:	d077      	beq.n	800faba <_dtoa_r+0x8f2>
 800f9ca:	f1c0 0320 	rsb	r3, r0, #32
 800f9ce:	2b04      	cmp	r3, #4
 800f9d0:	dd6b      	ble.n	800faaa <_dtoa_r+0x8e2>
 800f9d2:	9b08      	ldr	r3, [sp, #32]
 800f9d4:	f1c0 001c 	rsb	r0, r0, #28
 800f9d8:	4403      	add	r3, r0
 800f9da:	4480      	add	r8, r0
 800f9dc:	4406      	add	r6, r0
 800f9de:	9308      	str	r3, [sp, #32]
 800f9e0:	f1b8 0f00 	cmp.w	r8, #0
 800f9e4:	dd05      	ble.n	800f9f2 <_dtoa_r+0x82a>
 800f9e6:	4649      	mov	r1, r9
 800f9e8:	4642      	mov	r2, r8
 800f9ea:	4658      	mov	r0, fp
 800f9ec:	f000 fd08 	bl	8010400 <__lshift>
 800f9f0:	4681      	mov	r9, r0
 800f9f2:	9b08      	ldr	r3, [sp, #32]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	dd05      	ble.n	800fa04 <_dtoa_r+0x83c>
 800f9f8:	4621      	mov	r1, r4
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	4658      	mov	r0, fp
 800f9fe:	f000 fcff 	bl	8010400 <__lshift>
 800fa02:	4604      	mov	r4, r0
 800fa04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d059      	beq.n	800fabe <_dtoa_r+0x8f6>
 800fa0a:	4621      	mov	r1, r4
 800fa0c:	4648      	mov	r0, r9
 800fa0e:	f000 fd63 	bl	80104d8 <__mcmp>
 800fa12:	2800      	cmp	r0, #0
 800fa14:	da53      	bge.n	800fabe <_dtoa_r+0x8f6>
 800fa16:	1e7b      	subs	r3, r7, #1
 800fa18:	9304      	str	r3, [sp, #16]
 800fa1a:	4649      	mov	r1, r9
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	220a      	movs	r2, #10
 800fa20:	4658      	mov	r0, fp
 800fa22:	f000 faf7 	bl	8010014 <__multadd>
 800fa26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa28:	4681      	mov	r9, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f000 8172 	beq.w	800fd14 <_dtoa_r+0xb4c>
 800fa30:	2300      	movs	r3, #0
 800fa32:	4629      	mov	r1, r5
 800fa34:	220a      	movs	r2, #10
 800fa36:	4658      	mov	r0, fp
 800fa38:	f000 faec 	bl	8010014 <__multadd>
 800fa3c:	9b00      	ldr	r3, [sp, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	4605      	mov	r5, r0
 800fa42:	dc67      	bgt.n	800fb14 <_dtoa_r+0x94c>
 800fa44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa46:	2b02      	cmp	r3, #2
 800fa48:	dc41      	bgt.n	800face <_dtoa_r+0x906>
 800fa4a:	e063      	b.n	800fb14 <_dtoa_r+0x94c>
 800fa4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fa4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fa52:	e746      	b.n	800f8e2 <_dtoa_r+0x71a>
 800fa54:	9b07      	ldr	r3, [sp, #28]
 800fa56:	1e5c      	subs	r4, r3, #1
 800fa58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa5a:	42a3      	cmp	r3, r4
 800fa5c:	bfbf      	itttt	lt
 800fa5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fa60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fa62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fa64:	1ae3      	sublt	r3, r4, r3
 800fa66:	bfb4      	ite	lt
 800fa68:	18d2      	addlt	r2, r2, r3
 800fa6a:	1b1c      	subge	r4, r3, r4
 800fa6c:	9b07      	ldr	r3, [sp, #28]
 800fa6e:	bfbc      	itt	lt
 800fa70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fa72:	2400      	movlt	r4, #0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	bfb5      	itete	lt
 800fa78:	eba8 0603 	sublt.w	r6, r8, r3
 800fa7c:	9b07      	ldrge	r3, [sp, #28]
 800fa7e:	2300      	movlt	r3, #0
 800fa80:	4646      	movge	r6, r8
 800fa82:	e730      	b.n	800f8e6 <_dtoa_r+0x71e>
 800fa84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fa86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fa88:	4646      	mov	r6, r8
 800fa8a:	e735      	b.n	800f8f8 <_dtoa_r+0x730>
 800fa8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa8e:	e75c      	b.n	800f94a <_dtoa_r+0x782>
 800fa90:	2300      	movs	r3, #0
 800fa92:	e788      	b.n	800f9a6 <_dtoa_r+0x7de>
 800fa94:	3fe00000 	.word	0x3fe00000
 800fa98:	40240000 	.word	0x40240000
 800fa9c:	40140000 	.word	0x40140000
 800faa0:	9b02      	ldr	r3, [sp, #8]
 800faa2:	e780      	b.n	800f9a6 <_dtoa_r+0x7de>
 800faa4:	2300      	movs	r3, #0
 800faa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800faa8:	e782      	b.n	800f9b0 <_dtoa_r+0x7e8>
 800faaa:	d099      	beq.n	800f9e0 <_dtoa_r+0x818>
 800faac:	9a08      	ldr	r2, [sp, #32]
 800faae:	331c      	adds	r3, #28
 800fab0:	441a      	add	r2, r3
 800fab2:	4498      	add	r8, r3
 800fab4:	441e      	add	r6, r3
 800fab6:	9208      	str	r2, [sp, #32]
 800fab8:	e792      	b.n	800f9e0 <_dtoa_r+0x818>
 800faba:	4603      	mov	r3, r0
 800fabc:	e7f6      	b.n	800faac <_dtoa_r+0x8e4>
 800fabe:	9b07      	ldr	r3, [sp, #28]
 800fac0:	9704      	str	r7, [sp, #16]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	dc20      	bgt.n	800fb08 <_dtoa_r+0x940>
 800fac6:	9300      	str	r3, [sp, #0]
 800fac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faca:	2b02      	cmp	r3, #2
 800facc:	dd1e      	ble.n	800fb0c <_dtoa_r+0x944>
 800face:	9b00      	ldr	r3, [sp, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	f47f aec0 	bne.w	800f856 <_dtoa_r+0x68e>
 800fad6:	4621      	mov	r1, r4
 800fad8:	2205      	movs	r2, #5
 800fada:	4658      	mov	r0, fp
 800fadc:	f000 fa9a 	bl	8010014 <__multadd>
 800fae0:	4601      	mov	r1, r0
 800fae2:	4604      	mov	r4, r0
 800fae4:	4648      	mov	r0, r9
 800fae6:	f000 fcf7 	bl	80104d8 <__mcmp>
 800faea:	2800      	cmp	r0, #0
 800faec:	f77f aeb3 	ble.w	800f856 <_dtoa_r+0x68e>
 800faf0:	4656      	mov	r6, sl
 800faf2:	2331      	movs	r3, #49	@ 0x31
 800faf4:	f806 3b01 	strb.w	r3, [r6], #1
 800faf8:	9b04      	ldr	r3, [sp, #16]
 800fafa:	3301      	adds	r3, #1
 800fafc:	9304      	str	r3, [sp, #16]
 800fafe:	e6ae      	b.n	800f85e <_dtoa_r+0x696>
 800fb00:	9c07      	ldr	r4, [sp, #28]
 800fb02:	9704      	str	r7, [sp, #16]
 800fb04:	4625      	mov	r5, r4
 800fb06:	e7f3      	b.n	800faf0 <_dtoa_r+0x928>
 800fb08:	9b07      	ldr	r3, [sp, #28]
 800fb0a:	9300      	str	r3, [sp, #0]
 800fb0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	f000 8104 	beq.w	800fd1c <_dtoa_r+0xb54>
 800fb14:	2e00      	cmp	r6, #0
 800fb16:	dd05      	ble.n	800fb24 <_dtoa_r+0x95c>
 800fb18:	4629      	mov	r1, r5
 800fb1a:	4632      	mov	r2, r6
 800fb1c:	4658      	mov	r0, fp
 800fb1e:	f000 fc6f 	bl	8010400 <__lshift>
 800fb22:	4605      	mov	r5, r0
 800fb24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d05a      	beq.n	800fbe0 <_dtoa_r+0xa18>
 800fb2a:	6869      	ldr	r1, [r5, #4]
 800fb2c:	4658      	mov	r0, fp
 800fb2e:	f000 fa0f 	bl	800ff50 <_Balloc>
 800fb32:	4606      	mov	r6, r0
 800fb34:	b928      	cbnz	r0, 800fb42 <_dtoa_r+0x97a>
 800fb36:	4b84      	ldr	r3, [pc, #528]	@ (800fd48 <_dtoa_r+0xb80>)
 800fb38:	4602      	mov	r2, r0
 800fb3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fb3e:	f7ff bb5a 	b.w	800f1f6 <_dtoa_r+0x2e>
 800fb42:	692a      	ldr	r2, [r5, #16]
 800fb44:	3202      	adds	r2, #2
 800fb46:	0092      	lsls	r2, r2, #2
 800fb48:	f105 010c 	add.w	r1, r5, #12
 800fb4c:	300c      	adds	r0, #12
 800fb4e:	f7ff fa9c 	bl	800f08a <memcpy>
 800fb52:	2201      	movs	r2, #1
 800fb54:	4631      	mov	r1, r6
 800fb56:	4658      	mov	r0, fp
 800fb58:	f000 fc52 	bl	8010400 <__lshift>
 800fb5c:	f10a 0301 	add.w	r3, sl, #1
 800fb60:	9307      	str	r3, [sp, #28]
 800fb62:	9b00      	ldr	r3, [sp, #0]
 800fb64:	4453      	add	r3, sl
 800fb66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb68:	9b02      	ldr	r3, [sp, #8]
 800fb6a:	f003 0301 	and.w	r3, r3, #1
 800fb6e:	462f      	mov	r7, r5
 800fb70:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb72:	4605      	mov	r5, r0
 800fb74:	9b07      	ldr	r3, [sp, #28]
 800fb76:	4621      	mov	r1, r4
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	4648      	mov	r0, r9
 800fb7c:	9300      	str	r3, [sp, #0]
 800fb7e:	f7ff fa99 	bl	800f0b4 <quorem>
 800fb82:	4639      	mov	r1, r7
 800fb84:	9002      	str	r0, [sp, #8]
 800fb86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fb8a:	4648      	mov	r0, r9
 800fb8c:	f000 fca4 	bl	80104d8 <__mcmp>
 800fb90:	462a      	mov	r2, r5
 800fb92:	9008      	str	r0, [sp, #32]
 800fb94:	4621      	mov	r1, r4
 800fb96:	4658      	mov	r0, fp
 800fb98:	f000 fcba 	bl	8010510 <__mdiff>
 800fb9c:	68c2      	ldr	r2, [r0, #12]
 800fb9e:	4606      	mov	r6, r0
 800fba0:	bb02      	cbnz	r2, 800fbe4 <_dtoa_r+0xa1c>
 800fba2:	4601      	mov	r1, r0
 800fba4:	4648      	mov	r0, r9
 800fba6:	f000 fc97 	bl	80104d8 <__mcmp>
 800fbaa:	4602      	mov	r2, r0
 800fbac:	4631      	mov	r1, r6
 800fbae:	4658      	mov	r0, fp
 800fbb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800fbb2:	f000 fa0d 	bl	800ffd0 <_Bfree>
 800fbb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbba:	9e07      	ldr	r6, [sp, #28]
 800fbbc:	ea43 0102 	orr.w	r1, r3, r2
 800fbc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbc2:	4319      	orrs	r1, r3
 800fbc4:	d110      	bne.n	800fbe8 <_dtoa_r+0xa20>
 800fbc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fbca:	d029      	beq.n	800fc20 <_dtoa_r+0xa58>
 800fbcc:	9b08      	ldr	r3, [sp, #32]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	dd02      	ble.n	800fbd8 <_dtoa_r+0xa10>
 800fbd2:	9b02      	ldr	r3, [sp, #8]
 800fbd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fbd8:	9b00      	ldr	r3, [sp, #0]
 800fbda:	f883 8000 	strb.w	r8, [r3]
 800fbde:	e63f      	b.n	800f860 <_dtoa_r+0x698>
 800fbe0:	4628      	mov	r0, r5
 800fbe2:	e7bb      	b.n	800fb5c <_dtoa_r+0x994>
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	e7e1      	b.n	800fbac <_dtoa_r+0x9e4>
 800fbe8:	9b08      	ldr	r3, [sp, #32]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	db04      	blt.n	800fbf8 <_dtoa_r+0xa30>
 800fbee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fbf0:	430b      	orrs	r3, r1
 800fbf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fbf4:	430b      	orrs	r3, r1
 800fbf6:	d120      	bne.n	800fc3a <_dtoa_r+0xa72>
 800fbf8:	2a00      	cmp	r2, #0
 800fbfa:	dded      	ble.n	800fbd8 <_dtoa_r+0xa10>
 800fbfc:	4649      	mov	r1, r9
 800fbfe:	2201      	movs	r2, #1
 800fc00:	4658      	mov	r0, fp
 800fc02:	f000 fbfd 	bl	8010400 <__lshift>
 800fc06:	4621      	mov	r1, r4
 800fc08:	4681      	mov	r9, r0
 800fc0a:	f000 fc65 	bl	80104d8 <__mcmp>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	dc03      	bgt.n	800fc1a <_dtoa_r+0xa52>
 800fc12:	d1e1      	bne.n	800fbd8 <_dtoa_r+0xa10>
 800fc14:	f018 0f01 	tst.w	r8, #1
 800fc18:	d0de      	beq.n	800fbd8 <_dtoa_r+0xa10>
 800fc1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fc1e:	d1d8      	bne.n	800fbd2 <_dtoa_r+0xa0a>
 800fc20:	9a00      	ldr	r2, [sp, #0]
 800fc22:	2339      	movs	r3, #57	@ 0x39
 800fc24:	7013      	strb	r3, [r2, #0]
 800fc26:	4633      	mov	r3, r6
 800fc28:	461e      	mov	r6, r3
 800fc2a:	3b01      	subs	r3, #1
 800fc2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fc30:	2a39      	cmp	r2, #57	@ 0x39
 800fc32:	d052      	beq.n	800fcda <_dtoa_r+0xb12>
 800fc34:	3201      	adds	r2, #1
 800fc36:	701a      	strb	r2, [r3, #0]
 800fc38:	e612      	b.n	800f860 <_dtoa_r+0x698>
 800fc3a:	2a00      	cmp	r2, #0
 800fc3c:	dd07      	ble.n	800fc4e <_dtoa_r+0xa86>
 800fc3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fc42:	d0ed      	beq.n	800fc20 <_dtoa_r+0xa58>
 800fc44:	9a00      	ldr	r2, [sp, #0]
 800fc46:	f108 0301 	add.w	r3, r8, #1
 800fc4a:	7013      	strb	r3, [r2, #0]
 800fc4c:	e608      	b.n	800f860 <_dtoa_r+0x698>
 800fc4e:	9b07      	ldr	r3, [sp, #28]
 800fc50:	9a07      	ldr	r2, [sp, #28]
 800fc52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fc56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d028      	beq.n	800fcae <_dtoa_r+0xae6>
 800fc5c:	4649      	mov	r1, r9
 800fc5e:	2300      	movs	r3, #0
 800fc60:	220a      	movs	r2, #10
 800fc62:	4658      	mov	r0, fp
 800fc64:	f000 f9d6 	bl	8010014 <__multadd>
 800fc68:	42af      	cmp	r7, r5
 800fc6a:	4681      	mov	r9, r0
 800fc6c:	f04f 0300 	mov.w	r3, #0
 800fc70:	f04f 020a 	mov.w	r2, #10
 800fc74:	4639      	mov	r1, r7
 800fc76:	4658      	mov	r0, fp
 800fc78:	d107      	bne.n	800fc8a <_dtoa_r+0xac2>
 800fc7a:	f000 f9cb 	bl	8010014 <__multadd>
 800fc7e:	4607      	mov	r7, r0
 800fc80:	4605      	mov	r5, r0
 800fc82:	9b07      	ldr	r3, [sp, #28]
 800fc84:	3301      	adds	r3, #1
 800fc86:	9307      	str	r3, [sp, #28]
 800fc88:	e774      	b.n	800fb74 <_dtoa_r+0x9ac>
 800fc8a:	f000 f9c3 	bl	8010014 <__multadd>
 800fc8e:	4629      	mov	r1, r5
 800fc90:	4607      	mov	r7, r0
 800fc92:	2300      	movs	r3, #0
 800fc94:	220a      	movs	r2, #10
 800fc96:	4658      	mov	r0, fp
 800fc98:	f000 f9bc 	bl	8010014 <__multadd>
 800fc9c:	4605      	mov	r5, r0
 800fc9e:	e7f0      	b.n	800fc82 <_dtoa_r+0xaba>
 800fca0:	9b00      	ldr	r3, [sp, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	bfcc      	ite	gt
 800fca6:	461e      	movgt	r6, r3
 800fca8:	2601      	movle	r6, #1
 800fcaa:	4456      	add	r6, sl
 800fcac:	2700      	movs	r7, #0
 800fcae:	4649      	mov	r1, r9
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	4658      	mov	r0, fp
 800fcb4:	f000 fba4 	bl	8010400 <__lshift>
 800fcb8:	4621      	mov	r1, r4
 800fcba:	4681      	mov	r9, r0
 800fcbc:	f000 fc0c 	bl	80104d8 <__mcmp>
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	dcb0      	bgt.n	800fc26 <_dtoa_r+0xa5e>
 800fcc4:	d102      	bne.n	800fccc <_dtoa_r+0xb04>
 800fcc6:	f018 0f01 	tst.w	r8, #1
 800fcca:	d1ac      	bne.n	800fc26 <_dtoa_r+0xa5e>
 800fccc:	4633      	mov	r3, r6
 800fcce:	461e      	mov	r6, r3
 800fcd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcd4:	2a30      	cmp	r2, #48	@ 0x30
 800fcd6:	d0fa      	beq.n	800fcce <_dtoa_r+0xb06>
 800fcd8:	e5c2      	b.n	800f860 <_dtoa_r+0x698>
 800fcda:	459a      	cmp	sl, r3
 800fcdc:	d1a4      	bne.n	800fc28 <_dtoa_r+0xa60>
 800fcde:	9b04      	ldr	r3, [sp, #16]
 800fce0:	3301      	adds	r3, #1
 800fce2:	9304      	str	r3, [sp, #16]
 800fce4:	2331      	movs	r3, #49	@ 0x31
 800fce6:	f88a 3000 	strb.w	r3, [sl]
 800fcea:	e5b9      	b.n	800f860 <_dtoa_r+0x698>
 800fcec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fcee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fd4c <_dtoa_r+0xb84>
 800fcf2:	b11b      	cbz	r3, 800fcfc <_dtoa_r+0xb34>
 800fcf4:	f10a 0308 	add.w	r3, sl, #8
 800fcf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fcfa:	6013      	str	r3, [r2, #0]
 800fcfc:	4650      	mov	r0, sl
 800fcfe:	b019      	add	sp, #100	@ 0x64
 800fd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	f77f ae37 	ble.w	800f97a <_dtoa_r+0x7b2>
 800fd0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd10:	2001      	movs	r0, #1
 800fd12:	e655      	b.n	800f9c0 <_dtoa_r+0x7f8>
 800fd14:	9b00      	ldr	r3, [sp, #0]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	f77f aed6 	ble.w	800fac8 <_dtoa_r+0x900>
 800fd1c:	4656      	mov	r6, sl
 800fd1e:	4621      	mov	r1, r4
 800fd20:	4648      	mov	r0, r9
 800fd22:	f7ff f9c7 	bl	800f0b4 <quorem>
 800fd26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fd2a:	f806 8b01 	strb.w	r8, [r6], #1
 800fd2e:	9b00      	ldr	r3, [sp, #0]
 800fd30:	eba6 020a 	sub.w	r2, r6, sl
 800fd34:	4293      	cmp	r3, r2
 800fd36:	ddb3      	ble.n	800fca0 <_dtoa_r+0xad8>
 800fd38:	4649      	mov	r1, r9
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	220a      	movs	r2, #10
 800fd3e:	4658      	mov	r0, fp
 800fd40:	f000 f968 	bl	8010014 <__multadd>
 800fd44:	4681      	mov	r9, r0
 800fd46:	e7ea      	b.n	800fd1e <_dtoa_r+0xb56>
 800fd48:	08026435 	.word	0x08026435
 800fd4c:	080263b9 	.word	0x080263b9

0800fd50 <_free_r>:
 800fd50:	b538      	push	{r3, r4, r5, lr}
 800fd52:	4605      	mov	r5, r0
 800fd54:	2900      	cmp	r1, #0
 800fd56:	d041      	beq.n	800fddc <_free_r+0x8c>
 800fd58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd5c:	1f0c      	subs	r4, r1, #4
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	bfb8      	it	lt
 800fd62:	18e4      	addlt	r4, r4, r3
 800fd64:	f000 f8e8 	bl	800ff38 <__malloc_lock>
 800fd68:	4a1d      	ldr	r2, [pc, #116]	@ (800fde0 <_free_r+0x90>)
 800fd6a:	6813      	ldr	r3, [r2, #0]
 800fd6c:	b933      	cbnz	r3, 800fd7c <_free_r+0x2c>
 800fd6e:	6063      	str	r3, [r4, #4]
 800fd70:	6014      	str	r4, [r2, #0]
 800fd72:	4628      	mov	r0, r5
 800fd74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd78:	f000 b8e4 	b.w	800ff44 <__malloc_unlock>
 800fd7c:	42a3      	cmp	r3, r4
 800fd7e:	d908      	bls.n	800fd92 <_free_r+0x42>
 800fd80:	6820      	ldr	r0, [r4, #0]
 800fd82:	1821      	adds	r1, r4, r0
 800fd84:	428b      	cmp	r3, r1
 800fd86:	bf01      	itttt	eq
 800fd88:	6819      	ldreq	r1, [r3, #0]
 800fd8a:	685b      	ldreq	r3, [r3, #4]
 800fd8c:	1809      	addeq	r1, r1, r0
 800fd8e:	6021      	streq	r1, [r4, #0]
 800fd90:	e7ed      	b.n	800fd6e <_free_r+0x1e>
 800fd92:	461a      	mov	r2, r3
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	b10b      	cbz	r3, 800fd9c <_free_r+0x4c>
 800fd98:	42a3      	cmp	r3, r4
 800fd9a:	d9fa      	bls.n	800fd92 <_free_r+0x42>
 800fd9c:	6811      	ldr	r1, [r2, #0]
 800fd9e:	1850      	adds	r0, r2, r1
 800fda0:	42a0      	cmp	r0, r4
 800fda2:	d10b      	bne.n	800fdbc <_free_r+0x6c>
 800fda4:	6820      	ldr	r0, [r4, #0]
 800fda6:	4401      	add	r1, r0
 800fda8:	1850      	adds	r0, r2, r1
 800fdaa:	4283      	cmp	r3, r0
 800fdac:	6011      	str	r1, [r2, #0]
 800fdae:	d1e0      	bne.n	800fd72 <_free_r+0x22>
 800fdb0:	6818      	ldr	r0, [r3, #0]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	6053      	str	r3, [r2, #4]
 800fdb6:	4408      	add	r0, r1
 800fdb8:	6010      	str	r0, [r2, #0]
 800fdba:	e7da      	b.n	800fd72 <_free_r+0x22>
 800fdbc:	d902      	bls.n	800fdc4 <_free_r+0x74>
 800fdbe:	230c      	movs	r3, #12
 800fdc0:	602b      	str	r3, [r5, #0]
 800fdc2:	e7d6      	b.n	800fd72 <_free_r+0x22>
 800fdc4:	6820      	ldr	r0, [r4, #0]
 800fdc6:	1821      	adds	r1, r4, r0
 800fdc8:	428b      	cmp	r3, r1
 800fdca:	bf04      	itt	eq
 800fdcc:	6819      	ldreq	r1, [r3, #0]
 800fdce:	685b      	ldreq	r3, [r3, #4]
 800fdd0:	6063      	str	r3, [r4, #4]
 800fdd2:	bf04      	itt	eq
 800fdd4:	1809      	addeq	r1, r1, r0
 800fdd6:	6021      	streq	r1, [r4, #0]
 800fdd8:	6054      	str	r4, [r2, #4]
 800fdda:	e7ca      	b.n	800fd72 <_free_r+0x22>
 800fddc:	bd38      	pop	{r3, r4, r5, pc}
 800fdde:	bf00      	nop
 800fde0:	2000943c 	.word	0x2000943c

0800fde4 <malloc>:
 800fde4:	4b02      	ldr	r3, [pc, #8]	@ (800fdf0 <malloc+0xc>)
 800fde6:	4601      	mov	r1, r0
 800fde8:	6818      	ldr	r0, [r3, #0]
 800fdea:	f000 b825 	b.w	800fe38 <_malloc_r>
 800fdee:	bf00      	nop
 800fdf0:	20000020 	.word	0x20000020

0800fdf4 <sbrk_aligned>:
 800fdf4:	b570      	push	{r4, r5, r6, lr}
 800fdf6:	4e0f      	ldr	r6, [pc, #60]	@ (800fe34 <sbrk_aligned+0x40>)
 800fdf8:	460c      	mov	r4, r1
 800fdfa:	6831      	ldr	r1, [r6, #0]
 800fdfc:	4605      	mov	r5, r0
 800fdfe:	b911      	cbnz	r1, 800fe06 <sbrk_aligned+0x12>
 800fe00:	f001 fe0c 	bl	8011a1c <_sbrk_r>
 800fe04:	6030      	str	r0, [r6, #0]
 800fe06:	4621      	mov	r1, r4
 800fe08:	4628      	mov	r0, r5
 800fe0a:	f001 fe07 	bl	8011a1c <_sbrk_r>
 800fe0e:	1c43      	adds	r3, r0, #1
 800fe10:	d103      	bne.n	800fe1a <sbrk_aligned+0x26>
 800fe12:	f04f 34ff 	mov.w	r4, #4294967295
 800fe16:	4620      	mov	r0, r4
 800fe18:	bd70      	pop	{r4, r5, r6, pc}
 800fe1a:	1cc4      	adds	r4, r0, #3
 800fe1c:	f024 0403 	bic.w	r4, r4, #3
 800fe20:	42a0      	cmp	r0, r4
 800fe22:	d0f8      	beq.n	800fe16 <sbrk_aligned+0x22>
 800fe24:	1a21      	subs	r1, r4, r0
 800fe26:	4628      	mov	r0, r5
 800fe28:	f001 fdf8 	bl	8011a1c <_sbrk_r>
 800fe2c:	3001      	adds	r0, #1
 800fe2e:	d1f2      	bne.n	800fe16 <sbrk_aligned+0x22>
 800fe30:	e7ef      	b.n	800fe12 <sbrk_aligned+0x1e>
 800fe32:	bf00      	nop
 800fe34:	20009438 	.word	0x20009438

0800fe38 <_malloc_r>:
 800fe38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe3c:	1ccd      	adds	r5, r1, #3
 800fe3e:	f025 0503 	bic.w	r5, r5, #3
 800fe42:	3508      	adds	r5, #8
 800fe44:	2d0c      	cmp	r5, #12
 800fe46:	bf38      	it	cc
 800fe48:	250c      	movcc	r5, #12
 800fe4a:	2d00      	cmp	r5, #0
 800fe4c:	4606      	mov	r6, r0
 800fe4e:	db01      	blt.n	800fe54 <_malloc_r+0x1c>
 800fe50:	42a9      	cmp	r1, r5
 800fe52:	d904      	bls.n	800fe5e <_malloc_r+0x26>
 800fe54:	230c      	movs	r3, #12
 800fe56:	6033      	str	r3, [r6, #0]
 800fe58:	2000      	movs	r0, #0
 800fe5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ff34 <_malloc_r+0xfc>
 800fe62:	f000 f869 	bl	800ff38 <__malloc_lock>
 800fe66:	f8d8 3000 	ldr.w	r3, [r8]
 800fe6a:	461c      	mov	r4, r3
 800fe6c:	bb44      	cbnz	r4, 800fec0 <_malloc_r+0x88>
 800fe6e:	4629      	mov	r1, r5
 800fe70:	4630      	mov	r0, r6
 800fe72:	f7ff ffbf 	bl	800fdf4 <sbrk_aligned>
 800fe76:	1c43      	adds	r3, r0, #1
 800fe78:	4604      	mov	r4, r0
 800fe7a:	d158      	bne.n	800ff2e <_malloc_r+0xf6>
 800fe7c:	f8d8 4000 	ldr.w	r4, [r8]
 800fe80:	4627      	mov	r7, r4
 800fe82:	2f00      	cmp	r7, #0
 800fe84:	d143      	bne.n	800ff0e <_malloc_r+0xd6>
 800fe86:	2c00      	cmp	r4, #0
 800fe88:	d04b      	beq.n	800ff22 <_malloc_r+0xea>
 800fe8a:	6823      	ldr	r3, [r4, #0]
 800fe8c:	4639      	mov	r1, r7
 800fe8e:	4630      	mov	r0, r6
 800fe90:	eb04 0903 	add.w	r9, r4, r3
 800fe94:	f001 fdc2 	bl	8011a1c <_sbrk_r>
 800fe98:	4581      	cmp	r9, r0
 800fe9a:	d142      	bne.n	800ff22 <_malloc_r+0xea>
 800fe9c:	6821      	ldr	r1, [r4, #0]
 800fe9e:	1a6d      	subs	r5, r5, r1
 800fea0:	4629      	mov	r1, r5
 800fea2:	4630      	mov	r0, r6
 800fea4:	f7ff ffa6 	bl	800fdf4 <sbrk_aligned>
 800fea8:	3001      	adds	r0, #1
 800feaa:	d03a      	beq.n	800ff22 <_malloc_r+0xea>
 800feac:	6823      	ldr	r3, [r4, #0]
 800feae:	442b      	add	r3, r5
 800feb0:	6023      	str	r3, [r4, #0]
 800feb2:	f8d8 3000 	ldr.w	r3, [r8]
 800feb6:	685a      	ldr	r2, [r3, #4]
 800feb8:	bb62      	cbnz	r2, 800ff14 <_malloc_r+0xdc>
 800feba:	f8c8 7000 	str.w	r7, [r8]
 800febe:	e00f      	b.n	800fee0 <_malloc_r+0xa8>
 800fec0:	6822      	ldr	r2, [r4, #0]
 800fec2:	1b52      	subs	r2, r2, r5
 800fec4:	d420      	bmi.n	800ff08 <_malloc_r+0xd0>
 800fec6:	2a0b      	cmp	r2, #11
 800fec8:	d917      	bls.n	800fefa <_malloc_r+0xc2>
 800feca:	1961      	adds	r1, r4, r5
 800fecc:	42a3      	cmp	r3, r4
 800fece:	6025      	str	r5, [r4, #0]
 800fed0:	bf18      	it	ne
 800fed2:	6059      	strne	r1, [r3, #4]
 800fed4:	6863      	ldr	r3, [r4, #4]
 800fed6:	bf08      	it	eq
 800fed8:	f8c8 1000 	streq.w	r1, [r8]
 800fedc:	5162      	str	r2, [r4, r5]
 800fede:	604b      	str	r3, [r1, #4]
 800fee0:	4630      	mov	r0, r6
 800fee2:	f000 f82f 	bl	800ff44 <__malloc_unlock>
 800fee6:	f104 000b 	add.w	r0, r4, #11
 800feea:	1d23      	adds	r3, r4, #4
 800feec:	f020 0007 	bic.w	r0, r0, #7
 800fef0:	1ac2      	subs	r2, r0, r3
 800fef2:	bf1c      	itt	ne
 800fef4:	1a1b      	subne	r3, r3, r0
 800fef6:	50a3      	strne	r3, [r4, r2]
 800fef8:	e7af      	b.n	800fe5a <_malloc_r+0x22>
 800fefa:	6862      	ldr	r2, [r4, #4]
 800fefc:	42a3      	cmp	r3, r4
 800fefe:	bf0c      	ite	eq
 800ff00:	f8c8 2000 	streq.w	r2, [r8]
 800ff04:	605a      	strne	r2, [r3, #4]
 800ff06:	e7eb      	b.n	800fee0 <_malloc_r+0xa8>
 800ff08:	4623      	mov	r3, r4
 800ff0a:	6864      	ldr	r4, [r4, #4]
 800ff0c:	e7ae      	b.n	800fe6c <_malloc_r+0x34>
 800ff0e:	463c      	mov	r4, r7
 800ff10:	687f      	ldr	r7, [r7, #4]
 800ff12:	e7b6      	b.n	800fe82 <_malloc_r+0x4a>
 800ff14:	461a      	mov	r2, r3
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	42a3      	cmp	r3, r4
 800ff1a:	d1fb      	bne.n	800ff14 <_malloc_r+0xdc>
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	6053      	str	r3, [r2, #4]
 800ff20:	e7de      	b.n	800fee0 <_malloc_r+0xa8>
 800ff22:	230c      	movs	r3, #12
 800ff24:	6033      	str	r3, [r6, #0]
 800ff26:	4630      	mov	r0, r6
 800ff28:	f000 f80c 	bl	800ff44 <__malloc_unlock>
 800ff2c:	e794      	b.n	800fe58 <_malloc_r+0x20>
 800ff2e:	6005      	str	r5, [r0, #0]
 800ff30:	e7d6      	b.n	800fee0 <_malloc_r+0xa8>
 800ff32:	bf00      	nop
 800ff34:	2000943c 	.word	0x2000943c

0800ff38 <__malloc_lock>:
 800ff38:	4801      	ldr	r0, [pc, #4]	@ (800ff40 <__malloc_lock+0x8>)
 800ff3a:	f7ff b8a4 	b.w	800f086 <__retarget_lock_acquire_recursive>
 800ff3e:	bf00      	nop
 800ff40:	20009434 	.word	0x20009434

0800ff44 <__malloc_unlock>:
 800ff44:	4801      	ldr	r0, [pc, #4]	@ (800ff4c <__malloc_unlock+0x8>)
 800ff46:	f7ff b89f 	b.w	800f088 <__retarget_lock_release_recursive>
 800ff4a:	bf00      	nop
 800ff4c:	20009434 	.word	0x20009434

0800ff50 <_Balloc>:
 800ff50:	b570      	push	{r4, r5, r6, lr}
 800ff52:	69c6      	ldr	r6, [r0, #28]
 800ff54:	4604      	mov	r4, r0
 800ff56:	460d      	mov	r5, r1
 800ff58:	b976      	cbnz	r6, 800ff78 <_Balloc+0x28>
 800ff5a:	2010      	movs	r0, #16
 800ff5c:	f7ff ff42 	bl	800fde4 <malloc>
 800ff60:	4602      	mov	r2, r0
 800ff62:	61e0      	str	r0, [r4, #28]
 800ff64:	b920      	cbnz	r0, 800ff70 <_Balloc+0x20>
 800ff66:	4b18      	ldr	r3, [pc, #96]	@ (800ffc8 <_Balloc+0x78>)
 800ff68:	4818      	ldr	r0, [pc, #96]	@ (800ffcc <_Balloc+0x7c>)
 800ff6a:	216b      	movs	r1, #107	@ 0x6b
 800ff6c:	f001 fd70 	bl	8011a50 <__assert_func>
 800ff70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff74:	6006      	str	r6, [r0, #0]
 800ff76:	60c6      	str	r6, [r0, #12]
 800ff78:	69e6      	ldr	r6, [r4, #28]
 800ff7a:	68f3      	ldr	r3, [r6, #12]
 800ff7c:	b183      	cbz	r3, 800ffa0 <_Balloc+0x50>
 800ff7e:	69e3      	ldr	r3, [r4, #28]
 800ff80:	68db      	ldr	r3, [r3, #12]
 800ff82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff86:	b9b8      	cbnz	r0, 800ffb8 <_Balloc+0x68>
 800ff88:	2101      	movs	r1, #1
 800ff8a:	fa01 f605 	lsl.w	r6, r1, r5
 800ff8e:	1d72      	adds	r2, r6, #5
 800ff90:	0092      	lsls	r2, r2, #2
 800ff92:	4620      	mov	r0, r4
 800ff94:	f001 fd7a 	bl	8011a8c <_calloc_r>
 800ff98:	b160      	cbz	r0, 800ffb4 <_Balloc+0x64>
 800ff9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff9e:	e00e      	b.n	800ffbe <_Balloc+0x6e>
 800ffa0:	2221      	movs	r2, #33	@ 0x21
 800ffa2:	2104      	movs	r1, #4
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	f001 fd71 	bl	8011a8c <_calloc_r>
 800ffaa:	69e3      	ldr	r3, [r4, #28]
 800ffac:	60f0      	str	r0, [r6, #12]
 800ffae:	68db      	ldr	r3, [r3, #12]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d1e4      	bne.n	800ff7e <_Balloc+0x2e>
 800ffb4:	2000      	movs	r0, #0
 800ffb6:	bd70      	pop	{r4, r5, r6, pc}
 800ffb8:	6802      	ldr	r2, [r0, #0]
 800ffba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ffc4:	e7f7      	b.n	800ffb6 <_Balloc+0x66>
 800ffc6:	bf00      	nop
 800ffc8:	080263c6 	.word	0x080263c6
 800ffcc:	08026446 	.word	0x08026446

0800ffd0 <_Bfree>:
 800ffd0:	b570      	push	{r4, r5, r6, lr}
 800ffd2:	69c6      	ldr	r6, [r0, #28]
 800ffd4:	4605      	mov	r5, r0
 800ffd6:	460c      	mov	r4, r1
 800ffd8:	b976      	cbnz	r6, 800fff8 <_Bfree+0x28>
 800ffda:	2010      	movs	r0, #16
 800ffdc:	f7ff ff02 	bl	800fde4 <malloc>
 800ffe0:	4602      	mov	r2, r0
 800ffe2:	61e8      	str	r0, [r5, #28]
 800ffe4:	b920      	cbnz	r0, 800fff0 <_Bfree+0x20>
 800ffe6:	4b09      	ldr	r3, [pc, #36]	@ (801000c <_Bfree+0x3c>)
 800ffe8:	4809      	ldr	r0, [pc, #36]	@ (8010010 <_Bfree+0x40>)
 800ffea:	218f      	movs	r1, #143	@ 0x8f
 800ffec:	f001 fd30 	bl	8011a50 <__assert_func>
 800fff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fff4:	6006      	str	r6, [r0, #0]
 800fff6:	60c6      	str	r6, [r0, #12]
 800fff8:	b13c      	cbz	r4, 801000a <_Bfree+0x3a>
 800fffa:	69eb      	ldr	r3, [r5, #28]
 800fffc:	6862      	ldr	r2, [r4, #4]
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010004:	6021      	str	r1, [r4, #0]
 8010006:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801000a:	bd70      	pop	{r4, r5, r6, pc}
 801000c:	080263c6 	.word	0x080263c6
 8010010:	08026446 	.word	0x08026446

08010014 <__multadd>:
 8010014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010018:	690d      	ldr	r5, [r1, #16]
 801001a:	4607      	mov	r7, r0
 801001c:	460c      	mov	r4, r1
 801001e:	461e      	mov	r6, r3
 8010020:	f101 0c14 	add.w	ip, r1, #20
 8010024:	2000      	movs	r0, #0
 8010026:	f8dc 3000 	ldr.w	r3, [ip]
 801002a:	b299      	uxth	r1, r3
 801002c:	fb02 6101 	mla	r1, r2, r1, r6
 8010030:	0c1e      	lsrs	r6, r3, #16
 8010032:	0c0b      	lsrs	r3, r1, #16
 8010034:	fb02 3306 	mla	r3, r2, r6, r3
 8010038:	b289      	uxth	r1, r1
 801003a:	3001      	adds	r0, #1
 801003c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010040:	4285      	cmp	r5, r0
 8010042:	f84c 1b04 	str.w	r1, [ip], #4
 8010046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801004a:	dcec      	bgt.n	8010026 <__multadd+0x12>
 801004c:	b30e      	cbz	r6, 8010092 <__multadd+0x7e>
 801004e:	68a3      	ldr	r3, [r4, #8]
 8010050:	42ab      	cmp	r3, r5
 8010052:	dc19      	bgt.n	8010088 <__multadd+0x74>
 8010054:	6861      	ldr	r1, [r4, #4]
 8010056:	4638      	mov	r0, r7
 8010058:	3101      	adds	r1, #1
 801005a:	f7ff ff79 	bl	800ff50 <_Balloc>
 801005e:	4680      	mov	r8, r0
 8010060:	b928      	cbnz	r0, 801006e <__multadd+0x5a>
 8010062:	4602      	mov	r2, r0
 8010064:	4b0c      	ldr	r3, [pc, #48]	@ (8010098 <__multadd+0x84>)
 8010066:	480d      	ldr	r0, [pc, #52]	@ (801009c <__multadd+0x88>)
 8010068:	21ba      	movs	r1, #186	@ 0xba
 801006a:	f001 fcf1 	bl	8011a50 <__assert_func>
 801006e:	6922      	ldr	r2, [r4, #16]
 8010070:	3202      	adds	r2, #2
 8010072:	f104 010c 	add.w	r1, r4, #12
 8010076:	0092      	lsls	r2, r2, #2
 8010078:	300c      	adds	r0, #12
 801007a:	f7ff f806 	bl	800f08a <memcpy>
 801007e:	4621      	mov	r1, r4
 8010080:	4638      	mov	r0, r7
 8010082:	f7ff ffa5 	bl	800ffd0 <_Bfree>
 8010086:	4644      	mov	r4, r8
 8010088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801008c:	3501      	adds	r5, #1
 801008e:	615e      	str	r6, [r3, #20]
 8010090:	6125      	str	r5, [r4, #16]
 8010092:	4620      	mov	r0, r4
 8010094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010098:	08026435 	.word	0x08026435
 801009c:	08026446 	.word	0x08026446

080100a0 <__s2b>:
 80100a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100a4:	460c      	mov	r4, r1
 80100a6:	4615      	mov	r5, r2
 80100a8:	461f      	mov	r7, r3
 80100aa:	2209      	movs	r2, #9
 80100ac:	3308      	adds	r3, #8
 80100ae:	4606      	mov	r6, r0
 80100b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80100b4:	2100      	movs	r1, #0
 80100b6:	2201      	movs	r2, #1
 80100b8:	429a      	cmp	r2, r3
 80100ba:	db09      	blt.n	80100d0 <__s2b+0x30>
 80100bc:	4630      	mov	r0, r6
 80100be:	f7ff ff47 	bl	800ff50 <_Balloc>
 80100c2:	b940      	cbnz	r0, 80100d6 <__s2b+0x36>
 80100c4:	4602      	mov	r2, r0
 80100c6:	4b19      	ldr	r3, [pc, #100]	@ (801012c <__s2b+0x8c>)
 80100c8:	4819      	ldr	r0, [pc, #100]	@ (8010130 <__s2b+0x90>)
 80100ca:	21d3      	movs	r1, #211	@ 0xd3
 80100cc:	f001 fcc0 	bl	8011a50 <__assert_func>
 80100d0:	0052      	lsls	r2, r2, #1
 80100d2:	3101      	adds	r1, #1
 80100d4:	e7f0      	b.n	80100b8 <__s2b+0x18>
 80100d6:	9b08      	ldr	r3, [sp, #32]
 80100d8:	6143      	str	r3, [r0, #20]
 80100da:	2d09      	cmp	r5, #9
 80100dc:	f04f 0301 	mov.w	r3, #1
 80100e0:	6103      	str	r3, [r0, #16]
 80100e2:	dd16      	ble.n	8010112 <__s2b+0x72>
 80100e4:	f104 0909 	add.w	r9, r4, #9
 80100e8:	46c8      	mov	r8, r9
 80100ea:	442c      	add	r4, r5
 80100ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80100f0:	4601      	mov	r1, r0
 80100f2:	3b30      	subs	r3, #48	@ 0x30
 80100f4:	220a      	movs	r2, #10
 80100f6:	4630      	mov	r0, r6
 80100f8:	f7ff ff8c 	bl	8010014 <__multadd>
 80100fc:	45a0      	cmp	r8, r4
 80100fe:	d1f5      	bne.n	80100ec <__s2b+0x4c>
 8010100:	f1a5 0408 	sub.w	r4, r5, #8
 8010104:	444c      	add	r4, r9
 8010106:	1b2d      	subs	r5, r5, r4
 8010108:	1963      	adds	r3, r4, r5
 801010a:	42bb      	cmp	r3, r7
 801010c:	db04      	blt.n	8010118 <__s2b+0x78>
 801010e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010112:	340a      	adds	r4, #10
 8010114:	2509      	movs	r5, #9
 8010116:	e7f6      	b.n	8010106 <__s2b+0x66>
 8010118:	f814 3b01 	ldrb.w	r3, [r4], #1
 801011c:	4601      	mov	r1, r0
 801011e:	3b30      	subs	r3, #48	@ 0x30
 8010120:	220a      	movs	r2, #10
 8010122:	4630      	mov	r0, r6
 8010124:	f7ff ff76 	bl	8010014 <__multadd>
 8010128:	e7ee      	b.n	8010108 <__s2b+0x68>
 801012a:	bf00      	nop
 801012c:	08026435 	.word	0x08026435
 8010130:	08026446 	.word	0x08026446

08010134 <__hi0bits>:
 8010134:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010138:	4603      	mov	r3, r0
 801013a:	bf36      	itet	cc
 801013c:	0403      	lslcc	r3, r0, #16
 801013e:	2000      	movcs	r0, #0
 8010140:	2010      	movcc	r0, #16
 8010142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010146:	bf3c      	itt	cc
 8010148:	021b      	lslcc	r3, r3, #8
 801014a:	3008      	addcc	r0, #8
 801014c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010150:	bf3c      	itt	cc
 8010152:	011b      	lslcc	r3, r3, #4
 8010154:	3004      	addcc	r0, #4
 8010156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801015a:	bf3c      	itt	cc
 801015c:	009b      	lslcc	r3, r3, #2
 801015e:	3002      	addcc	r0, #2
 8010160:	2b00      	cmp	r3, #0
 8010162:	db05      	blt.n	8010170 <__hi0bits+0x3c>
 8010164:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010168:	f100 0001 	add.w	r0, r0, #1
 801016c:	bf08      	it	eq
 801016e:	2020      	moveq	r0, #32
 8010170:	4770      	bx	lr

08010172 <__lo0bits>:
 8010172:	6803      	ldr	r3, [r0, #0]
 8010174:	4602      	mov	r2, r0
 8010176:	f013 0007 	ands.w	r0, r3, #7
 801017a:	d00b      	beq.n	8010194 <__lo0bits+0x22>
 801017c:	07d9      	lsls	r1, r3, #31
 801017e:	d421      	bmi.n	80101c4 <__lo0bits+0x52>
 8010180:	0798      	lsls	r0, r3, #30
 8010182:	bf49      	itett	mi
 8010184:	085b      	lsrmi	r3, r3, #1
 8010186:	089b      	lsrpl	r3, r3, #2
 8010188:	2001      	movmi	r0, #1
 801018a:	6013      	strmi	r3, [r2, #0]
 801018c:	bf5c      	itt	pl
 801018e:	6013      	strpl	r3, [r2, #0]
 8010190:	2002      	movpl	r0, #2
 8010192:	4770      	bx	lr
 8010194:	b299      	uxth	r1, r3
 8010196:	b909      	cbnz	r1, 801019c <__lo0bits+0x2a>
 8010198:	0c1b      	lsrs	r3, r3, #16
 801019a:	2010      	movs	r0, #16
 801019c:	b2d9      	uxtb	r1, r3
 801019e:	b909      	cbnz	r1, 80101a4 <__lo0bits+0x32>
 80101a0:	3008      	adds	r0, #8
 80101a2:	0a1b      	lsrs	r3, r3, #8
 80101a4:	0719      	lsls	r1, r3, #28
 80101a6:	bf04      	itt	eq
 80101a8:	091b      	lsreq	r3, r3, #4
 80101aa:	3004      	addeq	r0, #4
 80101ac:	0799      	lsls	r1, r3, #30
 80101ae:	bf04      	itt	eq
 80101b0:	089b      	lsreq	r3, r3, #2
 80101b2:	3002      	addeq	r0, #2
 80101b4:	07d9      	lsls	r1, r3, #31
 80101b6:	d403      	bmi.n	80101c0 <__lo0bits+0x4e>
 80101b8:	085b      	lsrs	r3, r3, #1
 80101ba:	f100 0001 	add.w	r0, r0, #1
 80101be:	d003      	beq.n	80101c8 <__lo0bits+0x56>
 80101c0:	6013      	str	r3, [r2, #0]
 80101c2:	4770      	bx	lr
 80101c4:	2000      	movs	r0, #0
 80101c6:	4770      	bx	lr
 80101c8:	2020      	movs	r0, #32
 80101ca:	4770      	bx	lr

080101cc <__i2b>:
 80101cc:	b510      	push	{r4, lr}
 80101ce:	460c      	mov	r4, r1
 80101d0:	2101      	movs	r1, #1
 80101d2:	f7ff febd 	bl	800ff50 <_Balloc>
 80101d6:	4602      	mov	r2, r0
 80101d8:	b928      	cbnz	r0, 80101e6 <__i2b+0x1a>
 80101da:	4b05      	ldr	r3, [pc, #20]	@ (80101f0 <__i2b+0x24>)
 80101dc:	4805      	ldr	r0, [pc, #20]	@ (80101f4 <__i2b+0x28>)
 80101de:	f240 1145 	movw	r1, #325	@ 0x145
 80101e2:	f001 fc35 	bl	8011a50 <__assert_func>
 80101e6:	2301      	movs	r3, #1
 80101e8:	6144      	str	r4, [r0, #20]
 80101ea:	6103      	str	r3, [r0, #16]
 80101ec:	bd10      	pop	{r4, pc}
 80101ee:	bf00      	nop
 80101f0:	08026435 	.word	0x08026435
 80101f4:	08026446 	.word	0x08026446

080101f8 <__multiply>:
 80101f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101fc:	4614      	mov	r4, r2
 80101fe:	690a      	ldr	r2, [r1, #16]
 8010200:	6923      	ldr	r3, [r4, #16]
 8010202:	429a      	cmp	r2, r3
 8010204:	bfa8      	it	ge
 8010206:	4623      	movge	r3, r4
 8010208:	460f      	mov	r7, r1
 801020a:	bfa4      	itt	ge
 801020c:	460c      	movge	r4, r1
 801020e:	461f      	movge	r7, r3
 8010210:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010214:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010218:	68a3      	ldr	r3, [r4, #8]
 801021a:	6861      	ldr	r1, [r4, #4]
 801021c:	eb0a 0609 	add.w	r6, sl, r9
 8010220:	42b3      	cmp	r3, r6
 8010222:	b085      	sub	sp, #20
 8010224:	bfb8      	it	lt
 8010226:	3101      	addlt	r1, #1
 8010228:	f7ff fe92 	bl	800ff50 <_Balloc>
 801022c:	b930      	cbnz	r0, 801023c <__multiply+0x44>
 801022e:	4602      	mov	r2, r0
 8010230:	4b44      	ldr	r3, [pc, #272]	@ (8010344 <__multiply+0x14c>)
 8010232:	4845      	ldr	r0, [pc, #276]	@ (8010348 <__multiply+0x150>)
 8010234:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010238:	f001 fc0a 	bl	8011a50 <__assert_func>
 801023c:	f100 0514 	add.w	r5, r0, #20
 8010240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010244:	462b      	mov	r3, r5
 8010246:	2200      	movs	r2, #0
 8010248:	4543      	cmp	r3, r8
 801024a:	d321      	bcc.n	8010290 <__multiply+0x98>
 801024c:	f107 0114 	add.w	r1, r7, #20
 8010250:	f104 0214 	add.w	r2, r4, #20
 8010254:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010258:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801025c:	9302      	str	r3, [sp, #8]
 801025e:	1b13      	subs	r3, r2, r4
 8010260:	3b15      	subs	r3, #21
 8010262:	f023 0303 	bic.w	r3, r3, #3
 8010266:	3304      	adds	r3, #4
 8010268:	f104 0715 	add.w	r7, r4, #21
 801026c:	42ba      	cmp	r2, r7
 801026e:	bf38      	it	cc
 8010270:	2304      	movcc	r3, #4
 8010272:	9301      	str	r3, [sp, #4]
 8010274:	9b02      	ldr	r3, [sp, #8]
 8010276:	9103      	str	r1, [sp, #12]
 8010278:	428b      	cmp	r3, r1
 801027a:	d80c      	bhi.n	8010296 <__multiply+0x9e>
 801027c:	2e00      	cmp	r6, #0
 801027e:	dd03      	ble.n	8010288 <__multiply+0x90>
 8010280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010284:	2b00      	cmp	r3, #0
 8010286:	d05b      	beq.n	8010340 <__multiply+0x148>
 8010288:	6106      	str	r6, [r0, #16]
 801028a:	b005      	add	sp, #20
 801028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010290:	f843 2b04 	str.w	r2, [r3], #4
 8010294:	e7d8      	b.n	8010248 <__multiply+0x50>
 8010296:	f8b1 a000 	ldrh.w	sl, [r1]
 801029a:	f1ba 0f00 	cmp.w	sl, #0
 801029e:	d024      	beq.n	80102ea <__multiply+0xf2>
 80102a0:	f104 0e14 	add.w	lr, r4, #20
 80102a4:	46a9      	mov	r9, r5
 80102a6:	f04f 0c00 	mov.w	ip, #0
 80102aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80102ae:	f8d9 3000 	ldr.w	r3, [r9]
 80102b2:	fa1f fb87 	uxth.w	fp, r7
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80102bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80102c0:	f8d9 7000 	ldr.w	r7, [r9]
 80102c4:	4463      	add	r3, ip
 80102c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80102ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80102ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80102d8:	4572      	cmp	r2, lr
 80102da:	f849 3b04 	str.w	r3, [r9], #4
 80102de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80102e2:	d8e2      	bhi.n	80102aa <__multiply+0xb2>
 80102e4:	9b01      	ldr	r3, [sp, #4]
 80102e6:	f845 c003 	str.w	ip, [r5, r3]
 80102ea:	9b03      	ldr	r3, [sp, #12]
 80102ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80102f0:	3104      	adds	r1, #4
 80102f2:	f1b9 0f00 	cmp.w	r9, #0
 80102f6:	d021      	beq.n	801033c <__multiply+0x144>
 80102f8:	682b      	ldr	r3, [r5, #0]
 80102fa:	f104 0c14 	add.w	ip, r4, #20
 80102fe:	46ae      	mov	lr, r5
 8010300:	f04f 0a00 	mov.w	sl, #0
 8010304:	f8bc b000 	ldrh.w	fp, [ip]
 8010308:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801030c:	fb09 770b 	mla	r7, r9, fp, r7
 8010310:	4457      	add	r7, sl
 8010312:	b29b      	uxth	r3, r3
 8010314:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010318:	f84e 3b04 	str.w	r3, [lr], #4
 801031c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010324:	f8be 3000 	ldrh.w	r3, [lr]
 8010328:	fb09 330a 	mla	r3, r9, sl, r3
 801032c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010330:	4562      	cmp	r2, ip
 8010332:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010336:	d8e5      	bhi.n	8010304 <__multiply+0x10c>
 8010338:	9f01      	ldr	r7, [sp, #4]
 801033a:	51eb      	str	r3, [r5, r7]
 801033c:	3504      	adds	r5, #4
 801033e:	e799      	b.n	8010274 <__multiply+0x7c>
 8010340:	3e01      	subs	r6, #1
 8010342:	e79b      	b.n	801027c <__multiply+0x84>
 8010344:	08026435 	.word	0x08026435
 8010348:	08026446 	.word	0x08026446

0801034c <__pow5mult>:
 801034c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010350:	4615      	mov	r5, r2
 8010352:	f012 0203 	ands.w	r2, r2, #3
 8010356:	4607      	mov	r7, r0
 8010358:	460e      	mov	r6, r1
 801035a:	d007      	beq.n	801036c <__pow5mult+0x20>
 801035c:	4c25      	ldr	r4, [pc, #148]	@ (80103f4 <__pow5mult+0xa8>)
 801035e:	3a01      	subs	r2, #1
 8010360:	2300      	movs	r3, #0
 8010362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010366:	f7ff fe55 	bl	8010014 <__multadd>
 801036a:	4606      	mov	r6, r0
 801036c:	10ad      	asrs	r5, r5, #2
 801036e:	d03d      	beq.n	80103ec <__pow5mult+0xa0>
 8010370:	69fc      	ldr	r4, [r7, #28]
 8010372:	b97c      	cbnz	r4, 8010394 <__pow5mult+0x48>
 8010374:	2010      	movs	r0, #16
 8010376:	f7ff fd35 	bl	800fde4 <malloc>
 801037a:	4602      	mov	r2, r0
 801037c:	61f8      	str	r0, [r7, #28]
 801037e:	b928      	cbnz	r0, 801038c <__pow5mult+0x40>
 8010380:	4b1d      	ldr	r3, [pc, #116]	@ (80103f8 <__pow5mult+0xac>)
 8010382:	481e      	ldr	r0, [pc, #120]	@ (80103fc <__pow5mult+0xb0>)
 8010384:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010388:	f001 fb62 	bl	8011a50 <__assert_func>
 801038c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010390:	6004      	str	r4, [r0, #0]
 8010392:	60c4      	str	r4, [r0, #12]
 8010394:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801039c:	b94c      	cbnz	r4, 80103b2 <__pow5mult+0x66>
 801039e:	f240 2171 	movw	r1, #625	@ 0x271
 80103a2:	4638      	mov	r0, r7
 80103a4:	f7ff ff12 	bl	80101cc <__i2b>
 80103a8:	2300      	movs	r3, #0
 80103aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80103ae:	4604      	mov	r4, r0
 80103b0:	6003      	str	r3, [r0, #0]
 80103b2:	f04f 0900 	mov.w	r9, #0
 80103b6:	07eb      	lsls	r3, r5, #31
 80103b8:	d50a      	bpl.n	80103d0 <__pow5mult+0x84>
 80103ba:	4631      	mov	r1, r6
 80103bc:	4622      	mov	r2, r4
 80103be:	4638      	mov	r0, r7
 80103c0:	f7ff ff1a 	bl	80101f8 <__multiply>
 80103c4:	4631      	mov	r1, r6
 80103c6:	4680      	mov	r8, r0
 80103c8:	4638      	mov	r0, r7
 80103ca:	f7ff fe01 	bl	800ffd0 <_Bfree>
 80103ce:	4646      	mov	r6, r8
 80103d0:	106d      	asrs	r5, r5, #1
 80103d2:	d00b      	beq.n	80103ec <__pow5mult+0xa0>
 80103d4:	6820      	ldr	r0, [r4, #0]
 80103d6:	b938      	cbnz	r0, 80103e8 <__pow5mult+0x9c>
 80103d8:	4622      	mov	r2, r4
 80103da:	4621      	mov	r1, r4
 80103dc:	4638      	mov	r0, r7
 80103de:	f7ff ff0b 	bl	80101f8 <__multiply>
 80103e2:	6020      	str	r0, [r4, #0]
 80103e4:	f8c0 9000 	str.w	r9, [r0]
 80103e8:	4604      	mov	r4, r0
 80103ea:	e7e4      	b.n	80103b6 <__pow5mult+0x6a>
 80103ec:	4630      	mov	r0, r6
 80103ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103f2:	bf00      	nop
 80103f4:	080264a0 	.word	0x080264a0
 80103f8:	080263c6 	.word	0x080263c6
 80103fc:	08026446 	.word	0x08026446

08010400 <__lshift>:
 8010400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010404:	460c      	mov	r4, r1
 8010406:	6849      	ldr	r1, [r1, #4]
 8010408:	6923      	ldr	r3, [r4, #16]
 801040a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801040e:	68a3      	ldr	r3, [r4, #8]
 8010410:	4607      	mov	r7, r0
 8010412:	4691      	mov	r9, r2
 8010414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010418:	f108 0601 	add.w	r6, r8, #1
 801041c:	42b3      	cmp	r3, r6
 801041e:	db0b      	blt.n	8010438 <__lshift+0x38>
 8010420:	4638      	mov	r0, r7
 8010422:	f7ff fd95 	bl	800ff50 <_Balloc>
 8010426:	4605      	mov	r5, r0
 8010428:	b948      	cbnz	r0, 801043e <__lshift+0x3e>
 801042a:	4602      	mov	r2, r0
 801042c:	4b28      	ldr	r3, [pc, #160]	@ (80104d0 <__lshift+0xd0>)
 801042e:	4829      	ldr	r0, [pc, #164]	@ (80104d4 <__lshift+0xd4>)
 8010430:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010434:	f001 fb0c 	bl	8011a50 <__assert_func>
 8010438:	3101      	adds	r1, #1
 801043a:	005b      	lsls	r3, r3, #1
 801043c:	e7ee      	b.n	801041c <__lshift+0x1c>
 801043e:	2300      	movs	r3, #0
 8010440:	f100 0114 	add.w	r1, r0, #20
 8010444:	f100 0210 	add.w	r2, r0, #16
 8010448:	4618      	mov	r0, r3
 801044a:	4553      	cmp	r3, sl
 801044c:	db33      	blt.n	80104b6 <__lshift+0xb6>
 801044e:	6920      	ldr	r0, [r4, #16]
 8010450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010454:	f104 0314 	add.w	r3, r4, #20
 8010458:	f019 091f 	ands.w	r9, r9, #31
 801045c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010464:	d02b      	beq.n	80104be <__lshift+0xbe>
 8010466:	f1c9 0e20 	rsb	lr, r9, #32
 801046a:	468a      	mov	sl, r1
 801046c:	2200      	movs	r2, #0
 801046e:	6818      	ldr	r0, [r3, #0]
 8010470:	fa00 f009 	lsl.w	r0, r0, r9
 8010474:	4310      	orrs	r0, r2
 8010476:	f84a 0b04 	str.w	r0, [sl], #4
 801047a:	f853 2b04 	ldr.w	r2, [r3], #4
 801047e:	459c      	cmp	ip, r3
 8010480:	fa22 f20e 	lsr.w	r2, r2, lr
 8010484:	d8f3      	bhi.n	801046e <__lshift+0x6e>
 8010486:	ebac 0304 	sub.w	r3, ip, r4
 801048a:	3b15      	subs	r3, #21
 801048c:	f023 0303 	bic.w	r3, r3, #3
 8010490:	3304      	adds	r3, #4
 8010492:	f104 0015 	add.w	r0, r4, #21
 8010496:	4584      	cmp	ip, r0
 8010498:	bf38      	it	cc
 801049a:	2304      	movcc	r3, #4
 801049c:	50ca      	str	r2, [r1, r3]
 801049e:	b10a      	cbz	r2, 80104a4 <__lshift+0xa4>
 80104a0:	f108 0602 	add.w	r6, r8, #2
 80104a4:	3e01      	subs	r6, #1
 80104a6:	4638      	mov	r0, r7
 80104a8:	612e      	str	r6, [r5, #16]
 80104aa:	4621      	mov	r1, r4
 80104ac:	f7ff fd90 	bl	800ffd0 <_Bfree>
 80104b0:	4628      	mov	r0, r5
 80104b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80104ba:	3301      	adds	r3, #1
 80104bc:	e7c5      	b.n	801044a <__lshift+0x4a>
 80104be:	3904      	subs	r1, #4
 80104c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80104c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80104c8:	459c      	cmp	ip, r3
 80104ca:	d8f9      	bhi.n	80104c0 <__lshift+0xc0>
 80104cc:	e7ea      	b.n	80104a4 <__lshift+0xa4>
 80104ce:	bf00      	nop
 80104d0:	08026435 	.word	0x08026435
 80104d4:	08026446 	.word	0x08026446

080104d8 <__mcmp>:
 80104d8:	690a      	ldr	r2, [r1, #16]
 80104da:	4603      	mov	r3, r0
 80104dc:	6900      	ldr	r0, [r0, #16]
 80104de:	1a80      	subs	r0, r0, r2
 80104e0:	b530      	push	{r4, r5, lr}
 80104e2:	d10e      	bne.n	8010502 <__mcmp+0x2a>
 80104e4:	3314      	adds	r3, #20
 80104e6:	3114      	adds	r1, #20
 80104e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80104ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80104f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80104f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80104f8:	4295      	cmp	r5, r2
 80104fa:	d003      	beq.n	8010504 <__mcmp+0x2c>
 80104fc:	d205      	bcs.n	801050a <__mcmp+0x32>
 80104fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010502:	bd30      	pop	{r4, r5, pc}
 8010504:	42a3      	cmp	r3, r4
 8010506:	d3f3      	bcc.n	80104f0 <__mcmp+0x18>
 8010508:	e7fb      	b.n	8010502 <__mcmp+0x2a>
 801050a:	2001      	movs	r0, #1
 801050c:	e7f9      	b.n	8010502 <__mcmp+0x2a>
	...

08010510 <__mdiff>:
 8010510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010514:	4689      	mov	r9, r1
 8010516:	4606      	mov	r6, r0
 8010518:	4611      	mov	r1, r2
 801051a:	4648      	mov	r0, r9
 801051c:	4614      	mov	r4, r2
 801051e:	f7ff ffdb 	bl	80104d8 <__mcmp>
 8010522:	1e05      	subs	r5, r0, #0
 8010524:	d112      	bne.n	801054c <__mdiff+0x3c>
 8010526:	4629      	mov	r1, r5
 8010528:	4630      	mov	r0, r6
 801052a:	f7ff fd11 	bl	800ff50 <_Balloc>
 801052e:	4602      	mov	r2, r0
 8010530:	b928      	cbnz	r0, 801053e <__mdiff+0x2e>
 8010532:	4b3f      	ldr	r3, [pc, #252]	@ (8010630 <__mdiff+0x120>)
 8010534:	f240 2137 	movw	r1, #567	@ 0x237
 8010538:	483e      	ldr	r0, [pc, #248]	@ (8010634 <__mdiff+0x124>)
 801053a:	f001 fa89 	bl	8011a50 <__assert_func>
 801053e:	2301      	movs	r3, #1
 8010540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010544:	4610      	mov	r0, r2
 8010546:	b003      	add	sp, #12
 8010548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801054c:	bfbc      	itt	lt
 801054e:	464b      	movlt	r3, r9
 8010550:	46a1      	movlt	r9, r4
 8010552:	4630      	mov	r0, r6
 8010554:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010558:	bfba      	itte	lt
 801055a:	461c      	movlt	r4, r3
 801055c:	2501      	movlt	r5, #1
 801055e:	2500      	movge	r5, #0
 8010560:	f7ff fcf6 	bl	800ff50 <_Balloc>
 8010564:	4602      	mov	r2, r0
 8010566:	b918      	cbnz	r0, 8010570 <__mdiff+0x60>
 8010568:	4b31      	ldr	r3, [pc, #196]	@ (8010630 <__mdiff+0x120>)
 801056a:	f240 2145 	movw	r1, #581	@ 0x245
 801056e:	e7e3      	b.n	8010538 <__mdiff+0x28>
 8010570:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010574:	6926      	ldr	r6, [r4, #16]
 8010576:	60c5      	str	r5, [r0, #12]
 8010578:	f109 0310 	add.w	r3, r9, #16
 801057c:	f109 0514 	add.w	r5, r9, #20
 8010580:	f104 0e14 	add.w	lr, r4, #20
 8010584:	f100 0b14 	add.w	fp, r0, #20
 8010588:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801058c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010590:	9301      	str	r3, [sp, #4]
 8010592:	46d9      	mov	r9, fp
 8010594:	f04f 0c00 	mov.w	ip, #0
 8010598:	9b01      	ldr	r3, [sp, #4]
 801059a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801059e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80105a2:	9301      	str	r3, [sp, #4]
 80105a4:	fa1f f38a 	uxth.w	r3, sl
 80105a8:	4619      	mov	r1, r3
 80105aa:	b283      	uxth	r3, r0
 80105ac:	1acb      	subs	r3, r1, r3
 80105ae:	0c00      	lsrs	r0, r0, #16
 80105b0:	4463      	add	r3, ip
 80105b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80105b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80105c0:	4576      	cmp	r6, lr
 80105c2:	f849 3b04 	str.w	r3, [r9], #4
 80105c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80105ca:	d8e5      	bhi.n	8010598 <__mdiff+0x88>
 80105cc:	1b33      	subs	r3, r6, r4
 80105ce:	3b15      	subs	r3, #21
 80105d0:	f023 0303 	bic.w	r3, r3, #3
 80105d4:	3415      	adds	r4, #21
 80105d6:	3304      	adds	r3, #4
 80105d8:	42a6      	cmp	r6, r4
 80105da:	bf38      	it	cc
 80105dc:	2304      	movcc	r3, #4
 80105de:	441d      	add	r5, r3
 80105e0:	445b      	add	r3, fp
 80105e2:	461e      	mov	r6, r3
 80105e4:	462c      	mov	r4, r5
 80105e6:	4544      	cmp	r4, r8
 80105e8:	d30e      	bcc.n	8010608 <__mdiff+0xf8>
 80105ea:	f108 0103 	add.w	r1, r8, #3
 80105ee:	1b49      	subs	r1, r1, r5
 80105f0:	f021 0103 	bic.w	r1, r1, #3
 80105f4:	3d03      	subs	r5, #3
 80105f6:	45a8      	cmp	r8, r5
 80105f8:	bf38      	it	cc
 80105fa:	2100      	movcc	r1, #0
 80105fc:	440b      	add	r3, r1
 80105fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010602:	b191      	cbz	r1, 801062a <__mdiff+0x11a>
 8010604:	6117      	str	r7, [r2, #16]
 8010606:	e79d      	b.n	8010544 <__mdiff+0x34>
 8010608:	f854 1b04 	ldr.w	r1, [r4], #4
 801060c:	46e6      	mov	lr, ip
 801060e:	0c08      	lsrs	r0, r1, #16
 8010610:	fa1c fc81 	uxtah	ip, ip, r1
 8010614:	4471      	add	r1, lr
 8010616:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801061a:	b289      	uxth	r1, r1
 801061c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010620:	f846 1b04 	str.w	r1, [r6], #4
 8010624:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010628:	e7dd      	b.n	80105e6 <__mdiff+0xd6>
 801062a:	3f01      	subs	r7, #1
 801062c:	e7e7      	b.n	80105fe <__mdiff+0xee>
 801062e:	bf00      	nop
 8010630:	08026435 	.word	0x08026435
 8010634:	08026446 	.word	0x08026446

08010638 <__ulp>:
 8010638:	b082      	sub	sp, #8
 801063a:	ed8d 0b00 	vstr	d0, [sp]
 801063e:	9a01      	ldr	r2, [sp, #4]
 8010640:	4b0f      	ldr	r3, [pc, #60]	@ (8010680 <__ulp+0x48>)
 8010642:	4013      	ands	r3, r2
 8010644:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010648:	2b00      	cmp	r3, #0
 801064a:	dc08      	bgt.n	801065e <__ulp+0x26>
 801064c:	425b      	negs	r3, r3
 801064e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010652:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010656:	da04      	bge.n	8010662 <__ulp+0x2a>
 8010658:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801065c:	4113      	asrs	r3, r2
 801065e:	2200      	movs	r2, #0
 8010660:	e008      	b.n	8010674 <__ulp+0x3c>
 8010662:	f1a2 0314 	sub.w	r3, r2, #20
 8010666:	2b1e      	cmp	r3, #30
 8010668:	bfda      	itte	le
 801066a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801066e:	40da      	lsrle	r2, r3
 8010670:	2201      	movgt	r2, #1
 8010672:	2300      	movs	r3, #0
 8010674:	4619      	mov	r1, r3
 8010676:	4610      	mov	r0, r2
 8010678:	ec41 0b10 	vmov	d0, r0, r1
 801067c:	b002      	add	sp, #8
 801067e:	4770      	bx	lr
 8010680:	7ff00000 	.word	0x7ff00000

08010684 <__b2d>:
 8010684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010688:	6906      	ldr	r6, [r0, #16]
 801068a:	f100 0814 	add.w	r8, r0, #20
 801068e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010692:	1f37      	subs	r7, r6, #4
 8010694:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010698:	4610      	mov	r0, r2
 801069a:	f7ff fd4b 	bl	8010134 <__hi0bits>
 801069e:	f1c0 0320 	rsb	r3, r0, #32
 80106a2:	280a      	cmp	r0, #10
 80106a4:	600b      	str	r3, [r1, #0]
 80106a6:	491b      	ldr	r1, [pc, #108]	@ (8010714 <__b2d+0x90>)
 80106a8:	dc15      	bgt.n	80106d6 <__b2d+0x52>
 80106aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80106ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80106b2:	45b8      	cmp	r8, r7
 80106b4:	ea43 0501 	orr.w	r5, r3, r1
 80106b8:	bf34      	ite	cc
 80106ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80106be:	2300      	movcs	r3, #0
 80106c0:	3015      	adds	r0, #21
 80106c2:	fa02 f000 	lsl.w	r0, r2, r0
 80106c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80106ca:	4303      	orrs	r3, r0
 80106cc:	461c      	mov	r4, r3
 80106ce:	ec45 4b10 	vmov	d0, r4, r5
 80106d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106d6:	45b8      	cmp	r8, r7
 80106d8:	bf3a      	itte	cc
 80106da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80106de:	f1a6 0708 	subcc.w	r7, r6, #8
 80106e2:	2300      	movcs	r3, #0
 80106e4:	380b      	subs	r0, #11
 80106e6:	d012      	beq.n	801070e <__b2d+0x8a>
 80106e8:	f1c0 0120 	rsb	r1, r0, #32
 80106ec:	fa23 f401 	lsr.w	r4, r3, r1
 80106f0:	4082      	lsls	r2, r0
 80106f2:	4322      	orrs	r2, r4
 80106f4:	4547      	cmp	r7, r8
 80106f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80106fa:	bf8c      	ite	hi
 80106fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010700:	2200      	movls	r2, #0
 8010702:	4083      	lsls	r3, r0
 8010704:	40ca      	lsrs	r2, r1
 8010706:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801070a:	4313      	orrs	r3, r2
 801070c:	e7de      	b.n	80106cc <__b2d+0x48>
 801070e:	ea42 0501 	orr.w	r5, r2, r1
 8010712:	e7db      	b.n	80106cc <__b2d+0x48>
 8010714:	3ff00000 	.word	0x3ff00000

08010718 <__d2b>:
 8010718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801071c:	460f      	mov	r7, r1
 801071e:	2101      	movs	r1, #1
 8010720:	ec59 8b10 	vmov	r8, r9, d0
 8010724:	4616      	mov	r6, r2
 8010726:	f7ff fc13 	bl	800ff50 <_Balloc>
 801072a:	4604      	mov	r4, r0
 801072c:	b930      	cbnz	r0, 801073c <__d2b+0x24>
 801072e:	4602      	mov	r2, r0
 8010730:	4b23      	ldr	r3, [pc, #140]	@ (80107c0 <__d2b+0xa8>)
 8010732:	4824      	ldr	r0, [pc, #144]	@ (80107c4 <__d2b+0xac>)
 8010734:	f240 310f 	movw	r1, #783	@ 0x30f
 8010738:	f001 f98a 	bl	8011a50 <__assert_func>
 801073c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010744:	b10d      	cbz	r5, 801074a <__d2b+0x32>
 8010746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801074a:	9301      	str	r3, [sp, #4]
 801074c:	f1b8 0300 	subs.w	r3, r8, #0
 8010750:	d023      	beq.n	801079a <__d2b+0x82>
 8010752:	4668      	mov	r0, sp
 8010754:	9300      	str	r3, [sp, #0]
 8010756:	f7ff fd0c 	bl	8010172 <__lo0bits>
 801075a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801075e:	b1d0      	cbz	r0, 8010796 <__d2b+0x7e>
 8010760:	f1c0 0320 	rsb	r3, r0, #32
 8010764:	fa02 f303 	lsl.w	r3, r2, r3
 8010768:	430b      	orrs	r3, r1
 801076a:	40c2      	lsrs	r2, r0
 801076c:	6163      	str	r3, [r4, #20]
 801076e:	9201      	str	r2, [sp, #4]
 8010770:	9b01      	ldr	r3, [sp, #4]
 8010772:	61a3      	str	r3, [r4, #24]
 8010774:	2b00      	cmp	r3, #0
 8010776:	bf0c      	ite	eq
 8010778:	2201      	moveq	r2, #1
 801077a:	2202      	movne	r2, #2
 801077c:	6122      	str	r2, [r4, #16]
 801077e:	b1a5      	cbz	r5, 80107aa <__d2b+0x92>
 8010780:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010784:	4405      	add	r5, r0
 8010786:	603d      	str	r5, [r7, #0]
 8010788:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801078c:	6030      	str	r0, [r6, #0]
 801078e:	4620      	mov	r0, r4
 8010790:	b003      	add	sp, #12
 8010792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010796:	6161      	str	r1, [r4, #20]
 8010798:	e7ea      	b.n	8010770 <__d2b+0x58>
 801079a:	a801      	add	r0, sp, #4
 801079c:	f7ff fce9 	bl	8010172 <__lo0bits>
 80107a0:	9b01      	ldr	r3, [sp, #4]
 80107a2:	6163      	str	r3, [r4, #20]
 80107a4:	3020      	adds	r0, #32
 80107a6:	2201      	movs	r2, #1
 80107a8:	e7e8      	b.n	801077c <__d2b+0x64>
 80107aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80107ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80107b2:	6038      	str	r0, [r7, #0]
 80107b4:	6918      	ldr	r0, [r3, #16]
 80107b6:	f7ff fcbd 	bl	8010134 <__hi0bits>
 80107ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80107be:	e7e5      	b.n	801078c <__d2b+0x74>
 80107c0:	08026435 	.word	0x08026435
 80107c4:	08026446 	.word	0x08026446

080107c8 <__ratio>:
 80107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107cc:	b085      	sub	sp, #20
 80107ce:	e9cd 1000 	strd	r1, r0, [sp]
 80107d2:	a902      	add	r1, sp, #8
 80107d4:	f7ff ff56 	bl	8010684 <__b2d>
 80107d8:	9800      	ldr	r0, [sp, #0]
 80107da:	a903      	add	r1, sp, #12
 80107dc:	ec55 4b10 	vmov	r4, r5, d0
 80107e0:	f7ff ff50 	bl	8010684 <__b2d>
 80107e4:	9b01      	ldr	r3, [sp, #4]
 80107e6:	6919      	ldr	r1, [r3, #16]
 80107e8:	9b00      	ldr	r3, [sp, #0]
 80107ea:	691b      	ldr	r3, [r3, #16]
 80107ec:	1ac9      	subs	r1, r1, r3
 80107ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80107f2:	1a9b      	subs	r3, r3, r2
 80107f4:	ec5b ab10 	vmov	sl, fp, d0
 80107f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	bfce      	itee	gt
 8010800:	462a      	movgt	r2, r5
 8010802:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010806:	465a      	movle	r2, fp
 8010808:	462f      	mov	r7, r5
 801080a:	46d9      	mov	r9, fp
 801080c:	bfcc      	ite	gt
 801080e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010812:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010816:	464b      	mov	r3, r9
 8010818:	4652      	mov	r2, sl
 801081a:	4620      	mov	r0, r4
 801081c:	4639      	mov	r1, r7
 801081e:	f7f0 f87d 	bl	800091c <__aeabi_ddiv>
 8010822:	ec41 0b10 	vmov	d0, r0, r1
 8010826:	b005      	add	sp, #20
 8010828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801082c <__copybits>:
 801082c:	3901      	subs	r1, #1
 801082e:	b570      	push	{r4, r5, r6, lr}
 8010830:	1149      	asrs	r1, r1, #5
 8010832:	6914      	ldr	r4, [r2, #16]
 8010834:	3101      	adds	r1, #1
 8010836:	f102 0314 	add.w	r3, r2, #20
 801083a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801083e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010842:	1f05      	subs	r5, r0, #4
 8010844:	42a3      	cmp	r3, r4
 8010846:	d30c      	bcc.n	8010862 <__copybits+0x36>
 8010848:	1aa3      	subs	r3, r4, r2
 801084a:	3b11      	subs	r3, #17
 801084c:	f023 0303 	bic.w	r3, r3, #3
 8010850:	3211      	adds	r2, #17
 8010852:	42a2      	cmp	r2, r4
 8010854:	bf88      	it	hi
 8010856:	2300      	movhi	r3, #0
 8010858:	4418      	add	r0, r3
 801085a:	2300      	movs	r3, #0
 801085c:	4288      	cmp	r0, r1
 801085e:	d305      	bcc.n	801086c <__copybits+0x40>
 8010860:	bd70      	pop	{r4, r5, r6, pc}
 8010862:	f853 6b04 	ldr.w	r6, [r3], #4
 8010866:	f845 6f04 	str.w	r6, [r5, #4]!
 801086a:	e7eb      	b.n	8010844 <__copybits+0x18>
 801086c:	f840 3b04 	str.w	r3, [r0], #4
 8010870:	e7f4      	b.n	801085c <__copybits+0x30>

08010872 <__any_on>:
 8010872:	f100 0214 	add.w	r2, r0, #20
 8010876:	6900      	ldr	r0, [r0, #16]
 8010878:	114b      	asrs	r3, r1, #5
 801087a:	4298      	cmp	r0, r3
 801087c:	b510      	push	{r4, lr}
 801087e:	db11      	blt.n	80108a4 <__any_on+0x32>
 8010880:	dd0a      	ble.n	8010898 <__any_on+0x26>
 8010882:	f011 011f 	ands.w	r1, r1, #31
 8010886:	d007      	beq.n	8010898 <__any_on+0x26>
 8010888:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801088c:	fa24 f001 	lsr.w	r0, r4, r1
 8010890:	fa00 f101 	lsl.w	r1, r0, r1
 8010894:	428c      	cmp	r4, r1
 8010896:	d10b      	bne.n	80108b0 <__any_on+0x3e>
 8010898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801089c:	4293      	cmp	r3, r2
 801089e:	d803      	bhi.n	80108a8 <__any_on+0x36>
 80108a0:	2000      	movs	r0, #0
 80108a2:	bd10      	pop	{r4, pc}
 80108a4:	4603      	mov	r3, r0
 80108a6:	e7f7      	b.n	8010898 <__any_on+0x26>
 80108a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80108ac:	2900      	cmp	r1, #0
 80108ae:	d0f5      	beq.n	801089c <__any_on+0x2a>
 80108b0:	2001      	movs	r0, #1
 80108b2:	e7f6      	b.n	80108a2 <__any_on+0x30>

080108b4 <sulp>:
 80108b4:	b570      	push	{r4, r5, r6, lr}
 80108b6:	4604      	mov	r4, r0
 80108b8:	460d      	mov	r5, r1
 80108ba:	ec45 4b10 	vmov	d0, r4, r5
 80108be:	4616      	mov	r6, r2
 80108c0:	f7ff feba 	bl	8010638 <__ulp>
 80108c4:	ec51 0b10 	vmov	r0, r1, d0
 80108c8:	b17e      	cbz	r6, 80108ea <sulp+0x36>
 80108ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80108ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	dd09      	ble.n	80108ea <sulp+0x36>
 80108d6:	051b      	lsls	r3, r3, #20
 80108d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80108dc:	2400      	movs	r4, #0
 80108de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80108e2:	4622      	mov	r2, r4
 80108e4:	462b      	mov	r3, r5
 80108e6:	f7ef feef 	bl	80006c8 <__aeabi_dmul>
 80108ea:	ec41 0b10 	vmov	d0, r0, r1
 80108ee:	bd70      	pop	{r4, r5, r6, pc}

080108f0 <_strtod_l>:
 80108f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f4:	b09f      	sub	sp, #124	@ 0x7c
 80108f6:	460c      	mov	r4, r1
 80108f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80108fa:	2200      	movs	r2, #0
 80108fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80108fe:	9005      	str	r0, [sp, #20]
 8010900:	f04f 0a00 	mov.w	sl, #0
 8010904:	f04f 0b00 	mov.w	fp, #0
 8010908:	460a      	mov	r2, r1
 801090a:	9219      	str	r2, [sp, #100]	@ 0x64
 801090c:	7811      	ldrb	r1, [r2, #0]
 801090e:	292b      	cmp	r1, #43	@ 0x2b
 8010910:	d04a      	beq.n	80109a8 <_strtod_l+0xb8>
 8010912:	d838      	bhi.n	8010986 <_strtod_l+0x96>
 8010914:	290d      	cmp	r1, #13
 8010916:	d832      	bhi.n	801097e <_strtod_l+0x8e>
 8010918:	2908      	cmp	r1, #8
 801091a:	d832      	bhi.n	8010982 <_strtod_l+0x92>
 801091c:	2900      	cmp	r1, #0
 801091e:	d03b      	beq.n	8010998 <_strtod_l+0xa8>
 8010920:	2200      	movs	r2, #0
 8010922:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010924:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010926:	782a      	ldrb	r2, [r5, #0]
 8010928:	2a30      	cmp	r2, #48	@ 0x30
 801092a:	f040 80b3 	bne.w	8010a94 <_strtod_l+0x1a4>
 801092e:	786a      	ldrb	r2, [r5, #1]
 8010930:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010934:	2a58      	cmp	r2, #88	@ 0x58
 8010936:	d16e      	bne.n	8010a16 <_strtod_l+0x126>
 8010938:	9302      	str	r3, [sp, #8]
 801093a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801093c:	9301      	str	r3, [sp, #4]
 801093e:	ab1a      	add	r3, sp, #104	@ 0x68
 8010940:	9300      	str	r3, [sp, #0]
 8010942:	4a8e      	ldr	r2, [pc, #568]	@ (8010b7c <_strtod_l+0x28c>)
 8010944:	9805      	ldr	r0, [sp, #20]
 8010946:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010948:	a919      	add	r1, sp, #100	@ 0x64
 801094a:	f001 f91b 	bl	8011b84 <__gethex>
 801094e:	f010 060f 	ands.w	r6, r0, #15
 8010952:	4604      	mov	r4, r0
 8010954:	d005      	beq.n	8010962 <_strtod_l+0x72>
 8010956:	2e06      	cmp	r6, #6
 8010958:	d128      	bne.n	80109ac <_strtod_l+0xbc>
 801095a:	3501      	adds	r5, #1
 801095c:	2300      	movs	r3, #0
 801095e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010960:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010962:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010964:	2b00      	cmp	r3, #0
 8010966:	f040 858e 	bne.w	8011486 <_strtod_l+0xb96>
 801096a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801096c:	b1cb      	cbz	r3, 80109a2 <_strtod_l+0xb2>
 801096e:	4652      	mov	r2, sl
 8010970:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010974:	ec43 2b10 	vmov	d0, r2, r3
 8010978:	b01f      	add	sp, #124	@ 0x7c
 801097a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801097e:	2920      	cmp	r1, #32
 8010980:	d1ce      	bne.n	8010920 <_strtod_l+0x30>
 8010982:	3201      	adds	r2, #1
 8010984:	e7c1      	b.n	801090a <_strtod_l+0x1a>
 8010986:	292d      	cmp	r1, #45	@ 0x2d
 8010988:	d1ca      	bne.n	8010920 <_strtod_l+0x30>
 801098a:	2101      	movs	r1, #1
 801098c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801098e:	1c51      	adds	r1, r2, #1
 8010990:	9119      	str	r1, [sp, #100]	@ 0x64
 8010992:	7852      	ldrb	r2, [r2, #1]
 8010994:	2a00      	cmp	r2, #0
 8010996:	d1c5      	bne.n	8010924 <_strtod_l+0x34>
 8010998:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801099a:	9419      	str	r4, [sp, #100]	@ 0x64
 801099c:	2b00      	cmp	r3, #0
 801099e:	f040 8570 	bne.w	8011482 <_strtod_l+0xb92>
 80109a2:	4652      	mov	r2, sl
 80109a4:	465b      	mov	r3, fp
 80109a6:	e7e5      	b.n	8010974 <_strtod_l+0x84>
 80109a8:	2100      	movs	r1, #0
 80109aa:	e7ef      	b.n	801098c <_strtod_l+0x9c>
 80109ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80109ae:	b13a      	cbz	r2, 80109c0 <_strtod_l+0xd0>
 80109b0:	2135      	movs	r1, #53	@ 0x35
 80109b2:	a81c      	add	r0, sp, #112	@ 0x70
 80109b4:	f7ff ff3a 	bl	801082c <__copybits>
 80109b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80109ba:	9805      	ldr	r0, [sp, #20]
 80109bc:	f7ff fb08 	bl	800ffd0 <_Bfree>
 80109c0:	3e01      	subs	r6, #1
 80109c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80109c4:	2e04      	cmp	r6, #4
 80109c6:	d806      	bhi.n	80109d6 <_strtod_l+0xe6>
 80109c8:	e8df f006 	tbb	[pc, r6]
 80109cc:	201d0314 	.word	0x201d0314
 80109d0:	14          	.byte	0x14
 80109d1:	00          	.byte	0x00
 80109d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80109d6:	05e1      	lsls	r1, r4, #23
 80109d8:	bf48      	it	mi
 80109da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80109de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80109e2:	0d1b      	lsrs	r3, r3, #20
 80109e4:	051b      	lsls	r3, r3, #20
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1bb      	bne.n	8010962 <_strtod_l+0x72>
 80109ea:	f7fe fb21 	bl	800f030 <__errno>
 80109ee:	2322      	movs	r3, #34	@ 0x22
 80109f0:	6003      	str	r3, [r0, #0]
 80109f2:	e7b6      	b.n	8010962 <_strtod_l+0x72>
 80109f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80109f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80109fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010a00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010a04:	e7e7      	b.n	80109d6 <_strtod_l+0xe6>
 8010a06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010b84 <_strtod_l+0x294>
 8010a0a:	e7e4      	b.n	80109d6 <_strtod_l+0xe6>
 8010a0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010a10:	f04f 3aff 	mov.w	sl, #4294967295
 8010a14:	e7df      	b.n	80109d6 <_strtod_l+0xe6>
 8010a16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010a18:	1c5a      	adds	r2, r3, #1
 8010a1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010a1c:	785b      	ldrb	r3, [r3, #1]
 8010a1e:	2b30      	cmp	r3, #48	@ 0x30
 8010a20:	d0f9      	beq.n	8010a16 <_strtod_l+0x126>
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d09d      	beq.n	8010962 <_strtod_l+0x72>
 8010a26:	2301      	movs	r3, #1
 8010a28:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010a2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a2e:	2300      	movs	r3, #0
 8010a30:	9308      	str	r3, [sp, #32]
 8010a32:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a34:	461f      	mov	r7, r3
 8010a36:	220a      	movs	r2, #10
 8010a38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010a3a:	7805      	ldrb	r5, [r0, #0]
 8010a3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010a40:	b2d9      	uxtb	r1, r3
 8010a42:	2909      	cmp	r1, #9
 8010a44:	d928      	bls.n	8010a98 <_strtod_l+0x1a8>
 8010a46:	494e      	ldr	r1, [pc, #312]	@ (8010b80 <_strtod_l+0x290>)
 8010a48:	2201      	movs	r2, #1
 8010a4a:	f000 ffd5 	bl	80119f8 <strncmp>
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	d032      	beq.n	8010ab8 <_strtod_l+0x1c8>
 8010a52:	2000      	movs	r0, #0
 8010a54:	462a      	mov	r2, r5
 8010a56:	4681      	mov	r9, r0
 8010a58:	463d      	mov	r5, r7
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2a65      	cmp	r2, #101	@ 0x65
 8010a5e:	d001      	beq.n	8010a64 <_strtod_l+0x174>
 8010a60:	2a45      	cmp	r2, #69	@ 0x45
 8010a62:	d114      	bne.n	8010a8e <_strtod_l+0x19e>
 8010a64:	b91d      	cbnz	r5, 8010a6e <_strtod_l+0x17e>
 8010a66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a68:	4302      	orrs	r2, r0
 8010a6a:	d095      	beq.n	8010998 <_strtod_l+0xa8>
 8010a6c:	2500      	movs	r5, #0
 8010a6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010a70:	1c62      	adds	r2, r4, #1
 8010a72:	9219      	str	r2, [sp, #100]	@ 0x64
 8010a74:	7862      	ldrb	r2, [r4, #1]
 8010a76:	2a2b      	cmp	r2, #43	@ 0x2b
 8010a78:	d077      	beq.n	8010b6a <_strtod_l+0x27a>
 8010a7a:	2a2d      	cmp	r2, #45	@ 0x2d
 8010a7c:	d07b      	beq.n	8010b76 <_strtod_l+0x286>
 8010a7e:	f04f 0c00 	mov.w	ip, #0
 8010a82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010a86:	2909      	cmp	r1, #9
 8010a88:	f240 8082 	bls.w	8010b90 <_strtod_l+0x2a0>
 8010a8c:	9419      	str	r4, [sp, #100]	@ 0x64
 8010a8e:	f04f 0800 	mov.w	r8, #0
 8010a92:	e0a2      	b.n	8010bda <_strtod_l+0x2ea>
 8010a94:	2300      	movs	r3, #0
 8010a96:	e7c7      	b.n	8010a28 <_strtod_l+0x138>
 8010a98:	2f08      	cmp	r7, #8
 8010a9a:	bfd5      	itete	le
 8010a9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010a9e:	9908      	ldrgt	r1, [sp, #32]
 8010aa0:	fb02 3301 	mlale	r3, r2, r1, r3
 8010aa4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010aa8:	f100 0001 	add.w	r0, r0, #1
 8010aac:	bfd4      	ite	le
 8010aae:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010ab0:	9308      	strgt	r3, [sp, #32]
 8010ab2:	3701      	adds	r7, #1
 8010ab4:	9019      	str	r0, [sp, #100]	@ 0x64
 8010ab6:	e7bf      	b.n	8010a38 <_strtod_l+0x148>
 8010ab8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010aba:	1c5a      	adds	r2, r3, #1
 8010abc:	9219      	str	r2, [sp, #100]	@ 0x64
 8010abe:	785a      	ldrb	r2, [r3, #1]
 8010ac0:	b37f      	cbz	r7, 8010b22 <_strtod_l+0x232>
 8010ac2:	4681      	mov	r9, r0
 8010ac4:	463d      	mov	r5, r7
 8010ac6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010aca:	2b09      	cmp	r3, #9
 8010acc:	d912      	bls.n	8010af4 <_strtod_l+0x204>
 8010ace:	2301      	movs	r3, #1
 8010ad0:	e7c4      	b.n	8010a5c <_strtod_l+0x16c>
 8010ad2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ad4:	1c5a      	adds	r2, r3, #1
 8010ad6:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ad8:	785a      	ldrb	r2, [r3, #1]
 8010ada:	3001      	adds	r0, #1
 8010adc:	2a30      	cmp	r2, #48	@ 0x30
 8010ade:	d0f8      	beq.n	8010ad2 <_strtod_l+0x1e2>
 8010ae0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010ae4:	2b08      	cmp	r3, #8
 8010ae6:	f200 84d3 	bhi.w	8011490 <_strtod_l+0xba0>
 8010aea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010aec:	930c      	str	r3, [sp, #48]	@ 0x30
 8010aee:	4681      	mov	r9, r0
 8010af0:	2000      	movs	r0, #0
 8010af2:	4605      	mov	r5, r0
 8010af4:	3a30      	subs	r2, #48	@ 0x30
 8010af6:	f100 0301 	add.w	r3, r0, #1
 8010afa:	d02a      	beq.n	8010b52 <_strtod_l+0x262>
 8010afc:	4499      	add	r9, r3
 8010afe:	eb00 0c05 	add.w	ip, r0, r5
 8010b02:	462b      	mov	r3, r5
 8010b04:	210a      	movs	r1, #10
 8010b06:	4563      	cmp	r3, ip
 8010b08:	d10d      	bne.n	8010b26 <_strtod_l+0x236>
 8010b0a:	1c69      	adds	r1, r5, #1
 8010b0c:	4401      	add	r1, r0
 8010b0e:	4428      	add	r0, r5
 8010b10:	2808      	cmp	r0, #8
 8010b12:	dc16      	bgt.n	8010b42 <_strtod_l+0x252>
 8010b14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010b16:	230a      	movs	r3, #10
 8010b18:	fb03 2300 	mla	r3, r3, r0, r2
 8010b1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b1e:	2300      	movs	r3, #0
 8010b20:	e018      	b.n	8010b54 <_strtod_l+0x264>
 8010b22:	4638      	mov	r0, r7
 8010b24:	e7da      	b.n	8010adc <_strtod_l+0x1ec>
 8010b26:	2b08      	cmp	r3, #8
 8010b28:	f103 0301 	add.w	r3, r3, #1
 8010b2c:	dc03      	bgt.n	8010b36 <_strtod_l+0x246>
 8010b2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010b30:	434e      	muls	r6, r1
 8010b32:	960a      	str	r6, [sp, #40]	@ 0x28
 8010b34:	e7e7      	b.n	8010b06 <_strtod_l+0x216>
 8010b36:	2b10      	cmp	r3, #16
 8010b38:	bfde      	ittt	le
 8010b3a:	9e08      	ldrle	r6, [sp, #32]
 8010b3c:	434e      	mulle	r6, r1
 8010b3e:	9608      	strle	r6, [sp, #32]
 8010b40:	e7e1      	b.n	8010b06 <_strtod_l+0x216>
 8010b42:	280f      	cmp	r0, #15
 8010b44:	dceb      	bgt.n	8010b1e <_strtod_l+0x22e>
 8010b46:	9808      	ldr	r0, [sp, #32]
 8010b48:	230a      	movs	r3, #10
 8010b4a:	fb03 2300 	mla	r3, r3, r0, r2
 8010b4e:	9308      	str	r3, [sp, #32]
 8010b50:	e7e5      	b.n	8010b1e <_strtod_l+0x22e>
 8010b52:	4629      	mov	r1, r5
 8010b54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010b56:	1c50      	adds	r0, r2, #1
 8010b58:	9019      	str	r0, [sp, #100]	@ 0x64
 8010b5a:	7852      	ldrb	r2, [r2, #1]
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	460d      	mov	r5, r1
 8010b60:	e7b1      	b.n	8010ac6 <_strtod_l+0x1d6>
 8010b62:	f04f 0900 	mov.w	r9, #0
 8010b66:	2301      	movs	r3, #1
 8010b68:	e77d      	b.n	8010a66 <_strtod_l+0x176>
 8010b6a:	f04f 0c00 	mov.w	ip, #0
 8010b6e:	1ca2      	adds	r2, r4, #2
 8010b70:	9219      	str	r2, [sp, #100]	@ 0x64
 8010b72:	78a2      	ldrb	r2, [r4, #2]
 8010b74:	e785      	b.n	8010a82 <_strtod_l+0x192>
 8010b76:	f04f 0c01 	mov.w	ip, #1
 8010b7a:	e7f8      	b.n	8010b6e <_strtod_l+0x27e>
 8010b7c:	080265b8 	.word	0x080265b8
 8010b80:	080265a0 	.word	0x080265a0
 8010b84:	7ff00000 	.word	0x7ff00000
 8010b88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010b8a:	1c51      	adds	r1, r2, #1
 8010b8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8010b8e:	7852      	ldrb	r2, [r2, #1]
 8010b90:	2a30      	cmp	r2, #48	@ 0x30
 8010b92:	d0f9      	beq.n	8010b88 <_strtod_l+0x298>
 8010b94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010b98:	2908      	cmp	r1, #8
 8010b9a:	f63f af78 	bhi.w	8010a8e <_strtod_l+0x19e>
 8010b9e:	3a30      	subs	r2, #48	@ 0x30
 8010ba0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010ba2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010ba4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010ba6:	f04f 080a 	mov.w	r8, #10
 8010baa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010bac:	1c56      	adds	r6, r2, #1
 8010bae:	9619      	str	r6, [sp, #100]	@ 0x64
 8010bb0:	7852      	ldrb	r2, [r2, #1]
 8010bb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010bb6:	f1be 0f09 	cmp.w	lr, #9
 8010bba:	d939      	bls.n	8010c30 <_strtod_l+0x340>
 8010bbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010bbe:	1a76      	subs	r6, r6, r1
 8010bc0:	2e08      	cmp	r6, #8
 8010bc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010bc6:	dc03      	bgt.n	8010bd0 <_strtod_l+0x2e0>
 8010bc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010bca:	4588      	cmp	r8, r1
 8010bcc:	bfa8      	it	ge
 8010bce:	4688      	movge	r8, r1
 8010bd0:	f1bc 0f00 	cmp.w	ip, #0
 8010bd4:	d001      	beq.n	8010bda <_strtod_l+0x2ea>
 8010bd6:	f1c8 0800 	rsb	r8, r8, #0
 8010bda:	2d00      	cmp	r5, #0
 8010bdc:	d14e      	bne.n	8010c7c <_strtod_l+0x38c>
 8010bde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010be0:	4308      	orrs	r0, r1
 8010be2:	f47f aebe 	bne.w	8010962 <_strtod_l+0x72>
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	f47f aed6 	bne.w	8010998 <_strtod_l+0xa8>
 8010bec:	2a69      	cmp	r2, #105	@ 0x69
 8010bee:	d028      	beq.n	8010c42 <_strtod_l+0x352>
 8010bf0:	dc25      	bgt.n	8010c3e <_strtod_l+0x34e>
 8010bf2:	2a49      	cmp	r2, #73	@ 0x49
 8010bf4:	d025      	beq.n	8010c42 <_strtod_l+0x352>
 8010bf6:	2a4e      	cmp	r2, #78	@ 0x4e
 8010bf8:	f47f aece 	bne.w	8010998 <_strtod_l+0xa8>
 8010bfc:	499b      	ldr	r1, [pc, #620]	@ (8010e6c <_strtod_l+0x57c>)
 8010bfe:	a819      	add	r0, sp, #100	@ 0x64
 8010c00:	f001 f9e2 	bl	8011fc8 <__match>
 8010c04:	2800      	cmp	r0, #0
 8010c06:	f43f aec7 	beq.w	8010998 <_strtod_l+0xa8>
 8010c0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	2b28      	cmp	r3, #40	@ 0x28
 8010c10:	d12e      	bne.n	8010c70 <_strtod_l+0x380>
 8010c12:	4997      	ldr	r1, [pc, #604]	@ (8010e70 <_strtod_l+0x580>)
 8010c14:	aa1c      	add	r2, sp, #112	@ 0x70
 8010c16:	a819      	add	r0, sp, #100	@ 0x64
 8010c18:	f001 f9ea 	bl	8011ff0 <__hexnan>
 8010c1c:	2805      	cmp	r0, #5
 8010c1e:	d127      	bne.n	8010c70 <_strtod_l+0x380>
 8010c20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010c22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010c26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010c2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010c2e:	e698      	b.n	8010962 <_strtod_l+0x72>
 8010c30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010c32:	fb08 2101 	mla	r1, r8, r1, r2
 8010c36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010c3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8010c3c:	e7b5      	b.n	8010baa <_strtod_l+0x2ba>
 8010c3e:	2a6e      	cmp	r2, #110	@ 0x6e
 8010c40:	e7da      	b.n	8010bf8 <_strtod_l+0x308>
 8010c42:	498c      	ldr	r1, [pc, #560]	@ (8010e74 <_strtod_l+0x584>)
 8010c44:	a819      	add	r0, sp, #100	@ 0x64
 8010c46:	f001 f9bf 	bl	8011fc8 <__match>
 8010c4a:	2800      	cmp	r0, #0
 8010c4c:	f43f aea4 	beq.w	8010998 <_strtod_l+0xa8>
 8010c50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c52:	4989      	ldr	r1, [pc, #548]	@ (8010e78 <_strtod_l+0x588>)
 8010c54:	3b01      	subs	r3, #1
 8010c56:	a819      	add	r0, sp, #100	@ 0x64
 8010c58:	9319      	str	r3, [sp, #100]	@ 0x64
 8010c5a:	f001 f9b5 	bl	8011fc8 <__match>
 8010c5e:	b910      	cbnz	r0, 8010c66 <_strtod_l+0x376>
 8010c60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c62:	3301      	adds	r3, #1
 8010c64:	9319      	str	r3, [sp, #100]	@ 0x64
 8010c66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010e88 <_strtod_l+0x598>
 8010c6a:	f04f 0a00 	mov.w	sl, #0
 8010c6e:	e678      	b.n	8010962 <_strtod_l+0x72>
 8010c70:	4882      	ldr	r0, [pc, #520]	@ (8010e7c <_strtod_l+0x58c>)
 8010c72:	f000 fee5 	bl	8011a40 <nan>
 8010c76:	ec5b ab10 	vmov	sl, fp, d0
 8010c7a:	e672      	b.n	8010962 <_strtod_l+0x72>
 8010c7c:	eba8 0309 	sub.w	r3, r8, r9
 8010c80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c84:	2f00      	cmp	r7, #0
 8010c86:	bf08      	it	eq
 8010c88:	462f      	moveq	r7, r5
 8010c8a:	2d10      	cmp	r5, #16
 8010c8c:	462c      	mov	r4, r5
 8010c8e:	bfa8      	it	ge
 8010c90:	2410      	movge	r4, #16
 8010c92:	f7ef fc9f 	bl	80005d4 <__aeabi_ui2d>
 8010c96:	2d09      	cmp	r5, #9
 8010c98:	4682      	mov	sl, r0
 8010c9a:	468b      	mov	fp, r1
 8010c9c:	dc13      	bgt.n	8010cc6 <_strtod_l+0x3d6>
 8010c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	f43f ae5e 	beq.w	8010962 <_strtod_l+0x72>
 8010ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ca8:	dd78      	ble.n	8010d9c <_strtod_l+0x4ac>
 8010caa:	2b16      	cmp	r3, #22
 8010cac:	dc5f      	bgt.n	8010d6e <_strtod_l+0x47e>
 8010cae:	4974      	ldr	r1, [pc, #464]	@ (8010e80 <_strtod_l+0x590>)
 8010cb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cb8:	4652      	mov	r2, sl
 8010cba:	465b      	mov	r3, fp
 8010cbc:	f7ef fd04 	bl	80006c8 <__aeabi_dmul>
 8010cc0:	4682      	mov	sl, r0
 8010cc2:	468b      	mov	fp, r1
 8010cc4:	e64d      	b.n	8010962 <_strtod_l+0x72>
 8010cc6:	4b6e      	ldr	r3, [pc, #440]	@ (8010e80 <_strtod_l+0x590>)
 8010cc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ccc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010cd0:	f7ef fcfa 	bl	80006c8 <__aeabi_dmul>
 8010cd4:	4682      	mov	sl, r0
 8010cd6:	9808      	ldr	r0, [sp, #32]
 8010cd8:	468b      	mov	fp, r1
 8010cda:	f7ef fc7b 	bl	80005d4 <__aeabi_ui2d>
 8010cde:	4602      	mov	r2, r0
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	4650      	mov	r0, sl
 8010ce4:	4659      	mov	r1, fp
 8010ce6:	f7ef fb39 	bl	800035c <__adddf3>
 8010cea:	2d0f      	cmp	r5, #15
 8010cec:	4682      	mov	sl, r0
 8010cee:	468b      	mov	fp, r1
 8010cf0:	ddd5      	ble.n	8010c9e <_strtod_l+0x3ae>
 8010cf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cf4:	1b2c      	subs	r4, r5, r4
 8010cf6:	441c      	add	r4, r3
 8010cf8:	2c00      	cmp	r4, #0
 8010cfa:	f340 8096 	ble.w	8010e2a <_strtod_l+0x53a>
 8010cfe:	f014 030f 	ands.w	r3, r4, #15
 8010d02:	d00a      	beq.n	8010d1a <_strtod_l+0x42a>
 8010d04:	495e      	ldr	r1, [pc, #376]	@ (8010e80 <_strtod_l+0x590>)
 8010d06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010d0a:	4652      	mov	r2, sl
 8010d0c:	465b      	mov	r3, fp
 8010d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d12:	f7ef fcd9 	bl	80006c8 <__aeabi_dmul>
 8010d16:	4682      	mov	sl, r0
 8010d18:	468b      	mov	fp, r1
 8010d1a:	f034 040f 	bics.w	r4, r4, #15
 8010d1e:	d073      	beq.n	8010e08 <_strtod_l+0x518>
 8010d20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010d24:	dd48      	ble.n	8010db8 <_strtod_l+0x4c8>
 8010d26:	2400      	movs	r4, #0
 8010d28:	46a0      	mov	r8, r4
 8010d2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8010d2c:	46a1      	mov	r9, r4
 8010d2e:	9a05      	ldr	r2, [sp, #20]
 8010d30:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010e88 <_strtod_l+0x598>
 8010d34:	2322      	movs	r3, #34	@ 0x22
 8010d36:	6013      	str	r3, [r2, #0]
 8010d38:	f04f 0a00 	mov.w	sl, #0
 8010d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	f43f ae0f 	beq.w	8010962 <_strtod_l+0x72>
 8010d44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010d46:	9805      	ldr	r0, [sp, #20]
 8010d48:	f7ff f942 	bl	800ffd0 <_Bfree>
 8010d4c:	9805      	ldr	r0, [sp, #20]
 8010d4e:	4649      	mov	r1, r9
 8010d50:	f7ff f93e 	bl	800ffd0 <_Bfree>
 8010d54:	9805      	ldr	r0, [sp, #20]
 8010d56:	4641      	mov	r1, r8
 8010d58:	f7ff f93a 	bl	800ffd0 <_Bfree>
 8010d5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010d5e:	9805      	ldr	r0, [sp, #20]
 8010d60:	f7ff f936 	bl	800ffd0 <_Bfree>
 8010d64:	9805      	ldr	r0, [sp, #20]
 8010d66:	4621      	mov	r1, r4
 8010d68:	f7ff f932 	bl	800ffd0 <_Bfree>
 8010d6c:	e5f9      	b.n	8010962 <_strtod_l+0x72>
 8010d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010d74:	4293      	cmp	r3, r2
 8010d76:	dbbc      	blt.n	8010cf2 <_strtod_l+0x402>
 8010d78:	4c41      	ldr	r4, [pc, #260]	@ (8010e80 <_strtod_l+0x590>)
 8010d7a:	f1c5 050f 	rsb	r5, r5, #15
 8010d7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010d82:	4652      	mov	r2, sl
 8010d84:	465b      	mov	r3, fp
 8010d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d8a:	f7ef fc9d 	bl	80006c8 <__aeabi_dmul>
 8010d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d90:	1b5d      	subs	r5, r3, r5
 8010d92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010d96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010d9a:	e78f      	b.n	8010cbc <_strtod_l+0x3cc>
 8010d9c:	3316      	adds	r3, #22
 8010d9e:	dba8      	blt.n	8010cf2 <_strtod_l+0x402>
 8010da0:	4b37      	ldr	r3, [pc, #220]	@ (8010e80 <_strtod_l+0x590>)
 8010da2:	eba9 0808 	sub.w	r8, r9, r8
 8010da6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010daa:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010dae:	4650      	mov	r0, sl
 8010db0:	4659      	mov	r1, fp
 8010db2:	f7ef fdb3 	bl	800091c <__aeabi_ddiv>
 8010db6:	e783      	b.n	8010cc0 <_strtod_l+0x3d0>
 8010db8:	4b32      	ldr	r3, [pc, #200]	@ (8010e84 <_strtod_l+0x594>)
 8010dba:	9308      	str	r3, [sp, #32]
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	1124      	asrs	r4, r4, #4
 8010dc0:	4650      	mov	r0, sl
 8010dc2:	4659      	mov	r1, fp
 8010dc4:	461e      	mov	r6, r3
 8010dc6:	2c01      	cmp	r4, #1
 8010dc8:	dc21      	bgt.n	8010e0e <_strtod_l+0x51e>
 8010dca:	b10b      	cbz	r3, 8010dd0 <_strtod_l+0x4e0>
 8010dcc:	4682      	mov	sl, r0
 8010dce:	468b      	mov	fp, r1
 8010dd0:	492c      	ldr	r1, [pc, #176]	@ (8010e84 <_strtod_l+0x594>)
 8010dd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010dd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010dda:	4652      	mov	r2, sl
 8010ddc:	465b      	mov	r3, fp
 8010dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010de2:	f7ef fc71 	bl	80006c8 <__aeabi_dmul>
 8010de6:	4b28      	ldr	r3, [pc, #160]	@ (8010e88 <_strtod_l+0x598>)
 8010de8:	460a      	mov	r2, r1
 8010dea:	400b      	ands	r3, r1
 8010dec:	4927      	ldr	r1, [pc, #156]	@ (8010e8c <_strtod_l+0x59c>)
 8010dee:	428b      	cmp	r3, r1
 8010df0:	4682      	mov	sl, r0
 8010df2:	d898      	bhi.n	8010d26 <_strtod_l+0x436>
 8010df4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010df8:	428b      	cmp	r3, r1
 8010dfa:	bf86      	itte	hi
 8010dfc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010e90 <_strtod_l+0x5a0>
 8010e00:	f04f 3aff 	movhi.w	sl, #4294967295
 8010e04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010e08:	2300      	movs	r3, #0
 8010e0a:	9308      	str	r3, [sp, #32]
 8010e0c:	e07a      	b.n	8010f04 <_strtod_l+0x614>
 8010e0e:	07e2      	lsls	r2, r4, #31
 8010e10:	d505      	bpl.n	8010e1e <_strtod_l+0x52e>
 8010e12:	9b08      	ldr	r3, [sp, #32]
 8010e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e18:	f7ef fc56 	bl	80006c8 <__aeabi_dmul>
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	9a08      	ldr	r2, [sp, #32]
 8010e20:	3208      	adds	r2, #8
 8010e22:	3601      	adds	r6, #1
 8010e24:	1064      	asrs	r4, r4, #1
 8010e26:	9208      	str	r2, [sp, #32]
 8010e28:	e7cd      	b.n	8010dc6 <_strtod_l+0x4d6>
 8010e2a:	d0ed      	beq.n	8010e08 <_strtod_l+0x518>
 8010e2c:	4264      	negs	r4, r4
 8010e2e:	f014 020f 	ands.w	r2, r4, #15
 8010e32:	d00a      	beq.n	8010e4a <_strtod_l+0x55a>
 8010e34:	4b12      	ldr	r3, [pc, #72]	@ (8010e80 <_strtod_l+0x590>)
 8010e36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e3a:	4650      	mov	r0, sl
 8010e3c:	4659      	mov	r1, fp
 8010e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e42:	f7ef fd6b 	bl	800091c <__aeabi_ddiv>
 8010e46:	4682      	mov	sl, r0
 8010e48:	468b      	mov	fp, r1
 8010e4a:	1124      	asrs	r4, r4, #4
 8010e4c:	d0dc      	beq.n	8010e08 <_strtod_l+0x518>
 8010e4e:	2c1f      	cmp	r4, #31
 8010e50:	dd20      	ble.n	8010e94 <_strtod_l+0x5a4>
 8010e52:	2400      	movs	r4, #0
 8010e54:	46a0      	mov	r8, r4
 8010e56:	940a      	str	r4, [sp, #40]	@ 0x28
 8010e58:	46a1      	mov	r9, r4
 8010e5a:	9a05      	ldr	r2, [sp, #20]
 8010e5c:	2322      	movs	r3, #34	@ 0x22
 8010e5e:	f04f 0a00 	mov.w	sl, #0
 8010e62:	f04f 0b00 	mov.w	fp, #0
 8010e66:	6013      	str	r3, [r2, #0]
 8010e68:	e768      	b.n	8010d3c <_strtod_l+0x44c>
 8010e6a:	bf00      	nop
 8010e6c:	0802638d 	.word	0x0802638d
 8010e70:	080265a4 	.word	0x080265a4
 8010e74:	08026385 	.word	0x08026385
 8010e78:	080263bc 	.word	0x080263bc
 8010e7c:	0802674d 	.word	0x0802674d
 8010e80:	080264d8 	.word	0x080264d8
 8010e84:	080264b0 	.word	0x080264b0
 8010e88:	7ff00000 	.word	0x7ff00000
 8010e8c:	7ca00000 	.word	0x7ca00000
 8010e90:	7fefffff 	.word	0x7fefffff
 8010e94:	f014 0310 	ands.w	r3, r4, #16
 8010e98:	bf18      	it	ne
 8010e9a:	236a      	movne	r3, #106	@ 0x6a
 8010e9c:	4ea9      	ldr	r6, [pc, #676]	@ (8011144 <_strtod_l+0x854>)
 8010e9e:	9308      	str	r3, [sp, #32]
 8010ea0:	4650      	mov	r0, sl
 8010ea2:	4659      	mov	r1, fp
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	07e2      	lsls	r2, r4, #31
 8010ea8:	d504      	bpl.n	8010eb4 <_strtod_l+0x5c4>
 8010eaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010eae:	f7ef fc0b 	bl	80006c8 <__aeabi_dmul>
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	1064      	asrs	r4, r4, #1
 8010eb6:	f106 0608 	add.w	r6, r6, #8
 8010eba:	d1f4      	bne.n	8010ea6 <_strtod_l+0x5b6>
 8010ebc:	b10b      	cbz	r3, 8010ec2 <_strtod_l+0x5d2>
 8010ebe:	4682      	mov	sl, r0
 8010ec0:	468b      	mov	fp, r1
 8010ec2:	9b08      	ldr	r3, [sp, #32]
 8010ec4:	b1b3      	cbz	r3, 8010ef4 <_strtod_l+0x604>
 8010ec6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010eca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	4659      	mov	r1, fp
 8010ed2:	dd0f      	ble.n	8010ef4 <_strtod_l+0x604>
 8010ed4:	2b1f      	cmp	r3, #31
 8010ed6:	dd55      	ble.n	8010f84 <_strtod_l+0x694>
 8010ed8:	2b34      	cmp	r3, #52	@ 0x34
 8010eda:	bfde      	ittt	le
 8010edc:	f04f 33ff 	movle.w	r3, #4294967295
 8010ee0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010ee4:	4093      	lslle	r3, r2
 8010ee6:	f04f 0a00 	mov.w	sl, #0
 8010eea:	bfcc      	ite	gt
 8010eec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010ef0:	ea03 0b01 	andle.w	fp, r3, r1
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	4650      	mov	r0, sl
 8010efa:	4659      	mov	r1, fp
 8010efc:	f7ef fe4c 	bl	8000b98 <__aeabi_dcmpeq>
 8010f00:	2800      	cmp	r0, #0
 8010f02:	d1a6      	bne.n	8010e52 <_strtod_l+0x562>
 8010f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f06:	9300      	str	r3, [sp, #0]
 8010f08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010f0a:	9805      	ldr	r0, [sp, #20]
 8010f0c:	462b      	mov	r3, r5
 8010f0e:	463a      	mov	r2, r7
 8010f10:	f7ff f8c6 	bl	80100a0 <__s2b>
 8010f14:	900a      	str	r0, [sp, #40]	@ 0x28
 8010f16:	2800      	cmp	r0, #0
 8010f18:	f43f af05 	beq.w	8010d26 <_strtod_l+0x436>
 8010f1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f1e:	2a00      	cmp	r2, #0
 8010f20:	eba9 0308 	sub.w	r3, r9, r8
 8010f24:	bfa8      	it	ge
 8010f26:	2300      	movge	r3, #0
 8010f28:	9312      	str	r3, [sp, #72]	@ 0x48
 8010f2a:	2400      	movs	r4, #0
 8010f2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010f30:	9316      	str	r3, [sp, #88]	@ 0x58
 8010f32:	46a0      	mov	r8, r4
 8010f34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f36:	9805      	ldr	r0, [sp, #20]
 8010f38:	6859      	ldr	r1, [r3, #4]
 8010f3a:	f7ff f809 	bl	800ff50 <_Balloc>
 8010f3e:	4681      	mov	r9, r0
 8010f40:	2800      	cmp	r0, #0
 8010f42:	f43f aef4 	beq.w	8010d2e <_strtod_l+0x43e>
 8010f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f48:	691a      	ldr	r2, [r3, #16]
 8010f4a:	3202      	adds	r2, #2
 8010f4c:	f103 010c 	add.w	r1, r3, #12
 8010f50:	0092      	lsls	r2, r2, #2
 8010f52:	300c      	adds	r0, #12
 8010f54:	f7fe f899 	bl	800f08a <memcpy>
 8010f58:	ec4b ab10 	vmov	d0, sl, fp
 8010f5c:	9805      	ldr	r0, [sp, #20]
 8010f5e:	aa1c      	add	r2, sp, #112	@ 0x70
 8010f60:	a91b      	add	r1, sp, #108	@ 0x6c
 8010f62:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010f66:	f7ff fbd7 	bl	8010718 <__d2b>
 8010f6a:	901a      	str	r0, [sp, #104]	@ 0x68
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	f43f aede 	beq.w	8010d2e <_strtod_l+0x43e>
 8010f72:	9805      	ldr	r0, [sp, #20]
 8010f74:	2101      	movs	r1, #1
 8010f76:	f7ff f929 	bl	80101cc <__i2b>
 8010f7a:	4680      	mov	r8, r0
 8010f7c:	b948      	cbnz	r0, 8010f92 <_strtod_l+0x6a2>
 8010f7e:	f04f 0800 	mov.w	r8, #0
 8010f82:	e6d4      	b.n	8010d2e <_strtod_l+0x43e>
 8010f84:	f04f 32ff 	mov.w	r2, #4294967295
 8010f88:	fa02 f303 	lsl.w	r3, r2, r3
 8010f8c:	ea03 0a0a 	and.w	sl, r3, sl
 8010f90:	e7b0      	b.n	8010ef4 <_strtod_l+0x604>
 8010f92:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010f94:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010f96:	2d00      	cmp	r5, #0
 8010f98:	bfab      	itete	ge
 8010f9a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010f9c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010f9e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010fa0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010fa2:	bfac      	ite	ge
 8010fa4:	18ef      	addge	r7, r5, r3
 8010fa6:	1b5e      	sublt	r6, r3, r5
 8010fa8:	9b08      	ldr	r3, [sp, #32]
 8010faa:	1aed      	subs	r5, r5, r3
 8010fac:	4415      	add	r5, r2
 8010fae:	4b66      	ldr	r3, [pc, #408]	@ (8011148 <_strtod_l+0x858>)
 8010fb0:	3d01      	subs	r5, #1
 8010fb2:	429d      	cmp	r5, r3
 8010fb4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010fb8:	da50      	bge.n	801105c <_strtod_l+0x76c>
 8010fba:	1b5b      	subs	r3, r3, r5
 8010fbc:	2b1f      	cmp	r3, #31
 8010fbe:	eba2 0203 	sub.w	r2, r2, r3
 8010fc2:	f04f 0101 	mov.w	r1, #1
 8010fc6:	dc3d      	bgt.n	8011044 <_strtod_l+0x754>
 8010fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8010fcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010fce:	2300      	movs	r3, #0
 8010fd0:	9310      	str	r3, [sp, #64]	@ 0x40
 8010fd2:	18bd      	adds	r5, r7, r2
 8010fd4:	9b08      	ldr	r3, [sp, #32]
 8010fd6:	42af      	cmp	r7, r5
 8010fd8:	4416      	add	r6, r2
 8010fda:	441e      	add	r6, r3
 8010fdc:	463b      	mov	r3, r7
 8010fde:	bfa8      	it	ge
 8010fe0:	462b      	movge	r3, r5
 8010fe2:	42b3      	cmp	r3, r6
 8010fe4:	bfa8      	it	ge
 8010fe6:	4633      	movge	r3, r6
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	bfc2      	ittt	gt
 8010fec:	1aed      	subgt	r5, r5, r3
 8010fee:	1af6      	subgt	r6, r6, r3
 8010ff0:	1aff      	subgt	r7, r7, r3
 8010ff2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	dd16      	ble.n	8011026 <_strtod_l+0x736>
 8010ff8:	4641      	mov	r1, r8
 8010ffa:	9805      	ldr	r0, [sp, #20]
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	f7ff f9a5 	bl	801034c <__pow5mult>
 8011002:	4680      	mov	r8, r0
 8011004:	2800      	cmp	r0, #0
 8011006:	d0ba      	beq.n	8010f7e <_strtod_l+0x68e>
 8011008:	4601      	mov	r1, r0
 801100a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801100c:	9805      	ldr	r0, [sp, #20]
 801100e:	f7ff f8f3 	bl	80101f8 <__multiply>
 8011012:	900e      	str	r0, [sp, #56]	@ 0x38
 8011014:	2800      	cmp	r0, #0
 8011016:	f43f ae8a 	beq.w	8010d2e <_strtod_l+0x43e>
 801101a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801101c:	9805      	ldr	r0, [sp, #20]
 801101e:	f7fe ffd7 	bl	800ffd0 <_Bfree>
 8011022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011024:	931a      	str	r3, [sp, #104]	@ 0x68
 8011026:	2d00      	cmp	r5, #0
 8011028:	dc1d      	bgt.n	8011066 <_strtod_l+0x776>
 801102a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801102c:	2b00      	cmp	r3, #0
 801102e:	dd23      	ble.n	8011078 <_strtod_l+0x788>
 8011030:	4649      	mov	r1, r9
 8011032:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011034:	9805      	ldr	r0, [sp, #20]
 8011036:	f7ff f989 	bl	801034c <__pow5mult>
 801103a:	4681      	mov	r9, r0
 801103c:	b9e0      	cbnz	r0, 8011078 <_strtod_l+0x788>
 801103e:	f04f 0900 	mov.w	r9, #0
 8011042:	e674      	b.n	8010d2e <_strtod_l+0x43e>
 8011044:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011048:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801104c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011050:	35e2      	adds	r5, #226	@ 0xe2
 8011052:	fa01 f305 	lsl.w	r3, r1, r5
 8011056:	9310      	str	r3, [sp, #64]	@ 0x40
 8011058:	9113      	str	r1, [sp, #76]	@ 0x4c
 801105a:	e7ba      	b.n	8010fd2 <_strtod_l+0x6e2>
 801105c:	2300      	movs	r3, #0
 801105e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011060:	2301      	movs	r3, #1
 8011062:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011064:	e7b5      	b.n	8010fd2 <_strtod_l+0x6e2>
 8011066:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011068:	9805      	ldr	r0, [sp, #20]
 801106a:	462a      	mov	r2, r5
 801106c:	f7ff f9c8 	bl	8010400 <__lshift>
 8011070:	901a      	str	r0, [sp, #104]	@ 0x68
 8011072:	2800      	cmp	r0, #0
 8011074:	d1d9      	bne.n	801102a <_strtod_l+0x73a>
 8011076:	e65a      	b.n	8010d2e <_strtod_l+0x43e>
 8011078:	2e00      	cmp	r6, #0
 801107a:	dd07      	ble.n	801108c <_strtod_l+0x79c>
 801107c:	4649      	mov	r1, r9
 801107e:	9805      	ldr	r0, [sp, #20]
 8011080:	4632      	mov	r2, r6
 8011082:	f7ff f9bd 	bl	8010400 <__lshift>
 8011086:	4681      	mov	r9, r0
 8011088:	2800      	cmp	r0, #0
 801108a:	d0d8      	beq.n	801103e <_strtod_l+0x74e>
 801108c:	2f00      	cmp	r7, #0
 801108e:	dd08      	ble.n	80110a2 <_strtod_l+0x7b2>
 8011090:	4641      	mov	r1, r8
 8011092:	9805      	ldr	r0, [sp, #20]
 8011094:	463a      	mov	r2, r7
 8011096:	f7ff f9b3 	bl	8010400 <__lshift>
 801109a:	4680      	mov	r8, r0
 801109c:	2800      	cmp	r0, #0
 801109e:	f43f ae46 	beq.w	8010d2e <_strtod_l+0x43e>
 80110a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80110a4:	9805      	ldr	r0, [sp, #20]
 80110a6:	464a      	mov	r2, r9
 80110a8:	f7ff fa32 	bl	8010510 <__mdiff>
 80110ac:	4604      	mov	r4, r0
 80110ae:	2800      	cmp	r0, #0
 80110b0:	f43f ae3d 	beq.w	8010d2e <_strtod_l+0x43e>
 80110b4:	68c3      	ldr	r3, [r0, #12]
 80110b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80110b8:	2300      	movs	r3, #0
 80110ba:	60c3      	str	r3, [r0, #12]
 80110bc:	4641      	mov	r1, r8
 80110be:	f7ff fa0b 	bl	80104d8 <__mcmp>
 80110c2:	2800      	cmp	r0, #0
 80110c4:	da46      	bge.n	8011154 <_strtod_l+0x864>
 80110c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110c8:	ea53 030a 	orrs.w	r3, r3, sl
 80110cc:	d16c      	bne.n	80111a8 <_strtod_l+0x8b8>
 80110ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d168      	bne.n	80111a8 <_strtod_l+0x8b8>
 80110d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80110da:	0d1b      	lsrs	r3, r3, #20
 80110dc:	051b      	lsls	r3, r3, #20
 80110de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80110e2:	d961      	bls.n	80111a8 <_strtod_l+0x8b8>
 80110e4:	6963      	ldr	r3, [r4, #20]
 80110e6:	b913      	cbnz	r3, 80110ee <_strtod_l+0x7fe>
 80110e8:	6923      	ldr	r3, [r4, #16]
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	dd5c      	ble.n	80111a8 <_strtod_l+0x8b8>
 80110ee:	4621      	mov	r1, r4
 80110f0:	2201      	movs	r2, #1
 80110f2:	9805      	ldr	r0, [sp, #20]
 80110f4:	f7ff f984 	bl	8010400 <__lshift>
 80110f8:	4641      	mov	r1, r8
 80110fa:	4604      	mov	r4, r0
 80110fc:	f7ff f9ec 	bl	80104d8 <__mcmp>
 8011100:	2800      	cmp	r0, #0
 8011102:	dd51      	ble.n	80111a8 <_strtod_l+0x8b8>
 8011104:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011108:	9a08      	ldr	r2, [sp, #32]
 801110a:	0d1b      	lsrs	r3, r3, #20
 801110c:	051b      	lsls	r3, r3, #20
 801110e:	2a00      	cmp	r2, #0
 8011110:	d06b      	beq.n	80111ea <_strtod_l+0x8fa>
 8011112:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011116:	d868      	bhi.n	80111ea <_strtod_l+0x8fa>
 8011118:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801111c:	f67f ae9d 	bls.w	8010e5a <_strtod_l+0x56a>
 8011120:	4b0a      	ldr	r3, [pc, #40]	@ (801114c <_strtod_l+0x85c>)
 8011122:	4650      	mov	r0, sl
 8011124:	4659      	mov	r1, fp
 8011126:	2200      	movs	r2, #0
 8011128:	f7ef face 	bl	80006c8 <__aeabi_dmul>
 801112c:	4b08      	ldr	r3, [pc, #32]	@ (8011150 <_strtod_l+0x860>)
 801112e:	400b      	ands	r3, r1
 8011130:	4682      	mov	sl, r0
 8011132:	468b      	mov	fp, r1
 8011134:	2b00      	cmp	r3, #0
 8011136:	f47f ae05 	bne.w	8010d44 <_strtod_l+0x454>
 801113a:	9a05      	ldr	r2, [sp, #20]
 801113c:	2322      	movs	r3, #34	@ 0x22
 801113e:	6013      	str	r3, [r2, #0]
 8011140:	e600      	b.n	8010d44 <_strtod_l+0x454>
 8011142:	bf00      	nop
 8011144:	080265d0 	.word	0x080265d0
 8011148:	fffffc02 	.word	0xfffffc02
 801114c:	39500000 	.word	0x39500000
 8011150:	7ff00000 	.word	0x7ff00000
 8011154:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011158:	d165      	bne.n	8011226 <_strtod_l+0x936>
 801115a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801115c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011160:	b35a      	cbz	r2, 80111ba <_strtod_l+0x8ca>
 8011162:	4a9f      	ldr	r2, [pc, #636]	@ (80113e0 <_strtod_l+0xaf0>)
 8011164:	4293      	cmp	r3, r2
 8011166:	d12b      	bne.n	80111c0 <_strtod_l+0x8d0>
 8011168:	9b08      	ldr	r3, [sp, #32]
 801116a:	4651      	mov	r1, sl
 801116c:	b303      	cbz	r3, 80111b0 <_strtod_l+0x8c0>
 801116e:	4b9d      	ldr	r3, [pc, #628]	@ (80113e4 <_strtod_l+0xaf4>)
 8011170:	465a      	mov	r2, fp
 8011172:	4013      	ands	r3, r2
 8011174:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011178:	f04f 32ff 	mov.w	r2, #4294967295
 801117c:	d81b      	bhi.n	80111b6 <_strtod_l+0x8c6>
 801117e:	0d1b      	lsrs	r3, r3, #20
 8011180:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011184:	fa02 f303 	lsl.w	r3, r2, r3
 8011188:	4299      	cmp	r1, r3
 801118a:	d119      	bne.n	80111c0 <_strtod_l+0x8d0>
 801118c:	4b96      	ldr	r3, [pc, #600]	@ (80113e8 <_strtod_l+0xaf8>)
 801118e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011190:	429a      	cmp	r2, r3
 8011192:	d102      	bne.n	801119a <_strtod_l+0x8aa>
 8011194:	3101      	adds	r1, #1
 8011196:	f43f adca 	beq.w	8010d2e <_strtod_l+0x43e>
 801119a:	4b92      	ldr	r3, [pc, #584]	@ (80113e4 <_strtod_l+0xaf4>)
 801119c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801119e:	401a      	ands	r2, r3
 80111a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80111a4:	f04f 0a00 	mov.w	sl, #0
 80111a8:	9b08      	ldr	r3, [sp, #32]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d1b8      	bne.n	8011120 <_strtod_l+0x830>
 80111ae:	e5c9      	b.n	8010d44 <_strtod_l+0x454>
 80111b0:	f04f 33ff 	mov.w	r3, #4294967295
 80111b4:	e7e8      	b.n	8011188 <_strtod_l+0x898>
 80111b6:	4613      	mov	r3, r2
 80111b8:	e7e6      	b.n	8011188 <_strtod_l+0x898>
 80111ba:	ea53 030a 	orrs.w	r3, r3, sl
 80111be:	d0a1      	beq.n	8011104 <_strtod_l+0x814>
 80111c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80111c2:	b1db      	cbz	r3, 80111fc <_strtod_l+0x90c>
 80111c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111c6:	4213      	tst	r3, r2
 80111c8:	d0ee      	beq.n	80111a8 <_strtod_l+0x8b8>
 80111ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111cc:	9a08      	ldr	r2, [sp, #32]
 80111ce:	4650      	mov	r0, sl
 80111d0:	4659      	mov	r1, fp
 80111d2:	b1bb      	cbz	r3, 8011204 <_strtod_l+0x914>
 80111d4:	f7ff fb6e 	bl	80108b4 <sulp>
 80111d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80111dc:	ec53 2b10 	vmov	r2, r3, d0
 80111e0:	f7ef f8bc 	bl	800035c <__adddf3>
 80111e4:	4682      	mov	sl, r0
 80111e6:	468b      	mov	fp, r1
 80111e8:	e7de      	b.n	80111a8 <_strtod_l+0x8b8>
 80111ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80111ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80111f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80111f6:	f04f 3aff 	mov.w	sl, #4294967295
 80111fa:	e7d5      	b.n	80111a8 <_strtod_l+0x8b8>
 80111fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80111fe:	ea13 0f0a 	tst.w	r3, sl
 8011202:	e7e1      	b.n	80111c8 <_strtod_l+0x8d8>
 8011204:	f7ff fb56 	bl	80108b4 <sulp>
 8011208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801120c:	ec53 2b10 	vmov	r2, r3, d0
 8011210:	f7ef f8a2 	bl	8000358 <__aeabi_dsub>
 8011214:	2200      	movs	r2, #0
 8011216:	2300      	movs	r3, #0
 8011218:	4682      	mov	sl, r0
 801121a:	468b      	mov	fp, r1
 801121c:	f7ef fcbc 	bl	8000b98 <__aeabi_dcmpeq>
 8011220:	2800      	cmp	r0, #0
 8011222:	d0c1      	beq.n	80111a8 <_strtod_l+0x8b8>
 8011224:	e619      	b.n	8010e5a <_strtod_l+0x56a>
 8011226:	4641      	mov	r1, r8
 8011228:	4620      	mov	r0, r4
 801122a:	f7ff facd 	bl	80107c8 <__ratio>
 801122e:	ec57 6b10 	vmov	r6, r7, d0
 8011232:	2200      	movs	r2, #0
 8011234:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011238:	4630      	mov	r0, r6
 801123a:	4639      	mov	r1, r7
 801123c:	f7ef fcc0 	bl	8000bc0 <__aeabi_dcmple>
 8011240:	2800      	cmp	r0, #0
 8011242:	d06f      	beq.n	8011324 <_strtod_l+0xa34>
 8011244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011246:	2b00      	cmp	r3, #0
 8011248:	d17a      	bne.n	8011340 <_strtod_l+0xa50>
 801124a:	f1ba 0f00 	cmp.w	sl, #0
 801124e:	d158      	bne.n	8011302 <_strtod_l+0xa12>
 8011250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011252:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011256:	2b00      	cmp	r3, #0
 8011258:	d15a      	bne.n	8011310 <_strtod_l+0xa20>
 801125a:	4b64      	ldr	r3, [pc, #400]	@ (80113ec <_strtod_l+0xafc>)
 801125c:	2200      	movs	r2, #0
 801125e:	4630      	mov	r0, r6
 8011260:	4639      	mov	r1, r7
 8011262:	f7ef fca3 	bl	8000bac <__aeabi_dcmplt>
 8011266:	2800      	cmp	r0, #0
 8011268:	d159      	bne.n	801131e <_strtod_l+0xa2e>
 801126a:	4630      	mov	r0, r6
 801126c:	4639      	mov	r1, r7
 801126e:	4b60      	ldr	r3, [pc, #384]	@ (80113f0 <_strtod_l+0xb00>)
 8011270:	2200      	movs	r2, #0
 8011272:	f7ef fa29 	bl	80006c8 <__aeabi_dmul>
 8011276:	4606      	mov	r6, r0
 8011278:	460f      	mov	r7, r1
 801127a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801127e:	9606      	str	r6, [sp, #24]
 8011280:	9307      	str	r3, [sp, #28]
 8011282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011286:	4d57      	ldr	r5, [pc, #348]	@ (80113e4 <_strtod_l+0xaf4>)
 8011288:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801128c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801128e:	401d      	ands	r5, r3
 8011290:	4b58      	ldr	r3, [pc, #352]	@ (80113f4 <_strtod_l+0xb04>)
 8011292:	429d      	cmp	r5, r3
 8011294:	f040 80b2 	bne.w	80113fc <_strtod_l+0xb0c>
 8011298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801129a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801129e:	ec4b ab10 	vmov	d0, sl, fp
 80112a2:	f7ff f9c9 	bl	8010638 <__ulp>
 80112a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80112aa:	ec51 0b10 	vmov	r0, r1, d0
 80112ae:	f7ef fa0b 	bl	80006c8 <__aeabi_dmul>
 80112b2:	4652      	mov	r2, sl
 80112b4:	465b      	mov	r3, fp
 80112b6:	f7ef f851 	bl	800035c <__adddf3>
 80112ba:	460b      	mov	r3, r1
 80112bc:	4949      	ldr	r1, [pc, #292]	@ (80113e4 <_strtod_l+0xaf4>)
 80112be:	4a4e      	ldr	r2, [pc, #312]	@ (80113f8 <_strtod_l+0xb08>)
 80112c0:	4019      	ands	r1, r3
 80112c2:	4291      	cmp	r1, r2
 80112c4:	4682      	mov	sl, r0
 80112c6:	d942      	bls.n	801134e <_strtod_l+0xa5e>
 80112c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80112ca:	4b47      	ldr	r3, [pc, #284]	@ (80113e8 <_strtod_l+0xaf8>)
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d103      	bne.n	80112d8 <_strtod_l+0x9e8>
 80112d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80112d2:	3301      	adds	r3, #1
 80112d4:	f43f ad2b 	beq.w	8010d2e <_strtod_l+0x43e>
 80112d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80113e8 <_strtod_l+0xaf8>
 80112dc:	f04f 3aff 	mov.w	sl, #4294967295
 80112e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80112e2:	9805      	ldr	r0, [sp, #20]
 80112e4:	f7fe fe74 	bl	800ffd0 <_Bfree>
 80112e8:	9805      	ldr	r0, [sp, #20]
 80112ea:	4649      	mov	r1, r9
 80112ec:	f7fe fe70 	bl	800ffd0 <_Bfree>
 80112f0:	9805      	ldr	r0, [sp, #20]
 80112f2:	4641      	mov	r1, r8
 80112f4:	f7fe fe6c 	bl	800ffd0 <_Bfree>
 80112f8:	9805      	ldr	r0, [sp, #20]
 80112fa:	4621      	mov	r1, r4
 80112fc:	f7fe fe68 	bl	800ffd0 <_Bfree>
 8011300:	e618      	b.n	8010f34 <_strtod_l+0x644>
 8011302:	f1ba 0f01 	cmp.w	sl, #1
 8011306:	d103      	bne.n	8011310 <_strtod_l+0xa20>
 8011308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801130a:	2b00      	cmp	r3, #0
 801130c:	f43f ada5 	beq.w	8010e5a <_strtod_l+0x56a>
 8011310:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80113c0 <_strtod_l+0xad0>
 8011314:	4f35      	ldr	r7, [pc, #212]	@ (80113ec <_strtod_l+0xafc>)
 8011316:	ed8d 7b06 	vstr	d7, [sp, #24]
 801131a:	2600      	movs	r6, #0
 801131c:	e7b1      	b.n	8011282 <_strtod_l+0x992>
 801131e:	4f34      	ldr	r7, [pc, #208]	@ (80113f0 <_strtod_l+0xb00>)
 8011320:	2600      	movs	r6, #0
 8011322:	e7aa      	b.n	801127a <_strtod_l+0x98a>
 8011324:	4b32      	ldr	r3, [pc, #200]	@ (80113f0 <_strtod_l+0xb00>)
 8011326:	4630      	mov	r0, r6
 8011328:	4639      	mov	r1, r7
 801132a:	2200      	movs	r2, #0
 801132c:	f7ef f9cc 	bl	80006c8 <__aeabi_dmul>
 8011330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011332:	4606      	mov	r6, r0
 8011334:	460f      	mov	r7, r1
 8011336:	2b00      	cmp	r3, #0
 8011338:	d09f      	beq.n	801127a <_strtod_l+0x98a>
 801133a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801133e:	e7a0      	b.n	8011282 <_strtod_l+0x992>
 8011340:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80113c8 <_strtod_l+0xad8>
 8011344:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011348:	ec57 6b17 	vmov	r6, r7, d7
 801134c:	e799      	b.n	8011282 <_strtod_l+0x992>
 801134e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011352:	9b08      	ldr	r3, [sp, #32]
 8011354:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011358:	2b00      	cmp	r3, #0
 801135a:	d1c1      	bne.n	80112e0 <_strtod_l+0x9f0>
 801135c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011360:	0d1b      	lsrs	r3, r3, #20
 8011362:	051b      	lsls	r3, r3, #20
 8011364:	429d      	cmp	r5, r3
 8011366:	d1bb      	bne.n	80112e0 <_strtod_l+0x9f0>
 8011368:	4630      	mov	r0, r6
 801136a:	4639      	mov	r1, r7
 801136c:	f7ef fd0c 	bl	8000d88 <__aeabi_d2lz>
 8011370:	f7ef f97c 	bl	800066c <__aeabi_l2d>
 8011374:	4602      	mov	r2, r0
 8011376:	460b      	mov	r3, r1
 8011378:	4630      	mov	r0, r6
 801137a:	4639      	mov	r1, r7
 801137c:	f7ee ffec 	bl	8000358 <__aeabi_dsub>
 8011380:	460b      	mov	r3, r1
 8011382:	4602      	mov	r2, r0
 8011384:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011388:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801138c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801138e:	ea46 060a 	orr.w	r6, r6, sl
 8011392:	431e      	orrs	r6, r3
 8011394:	d06f      	beq.n	8011476 <_strtod_l+0xb86>
 8011396:	a30e      	add	r3, pc, #56	@ (adr r3, 80113d0 <_strtod_l+0xae0>)
 8011398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139c:	f7ef fc06 	bl	8000bac <__aeabi_dcmplt>
 80113a0:	2800      	cmp	r0, #0
 80113a2:	f47f accf 	bne.w	8010d44 <_strtod_l+0x454>
 80113a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80113d8 <_strtod_l+0xae8>)
 80113a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80113b0:	f7ef fc1a 	bl	8000be8 <__aeabi_dcmpgt>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	d093      	beq.n	80112e0 <_strtod_l+0x9f0>
 80113b8:	e4c4      	b.n	8010d44 <_strtod_l+0x454>
 80113ba:	bf00      	nop
 80113bc:	f3af 8000 	nop.w
 80113c0:	00000000 	.word	0x00000000
 80113c4:	bff00000 	.word	0xbff00000
 80113c8:	00000000 	.word	0x00000000
 80113cc:	3ff00000 	.word	0x3ff00000
 80113d0:	94a03595 	.word	0x94a03595
 80113d4:	3fdfffff 	.word	0x3fdfffff
 80113d8:	35afe535 	.word	0x35afe535
 80113dc:	3fe00000 	.word	0x3fe00000
 80113e0:	000fffff 	.word	0x000fffff
 80113e4:	7ff00000 	.word	0x7ff00000
 80113e8:	7fefffff 	.word	0x7fefffff
 80113ec:	3ff00000 	.word	0x3ff00000
 80113f0:	3fe00000 	.word	0x3fe00000
 80113f4:	7fe00000 	.word	0x7fe00000
 80113f8:	7c9fffff 	.word	0x7c9fffff
 80113fc:	9b08      	ldr	r3, [sp, #32]
 80113fe:	b323      	cbz	r3, 801144a <_strtod_l+0xb5a>
 8011400:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011404:	d821      	bhi.n	801144a <_strtod_l+0xb5a>
 8011406:	a328      	add	r3, pc, #160	@ (adr r3, 80114a8 <_strtod_l+0xbb8>)
 8011408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140c:	4630      	mov	r0, r6
 801140e:	4639      	mov	r1, r7
 8011410:	f7ef fbd6 	bl	8000bc0 <__aeabi_dcmple>
 8011414:	b1a0      	cbz	r0, 8011440 <_strtod_l+0xb50>
 8011416:	4639      	mov	r1, r7
 8011418:	4630      	mov	r0, r6
 801141a:	f7ef fc2d 	bl	8000c78 <__aeabi_d2uiz>
 801141e:	2801      	cmp	r0, #1
 8011420:	bf38      	it	cc
 8011422:	2001      	movcc	r0, #1
 8011424:	f7ef f8d6 	bl	80005d4 <__aeabi_ui2d>
 8011428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801142a:	4606      	mov	r6, r0
 801142c:	460f      	mov	r7, r1
 801142e:	b9fb      	cbnz	r3, 8011470 <_strtod_l+0xb80>
 8011430:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011434:	9014      	str	r0, [sp, #80]	@ 0x50
 8011436:	9315      	str	r3, [sp, #84]	@ 0x54
 8011438:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801143c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011440:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011442:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011446:	1b5b      	subs	r3, r3, r5
 8011448:	9311      	str	r3, [sp, #68]	@ 0x44
 801144a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801144e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011452:	f7ff f8f1 	bl	8010638 <__ulp>
 8011456:	4650      	mov	r0, sl
 8011458:	ec53 2b10 	vmov	r2, r3, d0
 801145c:	4659      	mov	r1, fp
 801145e:	f7ef f933 	bl	80006c8 <__aeabi_dmul>
 8011462:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011466:	f7ee ff79 	bl	800035c <__adddf3>
 801146a:	4682      	mov	sl, r0
 801146c:	468b      	mov	fp, r1
 801146e:	e770      	b.n	8011352 <_strtod_l+0xa62>
 8011470:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011474:	e7e0      	b.n	8011438 <_strtod_l+0xb48>
 8011476:	a30e      	add	r3, pc, #56	@ (adr r3, 80114b0 <_strtod_l+0xbc0>)
 8011478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147c:	f7ef fb96 	bl	8000bac <__aeabi_dcmplt>
 8011480:	e798      	b.n	80113b4 <_strtod_l+0xac4>
 8011482:	2300      	movs	r3, #0
 8011484:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011486:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011488:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801148a:	6013      	str	r3, [r2, #0]
 801148c:	f7ff ba6d 	b.w	801096a <_strtod_l+0x7a>
 8011490:	2a65      	cmp	r2, #101	@ 0x65
 8011492:	f43f ab66 	beq.w	8010b62 <_strtod_l+0x272>
 8011496:	2a45      	cmp	r2, #69	@ 0x45
 8011498:	f43f ab63 	beq.w	8010b62 <_strtod_l+0x272>
 801149c:	2301      	movs	r3, #1
 801149e:	f7ff bb9e 	b.w	8010bde <_strtod_l+0x2ee>
 80114a2:	bf00      	nop
 80114a4:	f3af 8000 	nop.w
 80114a8:	ffc00000 	.word	0xffc00000
 80114ac:	41dfffff 	.word	0x41dfffff
 80114b0:	94a03595 	.word	0x94a03595
 80114b4:	3fcfffff 	.word	0x3fcfffff

080114b8 <_strtod_r>:
 80114b8:	4b01      	ldr	r3, [pc, #4]	@ (80114c0 <_strtod_r+0x8>)
 80114ba:	f7ff ba19 	b.w	80108f0 <_strtod_l>
 80114be:	bf00      	nop
 80114c0:	20000070 	.word	0x20000070

080114c4 <_strtol_l.constprop.0>:
 80114c4:	2b24      	cmp	r3, #36	@ 0x24
 80114c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114ca:	4686      	mov	lr, r0
 80114cc:	4690      	mov	r8, r2
 80114ce:	d801      	bhi.n	80114d4 <_strtol_l.constprop.0+0x10>
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d106      	bne.n	80114e2 <_strtol_l.constprop.0+0x1e>
 80114d4:	f7fd fdac 	bl	800f030 <__errno>
 80114d8:	2316      	movs	r3, #22
 80114da:	6003      	str	r3, [r0, #0]
 80114dc:	2000      	movs	r0, #0
 80114de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114e2:	4834      	ldr	r0, [pc, #208]	@ (80115b4 <_strtol_l.constprop.0+0xf0>)
 80114e4:	460d      	mov	r5, r1
 80114e6:	462a      	mov	r2, r5
 80114e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114ec:	5d06      	ldrb	r6, [r0, r4]
 80114ee:	f016 0608 	ands.w	r6, r6, #8
 80114f2:	d1f8      	bne.n	80114e6 <_strtol_l.constprop.0+0x22>
 80114f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80114f6:	d12d      	bne.n	8011554 <_strtol_l.constprop.0+0x90>
 80114f8:	782c      	ldrb	r4, [r5, #0]
 80114fa:	2601      	movs	r6, #1
 80114fc:	1c95      	adds	r5, r2, #2
 80114fe:	f033 0210 	bics.w	r2, r3, #16
 8011502:	d109      	bne.n	8011518 <_strtol_l.constprop.0+0x54>
 8011504:	2c30      	cmp	r4, #48	@ 0x30
 8011506:	d12a      	bne.n	801155e <_strtol_l.constprop.0+0x9a>
 8011508:	782a      	ldrb	r2, [r5, #0]
 801150a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801150e:	2a58      	cmp	r2, #88	@ 0x58
 8011510:	d125      	bne.n	801155e <_strtol_l.constprop.0+0x9a>
 8011512:	786c      	ldrb	r4, [r5, #1]
 8011514:	2310      	movs	r3, #16
 8011516:	3502      	adds	r5, #2
 8011518:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801151c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011520:	2200      	movs	r2, #0
 8011522:	fbbc f9f3 	udiv	r9, ip, r3
 8011526:	4610      	mov	r0, r2
 8011528:	fb03 ca19 	mls	sl, r3, r9, ip
 801152c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011530:	2f09      	cmp	r7, #9
 8011532:	d81b      	bhi.n	801156c <_strtol_l.constprop.0+0xa8>
 8011534:	463c      	mov	r4, r7
 8011536:	42a3      	cmp	r3, r4
 8011538:	dd27      	ble.n	801158a <_strtol_l.constprop.0+0xc6>
 801153a:	1c57      	adds	r7, r2, #1
 801153c:	d007      	beq.n	801154e <_strtol_l.constprop.0+0x8a>
 801153e:	4581      	cmp	r9, r0
 8011540:	d320      	bcc.n	8011584 <_strtol_l.constprop.0+0xc0>
 8011542:	d101      	bne.n	8011548 <_strtol_l.constprop.0+0x84>
 8011544:	45a2      	cmp	sl, r4
 8011546:	db1d      	blt.n	8011584 <_strtol_l.constprop.0+0xc0>
 8011548:	fb00 4003 	mla	r0, r0, r3, r4
 801154c:	2201      	movs	r2, #1
 801154e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011552:	e7eb      	b.n	801152c <_strtol_l.constprop.0+0x68>
 8011554:	2c2b      	cmp	r4, #43	@ 0x2b
 8011556:	bf04      	itt	eq
 8011558:	782c      	ldrbeq	r4, [r5, #0]
 801155a:	1c95      	addeq	r5, r2, #2
 801155c:	e7cf      	b.n	80114fe <_strtol_l.constprop.0+0x3a>
 801155e:	2b00      	cmp	r3, #0
 8011560:	d1da      	bne.n	8011518 <_strtol_l.constprop.0+0x54>
 8011562:	2c30      	cmp	r4, #48	@ 0x30
 8011564:	bf0c      	ite	eq
 8011566:	2308      	moveq	r3, #8
 8011568:	230a      	movne	r3, #10
 801156a:	e7d5      	b.n	8011518 <_strtol_l.constprop.0+0x54>
 801156c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011570:	2f19      	cmp	r7, #25
 8011572:	d801      	bhi.n	8011578 <_strtol_l.constprop.0+0xb4>
 8011574:	3c37      	subs	r4, #55	@ 0x37
 8011576:	e7de      	b.n	8011536 <_strtol_l.constprop.0+0x72>
 8011578:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801157c:	2f19      	cmp	r7, #25
 801157e:	d804      	bhi.n	801158a <_strtol_l.constprop.0+0xc6>
 8011580:	3c57      	subs	r4, #87	@ 0x57
 8011582:	e7d8      	b.n	8011536 <_strtol_l.constprop.0+0x72>
 8011584:	f04f 32ff 	mov.w	r2, #4294967295
 8011588:	e7e1      	b.n	801154e <_strtol_l.constprop.0+0x8a>
 801158a:	1c53      	adds	r3, r2, #1
 801158c:	d108      	bne.n	80115a0 <_strtol_l.constprop.0+0xdc>
 801158e:	2322      	movs	r3, #34	@ 0x22
 8011590:	f8ce 3000 	str.w	r3, [lr]
 8011594:	4660      	mov	r0, ip
 8011596:	f1b8 0f00 	cmp.w	r8, #0
 801159a:	d0a0      	beq.n	80114de <_strtol_l.constprop.0+0x1a>
 801159c:	1e69      	subs	r1, r5, #1
 801159e:	e006      	b.n	80115ae <_strtol_l.constprop.0+0xea>
 80115a0:	b106      	cbz	r6, 80115a4 <_strtol_l.constprop.0+0xe0>
 80115a2:	4240      	negs	r0, r0
 80115a4:	f1b8 0f00 	cmp.w	r8, #0
 80115a8:	d099      	beq.n	80114de <_strtol_l.constprop.0+0x1a>
 80115aa:	2a00      	cmp	r2, #0
 80115ac:	d1f6      	bne.n	801159c <_strtol_l.constprop.0+0xd8>
 80115ae:	f8c8 1000 	str.w	r1, [r8]
 80115b2:	e794      	b.n	80114de <_strtol_l.constprop.0+0x1a>
 80115b4:	080265f9 	.word	0x080265f9

080115b8 <_strtol_r>:
 80115b8:	f7ff bf84 	b.w	80114c4 <_strtol_l.constprop.0>

080115bc <__ssputs_r>:
 80115bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115c0:	688e      	ldr	r6, [r1, #8]
 80115c2:	461f      	mov	r7, r3
 80115c4:	42be      	cmp	r6, r7
 80115c6:	680b      	ldr	r3, [r1, #0]
 80115c8:	4682      	mov	sl, r0
 80115ca:	460c      	mov	r4, r1
 80115cc:	4690      	mov	r8, r2
 80115ce:	d82d      	bhi.n	801162c <__ssputs_r+0x70>
 80115d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80115d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80115d8:	d026      	beq.n	8011628 <__ssputs_r+0x6c>
 80115da:	6965      	ldr	r5, [r4, #20]
 80115dc:	6909      	ldr	r1, [r1, #16]
 80115de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80115e2:	eba3 0901 	sub.w	r9, r3, r1
 80115e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80115ea:	1c7b      	adds	r3, r7, #1
 80115ec:	444b      	add	r3, r9
 80115ee:	106d      	asrs	r5, r5, #1
 80115f0:	429d      	cmp	r5, r3
 80115f2:	bf38      	it	cc
 80115f4:	461d      	movcc	r5, r3
 80115f6:	0553      	lsls	r3, r2, #21
 80115f8:	d527      	bpl.n	801164a <__ssputs_r+0x8e>
 80115fa:	4629      	mov	r1, r5
 80115fc:	f7fe fc1c 	bl	800fe38 <_malloc_r>
 8011600:	4606      	mov	r6, r0
 8011602:	b360      	cbz	r0, 801165e <__ssputs_r+0xa2>
 8011604:	6921      	ldr	r1, [r4, #16]
 8011606:	464a      	mov	r2, r9
 8011608:	f7fd fd3f 	bl	800f08a <memcpy>
 801160c:	89a3      	ldrh	r3, [r4, #12]
 801160e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011616:	81a3      	strh	r3, [r4, #12]
 8011618:	6126      	str	r6, [r4, #16]
 801161a:	6165      	str	r5, [r4, #20]
 801161c:	444e      	add	r6, r9
 801161e:	eba5 0509 	sub.w	r5, r5, r9
 8011622:	6026      	str	r6, [r4, #0]
 8011624:	60a5      	str	r5, [r4, #8]
 8011626:	463e      	mov	r6, r7
 8011628:	42be      	cmp	r6, r7
 801162a:	d900      	bls.n	801162e <__ssputs_r+0x72>
 801162c:	463e      	mov	r6, r7
 801162e:	6820      	ldr	r0, [r4, #0]
 8011630:	4632      	mov	r2, r6
 8011632:	4641      	mov	r1, r8
 8011634:	f000 f9c6 	bl	80119c4 <memmove>
 8011638:	68a3      	ldr	r3, [r4, #8]
 801163a:	1b9b      	subs	r3, r3, r6
 801163c:	60a3      	str	r3, [r4, #8]
 801163e:	6823      	ldr	r3, [r4, #0]
 8011640:	4433      	add	r3, r6
 8011642:	6023      	str	r3, [r4, #0]
 8011644:	2000      	movs	r0, #0
 8011646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801164a:	462a      	mov	r2, r5
 801164c:	f000 fd7d 	bl	801214a <_realloc_r>
 8011650:	4606      	mov	r6, r0
 8011652:	2800      	cmp	r0, #0
 8011654:	d1e0      	bne.n	8011618 <__ssputs_r+0x5c>
 8011656:	6921      	ldr	r1, [r4, #16]
 8011658:	4650      	mov	r0, sl
 801165a:	f7fe fb79 	bl	800fd50 <_free_r>
 801165e:	230c      	movs	r3, #12
 8011660:	f8ca 3000 	str.w	r3, [sl]
 8011664:	89a3      	ldrh	r3, [r4, #12]
 8011666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801166a:	81a3      	strh	r3, [r4, #12]
 801166c:	f04f 30ff 	mov.w	r0, #4294967295
 8011670:	e7e9      	b.n	8011646 <__ssputs_r+0x8a>
	...

08011674 <_svfiprintf_r>:
 8011674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011678:	4698      	mov	r8, r3
 801167a:	898b      	ldrh	r3, [r1, #12]
 801167c:	061b      	lsls	r3, r3, #24
 801167e:	b09d      	sub	sp, #116	@ 0x74
 8011680:	4607      	mov	r7, r0
 8011682:	460d      	mov	r5, r1
 8011684:	4614      	mov	r4, r2
 8011686:	d510      	bpl.n	80116aa <_svfiprintf_r+0x36>
 8011688:	690b      	ldr	r3, [r1, #16]
 801168a:	b973      	cbnz	r3, 80116aa <_svfiprintf_r+0x36>
 801168c:	2140      	movs	r1, #64	@ 0x40
 801168e:	f7fe fbd3 	bl	800fe38 <_malloc_r>
 8011692:	6028      	str	r0, [r5, #0]
 8011694:	6128      	str	r0, [r5, #16]
 8011696:	b930      	cbnz	r0, 80116a6 <_svfiprintf_r+0x32>
 8011698:	230c      	movs	r3, #12
 801169a:	603b      	str	r3, [r7, #0]
 801169c:	f04f 30ff 	mov.w	r0, #4294967295
 80116a0:	b01d      	add	sp, #116	@ 0x74
 80116a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116a6:	2340      	movs	r3, #64	@ 0x40
 80116a8:	616b      	str	r3, [r5, #20]
 80116aa:	2300      	movs	r3, #0
 80116ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80116ae:	2320      	movs	r3, #32
 80116b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80116b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80116b8:	2330      	movs	r3, #48	@ 0x30
 80116ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011858 <_svfiprintf_r+0x1e4>
 80116be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80116c2:	f04f 0901 	mov.w	r9, #1
 80116c6:	4623      	mov	r3, r4
 80116c8:	469a      	mov	sl, r3
 80116ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116ce:	b10a      	cbz	r2, 80116d4 <_svfiprintf_r+0x60>
 80116d0:	2a25      	cmp	r2, #37	@ 0x25
 80116d2:	d1f9      	bne.n	80116c8 <_svfiprintf_r+0x54>
 80116d4:	ebba 0b04 	subs.w	fp, sl, r4
 80116d8:	d00b      	beq.n	80116f2 <_svfiprintf_r+0x7e>
 80116da:	465b      	mov	r3, fp
 80116dc:	4622      	mov	r2, r4
 80116de:	4629      	mov	r1, r5
 80116e0:	4638      	mov	r0, r7
 80116e2:	f7ff ff6b 	bl	80115bc <__ssputs_r>
 80116e6:	3001      	adds	r0, #1
 80116e8:	f000 80a7 	beq.w	801183a <_svfiprintf_r+0x1c6>
 80116ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116ee:	445a      	add	r2, fp
 80116f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80116f2:	f89a 3000 	ldrb.w	r3, [sl]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	f000 809f 	beq.w	801183a <_svfiprintf_r+0x1c6>
 80116fc:	2300      	movs	r3, #0
 80116fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011706:	f10a 0a01 	add.w	sl, sl, #1
 801170a:	9304      	str	r3, [sp, #16]
 801170c:	9307      	str	r3, [sp, #28]
 801170e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011712:	931a      	str	r3, [sp, #104]	@ 0x68
 8011714:	4654      	mov	r4, sl
 8011716:	2205      	movs	r2, #5
 8011718:	f814 1b01 	ldrb.w	r1, [r4], #1
 801171c:	484e      	ldr	r0, [pc, #312]	@ (8011858 <_svfiprintf_r+0x1e4>)
 801171e:	f7ee fdbf 	bl	80002a0 <memchr>
 8011722:	9a04      	ldr	r2, [sp, #16]
 8011724:	b9d8      	cbnz	r0, 801175e <_svfiprintf_r+0xea>
 8011726:	06d0      	lsls	r0, r2, #27
 8011728:	bf44      	itt	mi
 801172a:	2320      	movmi	r3, #32
 801172c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011730:	0711      	lsls	r1, r2, #28
 8011732:	bf44      	itt	mi
 8011734:	232b      	movmi	r3, #43	@ 0x2b
 8011736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801173a:	f89a 3000 	ldrb.w	r3, [sl]
 801173e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011740:	d015      	beq.n	801176e <_svfiprintf_r+0xfa>
 8011742:	9a07      	ldr	r2, [sp, #28]
 8011744:	4654      	mov	r4, sl
 8011746:	2000      	movs	r0, #0
 8011748:	f04f 0c0a 	mov.w	ip, #10
 801174c:	4621      	mov	r1, r4
 801174e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011752:	3b30      	subs	r3, #48	@ 0x30
 8011754:	2b09      	cmp	r3, #9
 8011756:	d94b      	bls.n	80117f0 <_svfiprintf_r+0x17c>
 8011758:	b1b0      	cbz	r0, 8011788 <_svfiprintf_r+0x114>
 801175a:	9207      	str	r2, [sp, #28]
 801175c:	e014      	b.n	8011788 <_svfiprintf_r+0x114>
 801175e:	eba0 0308 	sub.w	r3, r0, r8
 8011762:	fa09 f303 	lsl.w	r3, r9, r3
 8011766:	4313      	orrs	r3, r2
 8011768:	9304      	str	r3, [sp, #16]
 801176a:	46a2      	mov	sl, r4
 801176c:	e7d2      	b.n	8011714 <_svfiprintf_r+0xa0>
 801176e:	9b03      	ldr	r3, [sp, #12]
 8011770:	1d19      	adds	r1, r3, #4
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	9103      	str	r1, [sp, #12]
 8011776:	2b00      	cmp	r3, #0
 8011778:	bfbb      	ittet	lt
 801177a:	425b      	neglt	r3, r3
 801177c:	f042 0202 	orrlt.w	r2, r2, #2
 8011780:	9307      	strge	r3, [sp, #28]
 8011782:	9307      	strlt	r3, [sp, #28]
 8011784:	bfb8      	it	lt
 8011786:	9204      	strlt	r2, [sp, #16]
 8011788:	7823      	ldrb	r3, [r4, #0]
 801178a:	2b2e      	cmp	r3, #46	@ 0x2e
 801178c:	d10a      	bne.n	80117a4 <_svfiprintf_r+0x130>
 801178e:	7863      	ldrb	r3, [r4, #1]
 8011790:	2b2a      	cmp	r3, #42	@ 0x2a
 8011792:	d132      	bne.n	80117fa <_svfiprintf_r+0x186>
 8011794:	9b03      	ldr	r3, [sp, #12]
 8011796:	1d1a      	adds	r2, r3, #4
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	9203      	str	r2, [sp, #12]
 801179c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80117a0:	3402      	adds	r4, #2
 80117a2:	9305      	str	r3, [sp, #20]
 80117a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011868 <_svfiprintf_r+0x1f4>
 80117a8:	7821      	ldrb	r1, [r4, #0]
 80117aa:	2203      	movs	r2, #3
 80117ac:	4650      	mov	r0, sl
 80117ae:	f7ee fd77 	bl	80002a0 <memchr>
 80117b2:	b138      	cbz	r0, 80117c4 <_svfiprintf_r+0x150>
 80117b4:	9b04      	ldr	r3, [sp, #16]
 80117b6:	eba0 000a 	sub.w	r0, r0, sl
 80117ba:	2240      	movs	r2, #64	@ 0x40
 80117bc:	4082      	lsls	r2, r0
 80117be:	4313      	orrs	r3, r2
 80117c0:	3401      	adds	r4, #1
 80117c2:	9304      	str	r3, [sp, #16]
 80117c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117c8:	4824      	ldr	r0, [pc, #144]	@ (801185c <_svfiprintf_r+0x1e8>)
 80117ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80117ce:	2206      	movs	r2, #6
 80117d0:	f7ee fd66 	bl	80002a0 <memchr>
 80117d4:	2800      	cmp	r0, #0
 80117d6:	d036      	beq.n	8011846 <_svfiprintf_r+0x1d2>
 80117d8:	4b21      	ldr	r3, [pc, #132]	@ (8011860 <_svfiprintf_r+0x1ec>)
 80117da:	bb1b      	cbnz	r3, 8011824 <_svfiprintf_r+0x1b0>
 80117dc:	9b03      	ldr	r3, [sp, #12]
 80117de:	3307      	adds	r3, #7
 80117e0:	f023 0307 	bic.w	r3, r3, #7
 80117e4:	3308      	adds	r3, #8
 80117e6:	9303      	str	r3, [sp, #12]
 80117e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117ea:	4433      	add	r3, r6
 80117ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80117ee:	e76a      	b.n	80116c6 <_svfiprintf_r+0x52>
 80117f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80117f4:	460c      	mov	r4, r1
 80117f6:	2001      	movs	r0, #1
 80117f8:	e7a8      	b.n	801174c <_svfiprintf_r+0xd8>
 80117fa:	2300      	movs	r3, #0
 80117fc:	3401      	adds	r4, #1
 80117fe:	9305      	str	r3, [sp, #20]
 8011800:	4619      	mov	r1, r3
 8011802:	f04f 0c0a 	mov.w	ip, #10
 8011806:	4620      	mov	r0, r4
 8011808:	f810 2b01 	ldrb.w	r2, [r0], #1
 801180c:	3a30      	subs	r2, #48	@ 0x30
 801180e:	2a09      	cmp	r2, #9
 8011810:	d903      	bls.n	801181a <_svfiprintf_r+0x1a6>
 8011812:	2b00      	cmp	r3, #0
 8011814:	d0c6      	beq.n	80117a4 <_svfiprintf_r+0x130>
 8011816:	9105      	str	r1, [sp, #20]
 8011818:	e7c4      	b.n	80117a4 <_svfiprintf_r+0x130>
 801181a:	fb0c 2101 	mla	r1, ip, r1, r2
 801181e:	4604      	mov	r4, r0
 8011820:	2301      	movs	r3, #1
 8011822:	e7f0      	b.n	8011806 <_svfiprintf_r+0x192>
 8011824:	ab03      	add	r3, sp, #12
 8011826:	9300      	str	r3, [sp, #0]
 8011828:	462a      	mov	r2, r5
 801182a:	4b0e      	ldr	r3, [pc, #56]	@ (8011864 <_svfiprintf_r+0x1f0>)
 801182c:	a904      	add	r1, sp, #16
 801182e:	4638      	mov	r0, r7
 8011830:	f7fc fc64 	bl	800e0fc <_printf_float>
 8011834:	1c42      	adds	r2, r0, #1
 8011836:	4606      	mov	r6, r0
 8011838:	d1d6      	bne.n	80117e8 <_svfiprintf_r+0x174>
 801183a:	89ab      	ldrh	r3, [r5, #12]
 801183c:	065b      	lsls	r3, r3, #25
 801183e:	f53f af2d 	bmi.w	801169c <_svfiprintf_r+0x28>
 8011842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011844:	e72c      	b.n	80116a0 <_svfiprintf_r+0x2c>
 8011846:	ab03      	add	r3, sp, #12
 8011848:	9300      	str	r3, [sp, #0]
 801184a:	462a      	mov	r2, r5
 801184c:	4b05      	ldr	r3, [pc, #20]	@ (8011864 <_svfiprintf_r+0x1f0>)
 801184e:	a904      	add	r1, sp, #16
 8011850:	4638      	mov	r0, r7
 8011852:	f7fc feeb 	bl	800e62c <_printf_i>
 8011856:	e7ed      	b.n	8011834 <_svfiprintf_r+0x1c0>
 8011858:	080266f9 	.word	0x080266f9
 801185c:	08026703 	.word	0x08026703
 8011860:	0800e0fd 	.word	0x0800e0fd
 8011864:	080115bd 	.word	0x080115bd
 8011868:	080266ff 	.word	0x080266ff

0801186c <__sflush_r>:
 801186c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011874:	0716      	lsls	r6, r2, #28
 8011876:	4605      	mov	r5, r0
 8011878:	460c      	mov	r4, r1
 801187a:	d454      	bmi.n	8011926 <__sflush_r+0xba>
 801187c:	684b      	ldr	r3, [r1, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	dc02      	bgt.n	8011888 <__sflush_r+0x1c>
 8011882:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011884:	2b00      	cmp	r3, #0
 8011886:	dd48      	ble.n	801191a <__sflush_r+0xae>
 8011888:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801188a:	2e00      	cmp	r6, #0
 801188c:	d045      	beq.n	801191a <__sflush_r+0xae>
 801188e:	2300      	movs	r3, #0
 8011890:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011894:	682f      	ldr	r7, [r5, #0]
 8011896:	6a21      	ldr	r1, [r4, #32]
 8011898:	602b      	str	r3, [r5, #0]
 801189a:	d030      	beq.n	80118fe <__sflush_r+0x92>
 801189c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801189e:	89a3      	ldrh	r3, [r4, #12]
 80118a0:	0759      	lsls	r1, r3, #29
 80118a2:	d505      	bpl.n	80118b0 <__sflush_r+0x44>
 80118a4:	6863      	ldr	r3, [r4, #4]
 80118a6:	1ad2      	subs	r2, r2, r3
 80118a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80118aa:	b10b      	cbz	r3, 80118b0 <__sflush_r+0x44>
 80118ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80118ae:	1ad2      	subs	r2, r2, r3
 80118b0:	2300      	movs	r3, #0
 80118b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80118b4:	6a21      	ldr	r1, [r4, #32]
 80118b6:	4628      	mov	r0, r5
 80118b8:	47b0      	blx	r6
 80118ba:	1c43      	adds	r3, r0, #1
 80118bc:	89a3      	ldrh	r3, [r4, #12]
 80118be:	d106      	bne.n	80118ce <__sflush_r+0x62>
 80118c0:	6829      	ldr	r1, [r5, #0]
 80118c2:	291d      	cmp	r1, #29
 80118c4:	d82b      	bhi.n	801191e <__sflush_r+0xb2>
 80118c6:	4a2a      	ldr	r2, [pc, #168]	@ (8011970 <__sflush_r+0x104>)
 80118c8:	410a      	asrs	r2, r1
 80118ca:	07d6      	lsls	r6, r2, #31
 80118cc:	d427      	bmi.n	801191e <__sflush_r+0xb2>
 80118ce:	2200      	movs	r2, #0
 80118d0:	6062      	str	r2, [r4, #4]
 80118d2:	04d9      	lsls	r1, r3, #19
 80118d4:	6922      	ldr	r2, [r4, #16]
 80118d6:	6022      	str	r2, [r4, #0]
 80118d8:	d504      	bpl.n	80118e4 <__sflush_r+0x78>
 80118da:	1c42      	adds	r2, r0, #1
 80118dc:	d101      	bne.n	80118e2 <__sflush_r+0x76>
 80118de:	682b      	ldr	r3, [r5, #0]
 80118e0:	b903      	cbnz	r3, 80118e4 <__sflush_r+0x78>
 80118e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80118e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80118e6:	602f      	str	r7, [r5, #0]
 80118e8:	b1b9      	cbz	r1, 801191a <__sflush_r+0xae>
 80118ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80118ee:	4299      	cmp	r1, r3
 80118f0:	d002      	beq.n	80118f8 <__sflush_r+0x8c>
 80118f2:	4628      	mov	r0, r5
 80118f4:	f7fe fa2c 	bl	800fd50 <_free_r>
 80118f8:	2300      	movs	r3, #0
 80118fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80118fc:	e00d      	b.n	801191a <__sflush_r+0xae>
 80118fe:	2301      	movs	r3, #1
 8011900:	4628      	mov	r0, r5
 8011902:	47b0      	blx	r6
 8011904:	4602      	mov	r2, r0
 8011906:	1c50      	adds	r0, r2, #1
 8011908:	d1c9      	bne.n	801189e <__sflush_r+0x32>
 801190a:	682b      	ldr	r3, [r5, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d0c6      	beq.n	801189e <__sflush_r+0x32>
 8011910:	2b1d      	cmp	r3, #29
 8011912:	d001      	beq.n	8011918 <__sflush_r+0xac>
 8011914:	2b16      	cmp	r3, #22
 8011916:	d11e      	bne.n	8011956 <__sflush_r+0xea>
 8011918:	602f      	str	r7, [r5, #0]
 801191a:	2000      	movs	r0, #0
 801191c:	e022      	b.n	8011964 <__sflush_r+0xf8>
 801191e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011922:	b21b      	sxth	r3, r3
 8011924:	e01b      	b.n	801195e <__sflush_r+0xf2>
 8011926:	690f      	ldr	r7, [r1, #16]
 8011928:	2f00      	cmp	r7, #0
 801192a:	d0f6      	beq.n	801191a <__sflush_r+0xae>
 801192c:	0793      	lsls	r3, r2, #30
 801192e:	680e      	ldr	r6, [r1, #0]
 8011930:	bf08      	it	eq
 8011932:	694b      	ldreq	r3, [r1, #20]
 8011934:	600f      	str	r7, [r1, #0]
 8011936:	bf18      	it	ne
 8011938:	2300      	movne	r3, #0
 801193a:	eba6 0807 	sub.w	r8, r6, r7
 801193e:	608b      	str	r3, [r1, #8]
 8011940:	f1b8 0f00 	cmp.w	r8, #0
 8011944:	dde9      	ble.n	801191a <__sflush_r+0xae>
 8011946:	6a21      	ldr	r1, [r4, #32]
 8011948:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801194a:	4643      	mov	r3, r8
 801194c:	463a      	mov	r2, r7
 801194e:	4628      	mov	r0, r5
 8011950:	47b0      	blx	r6
 8011952:	2800      	cmp	r0, #0
 8011954:	dc08      	bgt.n	8011968 <__sflush_r+0xfc>
 8011956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801195a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801195e:	81a3      	strh	r3, [r4, #12]
 8011960:	f04f 30ff 	mov.w	r0, #4294967295
 8011964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011968:	4407      	add	r7, r0
 801196a:	eba8 0800 	sub.w	r8, r8, r0
 801196e:	e7e7      	b.n	8011940 <__sflush_r+0xd4>
 8011970:	dfbffffe 	.word	0xdfbffffe

08011974 <_fflush_r>:
 8011974:	b538      	push	{r3, r4, r5, lr}
 8011976:	690b      	ldr	r3, [r1, #16]
 8011978:	4605      	mov	r5, r0
 801197a:	460c      	mov	r4, r1
 801197c:	b913      	cbnz	r3, 8011984 <_fflush_r+0x10>
 801197e:	2500      	movs	r5, #0
 8011980:	4628      	mov	r0, r5
 8011982:	bd38      	pop	{r3, r4, r5, pc}
 8011984:	b118      	cbz	r0, 801198e <_fflush_r+0x1a>
 8011986:	6a03      	ldr	r3, [r0, #32]
 8011988:	b90b      	cbnz	r3, 801198e <_fflush_r+0x1a>
 801198a:	f7fd fa0f 	bl	800edac <__sinit>
 801198e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d0f3      	beq.n	801197e <_fflush_r+0xa>
 8011996:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011998:	07d0      	lsls	r0, r2, #31
 801199a:	d404      	bmi.n	80119a6 <_fflush_r+0x32>
 801199c:	0599      	lsls	r1, r3, #22
 801199e:	d402      	bmi.n	80119a6 <_fflush_r+0x32>
 80119a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119a2:	f7fd fb70 	bl	800f086 <__retarget_lock_acquire_recursive>
 80119a6:	4628      	mov	r0, r5
 80119a8:	4621      	mov	r1, r4
 80119aa:	f7ff ff5f 	bl	801186c <__sflush_r>
 80119ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80119b0:	07da      	lsls	r2, r3, #31
 80119b2:	4605      	mov	r5, r0
 80119b4:	d4e4      	bmi.n	8011980 <_fflush_r+0xc>
 80119b6:	89a3      	ldrh	r3, [r4, #12]
 80119b8:	059b      	lsls	r3, r3, #22
 80119ba:	d4e1      	bmi.n	8011980 <_fflush_r+0xc>
 80119bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119be:	f7fd fb63 	bl	800f088 <__retarget_lock_release_recursive>
 80119c2:	e7dd      	b.n	8011980 <_fflush_r+0xc>

080119c4 <memmove>:
 80119c4:	4288      	cmp	r0, r1
 80119c6:	b510      	push	{r4, lr}
 80119c8:	eb01 0402 	add.w	r4, r1, r2
 80119cc:	d902      	bls.n	80119d4 <memmove+0x10>
 80119ce:	4284      	cmp	r4, r0
 80119d0:	4623      	mov	r3, r4
 80119d2:	d807      	bhi.n	80119e4 <memmove+0x20>
 80119d4:	1e43      	subs	r3, r0, #1
 80119d6:	42a1      	cmp	r1, r4
 80119d8:	d008      	beq.n	80119ec <memmove+0x28>
 80119da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80119e2:	e7f8      	b.n	80119d6 <memmove+0x12>
 80119e4:	4402      	add	r2, r0
 80119e6:	4601      	mov	r1, r0
 80119e8:	428a      	cmp	r2, r1
 80119ea:	d100      	bne.n	80119ee <memmove+0x2a>
 80119ec:	bd10      	pop	{r4, pc}
 80119ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119f6:	e7f7      	b.n	80119e8 <memmove+0x24>

080119f8 <strncmp>:
 80119f8:	b510      	push	{r4, lr}
 80119fa:	b16a      	cbz	r2, 8011a18 <strncmp+0x20>
 80119fc:	3901      	subs	r1, #1
 80119fe:	1884      	adds	r4, r0, r2
 8011a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d103      	bne.n	8011a14 <strncmp+0x1c>
 8011a0c:	42a0      	cmp	r0, r4
 8011a0e:	d001      	beq.n	8011a14 <strncmp+0x1c>
 8011a10:	2a00      	cmp	r2, #0
 8011a12:	d1f5      	bne.n	8011a00 <strncmp+0x8>
 8011a14:	1ad0      	subs	r0, r2, r3
 8011a16:	bd10      	pop	{r4, pc}
 8011a18:	4610      	mov	r0, r2
 8011a1a:	e7fc      	b.n	8011a16 <strncmp+0x1e>

08011a1c <_sbrk_r>:
 8011a1c:	b538      	push	{r3, r4, r5, lr}
 8011a1e:	4d06      	ldr	r5, [pc, #24]	@ (8011a38 <_sbrk_r+0x1c>)
 8011a20:	2300      	movs	r3, #0
 8011a22:	4604      	mov	r4, r0
 8011a24:	4608      	mov	r0, r1
 8011a26:	602b      	str	r3, [r5, #0]
 8011a28:	f7f2 fcec 	bl	8004404 <_sbrk>
 8011a2c:	1c43      	adds	r3, r0, #1
 8011a2e:	d102      	bne.n	8011a36 <_sbrk_r+0x1a>
 8011a30:	682b      	ldr	r3, [r5, #0]
 8011a32:	b103      	cbz	r3, 8011a36 <_sbrk_r+0x1a>
 8011a34:	6023      	str	r3, [r4, #0]
 8011a36:	bd38      	pop	{r3, r4, r5, pc}
 8011a38:	20009430 	.word	0x20009430
 8011a3c:	00000000 	.word	0x00000000

08011a40 <nan>:
 8011a40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011a48 <nan+0x8>
 8011a44:	4770      	bx	lr
 8011a46:	bf00      	nop
 8011a48:	00000000 	.word	0x00000000
 8011a4c:	7ff80000 	.word	0x7ff80000

08011a50 <__assert_func>:
 8011a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a52:	4614      	mov	r4, r2
 8011a54:	461a      	mov	r2, r3
 8011a56:	4b09      	ldr	r3, [pc, #36]	@ (8011a7c <__assert_func+0x2c>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4605      	mov	r5, r0
 8011a5c:	68d8      	ldr	r0, [r3, #12]
 8011a5e:	b954      	cbnz	r4, 8011a76 <__assert_func+0x26>
 8011a60:	4b07      	ldr	r3, [pc, #28]	@ (8011a80 <__assert_func+0x30>)
 8011a62:	461c      	mov	r4, r3
 8011a64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a68:	9100      	str	r1, [sp, #0]
 8011a6a:	462b      	mov	r3, r5
 8011a6c:	4905      	ldr	r1, [pc, #20]	@ (8011a84 <__assert_func+0x34>)
 8011a6e:	f000 fba7 	bl	80121c0 <fiprintf>
 8011a72:	f000 fbb7 	bl	80121e4 <abort>
 8011a76:	4b04      	ldr	r3, [pc, #16]	@ (8011a88 <__assert_func+0x38>)
 8011a78:	e7f4      	b.n	8011a64 <__assert_func+0x14>
 8011a7a:	bf00      	nop
 8011a7c:	20000020 	.word	0x20000020
 8011a80:	0802674d 	.word	0x0802674d
 8011a84:	0802671f 	.word	0x0802671f
 8011a88:	08026712 	.word	0x08026712

08011a8c <_calloc_r>:
 8011a8c:	b570      	push	{r4, r5, r6, lr}
 8011a8e:	fba1 5402 	umull	r5, r4, r1, r2
 8011a92:	b93c      	cbnz	r4, 8011aa4 <_calloc_r+0x18>
 8011a94:	4629      	mov	r1, r5
 8011a96:	f7fe f9cf 	bl	800fe38 <_malloc_r>
 8011a9a:	4606      	mov	r6, r0
 8011a9c:	b928      	cbnz	r0, 8011aaa <_calloc_r+0x1e>
 8011a9e:	2600      	movs	r6, #0
 8011aa0:	4630      	mov	r0, r6
 8011aa2:	bd70      	pop	{r4, r5, r6, pc}
 8011aa4:	220c      	movs	r2, #12
 8011aa6:	6002      	str	r2, [r0, #0]
 8011aa8:	e7f9      	b.n	8011a9e <_calloc_r+0x12>
 8011aaa:	462a      	mov	r2, r5
 8011aac:	4621      	mov	r1, r4
 8011aae:	f7fd fa16 	bl	800eede <memset>
 8011ab2:	e7f5      	b.n	8011aa0 <_calloc_r+0x14>

08011ab4 <rshift>:
 8011ab4:	6903      	ldr	r3, [r0, #16]
 8011ab6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011aba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011abe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011ac2:	f100 0414 	add.w	r4, r0, #20
 8011ac6:	dd45      	ble.n	8011b54 <rshift+0xa0>
 8011ac8:	f011 011f 	ands.w	r1, r1, #31
 8011acc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011ad0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011ad4:	d10c      	bne.n	8011af0 <rshift+0x3c>
 8011ad6:	f100 0710 	add.w	r7, r0, #16
 8011ada:	4629      	mov	r1, r5
 8011adc:	42b1      	cmp	r1, r6
 8011ade:	d334      	bcc.n	8011b4a <rshift+0x96>
 8011ae0:	1a9b      	subs	r3, r3, r2
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	1eea      	subs	r2, r5, #3
 8011ae6:	4296      	cmp	r6, r2
 8011ae8:	bf38      	it	cc
 8011aea:	2300      	movcc	r3, #0
 8011aec:	4423      	add	r3, r4
 8011aee:	e015      	b.n	8011b1c <rshift+0x68>
 8011af0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011af4:	f1c1 0820 	rsb	r8, r1, #32
 8011af8:	40cf      	lsrs	r7, r1
 8011afa:	f105 0e04 	add.w	lr, r5, #4
 8011afe:	46a1      	mov	r9, r4
 8011b00:	4576      	cmp	r6, lr
 8011b02:	46f4      	mov	ip, lr
 8011b04:	d815      	bhi.n	8011b32 <rshift+0x7e>
 8011b06:	1a9a      	subs	r2, r3, r2
 8011b08:	0092      	lsls	r2, r2, #2
 8011b0a:	3a04      	subs	r2, #4
 8011b0c:	3501      	adds	r5, #1
 8011b0e:	42ae      	cmp	r6, r5
 8011b10:	bf38      	it	cc
 8011b12:	2200      	movcc	r2, #0
 8011b14:	18a3      	adds	r3, r4, r2
 8011b16:	50a7      	str	r7, [r4, r2]
 8011b18:	b107      	cbz	r7, 8011b1c <rshift+0x68>
 8011b1a:	3304      	adds	r3, #4
 8011b1c:	1b1a      	subs	r2, r3, r4
 8011b1e:	42a3      	cmp	r3, r4
 8011b20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011b24:	bf08      	it	eq
 8011b26:	2300      	moveq	r3, #0
 8011b28:	6102      	str	r2, [r0, #16]
 8011b2a:	bf08      	it	eq
 8011b2c:	6143      	streq	r3, [r0, #20]
 8011b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b32:	f8dc c000 	ldr.w	ip, [ip]
 8011b36:	fa0c fc08 	lsl.w	ip, ip, r8
 8011b3a:	ea4c 0707 	orr.w	r7, ip, r7
 8011b3e:	f849 7b04 	str.w	r7, [r9], #4
 8011b42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011b46:	40cf      	lsrs	r7, r1
 8011b48:	e7da      	b.n	8011b00 <rshift+0x4c>
 8011b4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8011b4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011b52:	e7c3      	b.n	8011adc <rshift+0x28>
 8011b54:	4623      	mov	r3, r4
 8011b56:	e7e1      	b.n	8011b1c <rshift+0x68>

08011b58 <__hexdig_fun>:
 8011b58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011b5c:	2b09      	cmp	r3, #9
 8011b5e:	d802      	bhi.n	8011b66 <__hexdig_fun+0xe>
 8011b60:	3820      	subs	r0, #32
 8011b62:	b2c0      	uxtb	r0, r0
 8011b64:	4770      	bx	lr
 8011b66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011b6a:	2b05      	cmp	r3, #5
 8011b6c:	d801      	bhi.n	8011b72 <__hexdig_fun+0x1a>
 8011b6e:	3847      	subs	r0, #71	@ 0x47
 8011b70:	e7f7      	b.n	8011b62 <__hexdig_fun+0xa>
 8011b72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011b76:	2b05      	cmp	r3, #5
 8011b78:	d801      	bhi.n	8011b7e <__hexdig_fun+0x26>
 8011b7a:	3827      	subs	r0, #39	@ 0x27
 8011b7c:	e7f1      	b.n	8011b62 <__hexdig_fun+0xa>
 8011b7e:	2000      	movs	r0, #0
 8011b80:	4770      	bx	lr
	...

08011b84 <__gethex>:
 8011b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b88:	b085      	sub	sp, #20
 8011b8a:	468a      	mov	sl, r1
 8011b8c:	9302      	str	r3, [sp, #8]
 8011b8e:	680b      	ldr	r3, [r1, #0]
 8011b90:	9001      	str	r0, [sp, #4]
 8011b92:	4690      	mov	r8, r2
 8011b94:	1c9c      	adds	r4, r3, #2
 8011b96:	46a1      	mov	r9, r4
 8011b98:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011b9c:	2830      	cmp	r0, #48	@ 0x30
 8011b9e:	d0fa      	beq.n	8011b96 <__gethex+0x12>
 8011ba0:	eba9 0303 	sub.w	r3, r9, r3
 8011ba4:	f1a3 0b02 	sub.w	fp, r3, #2
 8011ba8:	f7ff ffd6 	bl	8011b58 <__hexdig_fun>
 8011bac:	4605      	mov	r5, r0
 8011bae:	2800      	cmp	r0, #0
 8011bb0:	d168      	bne.n	8011c84 <__gethex+0x100>
 8011bb2:	49a0      	ldr	r1, [pc, #640]	@ (8011e34 <__gethex+0x2b0>)
 8011bb4:	2201      	movs	r2, #1
 8011bb6:	4648      	mov	r0, r9
 8011bb8:	f7ff ff1e 	bl	80119f8 <strncmp>
 8011bbc:	4607      	mov	r7, r0
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	d167      	bne.n	8011c92 <__gethex+0x10e>
 8011bc2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011bc6:	4626      	mov	r6, r4
 8011bc8:	f7ff ffc6 	bl	8011b58 <__hexdig_fun>
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	d062      	beq.n	8011c96 <__gethex+0x112>
 8011bd0:	4623      	mov	r3, r4
 8011bd2:	7818      	ldrb	r0, [r3, #0]
 8011bd4:	2830      	cmp	r0, #48	@ 0x30
 8011bd6:	4699      	mov	r9, r3
 8011bd8:	f103 0301 	add.w	r3, r3, #1
 8011bdc:	d0f9      	beq.n	8011bd2 <__gethex+0x4e>
 8011bde:	f7ff ffbb 	bl	8011b58 <__hexdig_fun>
 8011be2:	fab0 f580 	clz	r5, r0
 8011be6:	096d      	lsrs	r5, r5, #5
 8011be8:	f04f 0b01 	mov.w	fp, #1
 8011bec:	464a      	mov	r2, r9
 8011bee:	4616      	mov	r6, r2
 8011bf0:	3201      	adds	r2, #1
 8011bf2:	7830      	ldrb	r0, [r6, #0]
 8011bf4:	f7ff ffb0 	bl	8011b58 <__hexdig_fun>
 8011bf8:	2800      	cmp	r0, #0
 8011bfa:	d1f8      	bne.n	8011bee <__gethex+0x6a>
 8011bfc:	498d      	ldr	r1, [pc, #564]	@ (8011e34 <__gethex+0x2b0>)
 8011bfe:	2201      	movs	r2, #1
 8011c00:	4630      	mov	r0, r6
 8011c02:	f7ff fef9 	bl	80119f8 <strncmp>
 8011c06:	2800      	cmp	r0, #0
 8011c08:	d13f      	bne.n	8011c8a <__gethex+0x106>
 8011c0a:	b944      	cbnz	r4, 8011c1e <__gethex+0x9a>
 8011c0c:	1c74      	adds	r4, r6, #1
 8011c0e:	4622      	mov	r2, r4
 8011c10:	4616      	mov	r6, r2
 8011c12:	3201      	adds	r2, #1
 8011c14:	7830      	ldrb	r0, [r6, #0]
 8011c16:	f7ff ff9f 	bl	8011b58 <__hexdig_fun>
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	d1f8      	bne.n	8011c10 <__gethex+0x8c>
 8011c1e:	1ba4      	subs	r4, r4, r6
 8011c20:	00a7      	lsls	r7, r4, #2
 8011c22:	7833      	ldrb	r3, [r6, #0]
 8011c24:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011c28:	2b50      	cmp	r3, #80	@ 0x50
 8011c2a:	d13e      	bne.n	8011caa <__gethex+0x126>
 8011c2c:	7873      	ldrb	r3, [r6, #1]
 8011c2e:	2b2b      	cmp	r3, #43	@ 0x2b
 8011c30:	d033      	beq.n	8011c9a <__gethex+0x116>
 8011c32:	2b2d      	cmp	r3, #45	@ 0x2d
 8011c34:	d034      	beq.n	8011ca0 <__gethex+0x11c>
 8011c36:	1c71      	adds	r1, r6, #1
 8011c38:	2400      	movs	r4, #0
 8011c3a:	7808      	ldrb	r0, [r1, #0]
 8011c3c:	f7ff ff8c 	bl	8011b58 <__hexdig_fun>
 8011c40:	1e43      	subs	r3, r0, #1
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	2b18      	cmp	r3, #24
 8011c46:	d830      	bhi.n	8011caa <__gethex+0x126>
 8011c48:	f1a0 0210 	sub.w	r2, r0, #16
 8011c4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011c50:	f7ff ff82 	bl	8011b58 <__hexdig_fun>
 8011c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8011c58:	fa5f fc8c 	uxtb.w	ip, ip
 8011c5c:	f1bc 0f18 	cmp.w	ip, #24
 8011c60:	f04f 030a 	mov.w	r3, #10
 8011c64:	d91e      	bls.n	8011ca4 <__gethex+0x120>
 8011c66:	b104      	cbz	r4, 8011c6a <__gethex+0xe6>
 8011c68:	4252      	negs	r2, r2
 8011c6a:	4417      	add	r7, r2
 8011c6c:	f8ca 1000 	str.w	r1, [sl]
 8011c70:	b1ed      	cbz	r5, 8011cae <__gethex+0x12a>
 8011c72:	f1bb 0f00 	cmp.w	fp, #0
 8011c76:	bf0c      	ite	eq
 8011c78:	2506      	moveq	r5, #6
 8011c7a:	2500      	movne	r5, #0
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	b005      	add	sp, #20
 8011c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c84:	2500      	movs	r5, #0
 8011c86:	462c      	mov	r4, r5
 8011c88:	e7b0      	b.n	8011bec <__gethex+0x68>
 8011c8a:	2c00      	cmp	r4, #0
 8011c8c:	d1c7      	bne.n	8011c1e <__gethex+0x9a>
 8011c8e:	4627      	mov	r7, r4
 8011c90:	e7c7      	b.n	8011c22 <__gethex+0x9e>
 8011c92:	464e      	mov	r6, r9
 8011c94:	462f      	mov	r7, r5
 8011c96:	2501      	movs	r5, #1
 8011c98:	e7c3      	b.n	8011c22 <__gethex+0x9e>
 8011c9a:	2400      	movs	r4, #0
 8011c9c:	1cb1      	adds	r1, r6, #2
 8011c9e:	e7cc      	b.n	8011c3a <__gethex+0xb6>
 8011ca0:	2401      	movs	r4, #1
 8011ca2:	e7fb      	b.n	8011c9c <__gethex+0x118>
 8011ca4:	fb03 0002 	mla	r0, r3, r2, r0
 8011ca8:	e7ce      	b.n	8011c48 <__gethex+0xc4>
 8011caa:	4631      	mov	r1, r6
 8011cac:	e7de      	b.n	8011c6c <__gethex+0xe8>
 8011cae:	eba6 0309 	sub.w	r3, r6, r9
 8011cb2:	3b01      	subs	r3, #1
 8011cb4:	4629      	mov	r1, r5
 8011cb6:	2b07      	cmp	r3, #7
 8011cb8:	dc0a      	bgt.n	8011cd0 <__gethex+0x14c>
 8011cba:	9801      	ldr	r0, [sp, #4]
 8011cbc:	f7fe f948 	bl	800ff50 <_Balloc>
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	b940      	cbnz	r0, 8011cd6 <__gethex+0x152>
 8011cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8011e38 <__gethex+0x2b4>)
 8011cc6:	4602      	mov	r2, r0
 8011cc8:	21e4      	movs	r1, #228	@ 0xe4
 8011cca:	485c      	ldr	r0, [pc, #368]	@ (8011e3c <__gethex+0x2b8>)
 8011ccc:	f7ff fec0 	bl	8011a50 <__assert_func>
 8011cd0:	3101      	adds	r1, #1
 8011cd2:	105b      	asrs	r3, r3, #1
 8011cd4:	e7ef      	b.n	8011cb6 <__gethex+0x132>
 8011cd6:	f100 0a14 	add.w	sl, r0, #20
 8011cda:	2300      	movs	r3, #0
 8011cdc:	4655      	mov	r5, sl
 8011cde:	469b      	mov	fp, r3
 8011ce0:	45b1      	cmp	r9, r6
 8011ce2:	d337      	bcc.n	8011d54 <__gethex+0x1d0>
 8011ce4:	f845 bb04 	str.w	fp, [r5], #4
 8011ce8:	eba5 050a 	sub.w	r5, r5, sl
 8011cec:	10ad      	asrs	r5, r5, #2
 8011cee:	6125      	str	r5, [r4, #16]
 8011cf0:	4658      	mov	r0, fp
 8011cf2:	f7fe fa1f 	bl	8010134 <__hi0bits>
 8011cf6:	016d      	lsls	r5, r5, #5
 8011cf8:	f8d8 6000 	ldr.w	r6, [r8]
 8011cfc:	1a2d      	subs	r5, r5, r0
 8011cfe:	42b5      	cmp	r5, r6
 8011d00:	dd54      	ble.n	8011dac <__gethex+0x228>
 8011d02:	1bad      	subs	r5, r5, r6
 8011d04:	4629      	mov	r1, r5
 8011d06:	4620      	mov	r0, r4
 8011d08:	f7fe fdb3 	bl	8010872 <__any_on>
 8011d0c:	4681      	mov	r9, r0
 8011d0e:	b178      	cbz	r0, 8011d30 <__gethex+0x1ac>
 8011d10:	1e6b      	subs	r3, r5, #1
 8011d12:	1159      	asrs	r1, r3, #5
 8011d14:	f003 021f 	and.w	r2, r3, #31
 8011d18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011d1c:	f04f 0901 	mov.w	r9, #1
 8011d20:	fa09 f202 	lsl.w	r2, r9, r2
 8011d24:	420a      	tst	r2, r1
 8011d26:	d003      	beq.n	8011d30 <__gethex+0x1ac>
 8011d28:	454b      	cmp	r3, r9
 8011d2a:	dc36      	bgt.n	8011d9a <__gethex+0x216>
 8011d2c:	f04f 0902 	mov.w	r9, #2
 8011d30:	4629      	mov	r1, r5
 8011d32:	4620      	mov	r0, r4
 8011d34:	f7ff febe 	bl	8011ab4 <rshift>
 8011d38:	442f      	add	r7, r5
 8011d3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d3e:	42bb      	cmp	r3, r7
 8011d40:	da42      	bge.n	8011dc8 <__gethex+0x244>
 8011d42:	9801      	ldr	r0, [sp, #4]
 8011d44:	4621      	mov	r1, r4
 8011d46:	f7fe f943 	bl	800ffd0 <_Bfree>
 8011d4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	6013      	str	r3, [r2, #0]
 8011d50:	25a3      	movs	r5, #163	@ 0xa3
 8011d52:	e793      	b.n	8011c7c <__gethex+0xf8>
 8011d54:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011d58:	2a2e      	cmp	r2, #46	@ 0x2e
 8011d5a:	d012      	beq.n	8011d82 <__gethex+0x1fe>
 8011d5c:	2b20      	cmp	r3, #32
 8011d5e:	d104      	bne.n	8011d6a <__gethex+0x1e6>
 8011d60:	f845 bb04 	str.w	fp, [r5], #4
 8011d64:	f04f 0b00 	mov.w	fp, #0
 8011d68:	465b      	mov	r3, fp
 8011d6a:	7830      	ldrb	r0, [r6, #0]
 8011d6c:	9303      	str	r3, [sp, #12]
 8011d6e:	f7ff fef3 	bl	8011b58 <__hexdig_fun>
 8011d72:	9b03      	ldr	r3, [sp, #12]
 8011d74:	f000 000f 	and.w	r0, r0, #15
 8011d78:	4098      	lsls	r0, r3
 8011d7a:	ea4b 0b00 	orr.w	fp, fp, r0
 8011d7e:	3304      	adds	r3, #4
 8011d80:	e7ae      	b.n	8011ce0 <__gethex+0x15c>
 8011d82:	45b1      	cmp	r9, r6
 8011d84:	d8ea      	bhi.n	8011d5c <__gethex+0x1d8>
 8011d86:	492b      	ldr	r1, [pc, #172]	@ (8011e34 <__gethex+0x2b0>)
 8011d88:	9303      	str	r3, [sp, #12]
 8011d8a:	2201      	movs	r2, #1
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	f7ff fe33 	bl	80119f8 <strncmp>
 8011d92:	9b03      	ldr	r3, [sp, #12]
 8011d94:	2800      	cmp	r0, #0
 8011d96:	d1e1      	bne.n	8011d5c <__gethex+0x1d8>
 8011d98:	e7a2      	b.n	8011ce0 <__gethex+0x15c>
 8011d9a:	1ea9      	subs	r1, r5, #2
 8011d9c:	4620      	mov	r0, r4
 8011d9e:	f7fe fd68 	bl	8010872 <__any_on>
 8011da2:	2800      	cmp	r0, #0
 8011da4:	d0c2      	beq.n	8011d2c <__gethex+0x1a8>
 8011da6:	f04f 0903 	mov.w	r9, #3
 8011daa:	e7c1      	b.n	8011d30 <__gethex+0x1ac>
 8011dac:	da09      	bge.n	8011dc2 <__gethex+0x23e>
 8011dae:	1b75      	subs	r5, r6, r5
 8011db0:	4621      	mov	r1, r4
 8011db2:	9801      	ldr	r0, [sp, #4]
 8011db4:	462a      	mov	r2, r5
 8011db6:	f7fe fb23 	bl	8010400 <__lshift>
 8011dba:	1b7f      	subs	r7, r7, r5
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	f100 0a14 	add.w	sl, r0, #20
 8011dc2:	f04f 0900 	mov.w	r9, #0
 8011dc6:	e7b8      	b.n	8011d3a <__gethex+0x1b6>
 8011dc8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011dcc:	42bd      	cmp	r5, r7
 8011dce:	dd6f      	ble.n	8011eb0 <__gethex+0x32c>
 8011dd0:	1bed      	subs	r5, r5, r7
 8011dd2:	42ae      	cmp	r6, r5
 8011dd4:	dc34      	bgt.n	8011e40 <__gethex+0x2bc>
 8011dd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011dda:	2b02      	cmp	r3, #2
 8011ddc:	d022      	beq.n	8011e24 <__gethex+0x2a0>
 8011dde:	2b03      	cmp	r3, #3
 8011de0:	d024      	beq.n	8011e2c <__gethex+0x2a8>
 8011de2:	2b01      	cmp	r3, #1
 8011de4:	d115      	bne.n	8011e12 <__gethex+0x28e>
 8011de6:	42ae      	cmp	r6, r5
 8011de8:	d113      	bne.n	8011e12 <__gethex+0x28e>
 8011dea:	2e01      	cmp	r6, #1
 8011dec:	d10b      	bne.n	8011e06 <__gethex+0x282>
 8011dee:	9a02      	ldr	r2, [sp, #8]
 8011df0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011df4:	6013      	str	r3, [r2, #0]
 8011df6:	2301      	movs	r3, #1
 8011df8:	6123      	str	r3, [r4, #16]
 8011dfa:	f8ca 3000 	str.w	r3, [sl]
 8011dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e00:	2562      	movs	r5, #98	@ 0x62
 8011e02:	601c      	str	r4, [r3, #0]
 8011e04:	e73a      	b.n	8011c7c <__gethex+0xf8>
 8011e06:	1e71      	subs	r1, r6, #1
 8011e08:	4620      	mov	r0, r4
 8011e0a:	f7fe fd32 	bl	8010872 <__any_on>
 8011e0e:	2800      	cmp	r0, #0
 8011e10:	d1ed      	bne.n	8011dee <__gethex+0x26a>
 8011e12:	9801      	ldr	r0, [sp, #4]
 8011e14:	4621      	mov	r1, r4
 8011e16:	f7fe f8db 	bl	800ffd0 <_Bfree>
 8011e1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	6013      	str	r3, [r2, #0]
 8011e20:	2550      	movs	r5, #80	@ 0x50
 8011e22:	e72b      	b.n	8011c7c <__gethex+0xf8>
 8011e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d1f3      	bne.n	8011e12 <__gethex+0x28e>
 8011e2a:	e7e0      	b.n	8011dee <__gethex+0x26a>
 8011e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d1dd      	bne.n	8011dee <__gethex+0x26a>
 8011e32:	e7ee      	b.n	8011e12 <__gethex+0x28e>
 8011e34:	080265a0 	.word	0x080265a0
 8011e38:	08026435 	.word	0x08026435
 8011e3c:	0802674e 	.word	0x0802674e
 8011e40:	1e6f      	subs	r7, r5, #1
 8011e42:	f1b9 0f00 	cmp.w	r9, #0
 8011e46:	d130      	bne.n	8011eaa <__gethex+0x326>
 8011e48:	b127      	cbz	r7, 8011e54 <__gethex+0x2d0>
 8011e4a:	4639      	mov	r1, r7
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	f7fe fd10 	bl	8010872 <__any_on>
 8011e52:	4681      	mov	r9, r0
 8011e54:	117a      	asrs	r2, r7, #5
 8011e56:	2301      	movs	r3, #1
 8011e58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011e5c:	f007 071f 	and.w	r7, r7, #31
 8011e60:	40bb      	lsls	r3, r7
 8011e62:	4213      	tst	r3, r2
 8011e64:	4629      	mov	r1, r5
 8011e66:	4620      	mov	r0, r4
 8011e68:	bf18      	it	ne
 8011e6a:	f049 0902 	orrne.w	r9, r9, #2
 8011e6e:	f7ff fe21 	bl	8011ab4 <rshift>
 8011e72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011e76:	1b76      	subs	r6, r6, r5
 8011e78:	2502      	movs	r5, #2
 8011e7a:	f1b9 0f00 	cmp.w	r9, #0
 8011e7e:	d047      	beq.n	8011f10 <__gethex+0x38c>
 8011e80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011e84:	2b02      	cmp	r3, #2
 8011e86:	d015      	beq.n	8011eb4 <__gethex+0x330>
 8011e88:	2b03      	cmp	r3, #3
 8011e8a:	d017      	beq.n	8011ebc <__gethex+0x338>
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	d109      	bne.n	8011ea4 <__gethex+0x320>
 8011e90:	f019 0f02 	tst.w	r9, #2
 8011e94:	d006      	beq.n	8011ea4 <__gethex+0x320>
 8011e96:	f8da 3000 	ldr.w	r3, [sl]
 8011e9a:	ea49 0903 	orr.w	r9, r9, r3
 8011e9e:	f019 0f01 	tst.w	r9, #1
 8011ea2:	d10e      	bne.n	8011ec2 <__gethex+0x33e>
 8011ea4:	f045 0510 	orr.w	r5, r5, #16
 8011ea8:	e032      	b.n	8011f10 <__gethex+0x38c>
 8011eaa:	f04f 0901 	mov.w	r9, #1
 8011eae:	e7d1      	b.n	8011e54 <__gethex+0x2d0>
 8011eb0:	2501      	movs	r5, #1
 8011eb2:	e7e2      	b.n	8011e7a <__gethex+0x2f6>
 8011eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011eb6:	f1c3 0301 	rsb	r3, r3, #1
 8011eba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d0f0      	beq.n	8011ea4 <__gethex+0x320>
 8011ec2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011ec6:	f104 0314 	add.w	r3, r4, #20
 8011eca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011ece:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011ed2:	f04f 0c00 	mov.w	ip, #0
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011edc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011ee0:	d01b      	beq.n	8011f1a <__gethex+0x396>
 8011ee2:	3201      	adds	r2, #1
 8011ee4:	6002      	str	r2, [r0, #0]
 8011ee6:	2d02      	cmp	r5, #2
 8011ee8:	f104 0314 	add.w	r3, r4, #20
 8011eec:	d13c      	bne.n	8011f68 <__gethex+0x3e4>
 8011eee:	f8d8 2000 	ldr.w	r2, [r8]
 8011ef2:	3a01      	subs	r2, #1
 8011ef4:	42b2      	cmp	r2, r6
 8011ef6:	d109      	bne.n	8011f0c <__gethex+0x388>
 8011ef8:	1171      	asrs	r1, r6, #5
 8011efa:	2201      	movs	r2, #1
 8011efc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011f00:	f006 061f 	and.w	r6, r6, #31
 8011f04:	fa02 f606 	lsl.w	r6, r2, r6
 8011f08:	421e      	tst	r6, r3
 8011f0a:	d13a      	bne.n	8011f82 <__gethex+0x3fe>
 8011f0c:	f045 0520 	orr.w	r5, r5, #32
 8011f10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f12:	601c      	str	r4, [r3, #0]
 8011f14:	9b02      	ldr	r3, [sp, #8]
 8011f16:	601f      	str	r7, [r3, #0]
 8011f18:	e6b0      	b.n	8011c7c <__gethex+0xf8>
 8011f1a:	4299      	cmp	r1, r3
 8011f1c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011f20:	d8d9      	bhi.n	8011ed6 <__gethex+0x352>
 8011f22:	68a3      	ldr	r3, [r4, #8]
 8011f24:	459b      	cmp	fp, r3
 8011f26:	db17      	blt.n	8011f58 <__gethex+0x3d4>
 8011f28:	6861      	ldr	r1, [r4, #4]
 8011f2a:	9801      	ldr	r0, [sp, #4]
 8011f2c:	3101      	adds	r1, #1
 8011f2e:	f7fe f80f 	bl	800ff50 <_Balloc>
 8011f32:	4681      	mov	r9, r0
 8011f34:	b918      	cbnz	r0, 8011f3e <__gethex+0x3ba>
 8011f36:	4b1a      	ldr	r3, [pc, #104]	@ (8011fa0 <__gethex+0x41c>)
 8011f38:	4602      	mov	r2, r0
 8011f3a:	2184      	movs	r1, #132	@ 0x84
 8011f3c:	e6c5      	b.n	8011cca <__gethex+0x146>
 8011f3e:	6922      	ldr	r2, [r4, #16]
 8011f40:	3202      	adds	r2, #2
 8011f42:	f104 010c 	add.w	r1, r4, #12
 8011f46:	0092      	lsls	r2, r2, #2
 8011f48:	300c      	adds	r0, #12
 8011f4a:	f7fd f89e 	bl	800f08a <memcpy>
 8011f4e:	4621      	mov	r1, r4
 8011f50:	9801      	ldr	r0, [sp, #4]
 8011f52:	f7fe f83d 	bl	800ffd0 <_Bfree>
 8011f56:	464c      	mov	r4, r9
 8011f58:	6923      	ldr	r3, [r4, #16]
 8011f5a:	1c5a      	adds	r2, r3, #1
 8011f5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011f60:	6122      	str	r2, [r4, #16]
 8011f62:	2201      	movs	r2, #1
 8011f64:	615a      	str	r2, [r3, #20]
 8011f66:	e7be      	b.n	8011ee6 <__gethex+0x362>
 8011f68:	6922      	ldr	r2, [r4, #16]
 8011f6a:	455a      	cmp	r2, fp
 8011f6c:	dd0b      	ble.n	8011f86 <__gethex+0x402>
 8011f6e:	2101      	movs	r1, #1
 8011f70:	4620      	mov	r0, r4
 8011f72:	f7ff fd9f 	bl	8011ab4 <rshift>
 8011f76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f7a:	3701      	adds	r7, #1
 8011f7c:	42bb      	cmp	r3, r7
 8011f7e:	f6ff aee0 	blt.w	8011d42 <__gethex+0x1be>
 8011f82:	2501      	movs	r5, #1
 8011f84:	e7c2      	b.n	8011f0c <__gethex+0x388>
 8011f86:	f016 061f 	ands.w	r6, r6, #31
 8011f8a:	d0fa      	beq.n	8011f82 <__gethex+0x3fe>
 8011f8c:	4453      	add	r3, sl
 8011f8e:	f1c6 0620 	rsb	r6, r6, #32
 8011f92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011f96:	f7fe f8cd 	bl	8010134 <__hi0bits>
 8011f9a:	42b0      	cmp	r0, r6
 8011f9c:	dbe7      	blt.n	8011f6e <__gethex+0x3ea>
 8011f9e:	e7f0      	b.n	8011f82 <__gethex+0x3fe>
 8011fa0:	08026435 	.word	0x08026435

08011fa4 <L_shift>:
 8011fa4:	f1c2 0208 	rsb	r2, r2, #8
 8011fa8:	0092      	lsls	r2, r2, #2
 8011faa:	b570      	push	{r4, r5, r6, lr}
 8011fac:	f1c2 0620 	rsb	r6, r2, #32
 8011fb0:	6843      	ldr	r3, [r0, #4]
 8011fb2:	6804      	ldr	r4, [r0, #0]
 8011fb4:	fa03 f506 	lsl.w	r5, r3, r6
 8011fb8:	432c      	orrs	r4, r5
 8011fba:	40d3      	lsrs	r3, r2
 8011fbc:	6004      	str	r4, [r0, #0]
 8011fbe:	f840 3f04 	str.w	r3, [r0, #4]!
 8011fc2:	4288      	cmp	r0, r1
 8011fc4:	d3f4      	bcc.n	8011fb0 <L_shift+0xc>
 8011fc6:	bd70      	pop	{r4, r5, r6, pc}

08011fc8 <__match>:
 8011fc8:	b530      	push	{r4, r5, lr}
 8011fca:	6803      	ldr	r3, [r0, #0]
 8011fcc:	3301      	adds	r3, #1
 8011fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fd2:	b914      	cbnz	r4, 8011fda <__match+0x12>
 8011fd4:	6003      	str	r3, [r0, #0]
 8011fd6:	2001      	movs	r0, #1
 8011fd8:	bd30      	pop	{r4, r5, pc}
 8011fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fde:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011fe2:	2d19      	cmp	r5, #25
 8011fe4:	bf98      	it	ls
 8011fe6:	3220      	addls	r2, #32
 8011fe8:	42a2      	cmp	r2, r4
 8011fea:	d0f0      	beq.n	8011fce <__match+0x6>
 8011fec:	2000      	movs	r0, #0
 8011fee:	e7f3      	b.n	8011fd8 <__match+0x10>

08011ff0 <__hexnan>:
 8011ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff4:	680b      	ldr	r3, [r1, #0]
 8011ff6:	6801      	ldr	r1, [r0, #0]
 8011ff8:	115e      	asrs	r6, r3, #5
 8011ffa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011ffe:	f013 031f 	ands.w	r3, r3, #31
 8012002:	b087      	sub	sp, #28
 8012004:	bf18      	it	ne
 8012006:	3604      	addne	r6, #4
 8012008:	2500      	movs	r5, #0
 801200a:	1f37      	subs	r7, r6, #4
 801200c:	4682      	mov	sl, r0
 801200e:	4690      	mov	r8, r2
 8012010:	9301      	str	r3, [sp, #4]
 8012012:	f846 5c04 	str.w	r5, [r6, #-4]
 8012016:	46b9      	mov	r9, r7
 8012018:	463c      	mov	r4, r7
 801201a:	9502      	str	r5, [sp, #8]
 801201c:	46ab      	mov	fp, r5
 801201e:	784a      	ldrb	r2, [r1, #1]
 8012020:	1c4b      	adds	r3, r1, #1
 8012022:	9303      	str	r3, [sp, #12]
 8012024:	b342      	cbz	r2, 8012078 <__hexnan+0x88>
 8012026:	4610      	mov	r0, r2
 8012028:	9105      	str	r1, [sp, #20]
 801202a:	9204      	str	r2, [sp, #16]
 801202c:	f7ff fd94 	bl	8011b58 <__hexdig_fun>
 8012030:	2800      	cmp	r0, #0
 8012032:	d151      	bne.n	80120d8 <__hexnan+0xe8>
 8012034:	9a04      	ldr	r2, [sp, #16]
 8012036:	9905      	ldr	r1, [sp, #20]
 8012038:	2a20      	cmp	r2, #32
 801203a:	d818      	bhi.n	801206e <__hexnan+0x7e>
 801203c:	9b02      	ldr	r3, [sp, #8]
 801203e:	459b      	cmp	fp, r3
 8012040:	dd13      	ble.n	801206a <__hexnan+0x7a>
 8012042:	454c      	cmp	r4, r9
 8012044:	d206      	bcs.n	8012054 <__hexnan+0x64>
 8012046:	2d07      	cmp	r5, #7
 8012048:	dc04      	bgt.n	8012054 <__hexnan+0x64>
 801204a:	462a      	mov	r2, r5
 801204c:	4649      	mov	r1, r9
 801204e:	4620      	mov	r0, r4
 8012050:	f7ff ffa8 	bl	8011fa4 <L_shift>
 8012054:	4544      	cmp	r4, r8
 8012056:	d952      	bls.n	80120fe <__hexnan+0x10e>
 8012058:	2300      	movs	r3, #0
 801205a:	f1a4 0904 	sub.w	r9, r4, #4
 801205e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012062:	f8cd b008 	str.w	fp, [sp, #8]
 8012066:	464c      	mov	r4, r9
 8012068:	461d      	mov	r5, r3
 801206a:	9903      	ldr	r1, [sp, #12]
 801206c:	e7d7      	b.n	801201e <__hexnan+0x2e>
 801206e:	2a29      	cmp	r2, #41	@ 0x29
 8012070:	d157      	bne.n	8012122 <__hexnan+0x132>
 8012072:	3102      	adds	r1, #2
 8012074:	f8ca 1000 	str.w	r1, [sl]
 8012078:	f1bb 0f00 	cmp.w	fp, #0
 801207c:	d051      	beq.n	8012122 <__hexnan+0x132>
 801207e:	454c      	cmp	r4, r9
 8012080:	d206      	bcs.n	8012090 <__hexnan+0xa0>
 8012082:	2d07      	cmp	r5, #7
 8012084:	dc04      	bgt.n	8012090 <__hexnan+0xa0>
 8012086:	462a      	mov	r2, r5
 8012088:	4649      	mov	r1, r9
 801208a:	4620      	mov	r0, r4
 801208c:	f7ff ff8a 	bl	8011fa4 <L_shift>
 8012090:	4544      	cmp	r4, r8
 8012092:	d936      	bls.n	8012102 <__hexnan+0x112>
 8012094:	f1a8 0204 	sub.w	r2, r8, #4
 8012098:	4623      	mov	r3, r4
 801209a:	f853 1b04 	ldr.w	r1, [r3], #4
 801209e:	f842 1f04 	str.w	r1, [r2, #4]!
 80120a2:	429f      	cmp	r7, r3
 80120a4:	d2f9      	bcs.n	801209a <__hexnan+0xaa>
 80120a6:	1b3b      	subs	r3, r7, r4
 80120a8:	f023 0303 	bic.w	r3, r3, #3
 80120ac:	3304      	adds	r3, #4
 80120ae:	3401      	adds	r4, #1
 80120b0:	3e03      	subs	r6, #3
 80120b2:	42b4      	cmp	r4, r6
 80120b4:	bf88      	it	hi
 80120b6:	2304      	movhi	r3, #4
 80120b8:	4443      	add	r3, r8
 80120ba:	2200      	movs	r2, #0
 80120bc:	f843 2b04 	str.w	r2, [r3], #4
 80120c0:	429f      	cmp	r7, r3
 80120c2:	d2fb      	bcs.n	80120bc <__hexnan+0xcc>
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	b91b      	cbnz	r3, 80120d0 <__hexnan+0xe0>
 80120c8:	4547      	cmp	r7, r8
 80120ca:	d128      	bne.n	801211e <__hexnan+0x12e>
 80120cc:	2301      	movs	r3, #1
 80120ce:	603b      	str	r3, [r7, #0]
 80120d0:	2005      	movs	r0, #5
 80120d2:	b007      	add	sp, #28
 80120d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d8:	3501      	adds	r5, #1
 80120da:	2d08      	cmp	r5, #8
 80120dc:	f10b 0b01 	add.w	fp, fp, #1
 80120e0:	dd06      	ble.n	80120f0 <__hexnan+0x100>
 80120e2:	4544      	cmp	r4, r8
 80120e4:	d9c1      	bls.n	801206a <__hexnan+0x7a>
 80120e6:	2300      	movs	r3, #0
 80120e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80120ec:	2501      	movs	r5, #1
 80120ee:	3c04      	subs	r4, #4
 80120f0:	6822      	ldr	r2, [r4, #0]
 80120f2:	f000 000f 	and.w	r0, r0, #15
 80120f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80120fa:	6020      	str	r0, [r4, #0]
 80120fc:	e7b5      	b.n	801206a <__hexnan+0x7a>
 80120fe:	2508      	movs	r5, #8
 8012100:	e7b3      	b.n	801206a <__hexnan+0x7a>
 8012102:	9b01      	ldr	r3, [sp, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d0dd      	beq.n	80120c4 <__hexnan+0xd4>
 8012108:	f1c3 0320 	rsb	r3, r3, #32
 801210c:	f04f 32ff 	mov.w	r2, #4294967295
 8012110:	40da      	lsrs	r2, r3
 8012112:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012116:	4013      	ands	r3, r2
 8012118:	f846 3c04 	str.w	r3, [r6, #-4]
 801211c:	e7d2      	b.n	80120c4 <__hexnan+0xd4>
 801211e:	3f04      	subs	r7, #4
 8012120:	e7d0      	b.n	80120c4 <__hexnan+0xd4>
 8012122:	2004      	movs	r0, #4
 8012124:	e7d5      	b.n	80120d2 <__hexnan+0xe2>

08012126 <__ascii_mbtowc>:
 8012126:	b082      	sub	sp, #8
 8012128:	b901      	cbnz	r1, 801212c <__ascii_mbtowc+0x6>
 801212a:	a901      	add	r1, sp, #4
 801212c:	b142      	cbz	r2, 8012140 <__ascii_mbtowc+0x1a>
 801212e:	b14b      	cbz	r3, 8012144 <__ascii_mbtowc+0x1e>
 8012130:	7813      	ldrb	r3, [r2, #0]
 8012132:	600b      	str	r3, [r1, #0]
 8012134:	7812      	ldrb	r2, [r2, #0]
 8012136:	1e10      	subs	r0, r2, #0
 8012138:	bf18      	it	ne
 801213a:	2001      	movne	r0, #1
 801213c:	b002      	add	sp, #8
 801213e:	4770      	bx	lr
 8012140:	4610      	mov	r0, r2
 8012142:	e7fb      	b.n	801213c <__ascii_mbtowc+0x16>
 8012144:	f06f 0001 	mvn.w	r0, #1
 8012148:	e7f8      	b.n	801213c <__ascii_mbtowc+0x16>

0801214a <_realloc_r>:
 801214a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801214e:	4680      	mov	r8, r0
 8012150:	4615      	mov	r5, r2
 8012152:	460c      	mov	r4, r1
 8012154:	b921      	cbnz	r1, 8012160 <_realloc_r+0x16>
 8012156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801215a:	4611      	mov	r1, r2
 801215c:	f7fd be6c 	b.w	800fe38 <_malloc_r>
 8012160:	b92a      	cbnz	r2, 801216e <_realloc_r+0x24>
 8012162:	f7fd fdf5 	bl	800fd50 <_free_r>
 8012166:	2400      	movs	r4, #0
 8012168:	4620      	mov	r0, r4
 801216a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801216e:	f000 f840 	bl	80121f2 <_malloc_usable_size_r>
 8012172:	4285      	cmp	r5, r0
 8012174:	4606      	mov	r6, r0
 8012176:	d802      	bhi.n	801217e <_realloc_r+0x34>
 8012178:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801217c:	d8f4      	bhi.n	8012168 <_realloc_r+0x1e>
 801217e:	4629      	mov	r1, r5
 8012180:	4640      	mov	r0, r8
 8012182:	f7fd fe59 	bl	800fe38 <_malloc_r>
 8012186:	4607      	mov	r7, r0
 8012188:	2800      	cmp	r0, #0
 801218a:	d0ec      	beq.n	8012166 <_realloc_r+0x1c>
 801218c:	42b5      	cmp	r5, r6
 801218e:	462a      	mov	r2, r5
 8012190:	4621      	mov	r1, r4
 8012192:	bf28      	it	cs
 8012194:	4632      	movcs	r2, r6
 8012196:	f7fc ff78 	bl	800f08a <memcpy>
 801219a:	4621      	mov	r1, r4
 801219c:	4640      	mov	r0, r8
 801219e:	f7fd fdd7 	bl	800fd50 <_free_r>
 80121a2:	463c      	mov	r4, r7
 80121a4:	e7e0      	b.n	8012168 <_realloc_r+0x1e>

080121a6 <__ascii_wctomb>:
 80121a6:	4603      	mov	r3, r0
 80121a8:	4608      	mov	r0, r1
 80121aa:	b141      	cbz	r1, 80121be <__ascii_wctomb+0x18>
 80121ac:	2aff      	cmp	r2, #255	@ 0xff
 80121ae:	d904      	bls.n	80121ba <__ascii_wctomb+0x14>
 80121b0:	228a      	movs	r2, #138	@ 0x8a
 80121b2:	601a      	str	r2, [r3, #0]
 80121b4:	f04f 30ff 	mov.w	r0, #4294967295
 80121b8:	4770      	bx	lr
 80121ba:	700a      	strb	r2, [r1, #0]
 80121bc:	2001      	movs	r0, #1
 80121be:	4770      	bx	lr

080121c0 <fiprintf>:
 80121c0:	b40e      	push	{r1, r2, r3}
 80121c2:	b503      	push	{r0, r1, lr}
 80121c4:	4601      	mov	r1, r0
 80121c6:	ab03      	add	r3, sp, #12
 80121c8:	4805      	ldr	r0, [pc, #20]	@ (80121e0 <fiprintf+0x20>)
 80121ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80121ce:	6800      	ldr	r0, [r0, #0]
 80121d0:	9301      	str	r3, [sp, #4]
 80121d2:	f000 f83f 	bl	8012254 <_vfiprintf_r>
 80121d6:	b002      	add	sp, #8
 80121d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80121dc:	b003      	add	sp, #12
 80121de:	4770      	bx	lr
 80121e0:	20000020 	.word	0x20000020

080121e4 <abort>:
 80121e4:	b508      	push	{r3, lr}
 80121e6:	2006      	movs	r0, #6
 80121e8:	f000 fa08 	bl	80125fc <raise>
 80121ec:	2001      	movs	r0, #1
 80121ee:	f7f2 f891 	bl	8004314 <_exit>

080121f2 <_malloc_usable_size_r>:
 80121f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121f6:	1f18      	subs	r0, r3, #4
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	bfbc      	itt	lt
 80121fc:	580b      	ldrlt	r3, [r1, r0]
 80121fe:	18c0      	addlt	r0, r0, r3
 8012200:	4770      	bx	lr

08012202 <__sfputc_r>:
 8012202:	6893      	ldr	r3, [r2, #8]
 8012204:	3b01      	subs	r3, #1
 8012206:	2b00      	cmp	r3, #0
 8012208:	b410      	push	{r4}
 801220a:	6093      	str	r3, [r2, #8]
 801220c:	da08      	bge.n	8012220 <__sfputc_r+0x1e>
 801220e:	6994      	ldr	r4, [r2, #24]
 8012210:	42a3      	cmp	r3, r4
 8012212:	db01      	blt.n	8012218 <__sfputc_r+0x16>
 8012214:	290a      	cmp	r1, #10
 8012216:	d103      	bne.n	8012220 <__sfputc_r+0x1e>
 8012218:	f85d 4b04 	ldr.w	r4, [sp], #4
 801221c:	f000 b932 	b.w	8012484 <__swbuf_r>
 8012220:	6813      	ldr	r3, [r2, #0]
 8012222:	1c58      	adds	r0, r3, #1
 8012224:	6010      	str	r0, [r2, #0]
 8012226:	7019      	strb	r1, [r3, #0]
 8012228:	4608      	mov	r0, r1
 801222a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801222e:	4770      	bx	lr

08012230 <__sfputs_r>:
 8012230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012232:	4606      	mov	r6, r0
 8012234:	460f      	mov	r7, r1
 8012236:	4614      	mov	r4, r2
 8012238:	18d5      	adds	r5, r2, r3
 801223a:	42ac      	cmp	r4, r5
 801223c:	d101      	bne.n	8012242 <__sfputs_r+0x12>
 801223e:	2000      	movs	r0, #0
 8012240:	e007      	b.n	8012252 <__sfputs_r+0x22>
 8012242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012246:	463a      	mov	r2, r7
 8012248:	4630      	mov	r0, r6
 801224a:	f7ff ffda 	bl	8012202 <__sfputc_r>
 801224e:	1c43      	adds	r3, r0, #1
 8012250:	d1f3      	bne.n	801223a <__sfputs_r+0xa>
 8012252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012254 <_vfiprintf_r>:
 8012254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012258:	460d      	mov	r5, r1
 801225a:	b09d      	sub	sp, #116	@ 0x74
 801225c:	4614      	mov	r4, r2
 801225e:	4698      	mov	r8, r3
 8012260:	4606      	mov	r6, r0
 8012262:	b118      	cbz	r0, 801226c <_vfiprintf_r+0x18>
 8012264:	6a03      	ldr	r3, [r0, #32]
 8012266:	b90b      	cbnz	r3, 801226c <_vfiprintf_r+0x18>
 8012268:	f7fc fda0 	bl	800edac <__sinit>
 801226c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801226e:	07d9      	lsls	r1, r3, #31
 8012270:	d405      	bmi.n	801227e <_vfiprintf_r+0x2a>
 8012272:	89ab      	ldrh	r3, [r5, #12]
 8012274:	059a      	lsls	r2, r3, #22
 8012276:	d402      	bmi.n	801227e <_vfiprintf_r+0x2a>
 8012278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801227a:	f7fc ff04 	bl	800f086 <__retarget_lock_acquire_recursive>
 801227e:	89ab      	ldrh	r3, [r5, #12]
 8012280:	071b      	lsls	r3, r3, #28
 8012282:	d501      	bpl.n	8012288 <_vfiprintf_r+0x34>
 8012284:	692b      	ldr	r3, [r5, #16]
 8012286:	b99b      	cbnz	r3, 80122b0 <_vfiprintf_r+0x5c>
 8012288:	4629      	mov	r1, r5
 801228a:	4630      	mov	r0, r6
 801228c:	f000 f938 	bl	8012500 <__swsetup_r>
 8012290:	b170      	cbz	r0, 80122b0 <_vfiprintf_r+0x5c>
 8012292:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012294:	07dc      	lsls	r4, r3, #31
 8012296:	d504      	bpl.n	80122a2 <_vfiprintf_r+0x4e>
 8012298:	f04f 30ff 	mov.w	r0, #4294967295
 801229c:	b01d      	add	sp, #116	@ 0x74
 801229e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122a2:	89ab      	ldrh	r3, [r5, #12]
 80122a4:	0598      	lsls	r0, r3, #22
 80122a6:	d4f7      	bmi.n	8012298 <_vfiprintf_r+0x44>
 80122a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80122aa:	f7fc feed 	bl	800f088 <__retarget_lock_release_recursive>
 80122ae:	e7f3      	b.n	8012298 <_vfiprintf_r+0x44>
 80122b0:	2300      	movs	r3, #0
 80122b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80122b4:	2320      	movs	r3, #32
 80122b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80122ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80122be:	2330      	movs	r3, #48	@ 0x30
 80122c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012470 <_vfiprintf_r+0x21c>
 80122c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80122c8:	f04f 0901 	mov.w	r9, #1
 80122cc:	4623      	mov	r3, r4
 80122ce:	469a      	mov	sl, r3
 80122d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122d4:	b10a      	cbz	r2, 80122da <_vfiprintf_r+0x86>
 80122d6:	2a25      	cmp	r2, #37	@ 0x25
 80122d8:	d1f9      	bne.n	80122ce <_vfiprintf_r+0x7a>
 80122da:	ebba 0b04 	subs.w	fp, sl, r4
 80122de:	d00b      	beq.n	80122f8 <_vfiprintf_r+0xa4>
 80122e0:	465b      	mov	r3, fp
 80122e2:	4622      	mov	r2, r4
 80122e4:	4629      	mov	r1, r5
 80122e6:	4630      	mov	r0, r6
 80122e8:	f7ff ffa2 	bl	8012230 <__sfputs_r>
 80122ec:	3001      	adds	r0, #1
 80122ee:	f000 80a7 	beq.w	8012440 <_vfiprintf_r+0x1ec>
 80122f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80122f4:	445a      	add	r2, fp
 80122f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80122f8:	f89a 3000 	ldrb.w	r3, [sl]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f000 809f 	beq.w	8012440 <_vfiprintf_r+0x1ec>
 8012302:	2300      	movs	r3, #0
 8012304:	f04f 32ff 	mov.w	r2, #4294967295
 8012308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801230c:	f10a 0a01 	add.w	sl, sl, #1
 8012310:	9304      	str	r3, [sp, #16]
 8012312:	9307      	str	r3, [sp, #28]
 8012314:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012318:	931a      	str	r3, [sp, #104]	@ 0x68
 801231a:	4654      	mov	r4, sl
 801231c:	2205      	movs	r2, #5
 801231e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012322:	4853      	ldr	r0, [pc, #332]	@ (8012470 <_vfiprintf_r+0x21c>)
 8012324:	f7ed ffbc 	bl	80002a0 <memchr>
 8012328:	9a04      	ldr	r2, [sp, #16]
 801232a:	b9d8      	cbnz	r0, 8012364 <_vfiprintf_r+0x110>
 801232c:	06d1      	lsls	r1, r2, #27
 801232e:	bf44      	itt	mi
 8012330:	2320      	movmi	r3, #32
 8012332:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012336:	0713      	lsls	r3, r2, #28
 8012338:	bf44      	itt	mi
 801233a:	232b      	movmi	r3, #43	@ 0x2b
 801233c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012340:	f89a 3000 	ldrb.w	r3, [sl]
 8012344:	2b2a      	cmp	r3, #42	@ 0x2a
 8012346:	d015      	beq.n	8012374 <_vfiprintf_r+0x120>
 8012348:	9a07      	ldr	r2, [sp, #28]
 801234a:	4654      	mov	r4, sl
 801234c:	2000      	movs	r0, #0
 801234e:	f04f 0c0a 	mov.w	ip, #10
 8012352:	4621      	mov	r1, r4
 8012354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012358:	3b30      	subs	r3, #48	@ 0x30
 801235a:	2b09      	cmp	r3, #9
 801235c:	d94b      	bls.n	80123f6 <_vfiprintf_r+0x1a2>
 801235e:	b1b0      	cbz	r0, 801238e <_vfiprintf_r+0x13a>
 8012360:	9207      	str	r2, [sp, #28]
 8012362:	e014      	b.n	801238e <_vfiprintf_r+0x13a>
 8012364:	eba0 0308 	sub.w	r3, r0, r8
 8012368:	fa09 f303 	lsl.w	r3, r9, r3
 801236c:	4313      	orrs	r3, r2
 801236e:	9304      	str	r3, [sp, #16]
 8012370:	46a2      	mov	sl, r4
 8012372:	e7d2      	b.n	801231a <_vfiprintf_r+0xc6>
 8012374:	9b03      	ldr	r3, [sp, #12]
 8012376:	1d19      	adds	r1, r3, #4
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	9103      	str	r1, [sp, #12]
 801237c:	2b00      	cmp	r3, #0
 801237e:	bfbb      	ittet	lt
 8012380:	425b      	neglt	r3, r3
 8012382:	f042 0202 	orrlt.w	r2, r2, #2
 8012386:	9307      	strge	r3, [sp, #28]
 8012388:	9307      	strlt	r3, [sp, #28]
 801238a:	bfb8      	it	lt
 801238c:	9204      	strlt	r2, [sp, #16]
 801238e:	7823      	ldrb	r3, [r4, #0]
 8012390:	2b2e      	cmp	r3, #46	@ 0x2e
 8012392:	d10a      	bne.n	80123aa <_vfiprintf_r+0x156>
 8012394:	7863      	ldrb	r3, [r4, #1]
 8012396:	2b2a      	cmp	r3, #42	@ 0x2a
 8012398:	d132      	bne.n	8012400 <_vfiprintf_r+0x1ac>
 801239a:	9b03      	ldr	r3, [sp, #12]
 801239c:	1d1a      	adds	r2, r3, #4
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	9203      	str	r2, [sp, #12]
 80123a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80123a6:	3402      	adds	r4, #2
 80123a8:	9305      	str	r3, [sp, #20]
 80123aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012480 <_vfiprintf_r+0x22c>
 80123ae:	7821      	ldrb	r1, [r4, #0]
 80123b0:	2203      	movs	r2, #3
 80123b2:	4650      	mov	r0, sl
 80123b4:	f7ed ff74 	bl	80002a0 <memchr>
 80123b8:	b138      	cbz	r0, 80123ca <_vfiprintf_r+0x176>
 80123ba:	9b04      	ldr	r3, [sp, #16]
 80123bc:	eba0 000a 	sub.w	r0, r0, sl
 80123c0:	2240      	movs	r2, #64	@ 0x40
 80123c2:	4082      	lsls	r2, r0
 80123c4:	4313      	orrs	r3, r2
 80123c6:	3401      	adds	r4, #1
 80123c8:	9304      	str	r3, [sp, #16]
 80123ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123ce:	4829      	ldr	r0, [pc, #164]	@ (8012474 <_vfiprintf_r+0x220>)
 80123d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80123d4:	2206      	movs	r2, #6
 80123d6:	f7ed ff63 	bl	80002a0 <memchr>
 80123da:	2800      	cmp	r0, #0
 80123dc:	d03f      	beq.n	801245e <_vfiprintf_r+0x20a>
 80123de:	4b26      	ldr	r3, [pc, #152]	@ (8012478 <_vfiprintf_r+0x224>)
 80123e0:	bb1b      	cbnz	r3, 801242a <_vfiprintf_r+0x1d6>
 80123e2:	9b03      	ldr	r3, [sp, #12]
 80123e4:	3307      	adds	r3, #7
 80123e6:	f023 0307 	bic.w	r3, r3, #7
 80123ea:	3308      	adds	r3, #8
 80123ec:	9303      	str	r3, [sp, #12]
 80123ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123f0:	443b      	add	r3, r7
 80123f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80123f4:	e76a      	b.n	80122cc <_vfiprintf_r+0x78>
 80123f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80123fa:	460c      	mov	r4, r1
 80123fc:	2001      	movs	r0, #1
 80123fe:	e7a8      	b.n	8012352 <_vfiprintf_r+0xfe>
 8012400:	2300      	movs	r3, #0
 8012402:	3401      	adds	r4, #1
 8012404:	9305      	str	r3, [sp, #20]
 8012406:	4619      	mov	r1, r3
 8012408:	f04f 0c0a 	mov.w	ip, #10
 801240c:	4620      	mov	r0, r4
 801240e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012412:	3a30      	subs	r2, #48	@ 0x30
 8012414:	2a09      	cmp	r2, #9
 8012416:	d903      	bls.n	8012420 <_vfiprintf_r+0x1cc>
 8012418:	2b00      	cmp	r3, #0
 801241a:	d0c6      	beq.n	80123aa <_vfiprintf_r+0x156>
 801241c:	9105      	str	r1, [sp, #20]
 801241e:	e7c4      	b.n	80123aa <_vfiprintf_r+0x156>
 8012420:	fb0c 2101 	mla	r1, ip, r1, r2
 8012424:	4604      	mov	r4, r0
 8012426:	2301      	movs	r3, #1
 8012428:	e7f0      	b.n	801240c <_vfiprintf_r+0x1b8>
 801242a:	ab03      	add	r3, sp, #12
 801242c:	9300      	str	r3, [sp, #0]
 801242e:	462a      	mov	r2, r5
 8012430:	4b12      	ldr	r3, [pc, #72]	@ (801247c <_vfiprintf_r+0x228>)
 8012432:	a904      	add	r1, sp, #16
 8012434:	4630      	mov	r0, r6
 8012436:	f7fb fe61 	bl	800e0fc <_printf_float>
 801243a:	4607      	mov	r7, r0
 801243c:	1c78      	adds	r0, r7, #1
 801243e:	d1d6      	bne.n	80123ee <_vfiprintf_r+0x19a>
 8012440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012442:	07d9      	lsls	r1, r3, #31
 8012444:	d405      	bmi.n	8012452 <_vfiprintf_r+0x1fe>
 8012446:	89ab      	ldrh	r3, [r5, #12]
 8012448:	059a      	lsls	r2, r3, #22
 801244a:	d402      	bmi.n	8012452 <_vfiprintf_r+0x1fe>
 801244c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801244e:	f7fc fe1b 	bl	800f088 <__retarget_lock_release_recursive>
 8012452:	89ab      	ldrh	r3, [r5, #12]
 8012454:	065b      	lsls	r3, r3, #25
 8012456:	f53f af1f 	bmi.w	8012298 <_vfiprintf_r+0x44>
 801245a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801245c:	e71e      	b.n	801229c <_vfiprintf_r+0x48>
 801245e:	ab03      	add	r3, sp, #12
 8012460:	9300      	str	r3, [sp, #0]
 8012462:	462a      	mov	r2, r5
 8012464:	4b05      	ldr	r3, [pc, #20]	@ (801247c <_vfiprintf_r+0x228>)
 8012466:	a904      	add	r1, sp, #16
 8012468:	4630      	mov	r0, r6
 801246a:	f7fc f8df 	bl	800e62c <_printf_i>
 801246e:	e7e4      	b.n	801243a <_vfiprintf_r+0x1e6>
 8012470:	080266f9 	.word	0x080266f9
 8012474:	08026703 	.word	0x08026703
 8012478:	0800e0fd 	.word	0x0800e0fd
 801247c:	08012231 	.word	0x08012231
 8012480:	080266ff 	.word	0x080266ff

08012484 <__swbuf_r>:
 8012484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012486:	460e      	mov	r6, r1
 8012488:	4614      	mov	r4, r2
 801248a:	4605      	mov	r5, r0
 801248c:	b118      	cbz	r0, 8012496 <__swbuf_r+0x12>
 801248e:	6a03      	ldr	r3, [r0, #32]
 8012490:	b90b      	cbnz	r3, 8012496 <__swbuf_r+0x12>
 8012492:	f7fc fc8b 	bl	800edac <__sinit>
 8012496:	69a3      	ldr	r3, [r4, #24]
 8012498:	60a3      	str	r3, [r4, #8]
 801249a:	89a3      	ldrh	r3, [r4, #12]
 801249c:	071a      	lsls	r2, r3, #28
 801249e:	d501      	bpl.n	80124a4 <__swbuf_r+0x20>
 80124a0:	6923      	ldr	r3, [r4, #16]
 80124a2:	b943      	cbnz	r3, 80124b6 <__swbuf_r+0x32>
 80124a4:	4621      	mov	r1, r4
 80124a6:	4628      	mov	r0, r5
 80124a8:	f000 f82a 	bl	8012500 <__swsetup_r>
 80124ac:	b118      	cbz	r0, 80124b6 <__swbuf_r+0x32>
 80124ae:	f04f 37ff 	mov.w	r7, #4294967295
 80124b2:	4638      	mov	r0, r7
 80124b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124b6:	6823      	ldr	r3, [r4, #0]
 80124b8:	6922      	ldr	r2, [r4, #16]
 80124ba:	1a98      	subs	r0, r3, r2
 80124bc:	6963      	ldr	r3, [r4, #20]
 80124be:	b2f6      	uxtb	r6, r6
 80124c0:	4283      	cmp	r3, r0
 80124c2:	4637      	mov	r7, r6
 80124c4:	dc05      	bgt.n	80124d2 <__swbuf_r+0x4e>
 80124c6:	4621      	mov	r1, r4
 80124c8:	4628      	mov	r0, r5
 80124ca:	f7ff fa53 	bl	8011974 <_fflush_r>
 80124ce:	2800      	cmp	r0, #0
 80124d0:	d1ed      	bne.n	80124ae <__swbuf_r+0x2a>
 80124d2:	68a3      	ldr	r3, [r4, #8]
 80124d4:	3b01      	subs	r3, #1
 80124d6:	60a3      	str	r3, [r4, #8]
 80124d8:	6823      	ldr	r3, [r4, #0]
 80124da:	1c5a      	adds	r2, r3, #1
 80124dc:	6022      	str	r2, [r4, #0]
 80124de:	701e      	strb	r6, [r3, #0]
 80124e0:	6962      	ldr	r2, [r4, #20]
 80124e2:	1c43      	adds	r3, r0, #1
 80124e4:	429a      	cmp	r2, r3
 80124e6:	d004      	beq.n	80124f2 <__swbuf_r+0x6e>
 80124e8:	89a3      	ldrh	r3, [r4, #12]
 80124ea:	07db      	lsls	r3, r3, #31
 80124ec:	d5e1      	bpl.n	80124b2 <__swbuf_r+0x2e>
 80124ee:	2e0a      	cmp	r6, #10
 80124f0:	d1df      	bne.n	80124b2 <__swbuf_r+0x2e>
 80124f2:	4621      	mov	r1, r4
 80124f4:	4628      	mov	r0, r5
 80124f6:	f7ff fa3d 	bl	8011974 <_fflush_r>
 80124fa:	2800      	cmp	r0, #0
 80124fc:	d0d9      	beq.n	80124b2 <__swbuf_r+0x2e>
 80124fe:	e7d6      	b.n	80124ae <__swbuf_r+0x2a>

08012500 <__swsetup_r>:
 8012500:	b538      	push	{r3, r4, r5, lr}
 8012502:	4b29      	ldr	r3, [pc, #164]	@ (80125a8 <__swsetup_r+0xa8>)
 8012504:	4605      	mov	r5, r0
 8012506:	6818      	ldr	r0, [r3, #0]
 8012508:	460c      	mov	r4, r1
 801250a:	b118      	cbz	r0, 8012514 <__swsetup_r+0x14>
 801250c:	6a03      	ldr	r3, [r0, #32]
 801250e:	b90b      	cbnz	r3, 8012514 <__swsetup_r+0x14>
 8012510:	f7fc fc4c 	bl	800edac <__sinit>
 8012514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012518:	0719      	lsls	r1, r3, #28
 801251a:	d422      	bmi.n	8012562 <__swsetup_r+0x62>
 801251c:	06da      	lsls	r2, r3, #27
 801251e:	d407      	bmi.n	8012530 <__swsetup_r+0x30>
 8012520:	2209      	movs	r2, #9
 8012522:	602a      	str	r2, [r5, #0]
 8012524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012528:	81a3      	strh	r3, [r4, #12]
 801252a:	f04f 30ff 	mov.w	r0, #4294967295
 801252e:	e033      	b.n	8012598 <__swsetup_r+0x98>
 8012530:	0758      	lsls	r0, r3, #29
 8012532:	d512      	bpl.n	801255a <__swsetup_r+0x5a>
 8012534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012536:	b141      	cbz	r1, 801254a <__swsetup_r+0x4a>
 8012538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801253c:	4299      	cmp	r1, r3
 801253e:	d002      	beq.n	8012546 <__swsetup_r+0x46>
 8012540:	4628      	mov	r0, r5
 8012542:	f7fd fc05 	bl	800fd50 <_free_r>
 8012546:	2300      	movs	r3, #0
 8012548:	6363      	str	r3, [r4, #52]	@ 0x34
 801254a:	89a3      	ldrh	r3, [r4, #12]
 801254c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012550:	81a3      	strh	r3, [r4, #12]
 8012552:	2300      	movs	r3, #0
 8012554:	6063      	str	r3, [r4, #4]
 8012556:	6923      	ldr	r3, [r4, #16]
 8012558:	6023      	str	r3, [r4, #0]
 801255a:	89a3      	ldrh	r3, [r4, #12]
 801255c:	f043 0308 	orr.w	r3, r3, #8
 8012560:	81a3      	strh	r3, [r4, #12]
 8012562:	6923      	ldr	r3, [r4, #16]
 8012564:	b94b      	cbnz	r3, 801257a <__swsetup_r+0x7a>
 8012566:	89a3      	ldrh	r3, [r4, #12]
 8012568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801256c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012570:	d003      	beq.n	801257a <__swsetup_r+0x7a>
 8012572:	4621      	mov	r1, r4
 8012574:	4628      	mov	r0, r5
 8012576:	f000 f883 	bl	8012680 <__smakebuf_r>
 801257a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801257e:	f013 0201 	ands.w	r2, r3, #1
 8012582:	d00a      	beq.n	801259a <__swsetup_r+0x9a>
 8012584:	2200      	movs	r2, #0
 8012586:	60a2      	str	r2, [r4, #8]
 8012588:	6962      	ldr	r2, [r4, #20]
 801258a:	4252      	negs	r2, r2
 801258c:	61a2      	str	r2, [r4, #24]
 801258e:	6922      	ldr	r2, [r4, #16]
 8012590:	b942      	cbnz	r2, 80125a4 <__swsetup_r+0xa4>
 8012592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012596:	d1c5      	bne.n	8012524 <__swsetup_r+0x24>
 8012598:	bd38      	pop	{r3, r4, r5, pc}
 801259a:	0799      	lsls	r1, r3, #30
 801259c:	bf58      	it	pl
 801259e:	6962      	ldrpl	r2, [r4, #20]
 80125a0:	60a2      	str	r2, [r4, #8]
 80125a2:	e7f4      	b.n	801258e <__swsetup_r+0x8e>
 80125a4:	2000      	movs	r0, #0
 80125a6:	e7f7      	b.n	8012598 <__swsetup_r+0x98>
 80125a8:	20000020 	.word	0x20000020

080125ac <_raise_r>:
 80125ac:	291f      	cmp	r1, #31
 80125ae:	b538      	push	{r3, r4, r5, lr}
 80125b0:	4605      	mov	r5, r0
 80125b2:	460c      	mov	r4, r1
 80125b4:	d904      	bls.n	80125c0 <_raise_r+0x14>
 80125b6:	2316      	movs	r3, #22
 80125b8:	6003      	str	r3, [r0, #0]
 80125ba:	f04f 30ff 	mov.w	r0, #4294967295
 80125be:	bd38      	pop	{r3, r4, r5, pc}
 80125c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80125c2:	b112      	cbz	r2, 80125ca <_raise_r+0x1e>
 80125c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80125c8:	b94b      	cbnz	r3, 80125de <_raise_r+0x32>
 80125ca:	4628      	mov	r0, r5
 80125cc:	f000 f830 	bl	8012630 <_getpid_r>
 80125d0:	4622      	mov	r2, r4
 80125d2:	4601      	mov	r1, r0
 80125d4:	4628      	mov	r0, r5
 80125d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125da:	f000 b817 	b.w	801260c <_kill_r>
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d00a      	beq.n	80125f8 <_raise_r+0x4c>
 80125e2:	1c59      	adds	r1, r3, #1
 80125e4:	d103      	bne.n	80125ee <_raise_r+0x42>
 80125e6:	2316      	movs	r3, #22
 80125e8:	6003      	str	r3, [r0, #0]
 80125ea:	2001      	movs	r0, #1
 80125ec:	e7e7      	b.n	80125be <_raise_r+0x12>
 80125ee:	2100      	movs	r1, #0
 80125f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80125f4:	4620      	mov	r0, r4
 80125f6:	4798      	blx	r3
 80125f8:	2000      	movs	r0, #0
 80125fa:	e7e0      	b.n	80125be <_raise_r+0x12>

080125fc <raise>:
 80125fc:	4b02      	ldr	r3, [pc, #8]	@ (8012608 <raise+0xc>)
 80125fe:	4601      	mov	r1, r0
 8012600:	6818      	ldr	r0, [r3, #0]
 8012602:	f7ff bfd3 	b.w	80125ac <_raise_r>
 8012606:	bf00      	nop
 8012608:	20000020 	.word	0x20000020

0801260c <_kill_r>:
 801260c:	b538      	push	{r3, r4, r5, lr}
 801260e:	4d07      	ldr	r5, [pc, #28]	@ (801262c <_kill_r+0x20>)
 8012610:	2300      	movs	r3, #0
 8012612:	4604      	mov	r4, r0
 8012614:	4608      	mov	r0, r1
 8012616:	4611      	mov	r1, r2
 8012618:	602b      	str	r3, [r5, #0]
 801261a:	f7f1 fe6b 	bl	80042f4 <_kill>
 801261e:	1c43      	adds	r3, r0, #1
 8012620:	d102      	bne.n	8012628 <_kill_r+0x1c>
 8012622:	682b      	ldr	r3, [r5, #0]
 8012624:	b103      	cbz	r3, 8012628 <_kill_r+0x1c>
 8012626:	6023      	str	r3, [r4, #0]
 8012628:	bd38      	pop	{r3, r4, r5, pc}
 801262a:	bf00      	nop
 801262c:	20009430 	.word	0x20009430

08012630 <_getpid_r>:
 8012630:	f7f1 be58 	b.w	80042e4 <_getpid>

08012634 <__swhatbuf_r>:
 8012634:	b570      	push	{r4, r5, r6, lr}
 8012636:	460c      	mov	r4, r1
 8012638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801263c:	2900      	cmp	r1, #0
 801263e:	b096      	sub	sp, #88	@ 0x58
 8012640:	4615      	mov	r5, r2
 8012642:	461e      	mov	r6, r3
 8012644:	da0d      	bge.n	8012662 <__swhatbuf_r+0x2e>
 8012646:	89a3      	ldrh	r3, [r4, #12]
 8012648:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801264c:	f04f 0100 	mov.w	r1, #0
 8012650:	bf14      	ite	ne
 8012652:	2340      	movne	r3, #64	@ 0x40
 8012654:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012658:	2000      	movs	r0, #0
 801265a:	6031      	str	r1, [r6, #0]
 801265c:	602b      	str	r3, [r5, #0]
 801265e:	b016      	add	sp, #88	@ 0x58
 8012660:	bd70      	pop	{r4, r5, r6, pc}
 8012662:	466a      	mov	r2, sp
 8012664:	f000 f848 	bl	80126f8 <_fstat_r>
 8012668:	2800      	cmp	r0, #0
 801266a:	dbec      	blt.n	8012646 <__swhatbuf_r+0x12>
 801266c:	9901      	ldr	r1, [sp, #4]
 801266e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012672:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012676:	4259      	negs	r1, r3
 8012678:	4159      	adcs	r1, r3
 801267a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801267e:	e7eb      	b.n	8012658 <__swhatbuf_r+0x24>

08012680 <__smakebuf_r>:
 8012680:	898b      	ldrh	r3, [r1, #12]
 8012682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012684:	079d      	lsls	r5, r3, #30
 8012686:	4606      	mov	r6, r0
 8012688:	460c      	mov	r4, r1
 801268a:	d507      	bpl.n	801269c <__smakebuf_r+0x1c>
 801268c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012690:	6023      	str	r3, [r4, #0]
 8012692:	6123      	str	r3, [r4, #16]
 8012694:	2301      	movs	r3, #1
 8012696:	6163      	str	r3, [r4, #20]
 8012698:	b003      	add	sp, #12
 801269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801269c:	ab01      	add	r3, sp, #4
 801269e:	466a      	mov	r2, sp
 80126a0:	f7ff ffc8 	bl	8012634 <__swhatbuf_r>
 80126a4:	9f00      	ldr	r7, [sp, #0]
 80126a6:	4605      	mov	r5, r0
 80126a8:	4639      	mov	r1, r7
 80126aa:	4630      	mov	r0, r6
 80126ac:	f7fd fbc4 	bl	800fe38 <_malloc_r>
 80126b0:	b948      	cbnz	r0, 80126c6 <__smakebuf_r+0x46>
 80126b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126b6:	059a      	lsls	r2, r3, #22
 80126b8:	d4ee      	bmi.n	8012698 <__smakebuf_r+0x18>
 80126ba:	f023 0303 	bic.w	r3, r3, #3
 80126be:	f043 0302 	orr.w	r3, r3, #2
 80126c2:	81a3      	strh	r3, [r4, #12]
 80126c4:	e7e2      	b.n	801268c <__smakebuf_r+0xc>
 80126c6:	89a3      	ldrh	r3, [r4, #12]
 80126c8:	6020      	str	r0, [r4, #0]
 80126ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126ce:	81a3      	strh	r3, [r4, #12]
 80126d0:	9b01      	ldr	r3, [sp, #4]
 80126d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80126d6:	b15b      	cbz	r3, 80126f0 <__smakebuf_r+0x70>
 80126d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126dc:	4630      	mov	r0, r6
 80126de:	f000 f81d 	bl	801271c <_isatty_r>
 80126e2:	b128      	cbz	r0, 80126f0 <__smakebuf_r+0x70>
 80126e4:	89a3      	ldrh	r3, [r4, #12]
 80126e6:	f023 0303 	bic.w	r3, r3, #3
 80126ea:	f043 0301 	orr.w	r3, r3, #1
 80126ee:	81a3      	strh	r3, [r4, #12]
 80126f0:	89a3      	ldrh	r3, [r4, #12]
 80126f2:	431d      	orrs	r5, r3
 80126f4:	81a5      	strh	r5, [r4, #12]
 80126f6:	e7cf      	b.n	8012698 <__smakebuf_r+0x18>

080126f8 <_fstat_r>:
 80126f8:	b538      	push	{r3, r4, r5, lr}
 80126fa:	4d07      	ldr	r5, [pc, #28]	@ (8012718 <_fstat_r+0x20>)
 80126fc:	2300      	movs	r3, #0
 80126fe:	4604      	mov	r4, r0
 8012700:	4608      	mov	r0, r1
 8012702:	4611      	mov	r1, r2
 8012704:	602b      	str	r3, [r5, #0]
 8012706:	f7f1 fe55 	bl	80043b4 <_fstat>
 801270a:	1c43      	adds	r3, r0, #1
 801270c:	d102      	bne.n	8012714 <_fstat_r+0x1c>
 801270e:	682b      	ldr	r3, [r5, #0]
 8012710:	b103      	cbz	r3, 8012714 <_fstat_r+0x1c>
 8012712:	6023      	str	r3, [r4, #0]
 8012714:	bd38      	pop	{r3, r4, r5, pc}
 8012716:	bf00      	nop
 8012718:	20009430 	.word	0x20009430

0801271c <_isatty_r>:
 801271c:	b538      	push	{r3, r4, r5, lr}
 801271e:	4d06      	ldr	r5, [pc, #24]	@ (8012738 <_isatty_r+0x1c>)
 8012720:	2300      	movs	r3, #0
 8012722:	4604      	mov	r4, r0
 8012724:	4608      	mov	r0, r1
 8012726:	602b      	str	r3, [r5, #0]
 8012728:	f7f1 fe54 	bl	80043d4 <_isatty>
 801272c:	1c43      	adds	r3, r0, #1
 801272e:	d102      	bne.n	8012736 <_isatty_r+0x1a>
 8012730:	682b      	ldr	r3, [r5, #0]
 8012732:	b103      	cbz	r3, 8012736 <_isatty_r+0x1a>
 8012734:	6023      	str	r3, [r4, #0]
 8012736:	bd38      	pop	{r3, r4, r5, pc}
 8012738:	20009430 	.word	0x20009430

0801273c <log10f>:
 801273c:	b508      	push	{r3, lr}
 801273e:	ed2d 8b02 	vpush	{d8}
 8012742:	eeb0 8a40 	vmov.f32	s16, s0
 8012746:	f000 f849 	bl	80127dc <__ieee754_log10f>
 801274a:	eeb4 8a48 	vcmp.f32	s16, s16
 801274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012752:	d60f      	bvs.n	8012774 <log10f+0x38>
 8012754:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801275c:	d80a      	bhi.n	8012774 <log10f+0x38>
 801275e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012766:	d108      	bne.n	801277a <log10f+0x3e>
 8012768:	f7fc fc62 	bl	800f030 <__errno>
 801276c:	2322      	movs	r3, #34	@ 0x22
 801276e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012790 <log10f+0x54>
 8012772:	6003      	str	r3, [r0, #0]
 8012774:	ecbd 8b02 	vpop	{d8}
 8012778:	bd08      	pop	{r3, pc}
 801277a:	f7fc fc59 	bl	800f030 <__errno>
 801277e:	ecbd 8b02 	vpop	{d8}
 8012782:	2321      	movs	r3, #33	@ 0x21
 8012784:	6003      	str	r3, [r0, #0]
 8012786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801278a:	4802      	ldr	r0, [pc, #8]	@ (8012794 <log10f+0x58>)
 801278c:	f7fc bc8c 	b.w	800f0a8 <nanf>
 8012790:	ff800000 	.word	0xff800000
 8012794:	0802674d 	.word	0x0802674d

08012798 <sqrtf>:
 8012798:	b508      	push	{r3, lr}
 801279a:	ed2d 8b02 	vpush	{d8}
 801279e:	eeb0 8a40 	vmov.f32	s16, s0
 80127a2:	f000 f817 	bl	80127d4 <__ieee754_sqrtf>
 80127a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80127aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ae:	d60c      	bvs.n	80127ca <sqrtf+0x32>
 80127b0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80127d0 <sqrtf+0x38>
 80127b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80127b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127bc:	d505      	bpl.n	80127ca <sqrtf+0x32>
 80127be:	f7fc fc37 	bl	800f030 <__errno>
 80127c2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80127c6:	2321      	movs	r3, #33	@ 0x21
 80127c8:	6003      	str	r3, [r0, #0]
 80127ca:	ecbd 8b02 	vpop	{d8}
 80127ce:	bd08      	pop	{r3, pc}
 80127d0:	00000000 	.word	0x00000000

080127d4 <__ieee754_sqrtf>:
 80127d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80127d8:	4770      	bx	lr
	...

080127dc <__ieee754_log10f>:
 80127dc:	b508      	push	{r3, lr}
 80127de:	ee10 3a10 	vmov	r3, s0
 80127e2:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80127e6:	ed2d 8b02 	vpush	{d8}
 80127ea:	d108      	bne.n	80127fe <__ieee754_log10f+0x22>
 80127ec:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8012874 <__ieee754_log10f+0x98>
 80127f0:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8012878 <__ieee754_log10f+0x9c>
 80127f4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80127f8:	ecbd 8b02 	vpop	{d8}
 80127fc:	bd08      	pop	{r3, pc}
 80127fe:	2b00      	cmp	r3, #0
 8012800:	461a      	mov	r2, r3
 8012802:	da02      	bge.n	801280a <__ieee754_log10f+0x2e>
 8012804:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012808:	e7f2      	b.n	80127f0 <__ieee754_log10f+0x14>
 801280a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801280e:	db02      	blt.n	8012816 <__ieee754_log10f+0x3a>
 8012810:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012814:	e7f0      	b.n	80127f8 <__ieee754_log10f+0x1c>
 8012816:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801281a:	bfbf      	itttt	lt
 801281c:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 801287c <__ieee754_log10f+0xa0>
 8012820:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8012824:	f06f 0118 	mvnlt.w	r1, #24
 8012828:	ee17 2a90 	vmovlt	r2, s15
 801282c:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8012830:	bfa8      	it	ge
 8012832:	2100      	movge	r1, #0
 8012834:	3b7f      	subs	r3, #127	@ 0x7f
 8012836:	440b      	add	r3, r1
 8012838:	0fd9      	lsrs	r1, r3, #31
 801283a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801283e:	ee07 3a90 	vmov	s15, r3
 8012842:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012846:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 801284a:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801284e:	ee00 3a10 	vmov	s0, r3
 8012852:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8012856:	f000 f819 	bl	801288c <__ieee754_logf>
 801285a:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8012880 <__ieee754_log10f+0xa4>
 801285e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012862:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8012884 <__ieee754_log10f+0xa8>
 8012866:	eea8 0a27 	vfma.f32	s0, s16, s15
 801286a:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8012888 <__ieee754_log10f+0xac>
 801286e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8012872:	e7c1      	b.n	80127f8 <__ieee754_log10f+0x1c>
 8012874:	cc000000 	.word	0xcc000000
 8012878:	00000000 	.word	0x00000000
 801287c:	4c000000 	.word	0x4c000000
 8012880:	3ede5bd9 	.word	0x3ede5bd9
 8012884:	355427db 	.word	0x355427db
 8012888:	3e9a2080 	.word	0x3e9a2080

0801288c <__ieee754_logf>:
 801288c:	ee10 3a10 	vmov	r3, s0
 8012890:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012894:	d106      	bne.n	80128a4 <__ieee754_logf+0x18>
 8012896:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8012a30 <__ieee754_logf+0x1a4>
 801289a:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8012a34 <__ieee754_logf+0x1a8>
 801289e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80128a2:	4770      	bx	lr
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	461a      	mov	r2, r3
 80128a8:	da02      	bge.n	80128b0 <__ieee754_logf+0x24>
 80128aa:	ee30 7a40 	vsub.f32	s14, s0, s0
 80128ae:	e7f4      	b.n	801289a <__ieee754_logf+0xe>
 80128b0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80128b4:	db02      	blt.n	80128bc <__ieee754_logf+0x30>
 80128b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80128ba:	4770      	bx	lr
 80128bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80128c0:	bfb8      	it	lt
 80128c2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8012a38 <__ieee754_logf+0x1ac>
 80128c6:	485d      	ldr	r0, [pc, #372]	@ (8012a3c <__ieee754_logf+0x1b0>)
 80128c8:	bfbe      	ittt	lt
 80128ca:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80128ce:	f06f 0118 	mvnlt.w	r1, #24
 80128d2:	ee17 2a90 	vmovlt	r2, s15
 80128d6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80128da:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80128de:	4410      	add	r0, r2
 80128e0:	bfa8      	it	ge
 80128e2:	2100      	movge	r1, #0
 80128e4:	3b7f      	subs	r3, #127	@ 0x7f
 80128e6:	440b      	add	r3, r1
 80128e8:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 80128ec:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 80128f0:	4311      	orrs	r1, r2
 80128f2:	ee00 1a10 	vmov	s0, r1
 80128f6:	4952      	ldr	r1, [pc, #328]	@ (8012a40 <__ieee754_logf+0x1b4>)
 80128f8:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 80128fc:	f102 000f 	add.w	r0, r2, #15
 8012900:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012904:	4001      	ands	r1, r0
 8012906:	ee30 0a67 	vsub.f32	s0, s0, s15
 801290a:	bb89      	cbnz	r1, 8012970 <__ieee754_logf+0xe4>
 801290c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012914:	d10f      	bne.n	8012936 <__ieee754_logf+0xaa>
 8012916:	2b00      	cmp	r3, #0
 8012918:	f000 8087 	beq.w	8012a2a <__ieee754_logf+0x19e>
 801291c:	ee07 3a90 	vmov	s15, r3
 8012920:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8012a44 <__ieee754_logf+0x1b8>
 8012924:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8012a48 <__ieee754_logf+0x1bc>
 8012928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801292c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012930:	eea7 0a87 	vfma.f32	s0, s15, s14
 8012934:	4770      	bx	lr
 8012936:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8012a4c <__ieee754_logf+0x1c0>
 801293a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801293e:	eee0 7a66 	vfms.f32	s15, s0, s13
 8012942:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012946:	ee27 7a27 	vmul.f32	s14, s14, s15
 801294a:	b913      	cbnz	r3, 8012952 <__ieee754_logf+0xc6>
 801294c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012950:	4770      	bx	lr
 8012952:	ee07 3a90 	vmov	s15, r3
 8012956:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8012a44 <__ieee754_logf+0x1b8>
 801295a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801295e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012962:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012966:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012a48 <__ieee754_logf+0x1bc>
 801296a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801296e:	4770      	bx	lr
 8012970:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8012974:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012978:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012a50 <__ieee754_logf+0x1c4>
 801297c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8012a54 <__ieee754_logf+0x1c8>
 8012980:	4935      	ldr	r1, [pc, #212]	@ (8012a58 <__ieee754_logf+0x1cc>)
 8012982:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8012986:	4411      	add	r1, r2
 8012988:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 801298c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8012990:	430a      	orrs	r2, r1
 8012992:	2a00      	cmp	r2, #0
 8012994:	ee07 3a90 	vmov	s15, r3
 8012998:	ee26 5a06 	vmul.f32	s10, s12, s12
 801299c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80129a0:	ee25 7a05 	vmul.f32	s14, s10, s10
 80129a4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8012a5c <__ieee754_logf+0x1d0>
 80129a8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80129ac:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8012a60 <__ieee754_logf+0x1d4>
 80129b0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80129b4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8012a64 <__ieee754_logf+0x1d8>
 80129b8:	eee7 7a24 	vfma.f32	s15, s14, s9
 80129bc:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8012a68 <__ieee754_logf+0x1dc>
 80129c0:	eee7 4a87 	vfma.f32	s9, s15, s14
 80129c4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8012a6c <__ieee754_logf+0x1e0>
 80129c8:	eee4 7a87 	vfma.f32	s15, s9, s14
 80129cc:	ee67 7a85 	vmul.f32	s15, s15, s10
 80129d0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80129d4:	dd1a      	ble.n	8012a0c <__ieee754_logf+0x180>
 80129d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80129da:	ee20 7a07 	vmul.f32	s14, s0, s14
 80129de:	ee27 7a00 	vmul.f32	s14, s14, s0
 80129e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80129e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80129ea:	b913      	cbnz	r3, 80129f2 <__ieee754_logf+0x166>
 80129ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80129f0:	e7ac      	b.n	801294c <__ieee754_logf+0xc0>
 80129f2:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8012a44 <__ieee754_logf+0x1b8>
 80129f6:	eee6 7a86 	vfma.f32	s15, s13, s12
 80129fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80129fe:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012a02:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8012a48 <__ieee754_logf+0x1bc>
 8012a06:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8012a0a:	4770      	bx	lr
 8012a0c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012a10:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012a14:	b913      	cbnz	r3, 8012a1c <__ieee754_logf+0x190>
 8012a16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012a1a:	4770      	bx	lr
 8012a1c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8012a44 <__ieee754_logf+0x1b8>
 8012a20:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8012a24:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012a28:	e7eb      	b.n	8012a02 <__ieee754_logf+0x176>
 8012a2a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8012a34 <__ieee754_logf+0x1a8>
 8012a2e:	4770      	bx	lr
 8012a30:	cc000000 	.word	0xcc000000
 8012a34:	00000000 	.word	0x00000000
 8012a38:	4c000000 	.word	0x4c000000
 8012a3c:	004afb20 	.word	0x004afb20
 8012a40:	007ffff0 	.word	0x007ffff0
 8012a44:	3717f7d1 	.word	0x3717f7d1
 8012a48:	3f317180 	.word	0x3f317180
 8012a4c:	3eaaaaab 	.word	0x3eaaaaab
 8012a50:	3e1cd04f 	.word	0x3e1cd04f
 8012a54:	3e178897 	.word	0x3e178897
 8012a58:	ffcf5c30 	.word	0xffcf5c30
 8012a5c:	3e638e29 	.word	0x3e638e29
 8012a60:	3ecccccd 	.word	0x3ecccccd
 8012a64:	3e3a3325 	.word	0x3e3a3325
 8012a68:	3e924925 	.word	0x3e924925
 8012a6c:	3f2aaaab 	.word	0x3f2aaaab

08012a70 <_init>:
 8012a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a72:	bf00      	nop
 8012a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a76:	bc08      	pop	{r3}
 8012a78:	469e      	mov	lr, r3
 8012a7a:	4770      	bx	lr

08012a7c <_fini>:
 8012a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a7e:	bf00      	nop
 8012a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a82:	bc08      	pop	{r3}
 8012a84:	469e      	mov	lr, r3
 8012a86:	4770      	bx	lr
