
RTOS_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005100  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080052a0  080052a0  000062a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005360  08005360  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005360  08005360  00006360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005368  08005368  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005368  08005368  00006368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005370  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  20000060  080053d0  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c44  080053d0  00007c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001796a  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003551  00000000  00000000  0001e9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00021f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f88  00000000  00000000  00023358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186c8  00000000  00000000  000242e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e53  00000000  00000000  0003c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009841b  00000000  00000000  000537fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebc16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056a8  00000000  00000000  000ebc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f1304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005288 	.word	0x08005288

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005288 	.word	0x08005288

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED2Task */
  LED2TaskHandle = osThreadNew(StartLED2Task, NULL, &LED2Task_attributes);
 80004d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000508 <MX_FREERTOS_Init+0x38>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <MX_FREERTOS_Init+0x3c>)
 80004da:	f002 f85b 	bl	8002594 <osThreadNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000510 <MX_FREERTOS_Init+0x40>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* creation of LED3Task */
  LED3TaskHandle = osThreadNew(StartLED3Task, NULL, &LED3Task_attributes);
 80004e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000514 <MX_FREERTOS_Init+0x44>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480b      	ldr	r0, [pc, #44]	@ (8000518 <MX_FREERTOS_Init+0x48>)
 80004ea:	f002 f853 	bl	8002594 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0a      	ldr	r2, [pc, #40]	@ (800051c <MX_FREERTOS_Init+0x4c>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of LED4Task */
  LED4TaskHandle = osThreadNew(StartLED4Task, NULL, &LED4Task_attributes);
 80004f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <MX_FREERTOS_Init+0x50>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480a      	ldr	r0, [pc, #40]	@ (8000524 <MX_FREERTOS_Init+0x54>)
 80004fa:	f002 f84b 	bl	8002594 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a09      	ldr	r2, [pc, #36]	@ (8000528 <MX_FREERTOS_Init+0x58>)
 8000502:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	080052dc 	.word	0x080052dc
 800050c:	0800052d 	.word	0x0800052d
 8000510:	2000007c 	.word	0x2000007c
 8000514:	08005300 	.word	0x08005300
 8000518:	0800055d 	.word	0x0800055d
 800051c:	20000080 	.word	0x20000080
 8000520:	08005324 	.word	0x08005324
 8000524:	0800058d 	.word	0x0800058d
 8000528:	20000084 	.word	0x20000084

0800052c <StartLED2Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLED2Task */
void StartLED2Task(void *argument)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED2Task */
	uint32_t tick;

//	tick = osKernelGetTickCount();
	tick = xTaskGetTickCount();
 8000534:	f003 f9fc 	bl	8003930 <xTaskGetTickCount>
 8000538:	4603      	mov	r3, r0
 800053a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800053c:	2120      	movs	r1, #32
 800053e:	4806      	ldr	r0, [pc, #24]	@ (8000558 <StartLED2Task+0x2c>)
 8000540:	f000 fd7d 	bl	800103e <HAL_GPIO_TogglePin>
//	  tick += (300 * osKernelGetTickFreq()) / 1000;
	  vTaskDelayUntil(&tick, (300 * configTICK_RATE_HZ) / 1000);
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800054c:	4618      	mov	r0, r3
 800054e:	f003 f853 	bl	80035f8 <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000552:	bf00      	nop
 8000554:	e7f2      	b.n	800053c <StartLED2Task+0x10>
 8000556:	bf00      	nop
 8000558:	40020000 	.word	0x40020000

0800055c <StartLED3Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED3Task */
void StartLED3Task(void *argument)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED3Task */
	uint32_t tick;

//	tick = osKernelGetTickCount();
	tick = xTaskGetTickCount();
 8000564:	f003 f9e4 	bl	8003930 <xTaskGetTickCount>
 8000568:	4603      	mov	r3, r0
 800056a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800056c:	2140      	movs	r1, #64	@ 0x40
 800056e:	4806      	ldr	r0, [pc, #24]	@ (8000588 <StartLED3Task+0x2c>)
 8000570:	f000 fd65 	bl	800103e <HAL_GPIO_TogglePin>
//	  tick += (300 * osKernelGetTickFreq()) / 1000;
	  vTaskDelayUntil(&tick, (300 * configTICK_RATE_HZ) / 1000);
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f83b 	bl	80035f8 <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000582:	bf00      	nop
 8000584:	e7f2      	b.n	800056c <StartLED3Task+0x10>
 8000586:	bf00      	nop
 8000588:	40020000 	.word	0x40020000

0800058c <StartLED4Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED4Task */
void StartLED4Task(void *argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED4Task */
	uint32_t tick;

//	tick = osKernelGetTickCount();
	tick = xTaskGetTickCount();
 8000594:	f003 f9cc 	bl	8003930 <xTaskGetTickCount>
 8000598:	4603      	mov	r3, r0
 800059a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800059c:	2180      	movs	r1, #128	@ 0x80
 800059e:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <StartLED4Task+0x2c>)
 80005a0:	f000 fd4d 	bl	800103e <HAL_GPIO_TogglePin>
//	  tick += (300 * osKernelGetTickFreq()) / 1000;
	  vTaskDelayUntil(&tick, (300 * configTICK_RATE_HZ) / 1000);
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 f823 	bl	80035f8 <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80005b2:	bf00      	nop
 80005b4:	e7f2      	b.n	800059c <StartLED4Task+0x10>
 80005b6:	bf00      	nop
 80005b8:	40020000 	.word	0x40020000

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	@ 0x28
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b34      	ldr	r3, [pc, #208]	@ (80006a8 <MX_GPIO_Init+0xec>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a33      	ldr	r2, [pc, #204]	@ (80006a8 <MX_GPIO_Init+0xec>)
 80005dc:	f043 0304 	orr.w	r3, r3, #4
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b31      	ldr	r3, [pc, #196]	@ (80006a8 <MX_GPIO_Init+0xec>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0304 	and.w	r3, r3, #4
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b2d      	ldr	r3, [pc, #180]	@ (80006a8 <MX_GPIO_Init+0xec>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a2c      	ldr	r2, [pc, #176]	@ (80006a8 <MX_GPIO_Init+0xec>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b2a      	ldr	r3, [pc, #168]	@ (80006a8 <MX_GPIO_Init+0xec>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <MX_GPIO_Init+0xec>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a25      	ldr	r2, [pc, #148]	@ (80006a8 <MX_GPIO_Init+0xec>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <MX_GPIO_Init+0xec>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <MX_GPIO_Init+0xec>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a1e      	ldr	r2, [pc, #120]	@ (80006a8 <MX_GPIO_Init+0xec>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <MX_GPIO_Init+0xec>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	21a0      	movs	r1, #160	@ 0xa0
 8000646:	4819      	ldr	r0, [pc, #100]	@ (80006ac <MX_GPIO_Init+0xf0>)
 8000648:	f000 fce0 	bl	800100c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000652:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	4813      	ldr	r0, [pc, #76]	@ (80006b0 <MX_GPIO_Init+0xf4>)
 8000664:	f000 fb4e 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD4_Pin;
 8000668:	23a0      	movs	r3, #160	@ 0xa0
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	480b      	ldr	r0, [pc, #44]	@ (80006ac <MX_GPIO_Init+0xf0>)
 8000680:	f000 fb40 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000684:	2340      	movs	r3, #64	@ 0x40
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000688:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_GPIO_Init+0xf0>)
 800069a:	f000 fb33 	bl	8000d04 <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	@ 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40020800 	.word	0x40020800

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fa00 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f80c 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f7ff ff7c 	bl	80005bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c4:	f000 f95e 	bl	8000984 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c8:	f001 ff1a 	bl	8002500 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80006cc:	f7ff ff00 	bl	80004d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006d0:	f001 ff3a 	bl	8002548 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <main+0x20>

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	@ 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	@ 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fce6 	bl	80050b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <SystemClock_Config+0xc8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	4a26      	ldr	r2, [pc, #152]	@ (80007a0 <SystemClock_Config+0xc8>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	@ 0x40
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <SystemClock_Config+0xc8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <SystemClock_Config+0xcc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a20      	ldr	r2, [pc, #128]	@ (80007a4 <SystemClock_Config+0xcc>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemClock_Config+0xcc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800074c:	2354      	movs	r3, #84	@ 0x54
 800074e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fc89 	bl	8001074 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 f830 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f000 feeb 	bl	8001564 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000794:	f000 f81a 	bl	80007cc <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	@ 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d101      	bne.n	80007be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ba:	f000 f9a1 	bl	8000b00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40014400 	.word	0x40014400

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <Error_Handler+0x8>

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <HAL_MspInit+0x54>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e6:	4a11      	ldr	r2, [pc, #68]	@ (800082c <HAL_MspInit+0x54>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <HAL_MspInit+0x54>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <HAL_MspInit+0x54>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000802:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <HAL_MspInit+0x54>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	@ 0x40
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <HAL_MspInit+0x54>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	210f      	movs	r1, #15
 800081a:	f06f 0001 	mvn.w	r0, #1
 800081e:	f000 fa47 	bl	8000cb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	@ 0x30
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b2e      	ldr	r3, [pc, #184]	@ (8000900 <HAL_InitTick+0xd0>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000848:	4a2d      	ldr	r2, [pc, #180]	@ (8000900 <HAL_InitTick+0xd0>)
 800084a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800084e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000850:	4b2b      	ldr	r3, [pc, #172]	@ (8000900 <HAL_InitTick+0xd0>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800085c:	f107 020c 	add.w	r2, r7, #12
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f001 f89c 	bl	80019a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800086c:	f001 f886 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8000870:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000874:	4a23      	ldr	r2, [pc, #140]	@ (8000904 <HAL_InitTick+0xd4>)
 8000876:	fba2 2303 	umull	r2, r3, r2, r3
 800087a:	0c9b      	lsrs	r3, r3, #18
 800087c:	3b01      	subs	r3, #1
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000880:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <HAL_InitTick+0xd8>)
 8000882:	4a22      	ldr	r2, [pc, #136]	@ (800090c <HAL_InitTick+0xdc>)
 8000884:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000886:	4b20      	ldr	r3, [pc, #128]	@ (8000908 <HAL_InitTick+0xd8>)
 8000888:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800088c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800088e:	4a1e      	ldr	r2, [pc, #120]	@ (8000908 <HAL_InitTick+0xd8>)
 8000890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000892:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000894:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <HAL_InitTick+0xd8>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <HAL_InitTick+0xd8>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <HAL_InitTick+0xd8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80008a6:	4818      	ldr	r0, [pc, #96]	@ (8000908 <HAL_InitTick+0xd8>)
 80008a8:	f001 f8ae 	bl	8001a08 <HAL_TIM_Base_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d11b      	bne.n	80008f2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80008ba:	4813      	ldr	r0, [pc, #76]	@ (8000908 <HAL_InitTick+0xd8>)
 80008bc:	f001 f8fe 	bl	8001abc <HAL_TIM_Base_Start_IT>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80008c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d111      	bne.n	80008f2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008ce:	2019      	movs	r0, #25
 80008d0:	f000 fa0a 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b0f      	cmp	r3, #15
 80008d8:	d808      	bhi.n	80008ec <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008da:	2200      	movs	r2, #0
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	2019      	movs	r0, #25
 80008e0:	f000 f9e6 	bl	8000cb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <HAL_InitTick+0xe0>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
 80008ea:	e002      	b.n	80008f2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3730      	adds	r7, #48	@ 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	431bde83 	.word	0x431bde83
 8000908:	20000088 	.word	0x20000088
 800090c:	40014400 	.word	0x40014400
 8000910:	20000004 	.word	0x20000004

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <NMI_Handler+0x4>

0800091c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <MemManage_Handler+0x4>

0800092c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <UsageFault_Handler+0x4>

0800093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000950:	4802      	ldr	r0, [pc, #8]	@ (800095c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000952:	f001 f915 	bl	8001b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000088 	.word	0x20000088

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <MX_USART2_UART_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009bc:	f001 fa98 	bl	8001ef0 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c6:	f7ff ff01 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000d0 	.word	0x200000d0
 80009d4:	40004400 	.word	0x40004400

080009d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a19      	ldr	r2, [pc, #100]	@ (8000a5c <HAL_UART_MspInit+0x84>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d12b      	bne.n	8000a52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <HAL_UART_MspInit+0x88>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	4a17      	ldr	r2, [pc, #92]	@ (8000a60 <HAL_UART_MspInit+0x88>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_UART_MspInit+0x88>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_UART_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <HAL_UART_MspInit+0x88>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <HAL_UART_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a32:	230c      	movs	r3, #12
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a42:	2307      	movs	r3, #7
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <HAL_UART_MspInit+0x8c>)
 8000a4e:	f000 f959 	bl	8000d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6c:	f7ff ff78 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	@ (8000aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a96:	f004 fb6d 	bl	8005174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fe0b 	bl	80006b4 <main>
  bx  lr    
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000aac:	08005370 	.word	0x08005370
  ldr r2, =_sbss
 8000ab0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ab4:	20004c44 	.word	0x20004c44

08000ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>
	...

08000abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8000afc <HAL_Init+0x40>)
 8000ac6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000acc:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <HAL_Init+0x40>)
 8000ad2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	@ (8000afc <HAL_Init+0x40>)
 8000ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f8d8 	bl	8000c9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	200f      	movs	r0, #15
 8000aec:	f7ff fea0 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff fe72 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023c00 	.word	0x40023c00

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000118 	.word	0x20000118

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	@ (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000118 	.word	0x20000118

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4907      	ldr	r1, [pc, #28]	@ (8000bdc <__NVIC_EnableIRQ+0x38>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	@ (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	@ (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	@ 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ff4c 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc2:	f7ff ff61 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000cc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	6978      	ldr	r0, [r7, #20]
 8000cce:	f7ff ffb1 	bl	8000c34 <NVIC_EncodePriority>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff80 	bl	8000be0 <__NVIC_SetPriority>
}
 8000ce0:	bf00      	nop
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff54 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e159      	b.n	8000fd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 8148 	bne.w	8000fce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80a2 	beq.w	8000fce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b57      	ldr	r3, [pc, #348]	@ (8000fec <HAL_GPIO_Init+0x2e8>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	4a56      	ldr	r2, [pc, #344]	@ (8000fec <HAL_GPIO_Init+0x2e8>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9a:	4b54      	ldr	r3, [pc, #336]	@ (8000fec <HAL_GPIO_Init+0x2e8>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea6:	4a52      	ldr	r2, [pc, #328]	@ (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a49      	ldr	r2, [pc, #292]	@ (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d019      	beq.n	8000f06 <HAL_GPIO_Init+0x202>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a48      	ldr	r2, [pc, #288]	@ (8000ff8 <HAL_GPIO_Init+0x2f4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d013      	beq.n	8000f02 <HAL_GPIO_Init+0x1fe>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a47      	ldr	r2, [pc, #284]	@ (8000ffc <HAL_GPIO_Init+0x2f8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d00d      	beq.n	8000efe <HAL_GPIO_Init+0x1fa>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a46      	ldr	r2, [pc, #280]	@ (8001000 <HAL_GPIO_Init+0x2fc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x1f6>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a45      	ldr	r2, [pc, #276]	@ (8001004 <HAL_GPIO_Init+0x300>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_GPIO_Init+0x1f2>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e008      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e004      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000f06:	2300      	movs	r3, #0
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	f002 0203 	and.w	r2, r2, #3
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	4093      	lsls	r3, r2
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f18:	4935      	ldr	r1, [pc, #212]	@ (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f26:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f50:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f74:	4a24      	ldr	r2, [pc, #144]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	f67f aea2 	bls.w	8000d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3724      	adds	r7, #36	@ 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40013800 	.word	0x40013800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020c00 	.word	0x40020c00
 8001004:	40021000 	.word	0x40021000
 8001008:	40013c00 	.word	0x40013c00

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
 8001018:	4613      	mov	r3, r2
 800101a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001028:	e003      	b.n	8001032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	041a      	lsls	r2, r3, #16
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	619a      	str	r2, [r3, #24]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800103e:	b480      	push	{r7}
 8001040:	b085      	sub	sp, #20
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001050:	887a      	ldrh	r2, [r7, #2]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4013      	ands	r3, r2
 8001056:	041a      	lsls	r2, r3, #16
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	43d9      	mvns	r1, r3
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	400b      	ands	r3, r1
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	619a      	str	r2, [r3, #24]
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e267      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d075      	beq.n	800117e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001092:	4b88      	ldr	r3, [pc, #544]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b04      	cmp	r3, #4
 800109c:	d00c      	beq.n	80010b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109e:	4b85      	ldr	r3, [pc, #532]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d112      	bne.n	80010d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010aa:	4b82      	ldr	r3, [pc, #520]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010b6:	d10b      	bne.n	80010d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	4b7e      	ldr	r3, [pc, #504]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d05b      	beq.n	800117c <HAL_RCC_OscConfig+0x108>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d157      	bne.n	800117c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e242      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d8:	d106      	bne.n	80010e8 <HAL_RCC_OscConfig+0x74>
 80010da:	4b76      	ldr	r3, [pc, #472]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a75      	ldr	r2, [pc, #468]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e01d      	b.n	8001124 <HAL_RCC_OscConfig+0xb0>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0x98>
 80010f2:	4b70      	ldr	r3, [pc, #448]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a6f      	ldr	r2, [pc, #444]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b6d      	ldr	r3, [pc, #436]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a6c      	ldr	r2, [pc, #432]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e00b      	b.n	8001124 <HAL_RCC_OscConfig+0xb0>
 800110c:	4b69      	ldr	r3, [pc, #420]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a68      	ldr	r2, [pc, #416]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b66      	ldr	r3, [pc, #408]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a65      	ldr	r2, [pc, #404]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 800111e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d013      	beq.n	8001154 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fcfc 	bl	8000b28 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fcf8 	bl	8000b28 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	@ 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e207      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	4b5b      	ldr	r3, [pc, #364]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0xc0>
 8001152:	e014      	b.n	800117e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fce8 	bl	8000b28 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fce4 	bl	8000b28 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	@ 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e1f3      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	4b51      	ldr	r3, [pc, #324]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0xe8>
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d063      	beq.n	8001252 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800118a:	4b4a      	ldr	r3, [pc, #296]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00b      	beq.n	80011ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001196:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d11c      	bne.n	80011dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a2:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d116      	bne.n	80011dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ae:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_RCC_OscConfig+0x152>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d001      	beq.n	80011c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e1c7      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c6:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4937      	ldr	r1, [pc, #220]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	e03a      	b.n	8001252 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e4:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <HAL_RCC_OscConfig+0x244>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ea:	f7ff fc9d 	bl	8000b28 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f2:	f7ff fc99 	bl	8000b28 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e1a8      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	4b2b      	ldr	r3, [pc, #172]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001210:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4925      	ldr	r1, [pc, #148]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
 8001224:	e015      	b.n	8001252 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001226:	4b24      	ldr	r3, [pc, #144]	@ (80012b8 <HAL_RCC_OscConfig+0x244>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122c:	f7ff fc7c 	bl	8000b28 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001234:	f7ff fc78 	bl	8000b28 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e187      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d036      	beq.n	80012cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d016      	beq.n	8001294 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <HAL_RCC_OscConfig+0x248>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126c:	f7ff fc5c 	bl	8000b28 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001274:	f7ff fc58 	bl	8000b28 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e167      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x200>
 8001292:	e01b      	b.n	80012cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <HAL_RCC_OscConfig+0x248>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fc45 	bl	8000b28 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a0:	e00e      	b.n	80012c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a2:	f7ff fc41 	bl	8000b28 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d907      	bls.n	80012c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e150      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
 80012b4:	40023800 	.word	0x40023800
 80012b8:	42470000 	.word	0x42470000
 80012bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	4b88      	ldr	r3, [pc, #544]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80012c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1ea      	bne.n	80012a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 8097 	beq.w	8001408 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012de:	4b81      	ldr	r3, [pc, #516]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10f      	bne.n	800130a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b7d      	ldr	r3, [pc, #500]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	4a7c      	ldr	r2, [pc, #496]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fa:	4b7a      	ldr	r3, [pc, #488]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001306:	2301      	movs	r3, #1
 8001308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	4b77      	ldr	r3, [pc, #476]	@ (80014e8 <HAL_RCC_OscConfig+0x474>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d118      	bne.n	8001348 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001316:	4b74      	ldr	r3, [pc, #464]	@ (80014e8 <HAL_RCC_OscConfig+0x474>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a73      	ldr	r2, [pc, #460]	@ (80014e8 <HAL_RCC_OscConfig+0x474>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001322:	f7ff fc01 	bl	8000b28 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132a:	f7ff fbfd 	bl	8000b28 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e10c      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	4b6a      	ldr	r3, [pc, #424]	@ (80014e8 <HAL_RCC_OscConfig+0x474>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x2ea>
 8001350:	4b64      	ldr	r3, [pc, #400]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001354:	4a63      	ldr	r2, [pc, #396]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6713      	str	r3, [r2, #112]	@ 0x70
 800135c:	e01c      	b.n	8001398 <HAL_RCC_OscConfig+0x324>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b05      	cmp	r3, #5
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x30c>
 8001366:	4b5f      	ldr	r3, [pc, #380]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136a:	4a5e      	ldr	r2, [pc, #376]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6713      	str	r3, [r2, #112]	@ 0x70
 8001372:	4b5c      	ldr	r3, [pc, #368]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001376:	4a5b      	ldr	r2, [pc, #364]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6713      	str	r3, [r2, #112]	@ 0x70
 800137e:	e00b      	b.n	8001398 <HAL_RCC_OscConfig+0x324>
 8001380:	4b58      	ldr	r3, [pc, #352]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001384:	4a57      	ldr	r2, [pc, #348]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001386:	f023 0301 	bic.w	r3, r3, #1
 800138a:	6713      	str	r3, [r2, #112]	@ 0x70
 800138c:	4b55      	ldr	r3, [pc, #340]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001390:	4a54      	ldr	r2, [pc, #336]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001392:	f023 0304 	bic.w	r3, r3, #4
 8001396:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d015      	beq.n	80013cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a0:	f7ff fbc2 	bl	8000b28 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a6:	e00a      	b.n	80013be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a8:	f7ff fbbe 	bl	8000b28 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e0cb      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013be:	4b49      	ldr	r3, [pc, #292]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0ee      	beq.n	80013a8 <HAL_RCC_OscConfig+0x334>
 80013ca:	e014      	b.n	80013f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013cc:	f7ff fbac 	bl	8000b28 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d2:	e00a      	b.n	80013ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d4:	f7ff fba8 	bl	8000b28 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e0b5      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ea:	4b3e      	ldr	r3, [pc, #248]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1ee      	bne.n	80013d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d105      	bne.n	8001408 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fc:	4b39      	ldr	r3, [pc, #228]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	4a38      	ldr	r2, [pc, #224]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80a1 	beq.w	8001554 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001412:	4b34      	ldr	r3, [pc, #208]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b08      	cmp	r3, #8
 800141c:	d05c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d141      	bne.n	80014aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	4b31      	ldr	r3, [pc, #196]	@ (80014ec <HAL_RCC_OscConfig+0x478>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fb7c 	bl	8000b28 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff fb78 	bl	8000b28 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e087      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001446:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69da      	ldr	r2, [r3, #28]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001460:	019b      	lsls	r3, r3, #6
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	3b01      	subs	r3, #1
 800146c:	041b      	lsls	r3, r3, #16
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001474:	061b      	lsls	r3, r3, #24
 8001476:	491b      	ldr	r1, [pc, #108]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800147c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <HAL_RCC_OscConfig+0x478>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fb51 	bl	8000b28 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff fb4d 	bl	8000b28 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e05c      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x416>
 80014a8:	e054      	b.n	8001554 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <HAL_RCC_OscConfig+0x478>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fb3a 	bl	8000b28 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff fb36 	bl	8000b28 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e045      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x444>
 80014d6:	e03d      	b.n	8001554 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e038      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40007000 	.word	0x40007000
 80014ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <HAL_RCC_OscConfig+0x4ec>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d028      	beq.n	8001550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001508:	429a      	cmp	r2, r3
 800150a:	d121      	bne.n	8001550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001516:	429a      	cmp	r2, r3
 8001518:	d11a      	bne.n	8001550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001520:	4013      	ands	r3, r2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001526:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001528:	4293      	cmp	r3, r2
 800152a:	d111      	bne.n	8001550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001536:	085b      	lsrs	r3, r3, #1
 8001538:	3b01      	subs	r3, #1
 800153a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800153c:	429a      	cmp	r2, r3
 800153e:	d107      	bne.n	8001550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800

08001564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0cc      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001578:	4b68      	ldr	r3, [pc, #416]	@ (800171c <HAL_RCC_ClockConfig+0x1b8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d90c      	bls.n	80015a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b65      	ldr	r3, [pc, #404]	@ (800171c <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b63      	ldr	r3, [pc, #396]	@ (800171c <HAL_RCC_ClockConfig+0x1b8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0b8      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b8:	4b59      	ldr	r3, [pc, #356]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4a58      	ldr	r2, [pc, #352]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d0:	4b53      	ldr	r3, [pc, #332]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	4a52      	ldr	r2, [pc, #328]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015dc:	4b50      	ldr	r3, [pc, #320]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	494d      	ldr	r1, [pc, #308]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d044      	beq.n	8001684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b47      	ldr	r3, [pc, #284]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d119      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e07f      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d003      	beq.n	8001622 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161e:	2b03      	cmp	r3, #3
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	4b3f      	ldr	r3, [pc, #252]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d109      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e06f      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001632:	4b3b      	ldr	r3, [pc, #236]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e067      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001642:	4b37      	ldr	r3, [pc, #220]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f023 0203 	bic.w	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4934      	ldr	r1, [pc, #208]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	4313      	orrs	r3, r2
 8001652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001654:	f7ff fa68 	bl	8000b28 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	e00a      	b.n	8001672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165c:	f7ff fa64 	bl	8000b28 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e04f      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 020c 	and.w	r2, r3, #12
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	429a      	cmp	r2, r3
 8001682:	d1eb      	bne.n	800165c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001684:	4b25      	ldr	r3, [pc, #148]	@ (800171c <HAL_RCC_ClockConfig+0x1b8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d20c      	bcs.n	80016ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b22      	ldr	r3, [pc, #136]	@ (800171c <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e032      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b8:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4916      	ldr	r1, [pc, #88]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d6:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	490e      	ldr	r1, [pc, #56]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ea:	f000 f821 	bl	8001730 <HAL_RCC_GetSysClockFreq>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	490a      	ldr	r1, [pc, #40]	@ (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	5ccb      	ldrb	r3, [r1, r3]
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_RCC_ClockConfig+0x1c8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f890 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00
 8001720:	40023800 	.word	0x40023800
 8001724:	08005348 	.word	0x08005348
 8001728:	20000000 	.word	0x20000000
 800172c:	20000004 	.word	0x20000004

08001730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001734:	b094      	sub	sp, #80	@ 0x50
 8001736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001748:	4b79      	ldr	r3, [pc, #484]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x200>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d00d      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0x40>
 8001754:	2b08      	cmp	r3, #8
 8001756:	f200 80e1 	bhi.w	800191c <HAL_RCC_GetSysClockFreq+0x1ec>
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x34>
 800175e:	2b04      	cmp	r3, #4
 8001760:	d003      	beq.n	800176a <HAL_RCC_GetSysClockFreq+0x3a>
 8001762:	e0db      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001764:	4b73      	ldr	r3, [pc, #460]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x204>)
 8001766:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001768:	e0db      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800176a:	4b73      	ldr	r3, [pc, #460]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x208>)
 800176c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800176e:	e0d8      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001770:	4b6f      	ldr	r3, [pc, #444]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x200>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001778:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800177a:	4b6d      	ldr	r3, [pc, #436]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x200>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d063      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001786:	4b6a      	ldr	r3, [pc, #424]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x200>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	099b      	lsrs	r3, r3, #6
 800178c:	2200      	movs	r2, #0
 800178e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001790:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001798:	633b      	str	r3, [r7, #48]	@ 0x30
 800179a:	2300      	movs	r3, #0
 800179c:	637b      	str	r3, [r7, #52]	@ 0x34
 800179e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017a2:	4622      	mov	r2, r4
 80017a4:	462b      	mov	r3, r5
 80017a6:	f04f 0000 	mov.w	r0, #0
 80017aa:	f04f 0100 	mov.w	r1, #0
 80017ae:	0159      	lsls	r1, r3, #5
 80017b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b4:	0150      	lsls	r0, r2, #5
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4621      	mov	r1, r4
 80017bc:	1a51      	subs	r1, r2, r1
 80017be:	6139      	str	r1, [r7, #16]
 80017c0:	4629      	mov	r1, r5
 80017c2:	eb63 0301 	sbc.w	r3, r3, r1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017d4:	4659      	mov	r1, fp
 80017d6:	018b      	lsls	r3, r1, #6
 80017d8:	4651      	mov	r1, sl
 80017da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017de:	4651      	mov	r1, sl
 80017e0:	018a      	lsls	r2, r1, #6
 80017e2:	4651      	mov	r1, sl
 80017e4:	ebb2 0801 	subs.w	r8, r2, r1
 80017e8:	4659      	mov	r1, fp
 80017ea:	eb63 0901 	sbc.w	r9, r3, r1
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001802:	4690      	mov	r8, r2
 8001804:	4699      	mov	r9, r3
 8001806:	4623      	mov	r3, r4
 8001808:	eb18 0303 	adds.w	r3, r8, r3
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	462b      	mov	r3, r5
 8001810:	eb49 0303 	adc.w	r3, r9, r3
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001822:	4629      	mov	r1, r5
 8001824:	024b      	lsls	r3, r1, #9
 8001826:	4621      	mov	r1, r4
 8001828:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800182c:	4621      	mov	r1, r4
 800182e:	024a      	lsls	r2, r1, #9
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001836:	2200      	movs	r2, #0
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800183a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800183c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001840:	f7fe fcce 	bl	80001e0 <__aeabi_uldivmod>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4613      	mov	r3, r2
 800184a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800184c:	e058      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184e:	4b38      	ldr	r3, [pc, #224]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x200>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	099b      	lsrs	r3, r3, #6
 8001854:	2200      	movs	r2, #0
 8001856:	4618      	mov	r0, r3
 8001858:	4611      	mov	r1, r2
 800185a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800185e:	623b      	str	r3, [r7, #32]
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
 8001864:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001868:	4642      	mov	r2, r8
 800186a:	464b      	mov	r3, r9
 800186c:	f04f 0000 	mov.w	r0, #0
 8001870:	f04f 0100 	mov.w	r1, #0
 8001874:	0159      	lsls	r1, r3, #5
 8001876:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187a:	0150      	lsls	r0, r2, #5
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4641      	mov	r1, r8
 8001882:	ebb2 0a01 	subs.w	sl, r2, r1
 8001886:	4649      	mov	r1, r9
 8001888:	eb63 0b01 	sbc.w	fp, r3, r1
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001898:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800189c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018a0:	ebb2 040a 	subs.w	r4, r2, sl
 80018a4:	eb63 050b 	sbc.w	r5, r3, fp
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	00eb      	lsls	r3, r5, #3
 80018b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b6:	00e2      	lsls	r2, r4, #3
 80018b8:	4614      	mov	r4, r2
 80018ba:	461d      	mov	r5, r3
 80018bc:	4643      	mov	r3, r8
 80018be:	18e3      	adds	r3, r4, r3
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	464b      	mov	r3, r9
 80018c4:	eb45 0303 	adc.w	r3, r5, r3
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018d6:	4629      	mov	r1, r5
 80018d8:	028b      	lsls	r3, r1, #10
 80018da:	4621      	mov	r1, r4
 80018dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e0:	4621      	mov	r1, r4
 80018e2:	028a      	lsls	r2, r1, #10
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ea:	2200      	movs	r2, #0
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	61fa      	str	r2, [r7, #28]
 80018f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018f4:	f7fe fc74 	bl	80001e0 <__aeabi_uldivmod>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4613      	mov	r3, r2
 80018fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x200>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	0c1b      	lsrs	r3, r3, #16
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	3301      	adds	r3, #1
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001910:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001914:	fbb2 f3f3 	udiv	r3, r2, r3
 8001918:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800191a:	e002      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x204>)
 800191e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001924:	4618      	mov	r0, r3
 8001926:	3750      	adds	r7, #80	@ 0x50
 8001928:	46bd      	mov	sp, r7
 800192a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	00f42400 	.word	0x00f42400
 8001938:	007a1200 	.word	0x007a1200

0800193c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001940:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <HAL_RCC_GetHCLKFreq+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000000 	.word	0x20000000

08001954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001958:	f7ff fff0 	bl	800193c <HAL_RCC_GetHCLKFreq>
 800195c:	4602      	mov	r2, r0
 800195e:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	0a9b      	lsrs	r3, r3, #10
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	4903      	ldr	r1, [pc, #12]	@ (8001978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800196a:	5ccb      	ldrb	r3, [r1, r3]
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	08005358 	.word	0x08005358

0800197c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001980:	f7ff ffdc 	bl	800193c <HAL_RCC_GetHCLKFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	0b5b      	lsrs	r3, r3, #13
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	4903      	ldr	r1, [pc, #12]	@ (80019a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	08005358 	.word	0x08005358

080019a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	220f      	movs	r2, #15
 80019b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <HAL_RCC_GetClockConfig+0x60>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0207 	and.w	r2, r3, #7
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40023c00 	.word	0x40023c00

08001a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e041      	b.n	8001a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d106      	bne.n	8001a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f839 	bl	8001aa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f000 f9b2 	bl	8001db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d001      	beq.n	8001ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e044      	b.n	8001b5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b6c <HAL_TIM_Base_Start_IT+0xb0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d018      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001afe:	d013      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1a      	ldr	r2, [pc, #104]	@ (8001b70 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00e      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a19      	ldr	r2, [pc, #100]	@ (8001b74 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d009      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a17      	ldr	r2, [pc, #92]	@ (8001b78 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d004      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <HAL_TIM_Base_Start_IT+0xc0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d111      	bne.n	8001b4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d010      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4a:	e007      	b.n	8001b5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40000800 	.word	0x40000800
 8001b78:	40000c00 	.word	0x40000c00
 8001b7c:	40014000 	.word	0x40014000

08001b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d01b      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0202 	mvn.w	r2, #2
 8001bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8d2 	bl	8001d74 <HAL_TIM_IC_CaptureCallback>
 8001bd0:	e005      	b.n	8001bde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8c4 	bl	8001d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f8d5 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d020      	beq.n	8001c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01b      	beq.n	8001c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0204 	mvn.w	r2, #4
 8001c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2202      	movs	r2, #2
 8001c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8ac 	bl	8001d74 <HAL_TIM_IC_CaptureCallback>
 8001c1c:	e005      	b.n	8001c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f89e 	bl	8001d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f8af 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d020      	beq.n	8001c7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01b      	beq.n	8001c7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0208 	mvn.w	r2, #8
 8001c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2204      	movs	r2, #4
 8001c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f886 	bl	8001d74 <HAL_TIM_IC_CaptureCallback>
 8001c68:	e005      	b.n	8001c76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f878 	bl	8001d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f889 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d020      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0210 	mvn.w	r2, #16
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f860 	bl	8001d74 <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f852 	bl	8001d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f863 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0201 	mvn.w	r2, #1
 8001ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fd5e 	bl	80007a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8e6 	bl	8001edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00c      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f834 	bl	8001d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00c      	beq.n	8001d58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0220 	mvn.w	r2, #32
 8001d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8b8 	bl	8001ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3a      	ldr	r2, [pc, #232]	@ (8001eac <TIM_Base_SetConfig+0xfc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00f      	beq.n	8001de8 <TIM_Base_SetConfig+0x38>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dce:	d00b      	beq.n	8001de8 <TIM_Base_SetConfig+0x38>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a37      	ldr	r2, [pc, #220]	@ (8001eb0 <TIM_Base_SetConfig+0x100>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d007      	beq.n	8001de8 <TIM_Base_SetConfig+0x38>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a36      	ldr	r2, [pc, #216]	@ (8001eb4 <TIM_Base_SetConfig+0x104>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d003      	beq.n	8001de8 <TIM_Base_SetConfig+0x38>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a35      	ldr	r2, [pc, #212]	@ (8001eb8 <TIM_Base_SetConfig+0x108>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d108      	bne.n	8001dfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8001eac <TIM_Base_SetConfig+0xfc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01b      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e08:	d017      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a28      	ldr	r2, [pc, #160]	@ (8001eb0 <TIM_Base_SetConfig+0x100>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a27      	ldr	r2, [pc, #156]	@ (8001eb4 <TIM_Base_SetConfig+0x104>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00f      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a26      	ldr	r2, [pc, #152]	@ (8001eb8 <TIM_Base_SetConfig+0x108>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00b      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a25      	ldr	r2, [pc, #148]	@ (8001ebc <TIM_Base_SetConfig+0x10c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ec0 <TIM_Base_SetConfig+0x110>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d003      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a23      	ldr	r2, [pc, #140]	@ (8001ec4 <TIM_Base_SetConfig+0x114>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d108      	bne.n	8001e4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a0e      	ldr	r2, [pc, #56]	@ (8001eac <TIM_Base_SetConfig+0xfc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d103      	bne.n	8001e80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f023 0201 	bic.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40000800 	.word	0x40000800
 8001eb8:	40000c00 	.word	0x40000c00
 8001ebc:	40014000 	.word	0x40014000
 8001ec0:	40014400 	.word	0x40014400
 8001ec4:	40014800 	.word	0x40014800

08001ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e042      	b.n	8001f88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fd5e 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2224      	movs	r2, #36	@ 0x24
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f82b 	bl	8001f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f94:	b0c0      	sub	sp, #256	@ 0x100
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fac:	68d9      	ldr	r1, [r3, #12]
 8001fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	ea40 0301 	orr.w	r3, r0, r1
 8001fb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001fe8:	f021 010c 	bic.w	r1, r1, #12
 8001fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ff6:	430b      	orrs	r3, r1
 8001ff8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800200a:	6999      	ldr	r1, [r3, #24]
 800200c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	ea40 0301 	orr.w	r3, r0, r1
 8002016:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b8f      	ldr	r3, [pc, #572]	@ (800225c <UART_SetConfig+0x2cc>)
 8002020:	429a      	cmp	r2, r3
 8002022:	d005      	beq.n	8002030 <UART_SetConfig+0xa0>
 8002024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b8d      	ldr	r3, [pc, #564]	@ (8002260 <UART_SetConfig+0x2d0>)
 800202c:	429a      	cmp	r2, r3
 800202e:	d104      	bne.n	800203a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002030:	f7ff fca4 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8002034:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002038:	e003      	b.n	8002042 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800203a:	f7ff fc8b 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 800203e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800204c:	f040 810c 	bne.w	8002268 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002054:	2200      	movs	r2, #0
 8002056:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800205a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800205e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002062:	4622      	mov	r2, r4
 8002064:	462b      	mov	r3, r5
 8002066:	1891      	adds	r1, r2, r2
 8002068:	65b9      	str	r1, [r7, #88]	@ 0x58
 800206a:	415b      	adcs	r3, r3
 800206c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800206e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002072:	4621      	mov	r1, r4
 8002074:	eb12 0801 	adds.w	r8, r2, r1
 8002078:	4629      	mov	r1, r5
 800207a:	eb43 0901 	adc.w	r9, r3, r1
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800208a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800208e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002092:	4690      	mov	r8, r2
 8002094:	4699      	mov	r9, r3
 8002096:	4623      	mov	r3, r4
 8002098:	eb18 0303 	adds.w	r3, r8, r3
 800209c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020a0:	462b      	mov	r3, r5
 80020a2:	eb49 0303 	adc.w	r3, r9, r3
 80020a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020be:	460b      	mov	r3, r1
 80020c0:	18db      	adds	r3, r3, r3
 80020c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80020c4:	4613      	mov	r3, r2
 80020c6:	eb42 0303 	adc.w	r3, r2, r3
 80020ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80020cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020d4:	f7fe f884 	bl	80001e0 <__aeabi_uldivmod>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4b61      	ldr	r3, [pc, #388]	@ (8002264 <UART_SetConfig+0x2d4>)
 80020de:	fba3 2302 	umull	r2, r3, r3, r2
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	011c      	lsls	r4, r3, #4
 80020e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80020f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80020f8:	4642      	mov	r2, r8
 80020fa:	464b      	mov	r3, r9
 80020fc:	1891      	adds	r1, r2, r2
 80020fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002100:	415b      	adcs	r3, r3
 8002102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002104:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002108:	4641      	mov	r1, r8
 800210a:	eb12 0a01 	adds.w	sl, r2, r1
 800210e:	4649      	mov	r1, r9
 8002110:	eb43 0b01 	adc.w	fp, r3, r1
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002120:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002124:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002128:	4692      	mov	sl, r2
 800212a:	469b      	mov	fp, r3
 800212c:	4643      	mov	r3, r8
 800212e:	eb1a 0303 	adds.w	r3, sl, r3
 8002132:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002136:	464b      	mov	r3, r9
 8002138:	eb4b 0303 	adc.w	r3, fp, r3
 800213c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800214c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002150:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002154:	460b      	mov	r3, r1
 8002156:	18db      	adds	r3, r3, r3
 8002158:	643b      	str	r3, [r7, #64]	@ 0x40
 800215a:	4613      	mov	r3, r2
 800215c:	eb42 0303 	adc.w	r3, r2, r3
 8002160:	647b      	str	r3, [r7, #68]	@ 0x44
 8002162:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002166:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800216a:	f7fe f839 	bl	80001e0 <__aeabi_uldivmod>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4611      	mov	r1, r2
 8002174:	4b3b      	ldr	r3, [pc, #236]	@ (8002264 <UART_SetConfig+0x2d4>)
 8002176:	fba3 2301 	umull	r2, r3, r3, r1
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2264      	movs	r2, #100	@ 0x64
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	1acb      	subs	r3, r1, r3
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800218a:	4b36      	ldr	r3, [pc, #216]	@ (8002264 <UART_SetConfig+0x2d4>)
 800218c:	fba3 2302 	umull	r2, r3, r3, r2
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002198:	441c      	add	r4, r3
 800219a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800219e:	2200      	movs	r2, #0
 80021a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021ac:	4642      	mov	r2, r8
 80021ae:	464b      	mov	r3, r9
 80021b0:	1891      	adds	r1, r2, r2
 80021b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021b4:	415b      	adcs	r3, r3
 80021b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021bc:	4641      	mov	r1, r8
 80021be:	1851      	adds	r1, r2, r1
 80021c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80021c2:	4649      	mov	r1, r9
 80021c4:	414b      	adcs	r3, r1
 80021c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021d4:	4659      	mov	r1, fp
 80021d6:	00cb      	lsls	r3, r1, #3
 80021d8:	4651      	mov	r1, sl
 80021da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021de:	4651      	mov	r1, sl
 80021e0:	00ca      	lsls	r2, r1, #3
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	4642      	mov	r2, r8
 80021ea:	189b      	adds	r3, r3, r2
 80021ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021f0:	464b      	mov	r3, r9
 80021f2:	460a      	mov	r2, r1
 80021f4:	eb42 0303 	adc.w	r3, r2, r3
 80021f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002208:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800220c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002210:	460b      	mov	r3, r1
 8002212:	18db      	adds	r3, r3, r3
 8002214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002216:	4613      	mov	r3, r2
 8002218:	eb42 0303 	adc.w	r3, r2, r3
 800221c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800221e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002222:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002226:	f7fd ffdb 	bl	80001e0 <__aeabi_uldivmod>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <UART_SetConfig+0x2d4>)
 8002230:	fba3 1302 	umull	r1, r3, r3, r2
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	2164      	movs	r1, #100	@ 0x64
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	3332      	adds	r3, #50	@ 0x32
 8002242:	4a08      	ldr	r2, [pc, #32]	@ (8002264 <UART_SetConfig+0x2d4>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	f003 0207 	and.w	r2, r3, #7
 800224e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4422      	add	r2, r4
 8002256:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002258:	e106      	b.n	8002468 <UART_SetConfig+0x4d8>
 800225a:	bf00      	nop
 800225c:	40011000 	.word	0x40011000
 8002260:	40011400 	.word	0x40011400
 8002264:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800226c:	2200      	movs	r2, #0
 800226e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002272:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002276:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800227a:	4642      	mov	r2, r8
 800227c:	464b      	mov	r3, r9
 800227e:	1891      	adds	r1, r2, r2
 8002280:	6239      	str	r1, [r7, #32]
 8002282:	415b      	adcs	r3, r3
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
 8002286:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800228a:	4641      	mov	r1, r8
 800228c:	1854      	adds	r4, r2, r1
 800228e:	4649      	mov	r1, r9
 8002290:	eb43 0501 	adc.w	r5, r3, r1
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	00eb      	lsls	r3, r5, #3
 800229e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022a2:	00e2      	lsls	r2, r4, #3
 80022a4:	4614      	mov	r4, r2
 80022a6:	461d      	mov	r5, r3
 80022a8:	4643      	mov	r3, r8
 80022aa:	18e3      	adds	r3, r4, r3
 80022ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022b0:	464b      	mov	r3, r9
 80022b2:	eb45 0303 	adc.w	r3, r5, r3
 80022b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022d6:	4629      	mov	r1, r5
 80022d8:	008b      	lsls	r3, r1, #2
 80022da:	4621      	mov	r1, r4
 80022dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022e0:	4621      	mov	r1, r4
 80022e2:	008a      	lsls	r2, r1, #2
 80022e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80022e8:	f7fd ff7a 	bl	80001e0 <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4b60      	ldr	r3, [pc, #384]	@ (8002474 <UART_SetConfig+0x4e4>)
 80022f2:	fba3 2302 	umull	r2, r3, r3, r2
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	011c      	lsls	r4, r3, #4
 80022fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022fe:	2200      	movs	r2, #0
 8002300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002304:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002308:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800230c:	4642      	mov	r2, r8
 800230e:	464b      	mov	r3, r9
 8002310:	1891      	adds	r1, r2, r2
 8002312:	61b9      	str	r1, [r7, #24]
 8002314:	415b      	adcs	r3, r3
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800231c:	4641      	mov	r1, r8
 800231e:	1851      	adds	r1, r2, r1
 8002320:	6139      	str	r1, [r7, #16]
 8002322:	4649      	mov	r1, r9
 8002324:	414b      	adcs	r3, r1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002334:	4659      	mov	r1, fp
 8002336:	00cb      	lsls	r3, r1, #3
 8002338:	4651      	mov	r1, sl
 800233a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800233e:	4651      	mov	r1, sl
 8002340:	00ca      	lsls	r2, r1, #3
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	4603      	mov	r3, r0
 8002348:	4642      	mov	r2, r8
 800234a:	189b      	adds	r3, r3, r2
 800234c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002350:	464b      	mov	r3, r9
 8002352:	460a      	mov	r2, r1
 8002354:	eb42 0303 	adc.w	r3, r2, r3
 8002358:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002366:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002374:	4649      	mov	r1, r9
 8002376:	008b      	lsls	r3, r1, #2
 8002378:	4641      	mov	r1, r8
 800237a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800237e:	4641      	mov	r1, r8
 8002380:	008a      	lsls	r2, r1, #2
 8002382:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002386:	f7fd ff2b 	bl	80001e0 <__aeabi_uldivmod>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4611      	mov	r1, r2
 8002390:	4b38      	ldr	r3, [pc, #224]	@ (8002474 <UART_SetConfig+0x4e4>)
 8002392:	fba3 2301 	umull	r2, r3, r3, r1
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2264      	movs	r2, #100	@ 0x64
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	1acb      	subs	r3, r1, r3
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	3332      	adds	r3, #50	@ 0x32
 80023a4:	4a33      	ldr	r2, [pc, #204]	@ (8002474 <UART_SetConfig+0x4e4>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023b0:	441c      	add	r4, r3
 80023b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023b6:	2200      	movs	r2, #0
 80023b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80023ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80023bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023c0:	4642      	mov	r2, r8
 80023c2:	464b      	mov	r3, r9
 80023c4:	1891      	adds	r1, r2, r2
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	415b      	adcs	r3, r3
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023d0:	4641      	mov	r1, r8
 80023d2:	1851      	adds	r1, r2, r1
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	4649      	mov	r1, r9
 80023d8:	414b      	adcs	r3, r1
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023e8:	4659      	mov	r1, fp
 80023ea:	00cb      	lsls	r3, r1, #3
 80023ec:	4651      	mov	r1, sl
 80023ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023f2:	4651      	mov	r1, sl
 80023f4:	00ca      	lsls	r2, r1, #3
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	4642      	mov	r2, r8
 80023fe:	189b      	adds	r3, r3, r2
 8002400:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002402:	464b      	mov	r3, r9
 8002404:	460a      	mov	r2, r1
 8002406:	eb42 0303 	adc.w	r3, r2, r3
 800240a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	663b      	str	r3, [r7, #96]	@ 0x60
 8002416:	667a      	str	r2, [r7, #100]	@ 0x64
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002424:	4649      	mov	r1, r9
 8002426:	008b      	lsls	r3, r1, #2
 8002428:	4641      	mov	r1, r8
 800242a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800242e:	4641      	mov	r1, r8
 8002430:	008a      	lsls	r2, r1, #2
 8002432:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002436:	f7fd fed3 	bl	80001e0 <__aeabi_uldivmod>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <UART_SetConfig+0x4e4>)
 8002440:	fba3 1302 	umull	r1, r3, r3, r2
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	2164      	movs	r1, #100	@ 0x64
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	3332      	adds	r3, #50	@ 0x32
 8002452:	4a08      	ldr	r2, [pc, #32]	@ (8002474 <UART_SetConfig+0x4e4>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4422      	add	r2, r4
 8002466:	609a      	str	r2, [r3, #8]
}
 8002468:	bf00      	nop
 800246a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800246e:	46bd      	mov	sp, r7
 8002470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002474:	51eb851f 	.word	0x51eb851f

08002478 <__NVIC_SetPriority>:
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db0a      	blt.n	80024a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	490c      	ldr	r1, [pc, #48]	@ (80024c4 <__NVIC_SetPriority+0x4c>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	440b      	add	r3, r1
 800249c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024a0:	e00a      	b.n	80024b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4908      	ldr	r1, [pc, #32]	@ (80024c8 <__NVIC_SetPriority+0x50>)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b04      	subs	r3, #4
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	440b      	add	r3, r1
 80024b6:	761a      	strb	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <SysTick_Handler+0x1c>)
 80024d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80024d4:	f001 fd74 	bl	8003fc0 <xTaskGetSchedulerState>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d001      	beq.n	80024e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80024de:	f002 fb6b 	bl	8004bb8 <xPortSysTickHandler>
  }
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80024f0:	2100      	movs	r1, #0
 80024f2:	f06f 0004 	mvn.w	r0, #4
 80024f6:	f7ff ffbf 	bl	8002478 <__NVIC_SetPriority>
#endif
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002506:	f3ef 8305 	mrs	r3, IPSR
 800250a:	603b      	str	r3, [r7, #0]
  return(result);
 800250c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002512:	f06f 0305 	mvn.w	r3, #5
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	e00c      	b.n	8002534 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800251a:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <osKernelInitialize+0x44>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d105      	bne.n	800252e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002522:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <osKernelInitialize+0x44>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002528:	2300      	movs	r3, #0
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	e002      	b.n	8002534 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002534:	687b      	ldr	r3, [r7, #4]
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	2000011c 	.word	0x2000011c

08002548 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800254e:	f3ef 8305 	mrs	r3, IPSR
 8002552:	603b      	str	r3, [r7, #0]
  return(result);
 8002554:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <osKernelStart+0x1a>
    stat = osErrorISR;
 800255a:	f06f 0305 	mvn.w	r3, #5
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	e010      	b.n	8002584 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002562:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <osKernelStart+0x48>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d109      	bne.n	800257e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800256a:	f7ff ffbf 	bl	80024ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800256e:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <osKernelStart+0x48>)
 8002570:	2202      	movs	r2, #2
 8002572:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002574:	f001 f8c0 	bl	80036f8 <vTaskStartScheduler>
      stat = osOK;
 8002578:	2300      	movs	r3, #0
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	e002      	b.n	8002584 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295
 8002582:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002584:	687b      	ldr	r3, [r7, #4]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000011c 	.word	0x2000011c

08002594 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b08e      	sub	sp, #56	@ 0x38
 8002598:	af04      	add	r7, sp, #16
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025a4:	f3ef 8305 	mrs	r3, IPSR
 80025a8:	617b      	str	r3, [r7, #20]
  return(result);
 80025aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d17e      	bne.n	80026ae <osThreadNew+0x11a>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d07b      	beq.n	80026ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80025ba:	2318      	movs	r3, #24
 80025bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
 80025c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d045      	beq.n	800265a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <osThreadNew+0x48>
        name = attr->name;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <osThreadNew+0x6e>
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2b38      	cmp	r3, #56	@ 0x38
 80025f4:	d805      	bhi.n	8002602 <osThreadNew+0x6e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <osThreadNew+0x72>
        return (NULL);
 8002602:	2300      	movs	r3, #0
 8002604:	e054      	b.n	80026b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00e      	beq.n	800263c <osThreadNew+0xa8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2ba7      	cmp	r3, #167	@ 0xa7
 8002624:	d90a      	bls.n	800263c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <osThreadNew+0xa8>
        mem = 1;
 8002636:	2301      	movs	r3, #1
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	e010      	b.n	800265e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10c      	bne.n	800265e <osThreadNew+0xca>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d108      	bne.n	800265e <osThreadNew+0xca>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d104      	bne.n	800265e <osThreadNew+0xca>
          mem = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	e001      	b.n	800265e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d110      	bne.n	8002686 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800266c:	9202      	str	r2, [sp, #8]
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	6a3a      	ldr	r2, [r7, #32]
 8002678:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fdfe 	bl	800327c <xTaskCreateStatic>
 8002680:	4603      	mov	r3, r0
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	e013      	b.n	80026ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d110      	bne.n	80026ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	b29a      	uxth	r2, r3
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fe4c 	bl	800333c <xTaskCreate>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d001      	beq.n	80026ae <osThreadNew+0x11a>
            hTask = NULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80026ae:	693b      	ldr	r3, [r7, #16]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3728      	adds	r7, #40	@ 0x28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a07      	ldr	r2, [pc, #28]	@ (80026e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80026c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	4a06      	ldr	r2, [pc, #24]	@ (80026e8 <vApplicationGetIdleTaskMemory+0x30>)
 80026ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2280      	movs	r2, #128	@ 0x80
 80026d4:	601a      	str	r2, [r3, #0]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000120 	.word	0x20000120
 80026e8:	200001c8 	.word	0x200001c8

080026ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4a07      	ldr	r2, [pc, #28]	@ (8002718 <vApplicationGetTimerTaskMemory+0x2c>)
 80026fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4a06      	ldr	r2, [pc, #24]	@ (800271c <vApplicationGetTimerTaskMemory+0x30>)
 8002702:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800270a:	601a      	str	r2, [r3, #0]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	200003c8 	.word	0x200003c8
 800271c:	20000470 	.word	0x20000470

08002720 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f103 0208 	add.w	r2, r3, #8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f103 0208 	add.w	r2, r3, #8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f103 0208 	add.w	r2, r3, #8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	601a      	str	r2, [r3, #0]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d103      	bne.n	80027e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e00c      	b.n	80027fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3308      	adds	r3, #8
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e002      	b.n	80027f0 <vListInsert+0x2e>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d2f6      	bcs.n	80027ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6892      	ldr	r2, [r2, #8]
 800284a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6852      	ldr	r2, [r2, #4]
 8002854:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	d103      	bne.n	8002868 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	1e5a      	subs	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10b      	bne.n	80028b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028ae:	bf00      	nop
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028b4:	f002 f8f0 	bl	8004a98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c0:	68f9      	ldr	r1, [r7, #12]
 80028c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	441a      	add	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e4:	3b01      	subs	r3, #1
 80028e6:	68f9      	ldr	r1, [r7, #12]
 80028e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	441a      	add	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	22ff      	movs	r2, #255	@ 0xff
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	22ff      	movs	r2, #255	@ 0xff
 8002900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d114      	bne.n	8002934 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01a      	beq.n	8002948 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3310      	adds	r3, #16
 8002916:	4618      	mov	r0, r3
 8002918:	f001 f98c 	bl	8003c34 <xTaskRemoveFromEventList>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d012      	beq.n	8002948 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002922:	4b0d      	ldr	r3, [pc, #52]	@ (8002958 <xQueueGenericReset+0xd0>)
 8002924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	e009      	b.n	8002948 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3310      	adds	r3, #16
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fef1 	bl	8002720 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3324      	adds	r3, #36	@ 0x24
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff feec 	bl	8002720 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002948:	f002 f8d8 	bl	8004afc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800294c:	2301      	movs	r3, #1
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	e000ed04 	.word	0xe000ed04

0800295c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08e      	sub	sp, #56	@ 0x38
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10b      	bne.n	8002988 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10b      	bne.n	80029a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800298e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002992:	f383 8811 	msr	BASEPRI, r3
 8002996:	f3bf 8f6f 	isb	sy
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	e7fd      	b.n	80029a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <xQueueGenericCreateStatic+0x56>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <xQueueGenericCreateStatic+0x5a>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <xQueueGenericCreateStatic+0x5c>
 80029b6:	2300      	movs	r3, #0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10b      	bne.n	80029d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	623b      	str	r3, [r7, #32]
}
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <xQueueGenericCreateStatic+0x84>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <xQueueGenericCreateStatic+0x88>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <xQueueGenericCreateStatic+0x8a>
 80029e4:	2300      	movs	r3, #0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10b      	bne.n	8002a02 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	61fb      	str	r3, [r7, #28]
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	e7fd      	b.n	80029fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a02:	2350      	movs	r3, #80	@ 0x50
 8002a04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b50      	cmp	r3, #80	@ 0x50
 8002a0a:	d00b      	beq.n	8002a24 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	61bb      	str	r3, [r7, #24]
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a24:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00d      	beq.n	8002a4c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a38:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f805 	bl	8002a56 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3730      	adds	r7, #48	@ 0x30
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e002      	b.n	8002a78 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a84:	2101      	movs	r1, #1
 8002a86:	69b8      	ldr	r0, [r7, #24]
 8002a88:	f7ff fefe 	bl	8002888 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08e      	sub	sp, #56	@ 0x38
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10b      	bne.n	8002ad0 <xQueueGenericSend+0x34>
	__asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002aca:	bf00      	nop
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <xQueueGenericSend+0x42>
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <xQueueGenericSend+0x46>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <xQueueGenericSend+0x48>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <xQueueGenericSend+0x64>
	__asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002afa:	bf00      	nop
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d103      	bne.n	8002b0e <xQueueGenericSend+0x72>
 8002b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <xQueueGenericSend+0x76>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <xQueueGenericSend+0x78>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10b      	bne.n	8002b30 <xQueueGenericSend+0x94>
	__asm volatile
 8002b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	623b      	str	r3, [r7, #32]
}
 8002b2a:	bf00      	nop
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b30:	f001 fa46 	bl	8003fc0 <xTaskGetSchedulerState>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <xQueueGenericSend+0xa4>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <xQueueGenericSend+0xa8>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <xQueueGenericSend+0xaa>
 8002b44:	2300      	movs	r3, #0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10b      	bne.n	8002b62 <xQueueGenericSend+0xc6>
	__asm volatile
 8002b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b4e:	f383 8811 	msr	BASEPRI, r3
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	61fb      	str	r3, [r7, #28]
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	e7fd      	b.n	8002b5e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b62:	f001 ff99 	bl	8004a98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d302      	bcc.n	8002b78 <xQueueGenericSend+0xdc>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d129      	bne.n	8002bcc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b7e:	f000 fa0f 	bl	8002fa0 <prvCopyDataToQueue>
 8002b82:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d010      	beq.n	8002bae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8e:	3324      	adds	r3, #36	@ 0x24
 8002b90:	4618      	mov	r0, r3
 8002b92:	f001 f84f 	bl	8003c34 <xTaskRemoveFromEventList>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8002c9c <xQueueGenericSend+0x200>)
 8002b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	e00a      	b.n	8002bc4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bb4:	4b39      	ldr	r3, [pc, #228]	@ (8002c9c <xQueueGenericSend+0x200>)
 8002bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bc4:	f001 ff9a 	bl	8004afc <vPortExitCritical>
				return pdPASS;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e063      	b.n	8002c94 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bd2:	f001 ff93 	bl	8004afc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e05c      	b.n	8002c94 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 f889 	bl	8003cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bea:	2301      	movs	r3, #1
 8002bec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bee:	f001 ff85 	bl	8004afc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bf2:	f000 fdf1 	bl	80037d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bf6:	f001 ff4f 	bl	8004a98 <vPortEnterCritical>
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c06:	d103      	bne.n	8002c10 <xQueueGenericSend+0x174>
 8002c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d103      	bne.n	8002c26 <xQueueGenericSend+0x18a>
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c26:	f001 ff69 	bl	8004afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c2a:	1d3a      	adds	r2, r7, #4
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 f878 	bl	8003d28 <xTaskCheckForTimeOut>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d124      	bne.n	8002c88 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c40:	f000 faa6 	bl	8003190 <prvIsQueueFull>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d018      	beq.n	8002c7c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4c:	3310      	adds	r3, #16
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 ff9c 	bl	8003b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c5a:	f000 fa31 	bl	80030c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c5e:	f000 fdc9 	bl	80037f4 <xTaskResumeAll>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f47f af7c 	bne.w	8002b62 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <xQueueGenericSend+0x200>)
 8002c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	e772      	b.n	8002b62 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c7e:	f000 fa1f 	bl	80030c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c82:	f000 fdb7 	bl	80037f4 <xTaskResumeAll>
 8002c86:	e76c      	b.n	8002b62 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c8a:	f000 fa19 	bl	80030c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c8e:	f000 fdb1 	bl	80037f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3738      	adds	r7, #56	@ 0x38
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	e000ed04 	.word	0xe000ed04

08002ca0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b090      	sub	sp, #64	@ 0x40
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10b      	bne.n	8002cd0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
 8002cce:	e7fd      	b.n	8002ccc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <xQueueGenericSendFromISR+0x3e>
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <xQueueGenericSendFromISR+0x42>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <xQueueGenericSendFromISR+0x44>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10b      	bne.n	8002d00 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d103      	bne.n	8002d0e <xQueueGenericSendFromISR+0x6e>
 8002d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <xQueueGenericSendFromISR+0x72>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <xQueueGenericSendFromISR+0x74>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	623b      	str	r3, [r7, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d30:	f001 ff92 	bl	8004c58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d34:	f3ef 8211 	mrs	r2, BASEPRI
 8002d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	61fa      	str	r2, [r7, #28]
 8002d4a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d4c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d4e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d302      	bcc.n	8002d62 <xQueueGenericSendFromISR+0xc2>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d12f      	bne.n	8002dc2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002d78:	f000 f912 	bl	8002fa0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d112      	bne.n	8002dac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d016      	beq.n	8002dbc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d90:	3324      	adds	r3, #36	@ 0x24
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 ff4e 	bl	8003c34 <xTaskRemoveFromEventList>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00e      	beq.n	8002dbc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00b      	beq.n	8002dbc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e007      	b.n	8002dbc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002db0:	3301      	adds	r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	b25a      	sxtb	r2, r3
 8002db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002dc0:	e001      	b.n	8002dc6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3740      	adds	r7, #64	@ 0x40
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	@ 0x30
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10b      	bne.n	8002e0e <xQueueReceive+0x32>
	__asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	623b      	str	r3, [r7, #32]
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	e7fd      	b.n	8002e0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d103      	bne.n	8002e1c <xQueueReceive+0x40>
 8002e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <xQueueReceive+0x44>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <xQueueReceive+0x46>
 8002e20:	2300      	movs	r3, #0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <xQueueReceive+0x62>
	__asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	61fb      	str	r3, [r7, #28]
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	e7fd      	b.n	8002e3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e3e:	f001 f8bf 	bl	8003fc0 <xTaskGetSchedulerState>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <xQueueReceive+0x72>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <xQueueReceive+0x76>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <xQueueReceive+0x78>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <xQueueReceive+0x94>
	__asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	61bb      	str	r3, [r7, #24]
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	e7fd      	b.n	8002e6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e70:	f001 fe12 	bl	8004a98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01f      	beq.n	8002ec0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e84:	f000 f8f6 	bl	8003074 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	1e5a      	subs	r2, r3, #1
 8002e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00f      	beq.n	8002eb8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9a:	3310      	adds	r3, #16
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fec9 	bl	8003c34 <xTaskRemoveFromEventList>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ea8:	4b3c      	ldr	r3, [pc, #240]	@ (8002f9c <xQueueReceive+0x1c0>)
 8002eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002eb8:	f001 fe20 	bl	8004afc <vPortExitCritical>
				return pdPASS;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e069      	b.n	8002f94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d103      	bne.n	8002ece <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ec6:	f001 fe19 	bl	8004afc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e062      	b.n	8002f94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d106      	bne.n	8002ee2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ed4:	f107 0310 	add.w	r3, r7, #16
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 ff0f 	bl	8003cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ee2:	f001 fe0b 	bl	8004afc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ee6:	f000 fc77 	bl	80037d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eea:	f001 fdd5 	bl	8004a98 <vPortEnterCritical>
 8002eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ef4:	b25b      	sxtb	r3, r3
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efa:	d103      	bne.n	8002f04 <xQueueReceive+0x128>
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f0a:	b25b      	sxtb	r3, r3
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d103      	bne.n	8002f1a <xQueueReceive+0x13e>
 8002f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f1a:	f001 fdef 	bl	8004afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f1e:	1d3a      	adds	r2, r7, #4
 8002f20:	f107 0310 	add.w	r3, r7, #16
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fefe 	bl	8003d28 <xTaskCheckForTimeOut>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d123      	bne.n	8002f7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f34:	f000 f916 	bl	8003164 <prvIsQueueEmpty>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d017      	beq.n	8002f6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f40:	3324      	adds	r3, #36	@ 0x24
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fe22 	bl	8003b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f4e:	f000 f8b7 	bl	80030c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f52:	f000 fc4f 	bl	80037f4 <xTaskResumeAll>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d189      	bne.n	8002e70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f9c <xQueueReceive+0x1c0>)
 8002f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	e780      	b.n	8002e70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f70:	f000 f8a6 	bl	80030c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f74:	f000 fc3e 	bl	80037f4 <xTaskResumeAll>
 8002f78:	e77a      	b.n	8002e70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f7c:	f000 f8a0 	bl	80030c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f80:	f000 fc38 	bl	80037f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f86:	f000 f8ed 	bl	8003164 <prvIsQueueEmpty>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f43f af6f 	beq.w	8002e70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3730      	adds	r7, #48	@ 0x30
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	e000ed04 	.word	0xe000ed04

08002fa0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10d      	bne.n	8002fda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d14d      	bne.n	8003062 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 f816 	bl	8003ffc <xTaskPriorityDisinherit>
 8002fd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	e043      	b.n	8003062 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d119      	bne.n	8003014 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6858      	ldr	r0, [r3, #4]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	461a      	mov	r2, r3
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	f002 f8e8 	bl	80051c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	441a      	add	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	429a      	cmp	r2, r3
 8003008:	d32b      	bcc.n	8003062 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	e026      	b.n	8003062 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	68d8      	ldr	r0, [r3, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	461a      	mov	r2, r3
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	f002 f8ce 	bl	80051c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	425b      	negs	r3, r3
 800302e:	441a      	add	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d207      	bcs.n	8003050 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	425b      	negs	r3, r3
 800304a:	441a      	add	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d105      	bne.n	8003062 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	3b01      	subs	r3, #1
 8003060:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800306a:	697b      	ldr	r3, [r7, #20]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d018      	beq.n	80030b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	441a      	add	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	429a      	cmp	r2, r3
 800309e:	d303      	bcc.n	80030a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68d9      	ldr	r1, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	461a      	mov	r2, r3
 80030b2:	6838      	ldr	r0, [r7, #0]
 80030b4:	f002 f884 	bl	80051c0 <memcpy>
	}
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030c8:	f001 fce6 	bl	8004a98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030d4:	e011      	b.n	80030fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d012      	beq.n	8003104 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3324      	adds	r3, #36	@ 0x24
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fda6 	bl	8003c34 <xTaskRemoveFromEventList>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030ee:	f000 fe7f 	bl	8003df0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	dce9      	bgt.n	80030d6 <prvUnlockQueue+0x16>
 8003102:	e000      	b.n	8003106 <prvUnlockQueue+0x46>
					break;
 8003104:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	22ff      	movs	r2, #255	@ 0xff
 800310a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800310e:	f001 fcf5 	bl	8004afc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003112:	f001 fcc1 	bl	8004a98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800311c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800311e:	e011      	b.n	8003144 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d012      	beq.n	800314e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3310      	adds	r3, #16
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fd81 	bl	8003c34 <xTaskRemoveFromEventList>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003138:	f000 fe5a 	bl	8003df0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800313c:	7bbb      	ldrb	r3, [r7, #14]
 800313e:	3b01      	subs	r3, #1
 8003140:	b2db      	uxtb	r3, r3
 8003142:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003148:	2b00      	cmp	r3, #0
 800314a:	dce9      	bgt.n	8003120 <prvUnlockQueue+0x60>
 800314c:	e000      	b.n	8003150 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800314e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	22ff      	movs	r2, #255	@ 0xff
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003158:	f001 fcd0 	bl	8004afc <vPortExitCritical>
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800316c:	f001 fc94 	bl	8004a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003178:	2301      	movs	r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e001      	b.n	8003182 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003182:	f001 fcbb 	bl	8004afc <vPortExitCritical>

	return xReturn;
 8003186:	68fb      	ldr	r3, [r7, #12]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003198:	f001 fc7e 	bl	8004a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d102      	bne.n	80031ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	e001      	b.n	80031b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031b2:	f001 fca3 	bl	8004afc <vPortExitCritical>

	return xReturn;
 80031b6:	68fb      	ldr	r3, [r7, #12]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	e014      	b.n	80031fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003210 <vQueueAddToRegistry+0x50>)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031dc:	490c      	ldr	r1, [pc, #48]	@ (8003210 <vQueueAddToRegistry+0x50>)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80031e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003210 <vQueueAddToRegistry+0x50>)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031f2:	e006      	b.n	8003202 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3301      	adds	r3, #1
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b07      	cmp	r3, #7
 80031fe:	d9e7      	bls.n	80031d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000870 	.word	0x20000870

08003214 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003224:	f001 fc38 	bl	8004a98 <vPortEnterCritical>
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800322e:	b25b      	sxtb	r3, r3
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d103      	bne.n	800323e <vQueueWaitForMessageRestricted+0x2a>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003244:	b25b      	sxtb	r3, r3
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d103      	bne.n	8003254 <vQueueWaitForMessageRestricted+0x40>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003254:	f001 fc52 	bl	8004afc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325c:	2b00      	cmp	r3, #0
 800325e:	d106      	bne.n	800326e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3324      	adds	r3, #36	@ 0x24
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fcb7 	bl	8003bdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800326e:	6978      	ldr	r0, [r7, #20]
 8003270:	f7ff ff26 	bl	80030c0 <prvUnlockQueue>
	}
 8003274:	bf00      	nop
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08e      	sub	sp, #56	@ 0x38
 8003280:	af04      	add	r7, sp, #16
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800328a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	623b      	str	r3, [r7, #32]
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10b      	bne.n	80032c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	61fb      	str	r3, [r7, #28]
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	e7fd      	b.n	80032c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032c6:	23a8      	movs	r3, #168	@ 0xa8
 80032c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2ba8      	cmp	r3, #168	@ 0xa8
 80032ce:	d00b      	beq.n	80032e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	61bb      	str	r3, [r7, #24]
}
 80032e2:	bf00      	nop
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80032e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01e      	beq.n	800332e <xTaskCreateStatic+0xb2>
 80032f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01b      	beq.n	800332e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	2202      	movs	r2, #2
 8003304:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003308:	2300      	movs	r3, #0
 800330a:	9303      	str	r3, [sp, #12]
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	9302      	str	r3, [sp, #8]
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 f851 	bl	80033c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003326:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003328:	f000 f8f6 	bl	8003518 <prvAddNewTaskToReadyList>
 800332c:	e001      	b.n	8003332 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003332:	697b      	ldr	r3, [r7, #20]
	}
 8003334:	4618      	mov	r0, r3
 8003336:	3728      	adds	r7, #40	@ 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08c      	sub	sp, #48	@ 0x30
 8003340:	af04      	add	r7, sp, #16
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4618      	mov	r0, r3
 8003352:	f001 fcc3 	bl	8004cdc <pvPortMalloc>
 8003356:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00e      	beq.n	800337c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800335e:	20a8      	movs	r0, #168	@ 0xa8
 8003360:	f001 fcbc 	bl	8004cdc <pvPortMalloc>
 8003364:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	631a      	str	r2, [r3, #48]	@ 0x30
 8003372:	e005      	b.n	8003380 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003374:	6978      	ldr	r0, [r7, #20]
 8003376:	f001 fd7f 	bl	8004e78 <vPortFree>
 800337a:	e001      	b.n	8003380 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800337c:	2300      	movs	r3, #0
 800337e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d017      	beq.n	80033b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800338e:	88fa      	ldrh	r2, [r7, #6]
 8003390:	2300      	movs	r3, #0
 8003392:	9303      	str	r3, [sp, #12]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	9302      	str	r3, [sp, #8]
 8003398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f80f 	bl	80033c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033aa:	69f8      	ldr	r0, [r7, #28]
 80033ac:	f000 f8b4 	bl	8003518 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033b0:	2301      	movs	r3, #1
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	e002      	b.n	80033bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033b6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033bc:	69bb      	ldr	r3, [r7, #24]
	}
 80033be:	4618      	mov	r0, r3
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	461a      	mov	r2, r3
 80033e0:	21a5      	movs	r1, #165	@ 0xa5
 80033e2:	f001 fe69 	bl	80050b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033f0:	3b01      	subs	r3, #1
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f023 0307 	bic.w	r3, r3, #7
 80033fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	617b      	str	r3, [r7, #20]
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	e7fd      	b.n	800341e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01f      	beq.n	8003468 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	e012      	b.n	8003454 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	4413      	add	r3, r2
 8003434:	7819      	ldrb	r1, [r3, #0]
 8003436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	3334      	adds	r3, #52	@ 0x34
 800343e:	460a      	mov	r2, r1
 8003440:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	4413      	add	r3, r2
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d006      	beq.n	800345c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3301      	adds	r3, #1
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b0f      	cmp	r3, #15
 8003458:	d9e9      	bls.n	800342e <prvInitialiseNewTask+0x66>
 800345a:	e000      	b.n	800345e <prvInitialiseNewTask+0x96>
			{
				break;
 800345c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003466:	e003      	b.n	8003470 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003472:	2b37      	cmp	r3, #55	@ 0x37
 8003474:	d901      	bls.n	800347a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003476:	2337      	movs	r3, #55	@ 0x37
 8003478:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800347e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003484:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	2200      	movs	r2, #0
 800348a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800348c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348e:	3304      	adds	r3, #4
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff f965 	bl	8002760 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	3318      	adds	r3, #24
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff f960 	bl	8002760 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80034ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b8:	2200      	movs	r2, #0
 80034ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80034c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c8:	3354      	adds	r3, #84	@ 0x54
 80034ca:	224c      	movs	r2, #76	@ 0x4c
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 fdf2 	bl	80050b8 <memset>
 80034d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d6:	4a0d      	ldr	r2, [pc, #52]	@ (800350c <prvInitialiseNewTask+0x144>)
 80034d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80034da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003510 <prvInitialiseNewTask+0x148>)
 80034de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003514 <prvInitialiseNewTask+0x14c>)
 80034e4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	68f9      	ldr	r1, [r7, #12]
 80034ea:	69b8      	ldr	r0, [r7, #24]
 80034ec:	f001 f9a4 	bl	8004838 <pxPortInitialiseStack>
 80034f0:	4602      	mov	r2, r0
 80034f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80034f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003502:	bf00      	nop
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20004b04 	.word	0x20004b04
 8003510:	20004b6c 	.word	0x20004b6c
 8003514:	20004bd4 	.word	0x20004bd4

08003518 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003520:	f001 faba 	bl	8004a98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003524:	4b2d      	ldr	r3, [pc, #180]	@ (80035dc <prvAddNewTaskToReadyList+0xc4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	4a2c      	ldr	r2, [pc, #176]	@ (80035dc <prvAddNewTaskToReadyList+0xc4>)
 800352c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800352e:	4b2c      	ldr	r3, [pc, #176]	@ (80035e0 <prvAddNewTaskToReadyList+0xc8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003536:	4a2a      	ldr	r2, [pc, #168]	@ (80035e0 <prvAddNewTaskToReadyList+0xc8>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800353c:	4b27      	ldr	r3, [pc, #156]	@ (80035dc <prvAddNewTaskToReadyList+0xc4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d110      	bne.n	8003566 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003544:	f000 fc78 	bl	8003e38 <prvInitialiseTaskLists>
 8003548:	e00d      	b.n	8003566 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800354a:	4b26      	ldr	r3, [pc, #152]	@ (80035e4 <prvAddNewTaskToReadyList+0xcc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003552:	4b23      	ldr	r3, [pc, #140]	@ (80035e0 <prvAddNewTaskToReadyList+0xc8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355c:	429a      	cmp	r2, r3
 800355e:	d802      	bhi.n	8003566 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003560:	4a1f      	ldr	r2, [pc, #124]	@ (80035e0 <prvAddNewTaskToReadyList+0xc8>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003566:	4b20      	ldr	r3, [pc, #128]	@ (80035e8 <prvAddNewTaskToReadyList+0xd0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3301      	adds	r3, #1
 800356c:	4a1e      	ldr	r2, [pc, #120]	@ (80035e8 <prvAddNewTaskToReadyList+0xd0>)
 800356e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003570:	4b1d      	ldr	r3, [pc, #116]	@ (80035e8 <prvAddNewTaskToReadyList+0xd0>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800357c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ec <prvAddNewTaskToReadyList+0xd4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d903      	bls.n	800358c <prvAddNewTaskToReadyList+0x74>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003588:	4a18      	ldr	r2, [pc, #96]	@ (80035ec <prvAddNewTaskToReadyList+0xd4>)
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4a15      	ldr	r2, [pc, #84]	@ (80035f0 <prvAddNewTaskToReadyList+0xd8>)
 800359a:	441a      	add	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3304      	adds	r3, #4
 80035a0:	4619      	mov	r1, r3
 80035a2:	4610      	mov	r0, r2
 80035a4:	f7ff f8e9 	bl	800277a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035a8:	f001 faa8 	bl	8004afc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035ac:	4b0d      	ldr	r3, [pc, #52]	@ (80035e4 <prvAddNewTaskToReadyList+0xcc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00e      	beq.n	80035d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035b4:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <prvAddNewTaskToReadyList+0xc8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035be:	429a      	cmp	r2, r3
 80035c0:	d207      	bcs.n	80035d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035c2:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <prvAddNewTaskToReadyList+0xdc>)
 80035c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000d84 	.word	0x20000d84
 80035e0:	200008b0 	.word	0x200008b0
 80035e4:	20000d90 	.word	0x20000d90
 80035e8:	20000da0 	.word	0x20000da0
 80035ec:	20000d8c 	.word	0x20000d8c
 80035f0:	200008b4 	.word	0x200008b4
 80035f4:	e000ed04 	.word	0xe000ed04

080035f8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	@ 0x28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003602:	2300      	movs	r3, #0
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <vTaskDelayUntil+0x2c>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	617b      	str	r3, [r7, #20]
}
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	e7fd      	b.n	8003620 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <vTaskDelayUntil+0x4a>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	613b      	str	r3, [r7, #16]
}
 800363c:	bf00      	nop
 800363e:	bf00      	nop
 8003640:	e7fd      	b.n	800363e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8003642:	4b2a      	ldr	r3, [pc, #168]	@ (80036ec <vTaskDelayUntil+0xf4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <vTaskDelayUntil+0x6a>
	__asm volatile
 800364a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	60fb      	str	r3, [r7, #12]
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	e7fd      	b.n	800365e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8003662:	f000 f8b9 	bl	80037d8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003666:	4b22      	ldr	r3, [pc, #136]	@ (80036f0 <vTaskDelayUntil+0xf8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	4413      	add	r3, r2
 8003674:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a3a      	ldr	r2, [r7, #32]
 800367c:	429a      	cmp	r2, r3
 800367e:	d20b      	bcs.n	8003698 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	429a      	cmp	r2, r3
 8003688:	d211      	bcs.n	80036ae <vTaskDelayUntil+0xb6>
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	429a      	cmp	r2, r3
 8003690:	d90d      	bls.n	80036ae <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8003692:	2301      	movs	r3, #1
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
 8003696:	e00a      	b.n	80036ae <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d303      	bcc.n	80036aa <vTaskDelayUntil+0xb2>
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d901      	bls.n	80036ae <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80036aa:	2301      	movs	r3, #1
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d006      	beq.n	80036c8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fd0a 	bl	80040dc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80036c8:	f000 f894 	bl	80037f4 <xTaskResumeAll>
 80036cc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d107      	bne.n	80036e4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80036d4:	4b07      	ldr	r3, [pc, #28]	@ (80036f4 <vTaskDelayUntil+0xfc>)
 80036d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036e4:	bf00      	nop
 80036e6:	3728      	adds	r7, #40	@ 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000dac 	.word	0x20000dac
 80036f0:	20000d88 	.word	0x20000d88
 80036f4:	e000ed04 	.word	0xe000ed04

080036f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	@ 0x28
 80036fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003706:	463a      	mov	r2, r7
 8003708:	1d39      	adds	r1, r7, #4
 800370a:	f107 0308 	add.w	r3, r7, #8
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe ffd2 	bl	80026b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	9202      	str	r2, [sp, #8]
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	2300      	movs	r3, #0
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2300      	movs	r3, #0
 8003724:	460a      	mov	r2, r1
 8003726:	4924      	ldr	r1, [pc, #144]	@ (80037b8 <vTaskStartScheduler+0xc0>)
 8003728:	4824      	ldr	r0, [pc, #144]	@ (80037bc <vTaskStartScheduler+0xc4>)
 800372a:	f7ff fda7 	bl	800327c <xTaskCreateStatic>
 800372e:	4603      	mov	r3, r0
 8003730:	4a23      	ldr	r2, [pc, #140]	@ (80037c0 <vTaskStartScheduler+0xc8>)
 8003732:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003734:	4b22      	ldr	r3, [pc, #136]	@ (80037c0 <vTaskStartScheduler+0xc8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800373c:	2301      	movs	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	e001      	b.n	8003746 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d102      	bne.n	8003752 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800374c:	f000 fd1a 	bl	8004184 <xTimerCreateTimerTask>
 8003750:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d11b      	bne.n	8003790 <vTaskStartScheduler+0x98>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	613b      	str	r3, [r7, #16]
}
 800376a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800376c:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <vTaskStartScheduler+0xcc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3354      	adds	r3, #84	@ 0x54
 8003772:	4a15      	ldr	r2, [pc, #84]	@ (80037c8 <vTaskStartScheduler+0xd0>)
 8003774:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003776:	4b15      	ldr	r3, [pc, #84]	@ (80037cc <vTaskStartScheduler+0xd4>)
 8003778:	f04f 32ff 	mov.w	r2, #4294967295
 800377c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800377e:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <vTaskStartScheduler+0xd8>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003784:	4b13      	ldr	r3, [pc, #76]	@ (80037d4 <vTaskStartScheduler+0xdc>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800378a:	f001 f8e1 	bl	8004950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800378e:	e00f      	b.n	80037b0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003796:	d10b      	bne.n	80037b0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	60fb      	str	r3, [r7, #12]
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	e7fd      	b.n	80037ac <vTaskStartScheduler+0xb4>
}
 80037b0:	bf00      	nop
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	080052c4 	.word	0x080052c4
 80037bc:	08003e09 	.word	0x08003e09
 80037c0:	20000da8 	.word	0x20000da8
 80037c4:	200008b0 	.word	0x200008b0
 80037c8:	20000010 	.word	0x20000010
 80037cc:	20000da4 	.word	0x20000da4
 80037d0:	20000d90 	.word	0x20000d90
 80037d4:	20000d88 	.word	0x20000d88

080037d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037dc:	4b04      	ldr	r3, [pc, #16]	@ (80037f0 <vTaskSuspendAll+0x18>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	4a03      	ldr	r2, [pc, #12]	@ (80037f0 <vTaskSuspendAll+0x18>)
 80037e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	20000dac 	.word	0x20000dac

080037f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003802:	4b42      	ldr	r3, [pc, #264]	@ (800390c <xTaskResumeAll+0x118>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10b      	bne.n	8003822 <xTaskResumeAll+0x2e>
	__asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	603b      	str	r3, [r7, #0]
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	e7fd      	b.n	800381e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003822:	f001 f939 	bl	8004a98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003826:	4b39      	ldr	r3, [pc, #228]	@ (800390c <xTaskResumeAll+0x118>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3b01      	subs	r3, #1
 800382c:	4a37      	ldr	r2, [pc, #220]	@ (800390c <xTaskResumeAll+0x118>)
 800382e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003830:	4b36      	ldr	r3, [pc, #216]	@ (800390c <xTaskResumeAll+0x118>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d162      	bne.n	80038fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003838:	4b35      	ldr	r3, [pc, #212]	@ (8003910 <xTaskResumeAll+0x11c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d05e      	beq.n	80038fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003840:	e02f      	b.n	80038a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003842:	4b34      	ldr	r3, [pc, #208]	@ (8003914 <xTaskResumeAll+0x120>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3318      	adds	r3, #24
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fff0 	bl	8002834 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3304      	adds	r3, #4
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe ffeb 	bl	8002834 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003862:	4b2d      	ldr	r3, [pc, #180]	@ (8003918 <xTaskResumeAll+0x124>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d903      	bls.n	8003872 <xTaskResumeAll+0x7e>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386e:	4a2a      	ldr	r2, [pc, #168]	@ (8003918 <xTaskResumeAll+0x124>)
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4a27      	ldr	r2, [pc, #156]	@ (800391c <xTaskResumeAll+0x128>)
 8003880:	441a      	add	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3304      	adds	r3, #4
 8003886:	4619      	mov	r1, r3
 8003888:	4610      	mov	r0, r2
 800388a:	f7fe ff76 	bl	800277a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003892:	4b23      	ldr	r3, [pc, #140]	@ (8003920 <xTaskResumeAll+0x12c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	429a      	cmp	r2, r3
 800389a:	d302      	bcc.n	80038a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800389c:	4b21      	ldr	r3, [pc, #132]	@ (8003924 <xTaskResumeAll+0x130>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003914 <xTaskResumeAll+0x120>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1cb      	bne.n	8003842 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038b0:	f000 fb66 	bl	8003f80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003928 <xTaskResumeAll+0x134>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d010      	beq.n	80038e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038c0:	f000 f846 	bl	8003950 <xTaskIncrementTick>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80038ca:	4b16      	ldr	r3, [pc, #88]	@ (8003924 <xTaskResumeAll+0x130>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f1      	bne.n	80038c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80038dc:	4b12      	ldr	r3, [pc, #72]	@ (8003928 <xTaskResumeAll+0x134>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038e2:	4b10      	ldr	r3, [pc, #64]	@ (8003924 <xTaskResumeAll+0x130>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038ea:	2301      	movs	r3, #1
 80038ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038ee:	4b0f      	ldr	r3, [pc, #60]	@ (800392c <xTaskResumeAll+0x138>)
 80038f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038fe:	f001 f8fd 	bl	8004afc <vPortExitCritical>

	return xAlreadyYielded;
 8003902:	68bb      	ldr	r3, [r7, #8]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000dac 	.word	0x20000dac
 8003910:	20000d84 	.word	0x20000d84
 8003914:	20000d44 	.word	0x20000d44
 8003918:	20000d8c 	.word	0x20000d8c
 800391c:	200008b4 	.word	0x200008b4
 8003920:	200008b0 	.word	0x200008b0
 8003924:	20000d98 	.word	0x20000d98
 8003928:	20000d94 	.word	0x20000d94
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003936:	4b05      	ldr	r3, [pc, #20]	@ (800394c <xTaskGetTickCount+0x1c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800393c:	687b      	ldr	r3, [r7, #4]
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000d88 	.word	0x20000d88

08003950 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800395a:	4b4f      	ldr	r3, [pc, #316]	@ (8003a98 <xTaskIncrementTick+0x148>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 8090 	bne.w	8003a84 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003964:	4b4d      	ldr	r3, [pc, #308]	@ (8003a9c <xTaskIncrementTick+0x14c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800396c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a9c <xTaskIncrementTick+0x14c>)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d121      	bne.n	80039bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003978:	4b49      	ldr	r3, [pc, #292]	@ (8003aa0 <xTaskIncrementTick+0x150>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	603b      	str	r3, [r7, #0]
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	e7fd      	b.n	8003996 <xTaskIncrementTick+0x46>
 800399a:	4b41      	ldr	r3, [pc, #260]	@ (8003aa0 <xTaskIncrementTick+0x150>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	4b40      	ldr	r3, [pc, #256]	@ (8003aa4 <xTaskIncrementTick+0x154>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a3e      	ldr	r2, [pc, #248]	@ (8003aa0 <xTaskIncrementTick+0x150>)
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4a3e      	ldr	r2, [pc, #248]	@ (8003aa4 <xTaskIncrementTick+0x154>)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa8 <xTaskIncrementTick+0x158>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3301      	adds	r3, #1
 80039b4:	4a3c      	ldr	r2, [pc, #240]	@ (8003aa8 <xTaskIncrementTick+0x158>)
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	f000 fae2 	bl	8003f80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039bc:	4b3b      	ldr	r3, [pc, #236]	@ (8003aac <xTaskIncrementTick+0x15c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d349      	bcc.n	8003a5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c6:	4b36      	ldr	r3, [pc, #216]	@ (8003aa0 <xTaskIncrementTick+0x150>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d0:	4b36      	ldr	r3, [pc, #216]	@ (8003aac <xTaskIncrementTick+0x15c>)
 80039d2:	f04f 32ff 	mov.w	r2, #4294967295
 80039d6:	601a      	str	r2, [r3, #0]
					break;
 80039d8:	e03f      	b.n	8003a5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039da:	4b31      	ldr	r3, [pc, #196]	@ (8003aa0 <xTaskIncrementTick+0x150>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d203      	bcs.n	80039fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039f2:	4a2e      	ldr	r2, [pc, #184]	@ (8003aac <xTaskIncrementTick+0x15c>)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039f8:	e02f      	b.n	8003a5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3304      	adds	r3, #4
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe ff18 	bl	8002834 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d004      	beq.n	8003a16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	3318      	adds	r3, #24
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe ff0f 	bl	8002834 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a1a:	4b25      	ldr	r3, [pc, #148]	@ (8003ab0 <xTaskIncrementTick+0x160>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d903      	bls.n	8003a2a <xTaskIncrementTick+0xda>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	4a22      	ldr	r2, [pc, #136]	@ (8003ab0 <xTaskIncrementTick+0x160>)
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab4 <xTaskIncrementTick+0x164>)
 8003a38:	441a      	add	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f7fe fe9a 	bl	800277a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <xTaskIncrementTick+0x168>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d3b8      	bcc.n	80039c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003a54:	2301      	movs	r3, #1
 8003a56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a58:	e7b5      	b.n	80039c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a5a:	4b17      	ldr	r3, [pc, #92]	@ (8003ab8 <xTaskIncrementTick+0x168>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a60:	4914      	ldr	r1, [pc, #80]	@ (8003ab4 <xTaskIncrementTick+0x164>)
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d901      	bls.n	8003a76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003a72:	2301      	movs	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a76:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <xTaskIncrementTick+0x16c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	e004      	b.n	8003a8e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a84:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac0 <xTaskIncrementTick+0x170>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac0 <xTaskIncrementTick+0x170>)
 8003a8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a8e:	697b      	ldr	r3, [r7, #20]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000dac 	.word	0x20000dac
 8003a9c:	20000d88 	.word	0x20000d88
 8003aa0:	20000d3c 	.word	0x20000d3c
 8003aa4:	20000d40 	.word	0x20000d40
 8003aa8:	20000d9c 	.word	0x20000d9c
 8003aac:	20000da4 	.word	0x20000da4
 8003ab0:	20000d8c 	.word	0x20000d8c
 8003ab4:	200008b4 	.word	0x200008b4
 8003ab8:	200008b0 	.word	0x200008b0
 8003abc:	20000d98 	.word	0x20000d98
 8003ac0:	20000d94 	.word	0x20000d94

08003ac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003aca:	4b2b      	ldr	r3, [pc, #172]	@ (8003b78 <vTaskSwitchContext+0xb4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b7c <vTaskSwitchContext+0xb8>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ad8:	e047      	b.n	8003b6a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003ada:	4b28      	ldr	r3, [pc, #160]	@ (8003b7c <vTaskSwitchContext+0xb8>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae0:	4b27      	ldr	r3, [pc, #156]	@ (8003b80 <vTaskSwitchContext+0xbc>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	e011      	b.n	8003b0c <vTaskSwitchContext+0x48>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10b      	bne.n	8003b06 <vTaskSwitchContext+0x42>
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	607b      	str	r3, [r7, #4]
}
 8003b00:	bf00      	nop
 8003b02:	bf00      	nop
 8003b04:	e7fd      	b.n	8003b02 <vTaskSwitchContext+0x3e>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	491d      	ldr	r1, [pc, #116]	@ (8003b84 <vTaskSwitchContext+0xc0>)
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0e3      	beq.n	8003ae8 <vTaskSwitchContext+0x24>
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4a16      	ldr	r2, [pc, #88]	@ (8003b84 <vTaskSwitchContext+0xc0>)
 8003b2c:	4413      	add	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3308      	adds	r3, #8
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d104      	bne.n	8003b50 <vTaskSwitchContext+0x8c>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	4a0c      	ldr	r2, [pc, #48]	@ (8003b88 <vTaskSwitchContext+0xc4>)
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4a09      	ldr	r2, [pc, #36]	@ (8003b80 <vTaskSwitchContext+0xbc>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b60:	4b09      	ldr	r3, [pc, #36]	@ (8003b88 <vTaskSwitchContext+0xc4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3354      	adds	r3, #84	@ 0x54
 8003b66:	4a09      	ldr	r2, [pc, #36]	@ (8003b8c <vTaskSwitchContext+0xc8>)
 8003b68:	6013      	str	r3, [r2, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000dac 	.word	0x20000dac
 8003b7c:	20000d98 	.word	0x20000d98
 8003b80:	20000d8c 	.word	0x20000d8c
 8003b84:	200008b4 	.word	0x200008b4
 8003b88:	200008b0 	.word	0x200008b0
 8003b8c:	20000010 	.word	0x20000010

08003b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	60fb      	str	r3, [r7, #12]
}
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bb8:	4b07      	ldr	r3, [pc, #28]	@ (8003bd8 <vTaskPlaceOnEventList+0x48>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3318      	adds	r3, #24
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7fe fdfe 	bl	80027c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	6838      	ldr	r0, [r7, #0]
 8003bca:	f000 fa87 	bl	80040dc <prvAddCurrentTaskToDelayedList>
}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200008b0 	.word	0x200008b0

08003bdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10b      	bne.n	8003c06 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	617b      	str	r3, [r7, #20]
}
 8003c00:	bf00      	nop
 8003c02:	bf00      	nop
 8003c04:	e7fd      	b.n	8003c02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c06:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3318      	adds	r3, #24
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f7fe fdb3 	bl	800277a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	68b8      	ldr	r0, [r7, #8]
 8003c24:	f000 fa5a 	bl	80040dc <prvAddCurrentTaskToDelayedList>
	}
 8003c28:	bf00      	nop
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200008b0 	.word	0x200008b0

08003c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10b      	bne.n	8003c62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	60fb      	str	r3, [r7, #12]
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	e7fd      	b.n	8003c5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	3318      	adds	r3, #24
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fde4 	bl	8002834 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <xTaskRemoveFromEventList+0xb0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d11d      	bne.n	8003cb0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe fddb 	bl	8002834 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c82:	4b19      	ldr	r3, [pc, #100]	@ (8003ce8 <xTaskRemoveFromEventList+0xb4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d903      	bls.n	8003c92 <xTaskRemoveFromEventList+0x5e>
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8e:	4a16      	ldr	r2, [pc, #88]	@ (8003ce8 <xTaskRemoveFromEventList+0xb4>)
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4a13      	ldr	r2, [pc, #76]	@ (8003cec <xTaskRemoveFromEventList+0xb8>)
 8003ca0:	441a      	add	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f7fe fd66 	bl	800277a <vListInsertEnd>
 8003cae:	e005      	b.n	8003cbc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	3318      	adds	r3, #24
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	480e      	ldr	r0, [pc, #56]	@ (8003cf0 <xTaskRemoveFromEventList+0xbc>)
 8003cb8:	f7fe fd5f 	bl	800277a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf4 <xTaskRemoveFromEventList+0xc0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d905      	bls.n	8003cd6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cce:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <xTaskRemoveFromEventList+0xc4>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e001      	b.n	8003cda <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003cda:	697b      	ldr	r3, [r7, #20]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20000dac 	.word	0x20000dac
 8003ce8:	20000d8c 	.word	0x20000d8c
 8003cec:	200008b4 	.word	0x200008b4
 8003cf0:	20000d44 	.word	0x20000d44
 8003cf4:	200008b0 	.word	0x200008b0
 8003cf8:	20000d98 	.word	0x20000d98

08003cfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d04:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <vTaskInternalSetTimeOutState+0x24>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d0c:	4b05      	ldr	r3, [pc, #20]	@ (8003d24 <vTaskInternalSetTimeOutState+0x28>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	605a      	str	r2, [r3, #4]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	20000d9c 	.word	0x20000d9c
 8003d24:	20000d88 	.word	0x20000d88

08003d28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10b      	bne.n	8003d50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	613b      	str	r3, [r7, #16]
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	60fb      	str	r3, [r7, #12]
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	e7fd      	b.n	8003d6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003d6e:	f000 fe93 	bl	8004a98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d72:	4b1d      	ldr	r3, [pc, #116]	@ (8003de8 <xTaskCheckForTimeOut+0xc0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d102      	bne.n	8003d92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	e023      	b.n	8003dda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b15      	ldr	r3, [pc, #84]	@ (8003dec <xTaskCheckForTimeOut+0xc4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d007      	beq.n	8003dae <xTaskCheckForTimeOut+0x86>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d302      	bcc.n	8003dae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003da8:	2301      	movs	r3, #1
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e015      	b.n	8003dda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d20b      	bcs.n	8003dd0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1ad2      	subs	r2, r2, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff99 	bl	8003cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	e004      	b.n	8003dda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003dda:	f000 fe8f 	bl	8004afc <vPortExitCritical>

	return xReturn;
 8003dde:	69fb      	ldr	r3, [r7, #28]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000d88 	.word	0x20000d88
 8003dec:	20000d9c 	.word	0x20000d9c

08003df0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003df4:	4b03      	ldr	r3, [pc, #12]	@ (8003e04 <vTaskMissedYield+0x14>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	20000d98 	.word	0x20000d98

08003e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e10:	f000 f852 	bl	8003eb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e14:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <prvIdleTask+0x28>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d9f9      	bls.n	8003e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e1c:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <prvIdleTask+0x2c>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e2c:	e7f0      	b.n	8003e10 <prvIdleTask+0x8>
 8003e2e:	bf00      	nop
 8003e30:	200008b4 	.word	0x200008b4
 8003e34:	e000ed04 	.word	0xe000ed04

08003e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	e00c      	b.n	8003e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4a12      	ldr	r2, [pc, #72]	@ (8003e98 <prvInitialiseTaskLists+0x60>)
 8003e50:	4413      	add	r3, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fc64 	bl	8002720 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b37      	cmp	r3, #55	@ 0x37
 8003e62:	d9ef      	bls.n	8003e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e64:	480d      	ldr	r0, [pc, #52]	@ (8003e9c <prvInitialiseTaskLists+0x64>)
 8003e66:	f7fe fc5b 	bl	8002720 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e6a:	480d      	ldr	r0, [pc, #52]	@ (8003ea0 <prvInitialiseTaskLists+0x68>)
 8003e6c:	f7fe fc58 	bl	8002720 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e70:	480c      	ldr	r0, [pc, #48]	@ (8003ea4 <prvInitialiseTaskLists+0x6c>)
 8003e72:	f7fe fc55 	bl	8002720 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e76:	480c      	ldr	r0, [pc, #48]	@ (8003ea8 <prvInitialiseTaskLists+0x70>)
 8003e78:	f7fe fc52 	bl	8002720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e7c:	480b      	ldr	r0, [pc, #44]	@ (8003eac <prvInitialiseTaskLists+0x74>)
 8003e7e:	f7fe fc4f 	bl	8002720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e82:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <prvInitialiseTaskLists+0x78>)
 8003e84:	4a05      	ldr	r2, [pc, #20]	@ (8003e9c <prvInitialiseTaskLists+0x64>)
 8003e86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e88:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb4 <prvInitialiseTaskLists+0x7c>)
 8003e8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ea0 <prvInitialiseTaskLists+0x68>)
 8003e8c:	601a      	str	r2, [r3, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	200008b4 	.word	0x200008b4
 8003e9c:	20000d14 	.word	0x20000d14
 8003ea0:	20000d28 	.word	0x20000d28
 8003ea4:	20000d44 	.word	0x20000d44
 8003ea8:	20000d58 	.word	0x20000d58
 8003eac:	20000d70 	.word	0x20000d70
 8003eb0:	20000d3c 	.word	0x20000d3c
 8003eb4:	20000d40 	.word	0x20000d40

08003eb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ebe:	e019      	b.n	8003ef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ec0:	f000 fdea 	bl	8004a98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec4:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <prvCheckTasksWaitingTermination+0x50>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fcaf 	bl	8002834 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f0c <prvCheckTasksWaitingTermination+0x54>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	4a0b      	ldr	r2, [pc, #44]	@ (8003f0c <prvCheckTasksWaitingTermination+0x54>)
 8003ede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <prvCheckTasksWaitingTermination+0x58>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8003f10 <prvCheckTasksWaitingTermination+0x58>)
 8003ee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003eea:	f000 fe07 	bl	8004afc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f810 	bl	8003f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ef4:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <prvCheckTasksWaitingTermination+0x58>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e1      	bne.n	8003ec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000d58 	.word	0x20000d58
 8003f0c:	20000d84 	.word	0x20000d84
 8003f10:	20000d6c 	.word	0x20000d6c

08003f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3354      	adds	r3, #84	@ 0x54
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 f8d1 	bl	80050c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d108      	bne.n	8003f42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 ff9f 	bl	8004e78 <vPortFree>
				vPortFree( pxTCB );
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 ff9c 	bl	8004e78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f40:	e019      	b.n	8003f76 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d103      	bne.n	8003f54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 ff93 	bl	8004e78 <vPortFree>
	}
 8003f52:	e010      	b.n	8003f76 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d00b      	beq.n	8003f76 <prvDeleteTCB+0x62>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	60fb      	str	r3, [r7, #12]
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	e7fd      	b.n	8003f72 <prvDeleteTCB+0x5e>
	}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f86:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb8 <prvResetNextTaskUnblockTime+0x38>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d104      	bne.n	8003f9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	@ (8003fbc <prvResetNextTaskUnblockTime+0x3c>)
 8003f92:	f04f 32ff 	mov.w	r2, #4294967295
 8003f96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f98:	e008      	b.n	8003fac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f9a:	4b07      	ldr	r3, [pc, #28]	@ (8003fb8 <prvResetNextTaskUnblockTime+0x38>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	4a04      	ldr	r2, [pc, #16]	@ (8003fbc <prvResetNextTaskUnblockTime+0x3c>)
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	20000d3c 	.word	0x20000d3c
 8003fbc:	20000da4 	.word	0x20000da4

08003fc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <xTaskGetSchedulerState+0x34>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	e008      	b.n	8003fe6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fd4:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <xTaskGetSchedulerState+0x38>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	e001      	b.n	8003fe6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fe6:	687b      	ldr	r3, [r7, #4]
	}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	20000d90 	.word	0x20000d90
 8003ff8:	20000dac 	.word	0x20000dac

08003ffc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d058      	beq.n	80040c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004012:	4b2f      	ldr	r3, [pc, #188]	@ (80040d0 <xTaskPriorityDisinherit+0xd4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	429a      	cmp	r2, r3
 800401a:	d00b      	beq.n	8004034 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	60fb      	str	r3, [r7, #12]
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	60bb      	str	r3, [r7, #8]
}
 800404e:	bf00      	nop
 8004050:	bf00      	nop
 8004052:	e7fd      	b.n	8004050 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004058:	1e5a      	subs	r2, r3, #1
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004066:	429a      	cmp	r2, r3
 8004068:	d02c      	beq.n	80040c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800406e:	2b00      	cmp	r3, #0
 8004070:	d128      	bne.n	80040c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	3304      	adds	r3, #4
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fbdc 	bl	8002834 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004088:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004094:	4b0f      	ldr	r3, [pc, #60]	@ (80040d4 <xTaskPriorityDisinherit+0xd8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d903      	bls.n	80040a4 <xTaskPriorityDisinherit+0xa8>
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a0:	4a0c      	ldr	r2, [pc, #48]	@ (80040d4 <xTaskPriorityDisinherit+0xd8>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a09      	ldr	r2, [pc, #36]	@ (80040d8 <xTaskPriorityDisinherit+0xdc>)
 80040b2:	441a      	add	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f7fe fb5d 	bl	800277a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040c4:	697b      	ldr	r3, [r7, #20]
	}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200008b0 	.word	0x200008b0
 80040d4:	20000d8c 	.word	0x20000d8c
 80040d8:	200008b4 	.word	0x200008b4

080040dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040e6:	4b21      	ldr	r3, [pc, #132]	@ (800416c <prvAddCurrentTaskToDelayedList+0x90>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ec:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <prvAddCurrentTaskToDelayedList+0x94>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fb9e 	bl	8002834 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d10a      	bne.n	8004116 <prvAddCurrentTaskToDelayedList+0x3a>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004106:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <prvAddCurrentTaskToDelayedList+0x94>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4819      	ldr	r0, [pc, #100]	@ (8004174 <prvAddCurrentTaskToDelayedList+0x98>)
 8004110:	f7fe fb33 	bl	800277a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004114:	e026      	b.n	8004164 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800411e:	4b14      	ldr	r3, [pc, #80]	@ (8004170 <prvAddCurrentTaskToDelayedList+0x94>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	429a      	cmp	r2, r3
 800412c:	d209      	bcs.n	8004142 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800412e:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b0f      	ldr	r3, [pc, #60]	@ (8004170 <prvAddCurrentTaskToDelayedList+0x94>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f7fe fb41 	bl	80027c2 <vListInsert>
}
 8004140:	e010      	b.n	8004164 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004142:	4b0e      	ldr	r3, [pc, #56]	@ (800417c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b0a      	ldr	r3, [pc, #40]	@ (8004170 <prvAddCurrentTaskToDelayedList+0x94>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f7fe fb37 	bl	80027c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004154:	4b0a      	ldr	r3, [pc, #40]	@ (8004180 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	429a      	cmp	r2, r3
 800415c:	d202      	bcs.n	8004164 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800415e:	4a08      	ldr	r2, [pc, #32]	@ (8004180 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	6013      	str	r3, [r2, #0]
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000d88 	.word	0x20000d88
 8004170:	200008b0 	.word	0x200008b0
 8004174:	20000d70 	.word	0x20000d70
 8004178:	20000d40 	.word	0x20000d40
 800417c:	20000d3c 	.word	0x20000d3c
 8004180:	20000da4 	.word	0x20000da4

08004184 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	@ 0x28
 8004188:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800418e:	f000 fb13 	bl	80047b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004192:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <xTimerCreateTimerTask+0x84>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d021      	beq.n	80041de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80041a2:	1d3a      	adds	r2, r7, #4
 80041a4:	f107 0108 	add.w	r1, r7, #8
 80041a8:	f107 030c 	add.w	r3, r7, #12
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fa9d 	bl	80026ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	9202      	str	r2, [sp, #8]
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	2302      	movs	r3, #2
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2300      	movs	r3, #0
 80041c2:	460a      	mov	r2, r1
 80041c4:	4911      	ldr	r1, [pc, #68]	@ (800420c <xTimerCreateTimerTask+0x88>)
 80041c6:	4812      	ldr	r0, [pc, #72]	@ (8004210 <xTimerCreateTimerTask+0x8c>)
 80041c8:	f7ff f858 	bl	800327c <xTaskCreateStatic>
 80041cc:	4603      	mov	r3, r0
 80041ce:	4a11      	ldr	r2, [pc, #68]	@ (8004214 <xTimerCreateTimerTask+0x90>)
 80041d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80041d2:	4b10      	ldr	r3, [pc, #64]	@ (8004214 <xTimerCreateTimerTask+0x90>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80041da:	2301      	movs	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	613b      	str	r3, [r7, #16]
}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	e7fd      	b.n	80041f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80041fc:	697b      	ldr	r3, [r7, #20]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000de0 	.word	0x20000de0
 800420c:	080052cc 	.word	0x080052cc
 8004210:	08004351 	.word	0x08004351
 8004214:	20000de4 	.word	0x20000de4

08004218 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	@ 0x28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004226:	2300      	movs	r3, #0
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10b      	bne.n	8004248 <xTimerGenericCommand+0x30>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	623b      	str	r3, [r7, #32]
}
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004248:	4b19      	ldr	r3, [pc, #100]	@ (80042b0 <xTimerGenericCommand+0x98>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02a      	beq.n	80042a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b05      	cmp	r3, #5
 8004260:	dc18      	bgt.n	8004294 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004262:	f7ff fead 	bl	8003fc0 <xTaskGetSchedulerState>
 8004266:	4603      	mov	r3, r0
 8004268:	2b02      	cmp	r3, #2
 800426a:	d109      	bne.n	8004280 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800426c:	4b10      	ldr	r3, [pc, #64]	@ (80042b0 <xTimerGenericCommand+0x98>)
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	f107 0110 	add.w	r1, r7, #16
 8004274:	2300      	movs	r3, #0
 8004276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004278:	f7fe fc10 	bl	8002a9c <xQueueGenericSend>
 800427c:	6278      	str	r0, [r7, #36]	@ 0x24
 800427e:	e012      	b.n	80042a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004280:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <xTimerGenericCommand+0x98>)
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	f107 0110 	add.w	r1, r7, #16
 8004288:	2300      	movs	r3, #0
 800428a:	2200      	movs	r2, #0
 800428c:	f7fe fc06 	bl	8002a9c <xQueueGenericSend>
 8004290:	6278      	str	r0, [r7, #36]	@ 0x24
 8004292:	e008      	b.n	80042a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004294:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <xTimerGenericCommand+0x98>)
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	f107 0110 	add.w	r1, r7, #16
 800429c:	2300      	movs	r3, #0
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	f7fe fcfe 	bl	8002ca0 <xQueueGenericSendFromISR>
 80042a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3728      	adds	r7, #40	@ 0x28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000de0 	.word	0x20000de0

080042b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042be:	4b23      	ldr	r3, [pc, #140]	@ (800434c <prvProcessExpiredTimer+0x98>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe fab1 	bl	8002834 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d023      	beq.n	8004328 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	18d1      	adds	r1, r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	6978      	ldr	r0, [r7, #20]
 80042ee:	f000 f8d5 	bl	800449c <prvInsertTimerInActiveList>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042f8:	2300      	movs	r3, #0
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2300      	movs	r3, #0
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	2100      	movs	r1, #0
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	f7ff ff88 	bl	8004218 <xTimerGenericCommand>
 8004308:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d114      	bne.n	800433a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800432e:	f023 0301 	bic.w	r3, r3, #1
 8004332:	b2da      	uxtb	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	6978      	ldr	r0, [r7, #20]
 8004340:	4798      	blx	r3
}
 8004342:	bf00      	nop
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000dd8 	.word	0x20000dd8

08004350 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004358:	f107 0308 	add.w	r3, r7, #8
 800435c:	4618      	mov	r0, r3
 800435e:	f000 f859 	bl	8004414 <prvGetNextExpireTime>
 8004362:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4619      	mov	r1, r3
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f805 	bl	8004378 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800436e:	f000 f8d7 	bl	8004520 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004372:	bf00      	nop
 8004374:	e7f0      	b.n	8004358 <prvTimerTask+0x8>
	...

08004378 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004382:	f7ff fa29 	bl	80037d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004386:	f107 0308 	add.w	r3, r7, #8
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f866 	bl	800445c <prvSampleTimeNow>
 8004390:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d130      	bne.n	80043fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <prvProcessTimerOrBlockTask+0x3c>
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d806      	bhi.n	80043b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80043a6:	f7ff fa25 	bl	80037f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043aa:	68f9      	ldr	r1, [r7, #12]
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ff81 	bl	80042b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80043b2:	e024      	b.n	80043fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043ba:	4b13      	ldr	r3, [pc, #76]	@ (8004408 <prvProcessTimerOrBlockTask+0x90>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <prvProcessTimerOrBlockTask+0x50>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <prvProcessTimerOrBlockTask+0x52>
 80043c8:	2300      	movs	r3, #0
 80043ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043cc:	4b0f      	ldr	r3, [pc, #60]	@ (800440c <prvProcessTimerOrBlockTask+0x94>)
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	4619      	mov	r1, r3
 80043da:	f7fe ff1b 	bl	8003214 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80043de:	f7ff fa09 	bl	80037f4 <xTaskResumeAll>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80043e8:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <prvProcessTimerOrBlockTask+0x98>)
 80043ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	f3bf 8f6f 	isb	sy
}
 80043f8:	e001      	b.n	80043fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80043fa:	f7ff f9fb 	bl	80037f4 <xTaskResumeAll>
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000ddc 	.word	0x20000ddc
 800440c:	20000de0 	.word	0x20000de0
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800441c:	4b0e      	ldr	r3, [pc, #56]	@ (8004458 <prvGetNextExpireTime+0x44>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <prvGetNextExpireTime+0x16>
 8004426:	2201      	movs	r2, #1
 8004428:	e000      	b.n	800442c <prvGetNextExpireTime+0x18>
 800442a:	2200      	movs	r2, #0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d105      	bne.n	8004444 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004438:	4b07      	ldr	r3, [pc, #28]	@ (8004458 <prvGetNextExpireTime+0x44>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e001      	b.n	8004448 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004448:	68fb      	ldr	r3, [r7, #12]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000dd8 	.word	0x20000dd8

0800445c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004464:	f7ff fa64 	bl	8003930 <xTaskGetTickCount>
 8004468:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800446a:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <prvSampleTimeNow+0x3c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	429a      	cmp	r2, r3
 8004472:	d205      	bcs.n	8004480 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004474:	f000 f93a 	bl	80046ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e002      	b.n	8004486 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004486:	4a04      	ldr	r2, [pc, #16]	@ (8004498 <prvSampleTimeNow+0x3c>)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800448c:	68fb      	ldr	r3, [r7, #12]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000de8 	.word	0x20000de8

0800449c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d812      	bhi.n	80044e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	1ad2      	subs	r2, r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d302      	bcc.n	80044d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80044d0:	2301      	movs	r3, #1
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e01b      	b.n	800450e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044d6:	4b10      	ldr	r3, [pc, #64]	@ (8004518 <prvInsertTimerInActiveList+0x7c>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3304      	adds	r3, #4
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f7fe f96e 	bl	80027c2 <vListInsert>
 80044e6:	e012      	b.n	800450e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d206      	bcs.n	80044fe <prvInsertTimerInActiveList+0x62>
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d302      	bcc.n	80044fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80044f8:	2301      	movs	r3, #1
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	e007      	b.n	800450e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044fe:	4b07      	ldr	r3, [pc, #28]	@ (800451c <prvInsertTimerInActiveList+0x80>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3304      	adds	r3, #4
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f7fe f95a 	bl	80027c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800450e:	697b      	ldr	r3, [r7, #20]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000ddc 	.word	0x20000ddc
 800451c:	20000dd8 	.word	0x20000dd8

08004520 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08e      	sub	sp, #56	@ 0x38
 8004524:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004526:	e0ce      	b.n	80046c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	da19      	bge.n	8004562 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800452e:	1d3b      	adds	r3, r7, #4
 8004530:	3304      	adds	r3, #4
 8004532:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	61fb      	str	r3, [r7, #28]
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	e7fd      	b.n	800454e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004558:	6850      	ldr	r0, [r2, #4]
 800455a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800455c:	6892      	ldr	r2, [r2, #8]
 800455e:	4611      	mov	r1, r2
 8004560:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f2c0 80ae 	blt.w	80046c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800456e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d004      	beq.n	8004580 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	3304      	adds	r3, #4
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe f95a 	bl	8002834 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004580:	463b      	mov	r3, r7
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff ff6a 	bl	800445c <prvSampleTimeNow>
 8004588:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b09      	cmp	r3, #9
 800458e:	f200 8097 	bhi.w	80046c0 <prvProcessReceivedCommands+0x1a0>
 8004592:	a201      	add	r2, pc, #4	@ (adr r2, 8004598 <prvProcessReceivedCommands+0x78>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045c1 	.word	0x080045c1
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c1 	.word	0x080045c1
 80045a4:	08004637 	.word	0x08004637
 80045a8:	0800464b 	.word	0x0800464b
 80045ac:	08004697 	.word	0x08004697
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045c1 	.word	0x080045c1
 80045b8:	08004637 	.word	0x08004637
 80045bc:	0800464b 	.word	0x0800464b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	18d1      	adds	r1, r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045e0:	f7ff ff5c 	bl	800449c <prvInsertTimerInActiveList>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d06c      	beq.n	80046c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d061      	beq.n	80046c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	441a      	add	r2, r3
 8004608:	2300      	movs	r3, #0
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2300      	movs	r3, #0
 800460e:	2100      	movs	r1, #0
 8004610:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004612:	f7ff fe01 	bl	8004218 <xTimerGenericCommand>
 8004616:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d152      	bne.n	80046c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	61bb      	str	r3, [r7, #24]
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	e7fd      	b.n	8004632 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004638:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	b2da      	uxtb	r2, r3
 8004642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004644:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004648:	e03d      	b.n	80046c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800464a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	b2da      	uxtb	r2, r3
 8004656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004658:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004660:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10b      	bne.n	8004682 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	617b      	str	r3, [r7, #20]
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	e7fd      	b.n	800467e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	18d1      	adds	r1, r2, r3
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004690:	f7ff ff04 	bl	800449c <prvInsertTimerInActiveList>
					break;
 8004694:	e017      	b.n	80046c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d103      	bne.n	80046ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80046a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046a6:	f000 fbe7 	bl	8004e78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80046aa:	e00c      	b.n	80046c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046b2:	f023 0301 	bic.w	r3, r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80046be:	e002      	b.n	80046c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80046c0:	bf00      	nop
 80046c2:	e000      	b.n	80046c6 <prvProcessReceivedCommands+0x1a6>
					break;
 80046c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046c6:	4b08      	ldr	r3, [pc, #32]	@ (80046e8 <prvProcessReceivedCommands+0x1c8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	1d39      	adds	r1, r7, #4
 80046cc:	2200      	movs	r2, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe fb84 	bl	8002ddc <xQueueReceive>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f47f af26 	bne.w	8004528 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	3730      	adds	r7, #48	@ 0x30
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000de0 	.word	0x20000de0

080046ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046f2:	e049      	b.n	8004788 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046f4:	4b2e      	ldr	r3, [pc, #184]	@ (80047b0 <prvSwitchTimerLists+0xc4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fe:	4b2c      	ldr	r3, [pc, #176]	@ (80047b0 <prvSwitchTimerLists+0xc4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3304      	adds	r3, #4
 800470c:	4618      	mov	r0, r3
 800470e:	f7fe f891 	bl	8002834 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d02f      	beq.n	8004788 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	d90e      	bls.n	8004758 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004746:	4b1a      	ldr	r3, [pc, #104]	@ (80047b0 <prvSwitchTimerLists+0xc4>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3304      	adds	r3, #4
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f7fe f836 	bl	80027c2 <vListInsert>
 8004756:	e017      	b.n	8004788 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004758:	2300      	movs	r3, #0
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2300      	movs	r3, #0
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	2100      	movs	r1, #0
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff fd58 	bl	8004218 <xTimerGenericCommand>
 8004768:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	603b      	str	r3, [r7, #0]
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	e7fd      	b.n	8004784 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004788:	4b09      	ldr	r3, [pc, #36]	@ (80047b0 <prvSwitchTimerLists+0xc4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1b0      	bne.n	80046f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004792:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <prvSwitchTimerLists+0xc4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004798:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <prvSwitchTimerLists+0xc8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a04      	ldr	r2, [pc, #16]	@ (80047b0 <prvSwitchTimerLists+0xc4>)
 800479e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80047a0:	4a04      	ldr	r2, [pc, #16]	@ (80047b4 <prvSwitchTimerLists+0xc8>)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6013      	str	r3, [r2, #0]
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000dd8 	.word	0x20000dd8
 80047b4:	20000ddc 	.word	0x20000ddc

080047b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80047be:	f000 f96b 	bl	8004a98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80047c2:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <prvCheckForValidListAndQueue+0x60>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d120      	bne.n	800480c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80047ca:	4814      	ldr	r0, [pc, #80]	@ (800481c <prvCheckForValidListAndQueue+0x64>)
 80047cc:	f7fd ffa8 	bl	8002720 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80047d0:	4813      	ldr	r0, [pc, #76]	@ (8004820 <prvCheckForValidListAndQueue+0x68>)
 80047d2:	f7fd ffa5 	bl	8002720 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80047d6:	4b13      	ldr	r3, [pc, #76]	@ (8004824 <prvCheckForValidListAndQueue+0x6c>)
 80047d8:	4a10      	ldr	r2, [pc, #64]	@ (800481c <prvCheckForValidListAndQueue+0x64>)
 80047da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80047dc:	4b12      	ldr	r3, [pc, #72]	@ (8004828 <prvCheckForValidListAndQueue+0x70>)
 80047de:	4a10      	ldr	r2, [pc, #64]	@ (8004820 <prvCheckForValidListAndQueue+0x68>)
 80047e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80047e2:	2300      	movs	r3, #0
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	4b11      	ldr	r3, [pc, #68]	@ (800482c <prvCheckForValidListAndQueue+0x74>)
 80047e8:	4a11      	ldr	r2, [pc, #68]	@ (8004830 <prvCheckForValidListAndQueue+0x78>)
 80047ea:	2110      	movs	r1, #16
 80047ec:	200a      	movs	r0, #10
 80047ee:	f7fe f8b5 	bl	800295c <xQueueGenericCreateStatic>
 80047f2:	4603      	mov	r3, r0
 80047f4:	4a08      	ldr	r2, [pc, #32]	@ (8004818 <prvCheckForValidListAndQueue+0x60>)
 80047f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80047f8:	4b07      	ldr	r3, [pc, #28]	@ (8004818 <prvCheckForValidListAndQueue+0x60>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004800:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <prvCheckForValidListAndQueue+0x60>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	490b      	ldr	r1, [pc, #44]	@ (8004834 <prvCheckForValidListAndQueue+0x7c>)
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fcda 	bl	80031c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800480c:	f000 f976 	bl	8004afc <vPortExitCritical>
}
 8004810:	bf00      	nop
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000de0 	.word	0x20000de0
 800481c:	20000db0 	.word	0x20000db0
 8004820:	20000dc4 	.word	0x20000dc4
 8004824:	20000dd8 	.word	0x20000dd8
 8004828:	20000ddc 	.word	0x20000ddc
 800482c:	20000e8c 	.word	0x20000e8c
 8004830:	20000dec 	.word	0x20000dec
 8004834:	080052d4 	.word	0x080052d4

08004838 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3b04      	subs	r3, #4
 8004848:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3b04      	subs	r3, #4
 8004856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f023 0201 	bic.w	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3b04      	subs	r3, #4
 8004866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004868:	4a0c      	ldr	r2, [pc, #48]	@ (800489c <pxPortInitialiseStack+0x64>)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3b14      	subs	r3, #20
 8004872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3b04      	subs	r3, #4
 800487e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f06f 0202 	mvn.w	r2, #2
 8004886:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3b20      	subs	r3, #32
 800488c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800488e:	68fb      	ldr	r3, [r7, #12]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	080048a1 	.word	0x080048a1

080048a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048aa:	4b13      	ldr	r3, [pc, #76]	@ (80048f8 <prvTaskExitError+0x58>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d00b      	beq.n	80048cc <prvTaskExitError+0x2c>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	60fb      	str	r3, [r7, #12]
}
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <prvTaskExitError+0x28>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	60bb      	str	r3, [r7, #8]
}
 80048de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048e0:	bf00      	nop
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0fc      	beq.n	80048e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	2000000c 	.word	0x2000000c
 80048fc:	00000000 	.word	0x00000000

08004900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004900:	4b07      	ldr	r3, [pc, #28]	@ (8004920 <pxCurrentTCBConst2>)
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	6808      	ldr	r0, [r1, #0]
 8004906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490a:	f380 8809 	msr	PSP, r0
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f380 8811 	msr	BASEPRI, r0
 800491a:	4770      	bx	lr
 800491c:	f3af 8000 	nop.w

08004920 <pxCurrentTCBConst2>:
 8004920:	200008b0 	.word	0x200008b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop

08004928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004928:	4808      	ldr	r0, [pc, #32]	@ (800494c <prvPortStartFirstTask+0x24>)
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	6800      	ldr	r0, [r0, #0]
 800492e:	f380 8808 	msr	MSP, r0
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f380 8814 	msr	CONTROL, r0
 800493a:	b662      	cpsie	i
 800493c:	b661      	cpsie	f
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	df00      	svc	0
 8004948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800494a:	bf00      	nop
 800494c:	e000ed08 	.word	0xe000ed08

08004950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004956:	4b47      	ldr	r3, [pc, #284]	@ (8004a74 <xPortStartScheduler+0x124>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a47      	ldr	r2, [pc, #284]	@ (8004a78 <xPortStartScheduler+0x128>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d10b      	bne.n	8004978 <xPortStartScheduler+0x28>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	613b      	str	r3, [r7, #16]
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004978:	4b3e      	ldr	r3, [pc, #248]	@ (8004a74 <xPortStartScheduler+0x124>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a7c <xPortStartScheduler+0x12c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d10b      	bne.n	800499a <xPortStartScheduler+0x4a>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	60fb      	str	r3, [r7, #12]
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	e7fd      	b.n	8004996 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800499a:	4b39      	ldr	r3, [pc, #228]	@ (8004a80 <xPortStartScheduler+0x130>)
 800499c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	22ff      	movs	r2, #255	@ 0xff
 80049aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	4b31      	ldr	r3, [pc, #196]	@ (8004a84 <xPortStartScheduler+0x134>)
 80049c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049c2:	4b31      	ldr	r3, [pc, #196]	@ (8004a88 <xPortStartScheduler+0x138>)
 80049c4:	2207      	movs	r2, #7
 80049c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049c8:	e009      	b.n	80049de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80049ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004a88 <xPortStartScheduler+0x138>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a88 <xPortStartScheduler+0x138>)
 80049d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e6:	2b80      	cmp	r3, #128	@ 0x80
 80049e8:	d0ef      	beq.n	80049ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049ea:	4b27      	ldr	r3, [pc, #156]	@ (8004a88 <xPortStartScheduler+0x138>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1c3 0307 	rsb	r3, r3, #7
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d00b      	beq.n	8004a0e <xPortStartScheduler+0xbe>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	60bb      	str	r3, [r7, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004a88 <xPortStartScheduler+0x138>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	4a1c      	ldr	r2, [pc, #112]	@ (8004a88 <xPortStartScheduler+0x138>)
 8004a16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a18:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <xPortStartScheduler+0x138>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a20:	4a19      	ldr	r2, [pc, #100]	@ (8004a88 <xPortStartScheduler+0x138>)
 8004a22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a2c:	4b17      	ldr	r3, [pc, #92]	@ (8004a8c <xPortStartScheduler+0x13c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a16      	ldr	r2, [pc, #88]	@ (8004a8c <xPortStartScheduler+0x13c>)
 8004a32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a38:	4b14      	ldr	r3, [pc, #80]	@ (8004a8c <xPortStartScheduler+0x13c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a13      	ldr	r2, [pc, #76]	@ (8004a8c <xPortStartScheduler+0x13c>)
 8004a3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004a42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a44:	f000 f8da 	bl	8004bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a48:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <xPortStartScheduler+0x140>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a4e:	f000 f8f9 	bl	8004c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a52:	4b10      	ldr	r3, [pc, #64]	@ (8004a94 <xPortStartScheduler+0x144>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a0f      	ldr	r2, [pc, #60]	@ (8004a94 <xPortStartScheduler+0x144>)
 8004a58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004a5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a5e:	f7ff ff63 	bl	8004928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a62:	f7ff f82f 	bl	8003ac4 <vTaskSwitchContext>
	prvTaskExitError();
 8004a66:	f7ff ff1b 	bl	80048a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	e000ed00 	.word	0xe000ed00
 8004a78:	410fc271 	.word	0x410fc271
 8004a7c:	410fc270 	.word	0x410fc270
 8004a80:	e000e400 	.word	0xe000e400
 8004a84:	20000edc 	.word	0x20000edc
 8004a88:	20000ee0 	.word	0x20000ee0
 8004a8c:	e000ed20 	.word	0xe000ed20
 8004a90:	2000000c 	.word	0x2000000c
 8004a94:	e000ef34 	.word	0xe000ef34

08004a98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	607b      	str	r3, [r7, #4]
}
 8004ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ab2:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <vPortEnterCritical+0x5c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8004af4 <vPortEnterCritical+0x5c>)
 8004aba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004abc:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <vPortEnterCritical+0x5c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d110      	bne.n	8004ae6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <vPortEnterCritical+0x60>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	603b      	str	r3, [r7, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	e7fd      	b.n	8004ae2 <vPortEnterCritical+0x4a>
	}
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	2000000c 	.word	0x2000000c
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b02:	4b12      	ldr	r3, [pc, #72]	@ (8004b4c <vPortExitCritical+0x50>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <vPortExitCritical+0x26>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	607b      	str	r3, [r7, #4]
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b22:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <vPortExitCritical+0x50>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	4a08      	ldr	r2, [pc, #32]	@ (8004b4c <vPortExitCritical+0x50>)
 8004b2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b2c:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <vPortExitCritical+0x50>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <vPortExitCritical+0x44>
 8004b34:	2300      	movs	r3, #0
 8004b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f383 8811 	msr	BASEPRI, r3
}
 8004b3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	2000000c 	.word	0x2000000c

08004b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b50:	f3ef 8009 	mrs	r0, PSP
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	4b15      	ldr	r3, [pc, #84]	@ (8004bb0 <pxCurrentTCBConst>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	f01e 0f10 	tst.w	lr, #16
 8004b60:	bf08      	it	eq
 8004b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6a:	6010      	str	r0, [r2, #0]
 8004b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004b74:	f380 8811 	msr	BASEPRI, r0
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f7fe ffa0 	bl	8003ac4 <vTaskSwitchContext>
 8004b84:	f04f 0000 	mov.w	r0, #0
 8004b88:	f380 8811 	msr	BASEPRI, r0
 8004b8c:	bc09      	pop	{r0, r3}
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	6808      	ldr	r0, [r1, #0]
 8004b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b96:	f01e 0f10 	tst.w	lr, #16
 8004b9a:	bf08      	it	eq
 8004b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ba0:	f380 8809 	msr	PSP, r0
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	f3af 8000 	nop.w

08004bb0 <pxCurrentTCBConst>:
 8004bb0:	200008b0 	.word	0x200008b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop

08004bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	607b      	str	r3, [r7, #4]
}
 8004bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bd2:	f7fe febd 	bl	8003950 <xTaskIncrementTick>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <xPortSysTickHandler+0x40>)
 8004bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	2300      	movs	r3, #0
 8004be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f383 8811 	msr	BASEPRI, r3
}
 8004bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c00:	4b0b      	ldr	r3, [pc, #44]	@ (8004c30 <vPortSetupTimerInterrupt+0x34>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c06:	4b0b      	ldr	r3, [pc, #44]	@ (8004c34 <vPortSetupTimerInterrupt+0x38>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <vPortSetupTimerInterrupt+0x3c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0a      	ldr	r2, [pc, #40]	@ (8004c3c <vPortSetupTimerInterrupt+0x40>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	4a09      	ldr	r2, [pc, #36]	@ (8004c40 <vPortSetupTimerInterrupt+0x44>)
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c1e:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <vPortSetupTimerInterrupt+0x34>)
 8004c20:	2207      	movs	r2, #7
 8004c22:	601a      	str	r2, [r3, #0]
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	e000e010 	.word	0xe000e010
 8004c34:	e000e018 	.word	0xe000e018
 8004c38:	20000000 	.word	0x20000000
 8004c3c:	10624dd3 	.word	0x10624dd3
 8004c40:	e000e014 	.word	0xe000e014

08004c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004c54 <vPortEnableVFP+0x10>
 8004c48:	6801      	ldr	r1, [r0, #0]
 8004c4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004c4e:	6001      	str	r1, [r0, #0]
 8004c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c52:	bf00      	nop
 8004c54:	e000ed88 	.word	0xe000ed88

08004c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c5e:	f3ef 8305 	mrs	r3, IPSR
 8004c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	d915      	bls.n	8004c96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c6a:	4a18      	ldr	r2, [pc, #96]	@ (8004ccc <vPortValidateInterruptPriority+0x74>)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c74:	4b16      	ldr	r3, [pc, #88]	@ (8004cd0 <vPortValidateInterruptPriority+0x78>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	7afa      	ldrb	r2, [r7, #11]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d20b      	bcs.n	8004c96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	607b      	str	r3, [r7, #4]
}
 8004c90:	bf00      	nop
 8004c92:	bf00      	nop
 8004c94:	e7fd      	b.n	8004c92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c96:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd4 <vPortValidateInterruptPriority+0x7c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004cd8 <vPortValidateInterruptPriority+0x80>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d90b      	bls.n	8004cbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	603b      	str	r3, [r7, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <vPortValidateInterruptPriority+0x62>
	}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	e000e3f0 	.word	0xe000e3f0
 8004cd0:	20000edc 	.word	0x20000edc
 8004cd4:	e000ed0c 	.word	0xe000ed0c
 8004cd8:	20000ee0 	.word	0x20000ee0

08004cdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08a      	sub	sp, #40	@ 0x28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ce8:	f7fe fd76 	bl	80037d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cec:	4b5c      	ldr	r3, [pc, #368]	@ (8004e60 <pvPortMalloc+0x184>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cf4:	f000 f924 	bl	8004f40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cf8:	4b5a      	ldr	r3, [pc, #360]	@ (8004e64 <pvPortMalloc+0x188>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f040 8095 	bne.w	8004e30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01e      	beq.n	8004d4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4413      	add	r3, r2
 8004d12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d015      	beq.n	8004d4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f023 0307 	bic.w	r3, r3, #7
 8004d24:	3308      	adds	r3, #8
 8004d26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00b      	beq.n	8004d4a <pvPortMalloc+0x6e>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	617b      	str	r3, [r7, #20]
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	e7fd      	b.n	8004d46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d06f      	beq.n	8004e30 <pvPortMalloc+0x154>
 8004d50:	4b45      	ldr	r3, [pc, #276]	@ (8004e68 <pvPortMalloc+0x18c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d86a      	bhi.n	8004e30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d5a:	4b44      	ldr	r3, [pc, #272]	@ (8004e6c <pvPortMalloc+0x190>)
 8004d5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d5e:	4b43      	ldr	r3, [pc, #268]	@ (8004e6c <pvPortMalloc+0x190>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d64:	e004      	b.n	8004d70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d903      	bls.n	8004d82 <pvPortMalloc+0xa6>
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f1      	bne.n	8004d66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d82:	4b37      	ldr	r3, [pc, #220]	@ (8004e60 <pvPortMalloc+0x184>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d051      	beq.n	8004e30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2208      	movs	r2, #8
 8004d92:	4413      	add	r3, r2
 8004d94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	1ad2      	subs	r2, r2, r3
 8004da6:	2308      	movs	r3, #8
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d920      	bls.n	8004df0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4413      	add	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00b      	beq.n	8004dd8 <pvPortMalloc+0xfc>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	613b      	str	r3, [r7, #16]
}
 8004dd2:	bf00      	nop
 8004dd4:	bf00      	nop
 8004dd6:	e7fd      	b.n	8004dd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	1ad2      	subs	r2, r2, r3
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dea:	69b8      	ldr	r0, [r7, #24]
 8004dec:	f000 f90a 	bl	8005004 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004df0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e68 <pvPortMalloc+0x18c>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8004e68 <pvPortMalloc+0x18c>)
 8004dfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8004e68 <pvPortMalloc+0x18c>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <pvPortMalloc+0x194>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d203      	bcs.n	8004e12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e0a:	4b17      	ldr	r3, [pc, #92]	@ (8004e68 <pvPortMalloc+0x18c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a18      	ldr	r2, [pc, #96]	@ (8004e70 <pvPortMalloc+0x194>)
 8004e10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	4b13      	ldr	r3, [pc, #76]	@ (8004e64 <pvPortMalloc+0x188>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e26:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <pvPortMalloc+0x198>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	4a11      	ldr	r2, [pc, #68]	@ (8004e74 <pvPortMalloc+0x198>)
 8004e2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e30:	f7fe fce0 	bl	80037f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <pvPortMalloc+0x17a>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	60fb      	str	r3, [r7, #12]
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	e7fd      	b.n	8004e52 <pvPortMalloc+0x176>
	return pvReturn;
 8004e56:	69fb      	ldr	r3, [r7, #28]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3728      	adds	r7, #40	@ 0x28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20004aec 	.word	0x20004aec
 8004e64:	20004b00 	.word	0x20004b00
 8004e68:	20004af0 	.word	0x20004af0
 8004e6c:	20004ae4 	.word	0x20004ae4
 8004e70:	20004af4 	.word	0x20004af4
 8004e74:	20004af8 	.word	0x20004af8

08004e78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d04f      	beq.n	8004f2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	425b      	negs	r3, r3
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4413      	add	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	4b25      	ldr	r3, [pc, #148]	@ (8004f34 <vPortFree+0xbc>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10b      	bne.n	8004ebe <vPortFree+0x46>
	__asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	60fb      	str	r3, [r7, #12]
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	e7fd      	b.n	8004eba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <vPortFree+0x66>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	60bb      	str	r3, [r7, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	e7fd      	b.n	8004eda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	4b14      	ldr	r3, [pc, #80]	@ (8004f34 <vPortFree+0xbc>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01e      	beq.n	8004f2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d11a      	bne.n	8004f2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f34 <vPortFree+0xbc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	401a      	ands	r2, r3
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f04:	f7fe fc68 	bl	80037d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <vPortFree+0xc0>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4413      	add	r3, r2
 8004f12:	4a09      	ldr	r2, [pc, #36]	@ (8004f38 <vPortFree+0xc0>)
 8004f14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f16:	6938      	ldr	r0, [r7, #16]
 8004f18:	f000 f874 	bl	8005004 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f1c:	4b07      	ldr	r3, [pc, #28]	@ (8004f3c <vPortFree+0xc4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	4a06      	ldr	r2, [pc, #24]	@ (8004f3c <vPortFree+0xc4>)
 8004f24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f26:	f7fe fc65 	bl	80037f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f2a:	bf00      	nop
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20004b00 	.word	0x20004b00
 8004f38:	20004af0 	.word	0x20004af0
 8004f3c:	20004afc 	.word	0x20004afc

08004f40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004f4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f4c:	4b27      	ldr	r3, [pc, #156]	@ (8004fec <prvHeapInit+0xac>)
 8004f4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00c      	beq.n	8004f74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3307      	adds	r3, #7
 8004f5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0307 	bic.w	r3, r3, #7
 8004f66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fec <prvHeapInit+0xac>)
 8004f70:	4413      	add	r3, r2
 8004f72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f78:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff0 <prvHeapInit+0xb0>)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ff0 <prvHeapInit+0xb0>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	4413      	add	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0307 	bic.w	r3, r3, #7
 8004f9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4a15      	ldr	r2, [pc, #84]	@ (8004ff4 <prvHeapInit+0xb4>)
 8004fa0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fa2:	4b14      	ldr	r3, [pc, #80]	@ (8004ff4 <prvHeapInit+0xb4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004faa:	4b12      	ldr	r3, [pc, #72]	@ (8004ff4 <prvHeapInit+0xb4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	1ad2      	subs	r2, r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <prvHeapInit+0xb4>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff8 <prvHeapInit+0xb8>)
 8004fce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a09      	ldr	r2, [pc, #36]	@ (8004ffc <prvHeapInit+0xbc>)
 8004fd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fd8:	4b09      	ldr	r3, [pc, #36]	@ (8005000 <prvHeapInit+0xc0>)
 8004fda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004fde:	601a      	str	r2, [r3, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	20000ee4 	.word	0x20000ee4
 8004ff0:	20004ae4 	.word	0x20004ae4
 8004ff4:	20004aec 	.word	0x20004aec
 8004ff8:	20004af4 	.word	0x20004af4
 8004ffc:	20004af0 	.word	0x20004af0
 8005000:	20004b00 	.word	0x20004b00

08005004 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800500c:	4b28      	ldr	r3, [pc, #160]	@ (80050b0 <prvInsertBlockIntoFreeList+0xac>)
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e002      	b.n	8005018 <prvInsertBlockIntoFreeList+0x14>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d8f7      	bhi.n	8005012 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	4413      	add	r3, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d108      	bne.n	8005046 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	441a      	add	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	441a      	add	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d118      	bne.n	800508c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4b15      	ldr	r3, [pc, #84]	@ (80050b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d00d      	beq.n	8005082 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	441a      	add	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	e008      	b.n	8005094 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005082:	4b0c      	ldr	r3, [pc, #48]	@ (80050b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	e003      	b.n	8005094 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	d002      	beq.n	80050a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20004ae4 	.word	0x20004ae4
 80050b4:	20004aec 	.word	0x20004aec

080050b8 <memset>:
 80050b8:	4402      	add	r2, r0
 80050ba:	4603      	mov	r3, r0
 80050bc:	4293      	cmp	r3, r2
 80050be:	d100      	bne.n	80050c2 <memset+0xa>
 80050c0:	4770      	bx	lr
 80050c2:	f803 1b01 	strb.w	r1, [r3], #1
 80050c6:	e7f9      	b.n	80050bc <memset+0x4>

080050c8 <_reclaim_reent>:
 80050c8:	4b29      	ldr	r3, [pc, #164]	@ (8005170 <_reclaim_reent+0xa8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4283      	cmp	r3, r0
 80050ce:	b570      	push	{r4, r5, r6, lr}
 80050d0:	4604      	mov	r4, r0
 80050d2:	d04b      	beq.n	800516c <_reclaim_reent+0xa4>
 80050d4:	69c3      	ldr	r3, [r0, #28]
 80050d6:	b1ab      	cbz	r3, 8005104 <_reclaim_reent+0x3c>
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	b16b      	cbz	r3, 80050f8 <_reclaim_reent+0x30>
 80050dc:	2500      	movs	r5, #0
 80050de:	69e3      	ldr	r3, [r4, #28]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	5959      	ldr	r1, [r3, r5]
 80050e4:	2900      	cmp	r1, #0
 80050e6:	d13b      	bne.n	8005160 <_reclaim_reent+0x98>
 80050e8:	3504      	adds	r5, #4
 80050ea:	2d80      	cmp	r5, #128	@ 0x80
 80050ec:	d1f7      	bne.n	80050de <_reclaim_reent+0x16>
 80050ee:	69e3      	ldr	r3, [r4, #28]
 80050f0:	4620      	mov	r0, r4
 80050f2:	68d9      	ldr	r1, [r3, #12]
 80050f4:	f000 f872 	bl	80051dc <_free_r>
 80050f8:	69e3      	ldr	r3, [r4, #28]
 80050fa:	6819      	ldr	r1, [r3, #0]
 80050fc:	b111      	cbz	r1, 8005104 <_reclaim_reent+0x3c>
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 f86c 	bl	80051dc <_free_r>
 8005104:	6961      	ldr	r1, [r4, #20]
 8005106:	b111      	cbz	r1, 800510e <_reclaim_reent+0x46>
 8005108:	4620      	mov	r0, r4
 800510a:	f000 f867 	bl	80051dc <_free_r>
 800510e:	69e1      	ldr	r1, [r4, #28]
 8005110:	b111      	cbz	r1, 8005118 <_reclaim_reent+0x50>
 8005112:	4620      	mov	r0, r4
 8005114:	f000 f862 	bl	80051dc <_free_r>
 8005118:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800511a:	b111      	cbz	r1, 8005122 <_reclaim_reent+0x5a>
 800511c:	4620      	mov	r0, r4
 800511e:	f000 f85d 	bl	80051dc <_free_r>
 8005122:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005124:	b111      	cbz	r1, 800512c <_reclaim_reent+0x64>
 8005126:	4620      	mov	r0, r4
 8005128:	f000 f858 	bl	80051dc <_free_r>
 800512c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800512e:	b111      	cbz	r1, 8005136 <_reclaim_reent+0x6e>
 8005130:	4620      	mov	r0, r4
 8005132:	f000 f853 	bl	80051dc <_free_r>
 8005136:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005138:	b111      	cbz	r1, 8005140 <_reclaim_reent+0x78>
 800513a:	4620      	mov	r0, r4
 800513c:	f000 f84e 	bl	80051dc <_free_r>
 8005140:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005142:	b111      	cbz	r1, 800514a <_reclaim_reent+0x82>
 8005144:	4620      	mov	r0, r4
 8005146:	f000 f849 	bl	80051dc <_free_r>
 800514a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800514c:	b111      	cbz	r1, 8005154 <_reclaim_reent+0x8c>
 800514e:	4620      	mov	r0, r4
 8005150:	f000 f844 	bl	80051dc <_free_r>
 8005154:	6a23      	ldr	r3, [r4, #32]
 8005156:	b14b      	cbz	r3, 800516c <_reclaim_reent+0xa4>
 8005158:	4620      	mov	r0, r4
 800515a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800515e:	4718      	bx	r3
 8005160:	680e      	ldr	r6, [r1, #0]
 8005162:	4620      	mov	r0, r4
 8005164:	f000 f83a 	bl	80051dc <_free_r>
 8005168:	4631      	mov	r1, r6
 800516a:	e7bb      	b.n	80050e4 <_reclaim_reent+0x1c>
 800516c:	bd70      	pop	{r4, r5, r6, pc}
 800516e:	bf00      	nop
 8005170:	20000010 	.word	0x20000010

08005174 <__libc_init_array>:
 8005174:	b570      	push	{r4, r5, r6, lr}
 8005176:	4d0d      	ldr	r5, [pc, #52]	@ (80051ac <__libc_init_array+0x38>)
 8005178:	4c0d      	ldr	r4, [pc, #52]	@ (80051b0 <__libc_init_array+0x3c>)
 800517a:	1b64      	subs	r4, r4, r5
 800517c:	10a4      	asrs	r4, r4, #2
 800517e:	2600      	movs	r6, #0
 8005180:	42a6      	cmp	r6, r4
 8005182:	d109      	bne.n	8005198 <__libc_init_array+0x24>
 8005184:	4d0b      	ldr	r5, [pc, #44]	@ (80051b4 <__libc_init_array+0x40>)
 8005186:	4c0c      	ldr	r4, [pc, #48]	@ (80051b8 <__libc_init_array+0x44>)
 8005188:	f000 f87e 	bl	8005288 <_init>
 800518c:	1b64      	subs	r4, r4, r5
 800518e:	10a4      	asrs	r4, r4, #2
 8005190:	2600      	movs	r6, #0
 8005192:	42a6      	cmp	r6, r4
 8005194:	d105      	bne.n	80051a2 <__libc_init_array+0x2e>
 8005196:	bd70      	pop	{r4, r5, r6, pc}
 8005198:	f855 3b04 	ldr.w	r3, [r5], #4
 800519c:	4798      	blx	r3
 800519e:	3601      	adds	r6, #1
 80051a0:	e7ee      	b.n	8005180 <__libc_init_array+0xc>
 80051a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a6:	4798      	blx	r3
 80051a8:	3601      	adds	r6, #1
 80051aa:	e7f2      	b.n	8005192 <__libc_init_array+0x1e>
 80051ac:	08005368 	.word	0x08005368
 80051b0:	08005368 	.word	0x08005368
 80051b4:	08005368 	.word	0x08005368
 80051b8:	0800536c 	.word	0x0800536c

080051bc <__retarget_lock_acquire_recursive>:
 80051bc:	4770      	bx	lr

080051be <__retarget_lock_release_recursive>:
 80051be:	4770      	bx	lr

080051c0 <memcpy>:
 80051c0:	440a      	add	r2, r1
 80051c2:	4291      	cmp	r1, r2
 80051c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051c8:	d100      	bne.n	80051cc <memcpy+0xc>
 80051ca:	4770      	bx	lr
 80051cc:	b510      	push	{r4, lr}
 80051ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051d6:	4291      	cmp	r1, r2
 80051d8:	d1f9      	bne.n	80051ce <memcpy+0xe>
 80051da:	bd10      	pop	{r4, pc}

080051dc <_free_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	4605      	mov	r5, r0
 80051e0:	2900      	cmp	r1, #0
 80051e2:	d041      	beq.n	8005268 <_free_r+0x8c>
 80051e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051e8:	1f0c      	subs	r4, r1, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bfb8      	it	lt
 80051ee:	18e4      	addlt	r4, r4, r3
 80051f0:	f000 f83e 	bl	8005270 <__malloc_lock>
 80051f4:	4a1d      	ldr	r2, [pc, #116]	@ (800526c <_free_r+0x90>)
 80051f6:	6813      	ldr	r3, [r2, #0]
 80051f8:	b933      	cbnz	r3, 8005208 <_free_r+0x2c>
 80051fa:	6063      	str	r3, [r4, #4]
 80051fc:	6014      	str	r4, [r2, #0]
 80051fe:	4628      	mov	r0, r5
 8005200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005204:	f000 b83a 	b.w	800527c <__malloc_unlock>
 8005208:	42a3      	cmp	r3, r4
 800520a:	d908      	bls.n	800521e <_free_r+0x42>
 800520c:	6820      	ldr	r0, [r4, #0]
 800520e:	1821      	adds	r1, r4, r0
 8005210:	428b      	cmp	r3, r1
 8005212:	bf01      	itttt	eq
 8005214:	6819      	ldreq	r1, [r3, #0]
 8005216:	685b      	ldreq	r3, [r3, #4]
 8005218:	1809      	addeq	r1, r1, r0
 800521a:	6021      	streq	r1, [r4, #0]
 800521c:	e7ed      	b.n	80051fa <_free_r+0x1e>
 800521e:	461a      	mov	r2, r3
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	b10b      	cbz	r3, 8005228 <_free_r+0x4c>
 8005224:	42a3      	cmp	r3, r4
 8005226:	d9fa      	bls.n	800521e <_free_r+0x42>
 8005228:	6811      	ldr	r1, [r2, #0]
 800522a:	1850      	adds	r0, r2, r1
 800522c:	42a0      	cmp	r0, r4
 800522e:	d10b      	bne.n	8005248 <_free_r+0x6c>
 8005230:	6820      	ldr	r0, [r4, #0]
 8005232:	4401      	add	r1, r0
 8005234:	1850      	adds	r0, r2, r1
 8005236:	4283      	cmp	r3, r0
 8005238:	6011      	str	r1, [r2, #0]
 800523a:	d1e0      	bne.n	80051fe <_free_r+0x22>
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	6053      	str	r3, [r2, #4]
 8005242:	4408      	add	r0, r1
 8005244:	6010      	str	r0, [r2, #0]
 8005246:	e7da      	b.n	80051fe <_free_r+0x22>
 8005248:	d902      	bls.n	8005250 <_free_r+0x74>
 800524a:	230c      	movs	r3, #12
 800524c:	602b      	str	r3, [r5, #0]
 800524e:	e7d6      	b.n	80051fe <_free_r+0x22>
 8005250:	6820      	ldr	r0, [r4, #0]
 8005252:	1821      	adds	r1, r4, r0
 8005254:	428b      	cmp	r3, r1
 8005256:	bf04      	itt	eq
 8005258:	6819      	ldreq	r1, [r3, #0]
 800525a:	685b      	ldreq	r3, [r3, #4]
 800525c:	6063      	str	r3, [r4, #4]
 800525e:	bf04      	itt	eq
 8005260:	1809      	addeq	r1, r1, r0
 8005262:	6021      	streq	r1, [r4, #0]
 8005264:	6054      	str	r4, [r2, #4]
 8005266:	e7ca      	b.n	80051fe <_free_r+0x22>
 8005268:	bd38      	pop	{r3, r4, r5, pc}
 800526a:	bf00      	nop
 800526c:	20004c40 	.word	0x20004c40

08005270 <__malloc_lock>:
 8005270:	4801      	ldr	r0, [pc, #4]	@ (8005278 <__malloc_lock+0x8>)
 8005272:	f7ff bfa3 	b.w	80051bc <__retarget_lock_acquire_recursive>
 8005276:	bf00      	nop
 8005278:	20004c3c 	.word	0x20004c3c

0800527c <__malloc_unlock>:
 800527c:	4801      	ldr	r0, [pc, #4]	@ (8005284 <__malloc_unlock+0x8>)
 800527e:	f7ff bf9e 	b.w	80051be <__retarget_lock_release_recursive>
 8005282:	bf00      	nop
 8005284:	20004c3c 	.word	0x20004c3c

08005288 <_init>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	bf00      	nop
 800528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528e:	bc08      	pop	{r3}
 8005290:	469e      	mov	lr, r3
 8005292:	4770      	bx	lr

08005294 <_fini>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	bf00      	nop
 8005298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529a:	bc08      	pop	{r3}
 800529c:	469e      	mov	lr, r3
 800529e:	4770      	bx	lr
