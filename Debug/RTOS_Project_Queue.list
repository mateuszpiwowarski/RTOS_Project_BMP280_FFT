
RTOS_Project_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f20c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  0800f3b0  0800f3b0  000103b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc20  0800fc20  000111dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc20  0800fc20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc28  0800fc28  000111dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc28  0800fc28  00010c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fc2c  0800fc2c  00010c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800fc30  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000506c  200001dc  0800fe0c  000111dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005248  0800fe0c  00011248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9e4  00000000  00000000  0001120c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044ee  00000000  00000000  0002fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  000340e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001432  00000000  00000000  00035ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b289  00000000  00000000  00036f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f7d5  00000000  00000000  00052193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eb99  00000000  00000000  00071968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110501  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008248  00000000  00000000  00110544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0011878c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f394 	.word	0x0800f394

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800f394 	.word	0x0800f394

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <GFX_SetFont+0x1c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200001f8 	.word	0x200001f8

08001014 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af02      	add	r7, sp, #8
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	4611      	mov	r1, r2
 8001020:	461a      	mov	r2, r3
 8001022:	460b      	mov	r3, r1
 8001024:	71fb      	strb	r3, [r7, #7]
 8001026:	4613      	mov	r3, r2
 8001028:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b7e      	cmp	r3, #126	@ 0x7e
 800102e:	f200 80a3 	bhi.w	8001178 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001032:	2300      	movs	r3, #0
 8001034:	75fb      	strb	r3, [r7, #23]
 8001036:	e096      	b.n	8001166 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8001038:	4b51      	ldr	r3, [pc, #324]	@ (8001180 <GFX_DrawChar+0x16c>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	3b20      	subs	r3, #32
 8001040:	494f      	ldr	r1, [pc, #316]	@ (8001180 <GFX_DrawChar+0x16c>)
 8001042:	6809      	ldr	r1, [r1, #0]
 8001044:	3101      	adds	r1, #1
 8001046:	7809      	ldrb	r1, [r1, #0]
 8001048:	fb03 f101 	mul.w	r1, r3, r1
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	440b      	add	r3, r1
 8001050:	3302      	adds	r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001058:	2300      	movs	r3, #0
 800105a:	757b      	strb	r3, [r7, #21]
 800105c:	e078      	b.n	8001150 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 800105e:	7dbb      	ldrb	r3, [r7, #22]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d032      	beq.n	80010ce <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001068:	4b46      	ldr	r3, [pc, #280]	@ (8001184 <GFX_DrawChar+0x170>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d113      	bne.n	8001098 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	b29a      	uxth	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	b29b      	uxth	r3, r3
 8001078:	4413      	add	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	b218      	sxth	r0, r3
 800107e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001082:	b29a      	uxth	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	b29b      	uxth	r3, r3
 8001088:	4413      	add	r3, r2
 800108a:	b29b      	uxth	r3, r3
 800108c:	b21b      	sxth	r3, r3
 800108e:	79ba      	ldrb	r2, [r7, #6]
 8001090:	4619      	mov	r1, r3
 8001092:	f000 f9d3 	bl	800143c <SSD1306_DrawPixel>
 8001096:	e052      	b.n	800113e <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	4a3a      	ldr	r2, [pc, #232]	@ (8001184 <GFX_DrawChar+0x170>)
 800109c:	7812      	ldrb	r2, [r2, #0]
 800109e:	fb03 f202 	mul.w	r2, r3, r2
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	18d0      	adds	r0, r2, r3
 80010a6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010aa:	4a36      	ldr	r2, [pc, #216]	@ (8001184 <GFX_DrawChar+0x170>)
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	fb03 f202 	mul.w	r2, r3, r2
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	18d1      	adds	r1, r2, r3
 80010b6:	4b33      	ldr	r3, [pc, #204]	@ (8001184 <GFX_DrawChar+0x170>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b31      	ldr	r3, [pc, #196]	@ (8001184 <GFX_DrawChar+0x170>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461c      	mov	r4, r3
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	4623      	mov	r3, r4
 80010c8:	f000 f960 	bl	800138c <GFX_DrawFillRectangle>
 80010cc:	e037      	b.n	800113e <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 80010ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d133      	bne.n	800113e <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 80010d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001184 <GFX_DrawChar+0x170>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d114      	bne.n	8001108 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	b218      	sxth	r0, r3
 80010ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001100:	4619      	mov	r1, r3
 8001102:	f000 f99b 	bl	800143c <SSD1306_DrawPixel>
 8001106:	e01a      	b.n	800113e <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	4a1e      	ldr	r2, [pc, #120]	@ (8001184 <GFX_DrawChar+0x170>)
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	fb03 f202 	mul.w	r2, r3, r2
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	18d0      	adds	r0, r2, r3
 8001116:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800111a:	4a1a      	ldr	r2, [pc, #104]	@ (8001184 <GFX_DrawChar+0x170>)
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	fb03 f202 	mul.w	r2, r3, r2
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	18d1      	adds	r1, r2, r3
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <GFX_DrawChar+0x170>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <GFX_DrawChar+0x170>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461c      	mov	r4, r3
 8001132:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	4623      	mov	r3, r4
 800113a:	f000 f927 	bl	800138c <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800113e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	3301      	adds	r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	757b      	strb	r3, [r7, #21]
 800114a:	7dbb      	ldrb	r3, [r7, #22]
 800114c:	085b      	lsrs	r3, r3, #1
 800114e:	75bb      	strb	r3, [r7, #22]
 8001150:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001154:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <GFX_DrawChar+0x16c>)
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	7812      	ldrb	r2, [r2, #0]
 800115a:	4293      	cmp	r3, r2
 800115c:	f6ff af7f 	blt.w	800105e <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	3301      	adds	r3, #1
 8001164:	75fb      	strb	r3, [r7, #23]
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <GFX_DrawChar+0x16c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	7dfa      	ldrb	r2, [r7, #23]
 8001170:	429a      	cmp	r2, r3
 8001172:	f4ff af61 	bcc.w	8001038 <GFX_DrawChar+0x24>
 8001176:	e000      	b.n	800117a <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001178:	bf00      	nop
            }
        }
    }
}
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	200001f8 	.word	0x200001f8
 8001184:	20000000 	.word	0x20000000

08001188 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af02      	add	r7, sp, #8
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80011a0:	e03e      	b.n	8001220 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 80011a2:	78f9      	ldrb	r1, [r7, #3]
 80011a4:	7cfa      	ldrb	r2, [r7, #19]
 80011a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	460b      	mov	r3, r1
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	6978      	ldr	r0, [r7, #20]
 80011b2:	f7ff ff2f 	bl	8001014 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80011b6:	4b20      	ldr	r3, [pc, #128]	@ (8001238 <GFX_DrawString+0xb0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <GFX_DrawString+0xb4>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	fb02 f303 	mul.w	r3, r2, r3
 80011c8:	3301      	adds	r3, #1
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4413      	add	r3, r2
 80011ce:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 80011d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d120      	bne.n	800121a <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 80011d8:	2300      	movs	r3, #0
 80011da:	74bb      	strb	r3, [r7, #18]
 80011dc:	e012      	b.n	8001204 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	3b01      	subs	r3, #1
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	b218      	sxth	r0, r3
 80011e8:	7cbb      	ldrb	r3, [r7, #18]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	f000 f91f 	bl	800143c <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80011fe:	7cbb      	ldrb	r3, [r7, #18]
 8001200:	3301      	adds	r3, #1
 8001202:	74bb      	strb	r3, [r7, #18]
 8001204:	7cba      	ldrb	r2, [r7, #18]
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <GFX_DrawString+0xb0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <GFX_DrawString+0xb4>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	fb01 f303 	mul.w	r3, r1, r3
 8001216:	429a      	cmp	r2, r3
 8001218:	dbe1      	blt.n	80011de <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ba      	bne.n	80011a2 <GFX_DrawString+0x1a>
	}
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200001f8 	.word	0x200001f8
 800123c:	20000000 	.word	0x20000000

08001240 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	@ 0x30
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001258:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1acb      	subs	r3, r1, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	bfb8      	it	lt
 8001266:	425b      	neglt	r3, r3
 8001268:	429a      	cmp	r2, r3
 800126a:	bfcc      	ite	gt
 800126c:	2301      	movgt	r3, #1
 800126e:	2300      	movle	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	857b      	strh	r3, [r7, #42]	@ 0x2a

	    if (steep) {
 8001274:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00b      	beq.n	8001294 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001286:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	623b      	str	r3, [r7, #32]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dd0b      	ble.n	80012b4 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	b29b      	uxth	r3, r3
 80012c0:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bfb8      	it	lt
 80012cc:	425b      	neglt	r3, r3
 80012ce:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80012d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012d4:	0fda      	lsrs	r2, r3, #31
 80012d6:	4413      	add	r3, r2
 80012d8:	105b      	asrs	r3, r3, #1
 80012da:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	da02      	bge.n	80012ea <GFX_WriteLine+0xaa>
	        ystep = 1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80012e8:	e030      	b.n	800134c <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 80012ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012ee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80012f0:	e02c      	b.n	800134c <GFX_WriteLine+0x10c>
	        if (steep) {
 80012f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	b211      	sxth	r1, r2
 8001302:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f898 	bl	800143c <SSD1306_DrawPixel>
 800130c:	e008      	b.n	8001320 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	b21b      	sxth	r3, r3
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	b211      	sxth	r1, r2
 8001316:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f88e 	bl	800143c <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8001320:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001322:	8abb      	ldrh	r3, [r7, #20]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	b29b      	uxth	r3, r3
 8001328:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	        if (err < 0) {
 800132a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800132e:	2b00      	cmp	r3, #0
 8001330:	da09      	bge.n	8001346 <GFX_WriteLine+0x106>
	            y_start += ystep;
 8001332:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	4413      	add	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
	            err += dx;
 800133c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	4413      	add	r3, r2
 8001342:	b29b      	uxth	r3, r3
 8001344:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    for (; x_start<=x_end; x_start++) {
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3301      	adds	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	ddce      	ble.n	80012f2 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3730      	adds	r7, #48	@ 0x30
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af02      	add	r7, sp, #8
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	1e5a      	subs	r2, r3, #1
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4613      	mov	r3, r2
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff ff5e 	bl	8001240 <GFX_WriteLine>
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	4611      	mov	r1, r2
 8001398:	461a      	mov	r2, r3
 800139a:	460b      	mov	r3, r1
 800139c:	80fb      	strh	r3, [r7, #6]
 800139e:	4613      	mov	r3, r2
 80013a0:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e009      	b.n	80013bc <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80013a8:	88ba      	ldrh	r2, [r7, #4]
 80013aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f7ff ffd4 	bl	800135e <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	88fa      	ldrh	r2, [r7, #6]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dbef      	blt.n	80013a8 <GFX_DrawFillRectangle+0x1c>
    }

}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af04      	add	r7, sp, #16
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <SSD1306_Command+0x30>)
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2301      	movs	r3, #1
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	1dfb      	adds	r3, r7, #7
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2301      	movs	r3, #1
 80013f2:	2200      	movs	r2, #0
 80013f4:	2178      	movs	r1, #120	@ 0x78
 80013f6:	f003 fa1d 	bl	8004834 <HAL_I2C_Mem_Write>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200001fc 	.word	0x200001fc

08001408 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af04      	add	r7, sp, #16
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size);
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <SSD1306_Data+0x30>)
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	2240      	movs	r2, #64	@ 0x40
 800142a:	2178      	movs	r1, #120	@ 0x78
 800142c:	f003 fa02 	bl	8004834 <HAL_I2C_Mem_Write>
#endif
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200001fc 	.word	0x200001fc

0800143c <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
 8001446:	460b      	mov	r3, r1
 8001448:	80bb      	strh	r3, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800144e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db79      	blt.n	800154a <SSD1306_DrawPixel+0x10e>
 8001456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145a:	2b7f      	cmp	r3, #127	@ 0x7f
 800145c:	dc75      	bgt.n	800154a <SSD1306_DrawPixel+0x10e>
 800145e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	db71      	blt.n	800154a <SSD1306_DrawPixel+0x10e>
 8001466:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800146a:	2b3f      	cmp	r3, #63	@ 0x3f
 800146c:	dc6d      	bgt.n	800154a <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d049      	beq.n	8001508 <SSD1306_DrawPixel+0xcc>
 8001474:	2b02      	cmp	r3, #2
 8001476:	dc69      	bgt.n	800154c <SSD1306_DrawPixel+0x110>
 8001478:	2b00      	cmp	r3, #0
 800147a:	d022      	beq.n	80014c2 <SSD1306_DrawPixel+0x86>
 800147c:	2b01      	cmp	r3, #1
 800147e:	d165      	bne.n	800154c <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8001480:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001484:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	da00      	bge.n	800148e <SSD1306_DrawPixel+0x52>
 800148c:	3307      	adds	r3, #7
 800148e:	10db      	asrs	r3, r3, #3
 8001490:	b218      	sxth	r0, r3
 8001492:	4603      	mov	r3, r0
 8001494:	01db      	lsls	r3, r3, #7
 8001496:	4413      	add	r3, r2
 8001498:	4a2f      	ldr	r2, [pc, #188]	@ (8001558 <SSD1306_DrawPixel+0x11c>)
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	b25a      	sxtb	r2, r3
 800149e:	88bb      	ldrh	r3, [r7, #4]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	2101      	movs	r1, #1
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b259      	sxtb	r1, r3
 80014b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014b4:	4603      	mov	r3, r0
 80014b6:	01db      	lsls	r3, r3, #7
 80014b8:	4413      	add	r3, r2
 80014ba:	b2c9      	uxtb	r1, r1
 80014bc:	4a26      	ldr	r2, [pc, #152]	@ (8001558 <SSD1306_DrawPixel+0x11c>)
 80014be:	54d1      	strb	r1, [r2, r3]
      break;
 80014c0:	e044      	b.n	800154c <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 80014c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da00      	bge.n	80014d0 <SSD1306_DrawPixel+0x94>
 80014ce:	3307      	adds	r3, #7
 80014d0:	10db      	asrs	r3, r3, #3
 80014d2:	b218      	sxth	r0, r3
 80014d4:	4603      	mov	r3, r0
 80014d6:	01db      	lsls	r3, r3, #7
 80014d8:	4413      	add	r3, r2
 80014da:	4a1f      	ldr	r2, [pc, #124]	@ (8001558 <SSD1306_DrawPixel+0x11c>)
 80014dc:	5cd3      	ldrb	r3, [r2, r3]
 80014de:	b25a      	sxtb	r2, r3
 80014e0:	88bb      	ldrh	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	4013      	ands	r3, r2
 80014f4:	b259      	sxtb	r1, r3
 80014f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014fa:	4603      	mov	r3, r0
 80014fc:	01db      	lsls	r3, r3, #7
 80014fe:	4413      	add	r3, r2
 8001500:	b2c9      	uxtb	r1, r1
 8001502:	4a15      	ldr	r2, [pc, #84]	@ (8001558 <SSD1306_DrawPixel+0x11c>)
 8001504:	54d1      	strb	r1, [r2, r3]
      break;
 8001506:	e021      	b.n	800154c <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8001508:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800150c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	da00      	bge.n	8001516 <SSD1306_DrawPixel+0xda>
 8001514:	3307      	adds	r3, #7
 8001516:	10db      	asrs	r3, r3, #3
 8001518:	b218      	sxth	r0, r3
 800151a:	4603      	mov	r3, r0
 800151c:	01db      	lsls	r3, r3, #7
 800151e:	4413      	add	r3, r2
 8001520:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <SSD1306_DrawPixel+0x11c>)
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	b25a      	sxtb	r2, r3
 8001526:	88bb      	ldrh	r3, [r7, #4]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	2101      	movs	r1, #1
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	b25b      	sxtb	r3, r3
 8001534:	4053      	eors	r3, r2
 8001536:	b259      	sxtb	r1, r3
 8001538:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800153c:	4603      	mov	r3, r0
 800153e:	01db      	lsls	r3, r3, #7
 8001540:	4413      	add	r3, r2
 8001542:	b2c9      	uxtb	r1, r1
 8001544:	4a04      	ldr	r2, [pc, #16]	@ (8001558 <SSD1306_DrawPixel+0x11c>)
 8001546:	54d1      	strb	r1, [r2, r3]
      break;
 8001548:	e000      	b.n	800154c <SSD1306_DrawPixel+0x110>
	  return;
 800154a:	bf00      	nop
    }
}
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000200 	.word	0x20000200

0800155c <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <SSD1306_Clear+0x22>
 800156c:	2b01      	cmp	r3, #1
 800156e:	d10d      	bne.n	800158c <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 8001570:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001574:	21ff      	movs	r1, #255	@ 0xff
 8001576:	4807      	ldr	r0, [pc, #28]	@ (8001594 <SSD1306_Clear+0x38>)
 8001578:	f00a fadf 	bl	800bb3a <memset>
		break;
 800157c:	e006      	b.n	800158c <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 800157e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001582:	2100      	movs	r1, #0
 8001584:	4803      	ldr	r0, [pc, #12]	@ (8001594 <SSD1306_Clear+0x38>)
 8001586:	f00a fad8 	bl	800bb3a <memset>
		break;
 800158a:	bf00      	nop
	}
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000200 	.word	0x20000200

08001598 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 800159c:	2022      	movs	r0, #34	@ 0x22
 800159e:	f7ff ff19 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff ff16 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 80015a8:	20ff      	movs	r0, #255	@ 0xff
 80015aa:	f7ff ff13 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 80015ae:	2021      	movs	r0, #33	@ 0x21
 80015b0:	f7ff ff10 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff ff0d 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 80015ba:	207f      	movs	r0, #127	@ 0x7f
 80015bc:	f7ff ff0a 	bl	80013d4 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 80015c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015c4:	4802      	ldr	r0, [pc, #8]	@ (80015d0 <SSD1306_Display+0x38>)
 80015c6:	f7ff ff1f 	bl	8001408 <SSD1306_Data>
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000200 	.word	0x20000200

080015d4 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 80015dc:	4a28      	ldr	r2, [pc, #160]	@ (8001680 <SSD1306_Init+0xac>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 80015e2:	20ae      	movs	r0, #174	@ 0xae
 80015e4:	f7ff fef6 	bl	80013d4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 80015e8:	20d5      	movs	r0, #213	@ 0xd5
 80015ea:	f7ff fef3 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(0x80);
 80015ee:	2080      	movs	r0, #128	@ 0x80
 80015f0:	f7ff fef0 	bl	80013d4 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 80015f4:	203f      	movs	r0, #63	@ 0x3f
 80015f6:	f7ff feed 	bl	80013d4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 80015fa:	20d3      	movs	r0, #211	@ 0xd3
 80015fc:	f7ff feea 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(0x00);
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff fee7 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 8001606:	2040      	movs	r0, #64	@ 0x40
 8001608:	f7ff fee4 	bl	80013d4 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 800160c:	208d      	movs	r0, #141	@ 0x8d
 800160e:	f7ff fee1 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(0x14);
 8001612:	2014      	movs	r0, #20
 8001614:	f7ff fede 	bl	80013d4 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 8001618:	2020      	movs	r0, #32
 800161a:	f7ff fedb 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fed8 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8001624:	20a1      	movs	r0, #161	@ 0xa1
 8001626:	f7ff fed5 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 800162a:	20c8      	movs	r0, #200	@ 0xc8
 800162c:	f7ff fed2 	bl	80013d4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8001630:	20da      	movs	r0, #218	@ 0xda
 8001632:	f7ff fecf 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(0x12);
 8001636:	2012      	movs	r0, #18
 8001638:	f7ff fecc 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 800163c:	2081      	movs	r0, #129	@ 0x81
 800163e:	f7ff fec9 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001642:	20ff      	movs	r0, #255	@ 0xff
 8001644:	f7ff fec6 	bl	80013d4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8001648:	20d9      	movs	r0, #217	@ 0xd9
 800164a:	f7ff fec3 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(0xF1);
 800164e:	20f1      	movs	r0, #241	@ 0xf1
 8001650:	f7ff fec0 	bl	80013d4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8001654:	20db      	movs	r0, #219	@ 0xdb
 8001656:	f7ff febd 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(0x40);
 800165a:	2040      	movs	r0, #64	@ 0x40
 800165c:	f7ff feba 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 8001660:	20a4      	movs	r0, #164	@ 0xa4
 8001662:	f7ff feb7 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8001666:	20a6      	movs	r0, #166	@ 0xa6
 8001668:	f7ff feb4 	bl	80013d4 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 800166c:	202e      	movs	r0, #46	@ 0x2e
 800166e:	f7ff feb1 	bl	80013d4 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 8001672:	20af      	movs	r0, #175	@ 0xaf
 8001674:	f7ff feae 	bl	80013d4 <SSD1306_Command>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200001fc 	.word	0x200001fc

08001684 <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af04      	add	r7, sp, #16
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	791b      	ldrb	r3, [r3, #4]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b299      	uxth	r1, r3
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2301      	movs	r3, #1
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	f107 030f 	add.w	r3, r7, #15
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	f003 f9b9 	bl	8004a28 <HAL_I2C_Mem_Read>

	return Value;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af04      	add	r7, sp, #16
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
 80016cc:	4613      	mov	r3, r2
 80016ce:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	791b      	ldrb	r3, [r3, #4]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	b299      	uxth	r1, r3
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	2301      	movs	r3, #1
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	1cbb      	adds	r3, r7, #2
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2301      	movs	r3, #1
 80016f0:	f003 f8a0 	bl	8004834 <HAL_I2C_Mem_Write>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af04      	add	r7, sp, #16
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	791b      	ldrb	r3, [r3, #4]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	b299      	uxth	r1, r3
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	b29a      	uxth	r2, r3
 8001718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	2302      	movs	r3, #2
 8001720:	9301      	str	r3, [sp, #4]
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2301      	movs	r3, #1
 800172a:	f003 f97d 	bl	8004a28 <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 800172e:	7b7b      	ldrb	r3, [r7, #13]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21a      	sxth	r2, r3
 8001734:	7b3b      	ldrb	r3, [r7, #12]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	b29b      	uxth	r3, r3
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b088      	sub	sp, #32
 800174a:	af04      	add	r7, sp, #16
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	791b      	ldrb	r3, [r3, #4]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	b299      	uxth	r1, r3
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	b29a      	uxth	r2, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	9302      	str	r3, [sp, #8]
 8001768:	2303      	movs	r3, #3
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	f003 f958 	bl	8004a28 <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 8001778:	7b3b      	ldrb	r3, [r7, #12]
 800177a:	041a      	lsls	r2, r3, #16
 800177c:	7b7b      	ldrb	r3, [r7, #13]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	4313      	orrs	r3, r2
 8001782:	7bba      	ldrb	r2, [r7, #14]
 8001784:	4313      	orrs	r3, r2
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d901      	bls.n	80017a4 <BMP280_SetMode+0x16>
 80017a0:	2303      	movs	r3, #3
 80017a2:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80017a4:	21f4      	movs	r1, #244	@ 0xf4
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff6c 	bl	8001684 <Read8>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	f023 0303 	bic.w	r3, r3, #3
 80017b6:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 80017b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	b25a      	sxtb	r2, r3
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	461a      	mov	r2, r3
 80017d0:	21f4      	movs	r1, #244	@ 0xf4
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ff74 	bl	80016c0 <Write8>
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d901      	bls.n	80017f6 <BMP280_SetPressureOversampling+0x16>
 80017f2:	2305      	movs	r3, #5
 80017f4:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80017f6:	21f4      	movs	r1, #244	@ 0xf4
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff43 	bl	8001684 <Read8>
 80017fe:	4603      	mov	r3, r0
 8001800:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	f023 031c 	bic.w	r3, r3, #28
 8001808:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	b25b      	sxtb	r3, r3
 8001810:	f003 031c 	and.w	r3, r3, #28
 8001814:	b25a      	sxtb	r2, r3
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	461a      	mov	r2, r3
 8001824:	21f4      	movs	r1, #244	@ 0xf4
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ff4a 	bl	80016c0 <Write8>
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	2b05      	cmp	r3, #5
 8001844:	d901      	bls.n	800184a <BMP280_SetTemperatureOversampling+0x16>
 8001846:	2305      	movs	r3, #5
 8001848:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 800184a:	21f4      	movs	r1, #244	@ 0xf4
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff19 	bl	8001684 <Read8>
 8001852:	4603      	mov	r3, r0
 8001854:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	015b      	lsls	r3, r3, #5
 8001862:	b25a      	sxtb	r2, r3
 8001864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001868:	4313      	orrs	r3, r2
 800186a:	b25b      	sxtb	r3, r3
 800186c:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	461a      	mov	r2, r3
 8001872:	21f4      	movs	r1, #244	@ 0xf4
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff23 	bl	80016c0 <Write8>
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 800188a:	21fa      	movs	r1, #250	@ 0xfa
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff5a 	bl	8001746 <Read24>
 8001892:	4603      	mov	r3, r0
 8001894:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	111b      	asrs	r3, r3, #4
 800189a:	60fb      	str	r3, [r7, #12]

	return Tmp;
 800189c:	68fb      	ldr	r3, [r7, #12]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <BMP280_ReadPressureRaw>:

//
// Read Raw pressure data from BMP280
//
int32_t BMP280_ReadPressureRaw(BMP280_t *bmp)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_PRESSUREDATA);
 80018ae:	21f7      	movs	r1, #247	@ 0xf7
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff48 	bl	8001746 <Read24>
 80018b6:	4603      	mov	r3, r0
 80018b8:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	111b      	asrs	r3, r3, #4
 80018be:	60fb      	str	r3, [r7, #12]

	return Tmp;
 80018c0:	68fb      	ldr	r3, [r7, #12]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffd4 	bl	8001882 <BMP280_ReadTemperatureRaw>
 80018da:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	10da      	asrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8b5b      	ldrh	r3, [r3, #26]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	12db      	asrs	r3, r3, #11
 80018f4:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	111b      	asrs	r3, r3, #4
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	8b52      	ldrh	r2, [r2, #26]
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	1112      	asrs	r2, r2, #4
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	8b49      	ldrh	r1, [r1, #26]
 8001908:	1a52      	subs	r2, r2, r1
 800190a:	fb02 f303 	mul.w	r3, r2, r3
 800190e:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	139b      	asrs	r3, r3, #14
 800191c:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	441a      	add	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1a      	ldr	r2, [r3, #32]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	3380      	adds	r3, #128	@ 0x80
 8001934:	121b      	asrs	r3, r3, #8
 8001936:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 8001938:	68b8      	ldr	r0, [r7, #8]
 800193a:	f7fe fdfb 	bl	8000534 <__aeabi_i2d>
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <BMP280_ReadTemperature+0x98>)
 8001944:	f7fe ff8a 	bl	800085c <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f952 	bl	8000bf8 <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	ee07 3a90 	vmov	s15, r3
}
 800195a:	eeb0 0a67 	vmov.f32	s0, s15
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40590000 	.word	0x40590000

08001968 <BMP280_ReadPressureAndTemperature>:
//
// Read and calculate temperature & pressure
// Whole procedure is taken from BMP280 Datasheet
//
uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
	// Have to read temperature first
	*Temperature = BMP280_ReadTemperature(bmp);
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f7ff ffa9 	bl	80018cc <BMP280_ReadTemperature>
 800197a:	eef0 7a40 	vmov.f32	s15, s0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	var1 = (((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	105b      	asrs	r3, r3, #1
 800198a:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 800198e:	61bb      	str	r3, [r7, #24]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	109b      	asrs	r3, r3, #2
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	1092      	asrs	r2, r2, #2
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	12db      	asrs	r3, r3, #11
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
	var2 = var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019b0:	461a      	mov	r2, r3
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4413      	add	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
	var2 = (var2>>2)+(((int32_t)(bmp->p4))<<16);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	109a      	asrs	r2, r3, #2
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	4413      	add	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
	var1 = ((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019d6:	4619      	mov	r1, r3
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	109b      	asrs	r3, r3, #2
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	1092      	asrs	r2, r2, #2
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	135b      	asrs	r3, r3, #13
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	10da      	asrs	r2, r3, #3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80019f2:	4619      	mov	r1, r3
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	105b      	asrs	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	149b      	asrs	r3, r3, #18
 8001a00:	61bb      	str	r3, [r7, #24]
	var1 =((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	8b92      	ldrh	r2, [r2, #28]
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	13db      	asrs	r3, r3, #15
 8001a12:	61bb      	str	r3, [r7, #24]

	if (var1 == 0)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <BMP280_ReadPressureAndTemperature+0xb6>
	{
		return 1; // avoid exception caused by division by zero
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e054      	b.n	8001ac8 <BMP280_ReadPressureAndTemperature+0x160>
	}

	// Raw pressure from BMP's ADC
	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f7ff ff41 	bl	80018a6 <BMP280_ReadPressureRaw>
 8001a24:	6138      	str	r0, [r7, #16]

	p = (((int32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	f5c3 1280 	rsb	r2, r3, #1048576	@ 0x100000
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	131b      	asrs	r3, r3, #12
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f640 4235 	movw	r2, #3125	@ 0xc35
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	61fb      	str	r3, [r7, #28]
	if (p < 0x80000000)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db06      	blt.n	8001a50 <BMP280_ReadPressureAndTemperature+0xe8>
	{
		p = (p << 1) / ((uint32_t)var1);
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005a      	lsls	r2, r3, #1
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e005      	b.n	8001a5c <BMP280_ReadPressureAndTemperature+0xf4>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	61fb      	str	r3, [r7, #28]
	}
	var1 = (((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a62:	4619      	mov	r1, r3
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	08db      	lsrs	r3, r3, #3
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	08d2      	lsrs	r2, r2, #3
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	0b5b      	lsrs	r3, r3, #13
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	131b      	asrs	r3, r3, #12
 8001a78:	61bb      	str	r3, [r7, #24]
	var2 = (((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	135b      	asrs	r3, r3, #13
 8001a8c:	617b      	str	r3, [r7, #20]

	p = (uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	4413      	add	r3, r2
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	111a      	asrs	r2, r3, #4
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	61fb      	str	r3, [r7, #28]

	// Convert Pa to hPa
	*Pressure = (float)(p/100.0);
 8001aa4:	69f8      	ldr	r0, [r7, #28]
 8001aa6:	f7fe fd35 	bl	8000514 <__aeabi_ui2d>
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <BMP280_ReadPressureAndTemperature+0x168>)
 8001ab0:	f7fe fed4 	bl	800085c <__aeabi_ddiv>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f89c 	bl	8000bf8 <__aeabi_d2f>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	601a      	str	r2, [r3, #0]

	return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40590000 	.word	0x40590000

08001ad4 <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	79fa      	ldrb	r2, [r7, #7]
 8001aec:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001aee:	21d0      	movs	r1, #208	@ 0xd0
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7ff fdc7 	bl	8001684 <Read8>
 8001af6:	4603      	mov	r3, r0
 8001af8:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 8001afa:	7dfb      	ldrb	r3, [r7, #23]
 8001afc:	2b58      	cmp	r3, #88	@ 0x58
 8001afe:	d001      	beq.n	8001b04 <BMP280_Init+0x30>
	{
		return 1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e06c      	b.n	8001bde <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 8001b04:	2188      	movs	r1, #136	@ 0x88
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff fdf8 	bl	80016fc <Read16>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 8001b14:	218a      	movs	r1, #138	@ 0x8a
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff fdf0 	bl	80016fc <Read16>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001b24:	218c      	movs	r1, #140	@ 0x8c
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7ff fde8 	bl	80016fc <Read16>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b21a      	sxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8001b34:	218e      	movs	r1, #142	@ 0x8e
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f7ff fde0 	bl	80016fc <Read16>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8001b44:	2190      	movs	r1, #144	@ 0x90
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7ff fdd8 	bl	80016fc <Read16>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b21a      	sxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8001b54:	2192      	movs	r1, #146	@ 0x92
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff fdd0 	bl	80016fc <Read16>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8001b64:	2194      	movs	r1, #148	@ 0x94
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f7ff fdc8 	bl	80016fc <Read16>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8001b74:	2196      	movs	r1, #150	@ 0x96
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7ff fdc0 	bl	80016fc <Read16>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 8001b84:	2198      	movs	r1, #152	@ 0x98
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7ff fdb8 	bl	80016fc <Read16>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 8001b94:	219a      	movs	r1, #154	@ 0x9a
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7ff fdb0 	bl	80016fc <Read16>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 8001ba4:	219c      	movs	r1, #156	@ 0x9c
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff fda8 	bl	80016fc <Read16>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 8001bb4:	219e      	movs	r1, #158	@ 0x9e
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff fda0 	bl	80016fc <Read16>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 8001bc4:	2105      	movs	r1, #5
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff fe34 	bl	8001834 <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 8001bcc:	2105      	movs	r1, #5
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f7ff fe06 	bl	80017e0 <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 8001bd4:	2103      	movs	r1, #3
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f7ff fdd9 	bl	800178e <BMP280_SetMode>

	return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <_putchar>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

void _putchar(char character)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <_putchar+0x38>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f005 fac4 	bl	8007188 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 8001c00:	1df9      	adds	r1, r7, #7
 8001c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c06:	2201      	movs	r2, #1
 8001c08:	4806      	ldr	r0, [pc, #24]	@ (8001c24 <_putchar+0x3c>)
 8001c0a:	f004 fc81 	bl	8006510 <HAL_UART_Transmit>
	osMutexRelease(MutexPrintfHandle);
 8001c0e:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <_putchar+0x38>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f005 fb03 	bl	800721e <osMutexRelease>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000614 	.word	0x20000614
 8001c24:	200006c8 	.word	0x200006c8

08001c28 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8001c2c:	4825      	ldr	r0, [pc, #148]	@ (8001cc4 <MX_FREERTOS_Init+0x9c>)
 8001c2e:	f005 fa25 	bl	800707c <osMutexNew>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4a24      	ldr	r2, [pc, #144]	@ (8001cc8 <MX_FREERTOS_Init+0xa0>)
 8001c36:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C1Hendle */
  MutexI2C1HendleHandle = osMutexNew(&MutexI2C1Hendle_attributes);
 8001c38:	4824      	ldr	r0, [pc, #144]	@ (8001ccc <MX_FREERTOS_Init+0xa4>)
 8001c3a:	f005 fa1f 	bl	800707c <osMutexNew>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a23      	ldr	r2, [pc, #140]	@ (8001cd0 <MX_FREERTOS_Init+0xa8>)
 8001c42:	6013      	str	r3, [r2, #0]

  /* creation of MutexBmpDataHandle */
  MutexBmpDataHandleHandle = osMutexNew(&MutexBmpDataHandle_attributes);
 8001c44:	4823      	ldr	r0, [pc, #140]	@ (8001cd4 <MX_FREERTOS_Init+0xac>)
 8001c46:	f005 fa19 	bl	800707c <osMutexNew>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a22      	ldr	r2, [pc, #136]	@ (8001cd8 <MX_FREERTOS_Init+0xb0>)
 8001c4e:	6013      	str	r3, [r2, #0]

  /* creation of MutexBmpData */
  MutexBmpDataHandle = osMutexNew(&MutexBmpData_attributes);
 8001c50:	4822      	ldr	r0, [pc, #136]	@ (8001cdc <MX_FREERTOS_Init+0xb4>)
 8001c52:	f005 fa13 	bl	800707c <osMutexNew>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a21      	ldr	r2, [pc, #132]	@ (8001ce0 <MX_FREERTOS_Init+0xb8>)
 8001c5a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreBmpQueue */
  SemaphoreBmpQueueHandle = osSemaphoreNew(1, 1, &SemaphoreBmpQueue_attributes);
 8001c5c:	4a21      	ldr	r2, [pc, #132]	@ (8001ce4 <MX_FREERTOS_Init+0xbc>)
 8001c5e:	2101      	movs	r1, #1
 8001c60:	2001      	movs	r0, #1
 8001c62:	f005 fb19 	bl	8007298 <osSemaphoreNew>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4a1f      	ldr	r2, [pc, #124]	@ (8001ce8 <MX_FREERTOS_Init+0xc0>)
 8001c6a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerBmpData */
  TimerBmpDataHandle = osTimerNew(TimerBmpDataCallback, osTimerPeriodic, NULL, &TimerBmpData_attributes);
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <MX_FREERTOS_Init+0xc4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2101      	movs	r1, #1
 8001c72:	481f      	ldr	r0, [pc, #124]	@ (8001cf0 <MX_FREERTOS_Init+0xc8>)
 8001c74:	f005 f958 	bl	8006f28 <osTimerNew>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf4 <MX_FREERTOS_Init+0xcc>)
 8001c7c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueBmpData */
  QueueBmpDataHandle = osMessageQueueNew (16, sizeof(BmpData_t), &QueueBmpData_attributes);
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf8 <MX_FREERTOS_Init+0xd0>)
 8001c80:	2108      	movs	r1, #8
 8001c82:	2010      	movs	r0, #16
 8001c84:	f005 fc28 	bl	80074d8 <osMessageQueueNew>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cfc <MX_FREERTOS_Init+0xd4>)
 8001c8c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeatTask */
  HeartBeatTaskHandle = osThreadNew(StartHeartBeatTask, NULL, &HeartBeatTask_attributes);
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d00 <MX_FREERTOS_Init+0xd8>)
 8001c90:	2100      	movs	r1, #0
 8001c92:	481c      	ldr	r0, [pc, #112]	@ (8001d04 <MX_FREERTOS_Init+0xdc>)
 8001c94:	f005 f886 	bl	8006da4 <osThreadNew>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d08 <MX_FREERTOS_Init+0xe0>)
 8001c9c:	6013      	str	r3, [r2, #0]

  /* creation of Bmp_280Task */
  Bmp_280TaskHandle = osThreadNew(StartBmp_280Task, NULL, &Bmp_280Task_attributes);
 8001c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d0c <MX_FREERTOS_Init+0xe4>)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	481b      	ldr	r0, [pc, #108]	@ (8001d10 <MX_FREERTOS_Init+0xe8>)
 8001ca4:	f005 f87e 	bl	8006da4 <osThreadNew>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4a1a      	ldr	r2, [pc, #104]	@ (8001d14 <MX_FREERTOS_Init+0xec>)
 8001cac:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(StartOledTask, NULL, &OledTask_attributes);
 8001cae:	4a1a      	ldr	r2, [pc, #104]	@ (8001d18 <MX_FREERTOS_Init+0xf0>)
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	481a      	ldr	r0, [pc, #104]	@ (8001d1c <MX_FREERTOS_Init+0xf4>)
 8001cb4:	f005 f876 	bl	8006da4 <osThreadNew>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4a19      	ldr	r2, [pc, #100]	@ (8001d20 <MX_FREERTOS_Init+0xf8>)
 8001cbc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	0800f738 	.word	0x0800f738
 8001cc8:	20000614 	.word	0x20000614
 8001ccc:	0800f748 	.word	0x0800f748
 8001cd0:	20000618 	.word	0x20000618
 8001cd4:	0800f758 	.word	0x0800f758
 8001cd8:	2000061c 	.word	0x2000061c
 8001cdc:	0800f768 	.word	0x0800f768
 8001ce0:	20000620 	.word	0x20000620
 8001ce4:	0800f778 	.word	0x0800f778
 8001ce8:	20000624 	.word	0x20000624
 8001cec:	0800f728 	.word	0x0800f728
 8001cf0:	08001f35 	.word	0x08001f35
 8001cf4:	20000610 	.word	0x20000610
 8001cf8:	0800f710 	.word	0x0800f710
 8001cfc:	2000060c 	.word	0x2000060c
 8001d00:	0800f6a4 	.word	0x0800f6a4
 8001d04:	08001d25 	.word	0x08001d25
 8001d08:	20000600 	.word	0x20000600
 8001d0c:	0800f6c8 	.word	0x0800f6c8
 8001d10:	08001d45 	.word	0x08001d45
 8001d14:	20000604 	.word	0x20000604
 8001d18:	0800f6ec 	.word	0x0800f6ec
 8001d1c:	08001e11 	.word	0x08001e11
 8001d20:	20000608 	.word	0x20000608

08001d24 <StartHeartBeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartBeatTask */
void StartHeartBeatTask(void *argument)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartBeatTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d2c:	2120      	movs	r1, #32
 8001d2e:	4804      	ldr	r0, [pc, #16]	@ (8001d40 <StartHeartBeatTask+0x1c>)
 8001d30:	f002 fc21 	bl	8004576 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8001d34:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d38:	f005 f8c6 	bl	8006ec8 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d3c:	bf00      	nop
 8001d3e:	e7f5      	b.n	8001d2c <StartHeartBeatTask+0x8>
 8001d40:	40020000 	.word	0x40020000

08001d44 <StartBmp_280Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBmp_280Task */
void StartBmp_280Task(void *argument)
{
 8001d44:	b5b0      	push	{r4, r5, r7, lr}
 8001d46:	b090      	sub	sp, #64	@ 0x40
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBmp_280Task */
	BMP280_t Bmp280;
	BmpData_t _BmpData;

	osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <StartBmp_280Task+0xb4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	4618      	mov	r0, r3
 8001d56:	f005 fa17 	bl	8007188 <osMutexAcquire>
	BMP280_Init(&Bmp280, &hi2c1, 0x76);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	2276      	movs	r2, #118	@ 0x76
 8001d60:	4926      	ldr	r1, [pc, #152]	@ (8001dfc <StartBmp_280Task+0xb8>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff feb6 	bl	8001ad4 <BMP280_Init>
	osMutexRelease(MutexI2C1HendleHandle);
 8001d68:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <StartBmp_280Task+0xb4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f005 fa56 	bl	800721e <osMutexRelease>

	osTimerStart(TimerBmpDataHandle, 100);
 8001d72:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <StartBmp_280Task+0xbc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2164      	movs	r1, #100	@ 0x64
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 f951 	bl	8007020 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <StartBmp_280Task+0xb4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f04f 31ff 	mov.w	r1, #4294967295
 8001d86:	4618      	mov	r0, r3
 8001d88:	f005 f9fe 	bl	8007188 <osMutexAcquire>
	  BMP280_ReadPressureAndTemperature(&Bmp280, &_BmpData.Pressure, &_BmpData.Temperature);
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	1d1a      	adds	r2, r3, #4
 8001d92:	f107 010c 	add.w	r1, r7, #12
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fde4 	bl	8001968 <BMP280_ReadPressureAndTemperature>
	  osMutexRelease(MutexI2C1HendleHandle);
 8001da0:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <StartBmp_280Task+0xb4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f005 fa3a 	bl	800721e <osMutexRelease>

	  if(osOK == osSemaphoreAcquire(SemaphoreBmpQueueHandle, 0));
 8001daa:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <StartBmp_280Task+0xc0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f005 fafb 	bl	80073ac <osSemaphoreAcquire>
	  osMessageQueuePut(QueueBmpDataHandle, &_BmpData, 0, osWaitForever);
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <StartBmp_280Task+0xc4>)
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	f107 010c 	add.w	r1, r7, #12
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f005 fbfc 	bl	80075c0 <osMessageQueuePut>
//	  osMutexAcquire(MutexBmpDataHandleHandle, osWaitForever);
//	  Pressure = _BmpData.Pressure;
//	  Temperature = _BmpData.Temperature;
//	  osMutexRelease(MutexBmpDataHandleHandle);

	  printf("Temperature: %.2f, Pressure: %.2f\n\r", _BmpData.Temperature, _BmpData.Pressure);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbc4 	bl	8000558 <__aeabi_f2d>
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	460d      	mov	r5, r1
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fbbe 	bl	8000558 <__aeabi_f2d>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	e9cd 2300 	strd	r2, r3, [sp]
 8001de4:	4622      	mov	r2, r4
 8001de6:	462b      	mov	r3, r5
 8001de8:	4808      	ldr	r0, [pc, #32]	@ (8001e0c <StartBmp_280Task+0xc8>)
 8001dea:	f001 fe93 	bl	8003b14 <printf_>

	  osDelay(10);
 8001dee:	200a      	movs	r0, #10
 8001df0:	f005 f86a 	bl	8006ec8 <osDelay>
	  osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
 8001df4:	e7c3      	b.n	8001d7e <StartBmp_280Task+0x3a>
 8001df6:	bf00      	nop
 8001df8:	20000618 	.word	0x20000618
 8001dfc:	20000628 	.word	0x20000628
 8001e00:	20000610 	.word	0x20000610
 8001e04:	20000624 	.word	0x20000624
 8001e08:	2000060c 	.word	0x2000060c
 8001e0c:	0800f44c 	.word	0x0800f44c

08001e10 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b090      	sub	sp, #64	@ 0x40
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	char Message[32];
	uint8_t i = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	BmpData_t _BmpData;

	osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
 8001e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f18 <StartOledTask+0x108>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f04f 31ff 	mov.w	r1, #4294967295
 8001e26:	4618      	mov	r0, r3
 8001e28:	f005 f9ae 	bl	8007188 <osMutexAcquire>
	SSD1306_Init(&hi2c1);
 8001e2c:	483b      	ldr	r0, [pc, #236]	@ (8001f1c <StartOledTask+0x10c>)
 8001e2e:	f7ff fbd1 	bl	80015d4 <SSD1306_Init>
	osMutexRelease(MutexI2C1HendleHandle);
 8001e32:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <StartOledTask+0x108>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f005 f9f1 	bl	800721e <osMutexRelease>

	GFX_SetFont(font_8x5);
 8001e3c:	4838      	ldr	r0, [pc, #224]	@ (8001f20 <StartOledTask+0x110>)
 8001e3e:	f7ff f8d9 	bl	8000ff4 <GFX_SetFont>

	SSD1306_Clear(BLACK);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff fb8a 	bl	800155c <SSD1306_Clear>

	osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
 8001e48:	4b33      	ldr	r3, [pc, #204]	@ (8001f18 <StartOledTask+0x108>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	4618      	mov	r0, r3
 8001e52:	f005 f999 	bl	8007188 <osMutexAcquire>
	SSD1306_Display();
 8001e56:	f7ff fb9f 	bl	8001598 <SSD1306_Display>
	osMutexRelease(MutexI2C1HendleHandle);
 8001e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f18 <StartOledTask+0x108>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f005 f9dd 	bl	800721e <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
	SSD1306_Clear(BLACK);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff fb79 	bl	800155c <SSD1306_Clear>

	sprintf(Message, "Hello %d", i++);
 8001e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8001e74:	461a      	mov	r2, r3
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	492a      	ldr	r1, [pc, #168]	@ (8001f24 <StartOledTask+0x114>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 fe65 	bl	8003b4c <sprintf_>

	GFX_DrawString(0, 0, Message, WHITE, 0);
 8001e82:	f107 0214 	add.w	r2, r7, #20
 8001e86:	2300      	movs	r3, #0
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7ff f97a 	bl	8001188 <GFX_DrawString>
//	_BmpData.Pressure = Pressure;
//	_BmpData.Temperature = Temperature;
//	osMutexRelease(MutexBmpDataHandleHandle);


	osMessageQueueGet(QueueBmpDataHandle, &_BmpData, NULL, osWaitForever);
 8001e94:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <StartOledTask+0x118>)
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	f107 010c 	add.w	r1, r7, #12
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f005 fbed 	bl	8007680 <osMessageQueueGet>


	sprintf(Message, "Press: %.2f", _BmpData.Pressure);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb55 	bl	8000558 <__aeabi_f2d>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	f107 0014 	add.w	r0, r7, #20
 8001eb6:	491d      	ldr	r1, [pc, #116]	@ (8001f2c <StartOledTask+0x11c>)
 8001eb8:	f001 fe48 	bl	8003b4c <sprintf_>
	GFX_DrawString(0, 10, Message, WHITE, 0);
 8001ebc:	f107 0214 	add.w	r2, r7, #20
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	210a      	movs	r1, #10
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff f95d 	bl	8001188 <GFX_DrawString>

	sprintf(Message, "Temp: %.2f", _BmpData.Temperature);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb41 	bl	8000558 <__aeabi_f2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	f107 0014 	add.w	r0, r7, #20
 8001ede:	4914      	ldr	r1, [pc, #80]	@ (8001f30 <StartOledTask+0x120>)
 8001ee0:	f001 fe34 	bl	8003b4c <sprintf_>
	GFX_DrawString(0, 20, Message, WHITE, 0);
 8001ee4:	f107 0214 	add.w	r2, r7, #20
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2301      	movs	r3, #1
 8001eee:	2114      	movs	r1, #20
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff f949 	bl	8001188 <GFX_DrawString>

	osMutexAcquire(MutexI2C1HendleHandle, osWaitForever);
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <StartOledTask+0x108>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f04f 31ff 	mov.w	r1, #4294967295
 8001efe:	4618      	mov	r0, r3
 8001f00:	f005 f942 	bl	8007188 <osMutexAcquire>
	SSD1306_Display();
 8001f04:	f7ff fb48 	bl	8001598 <SSD1306_Display>
	osMutexRelease(MutexI2C1HendleHandle);
 8001f08:	4b03      	ldr	r3, [pc, #12]	@ (8001f18 <StartOledTask+0x108>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f005 f986 	bl	800721e <osMutexRelease>
	SSD1306_Clear(BLACK);
 8001f12:	bf00      	nop
 8001f14:	e7a6      	b.n	8001e64 <StartOledTask+0x54>
 8001f16:	bf00      	nop
 8001f18:	20000618 	.word	0x20000618
 8001f1c:	20000628 	.word	0x20000628
 8001f20:	0800f4c4 	.word	0x0800f4c4
 8001f24:	0800f470 	.word	0x0800f470
 8001f28:	2000060c 	.word	0x2000060c
 8001f2c:	0800f47c 	.word	0x0800f47c
 8001f30:	0800f488 	.word	0x0800f488

08001f34 <TimerBmpDataCallback>:
  /* USER CODE END StartOledTask */
}

/* TimerBmpDataCallback function */
void TimerBmpDataCallback(void *argument)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerBmpDataCallback */
	osSemaphoreRelease(SemaphoreBmpQueueHandle);
 8001f3c:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <TimerBmpDataCallback+0x1c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f005 fa85 	bl	8007450 <osSemaphoreRelease>
  /* USER CODE END TimerBmpDataCallback */
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000624 	.word	0x20000624

08001f54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002024 <MX_GPIO_Init+0xd0>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	4a2c      	ldr	r2, [pc, #176]	@ (8002024 <MX_GPIO_Init+0xd0>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <MX_GPIO_Init+0xd0>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <MX_GPIO_Init+0xd0>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a25      	ldr	r2, [pc, #148]	@ (8002024 <MX_GPIO_Init+0xd0>)
 8001f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b23      	ldr	r3, [pc, #140]	@ (8002024 <MX_GPIO_Init+0xd0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <MX_GPIO_Init+0xd0>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	4a1e      	ldr	r2, [pc, #120]	@ (8002024 <MX_GPIO_Init+0xd0>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <MX_GPIO_Init+0xd0>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <MX_GPIO_Init+0xd0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <MX_GPIO_Init+0xd0>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <MX_GPIO_Init+0xd0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2120      	movs	r1, #32
 8001fde:	4812      	ldr	r0, [pc, #72]	@ (8002028 <MX_GPIO_Init+0xd4>)
 8001fe0:	f002 fab0 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fe4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480c      	ldr	r0, [pc, #48]	@ (800202c <MX_GPIO_Init+0xd8>)
 8001ffc:	f002 f91e 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002000:	2320      	movs	r3, #32
 8002002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002004:	2301      	movs	r3, #1
 8002006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	4804      	ldr	r0, [pc, #16]	@ (8002028 <MX_GPIO_Init+0xd4>)
 8002018:	f002 f910 	bl	800423c <HAL_GPIO_Init>

}
 800201c:	bf00      	nop
 800201e:	3728      	adds	r7, #40	@ 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	40020000 	.word	0x40020000
 800202c:	40020800 	.word	0x40020800

08002030 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <MX_I2C1_Init+0x50>)
 8002036:	4a13      	ldr	r2, [pc, #76]	@ (8002084 <MX_I2C1_Init+0x54>)
 8002038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800203a:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <MX_I2C1_Init+0x50>)
 800203c:	4a12      	ldr	r2, [pc, #72]	@ (8002088 <MX_I2C1_Init+0x58>)
 800203e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <MX_I2C1_Init+0x50>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <MX_I2C1_Init+0x50>)
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <MX_I2C1_Init+0x50>)
 800204e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002052:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002054:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <MX_I2C1_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <MX_I2C1_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002060:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <MX_I2C1_Init+0x50>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <MX_I2C1_Init+0x50>)
 8002068:	2200      	movs	r2, #0
 800206a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800206c:	4804      	ldr	r0, [pc, #16]	@ (8002080 <MX_I2C1_Init+0x50>)
 800206e:	f002 fa9d 	bl	80045ac <HAL_I2C_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002078:	f000 f8de 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000628 	.word	0x20000628
 8002084:	40005400 	.word	0x40005400
 8002088:	00061a80 	.word	0x00061a80

0800208c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	@ 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a19      	ldr	r2, [pc, #100]	@ (8002110 <HAL_I2C_MspInit+0x84>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12c      	bne.n	8002108 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b18      	ldr	r3, [pc, #96]	@ (8002114 <HAL_I2C_MspInit+0x88>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	4a17      	ldr	r2, [pc, #92]	@ (8002114 <HAL_I2C_MspInit+0x88>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <HAL_I2C_MspInit+0x88>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d0:	2312      	movs	r3, #18
 80020d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020dc:	2304      	movs	r3, #4
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	480c      	ldr	r0, [pc, #48]	@ (8002118 <HAL_I2C_MspInit+0x8c>)
 80020e8:	f002 f8a8 	bl	800423c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <HAL_I2C_MspInit+0x88>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	4a07      	ldr	r2, [pc, #28]	@ (8002114 <HAL_I2C_MspInit+0x88>)
 80020f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <HAL_I2C_MspInit+0x88>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002108:	bf00      	nop
 800210a:	3728      	adds	r7, #40	@ 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40005400 	.word	0x40005400
 8002114:	40023800 	.word	0x40023800
 8002118:	40020400 	.word	0x40020400

0800211c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002120:	f001 ff68 	bl	8003ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002124:	f000 f80e 	bl	8002144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002128:	f7ff ff14 	bl	8001f54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800212c:	f001 fec6 	bl	8003ebc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002130:	f7ff ff7e 	bl	8002030 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002134:	f004 fdec 	bl	8006d10 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002138:	f7ff fd76 	bl	8001c28 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800213c:	f004 fe0c 	bl	8006d58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <main+0x24>

08002144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b094      	sub	sp, #80	@ 0x50
 8002148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214a:	f107 0320 	add.w	r3, r7, #32
 800214e:	2230      	movs	r2, #48	@ 0x30
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f009 fcf1 	bl	800bb3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	4b27      	ldr	r3, [pc, #156]	@ (800220c <SystemClock_Config+0xc8>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	4a26      	ldr	r2, [pc, #152]	@ (800220c <SystemClock_Config+0xc8>)
 8002172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002176:	6413      	str	r3, [r2, #64]	@ 0x40
 8002178:	4b24      	ldr	r3, [pc, #144]	@ (800220c <SystemClock_Config+0xc8>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002184:	2300      	movs	r3, #0
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	4b21      	ldr	r3, [pc, #132]	@ (8002210 <SystemClock_Config+0xcc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a20      	ldr	r2, [pc, #128]	@ (8002210 <SystemClock_Config+0xcc>)
 800218e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b1e      	ldr	r3, [pc, #120]	@ (8002210 <SystemClock_Config+0xcc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021a0:	2301      	movs	r3, #1
 80021a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021aa:	2302      	movs	r3, #2
 80021ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021b4:	2304      	movs	r3, #4
 80021b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80021b8:	2348      	movs	r3, #72	@ 0x48
 80021ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021bc:	2302      	movs	r3, #2
 80021be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80021c0:	2303      	movs	r3, #3
 80021c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c4:	f107 0320 	add.w	r3, r7, #32
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 fa13 	bl	80055f4 <HAL_RCC_OscConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021d4:	f000 f830 	bl	8002238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021d8:	230f      	movs	r3, #15
 80021da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021dc:	2302      	movs	r3, #2
 80021de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	2102      	movs	r1, #2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 fc75 	bl	8005ae4 <HAL_RCC_ClockConfig>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002200:	f000 f81a 	bl	8002238 <Error_Handler>
  }
}
 8002204:	bf00      	nop
 8002206:	3750      	adds	r7, #80	@ 0x50
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000

08002214 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002226:	f001 ff07 	bl	8004038 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40014400 	.word	0x40014400

08002238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <Error_Handler+0x8>

08002244 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	4603      	mov	r3, r0
 8002252:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d204      	bcs.n	8002266 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	701a      	strb	r2, [r3, #0]
  }
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4603      	mov	r3, r0
 800229c:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <_out_char+0x1e>
    _putchar(character);
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fc9e 	bl	8001be8 <_putchar>
  }
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e002      	b.n	80022ca <_strnlen_s+0x16>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3301      	adds	r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <_strnlen_s+0x28>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	603a      	str	r2, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f3      	bne.n	80022c4 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	1ad3      	subs	r3, r2, r3
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80022fc:	d904      	bls.n	8002308 <_is_digit+0x1a>
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2b39      	cmp	r3, #57	@ 0x39
 8002302:	d801      	bhi.n	8002308 <_is_digit+0x1a>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <_is_digit+0x1c>
 8002308:	2300      	movs	r3, #0
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	b2db      	uxtb	r3, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002328:	e00e      	b.n	8002348 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4618      	mov	r0, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	1c59      	adds	r1, r3, #1
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6011      	str	r1, [r2, #0]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	4403      	add	r3, r0
 8002344:	3b30      	subs	r3, #48	@ 0x30
 8002346:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ffcd 	bl	80022ee <_is_digit>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1e7      	bne.n	800232a <_atoi+0xe>
  }
  return i;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d125      	bne.n	80023cc <_out_rev+0x68>
 8002380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d120      	bne.n	80023cc <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800238a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e00a      	b.n	80023a6 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	1c53      	adds	r3, r2, #1
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	68fc      	ldr	r4, [r7, #12]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	2020      	movs	r0, #32
 800239e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3301      	adds	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d3f0      	bcc.n	8002390 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80023ae:	e00d      	b.n	80023cc <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80023b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b2:	3b01      	subs	r3, #1
 80023b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ba:	4413      	add	r3, r2
 80023bc:	7818      	ldrb	r0, [r3, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	1c53      	adds	r3, r2, #1
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	68fc      	ldr	r4, [r7, #12]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	47a0      	blx	r4
  while (len) {
 80023cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ee      	bne.n	80023b0 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80023d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00e      	beq.n	80023fa <_out_rev+0x96>
    while (idx - start_idx < width) {
 80023dc:	e007      	b.n	80023ee <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	1c53      	adds	r3, r2, #1
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	68fc      	ldr	r4, [r7, #12]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	2020      	movs	r0, #32
 80023ec:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d8f1      	bhi.n	80023de <_out_rev+0x7a>
    }
  }

  return idx;
 80023fa:	687b      	ldr	r3, [r7, #4]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}

08002404 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af04      	add	r7, sp, #16
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d136      	bne.n	800248a <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800241c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d018      	beq.n	8002454 <_ntoa_format+0x50>
 8002422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <_ntoa_format+0x50>
 800242c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d104      	bne.n	800243e <_ntoa_format+0x3a>
 8002434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <_ntoa_format+0x50>
      width--;
 800243e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002440:	3b01      	subs	r3, #1
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002444:	e006      	b.n	8002454 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	61fa      	str	r2, [r7, #28]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4413      	add	r3, r2
 8002450:	2230      	movs	r2, #48	@ 0x30
 8002452:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002458:	429a      	cmp	r2, r3
 800245a:	d20a      	bcs.n	8002472 <_ntoa_format+0x6e>
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b1f      	cmp	r3, #31
 8002460:	d9f1      	bls.n	8002446 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002462:	e006      	b.n	8002472 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	61fa      	str	r2, [r7, #28]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4413      	add	r3, r2
 800246e:	2230      	movs	r2, #48	@ 0x30
 8002470:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <_ntoa_format+0x86>
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002480:	429a      	cmp	r2, r3
 8002482:	d202      	bcs.n	800248a <_ntoa_format+0x86>
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b1f      	cmp	r3, #31
 8002488:	d9ec      	bls.n	8002464 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800248a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	2b00      	cmp	r3, #0
 8002492:	d058      	beq.n	8002546 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800249a:	2b00      	cmp	r3, #0
 800249c:	d116      	bne.n	80024cc <_ntoa_format+0xc8>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <_ntoa_format+0xc8>
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d003      	beq.n	80024b4 <_ntoa_format+0xb0>
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d10b      	bne.n	80024cc <_ntoa_format+0xc8>
      len--;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <_ntoa_format+0xc8>
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d102      	bne.n	80024cc <_ntoa_format+0xc8>
        len--;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d10f      	bne.n	80024f2 <_ntoa_format+0xee>
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10a      	bne.n	80024f2 <_ntoa_format+0xee>
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b1f      	cmp	r3, #31
 80024e0:	d807      	bhi.n	80024f2 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	61fa      	str	r2, [r7, #28]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4413      	add	r3, r2
 80024ec:	2278      	movs	r2, #120	@ 0x78
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	e01f      	b.n	8002532 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d10f      	bne.n	8002518 <_ntoa_format+0x114>
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <_ntoa_format+0x114>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	2b1f      	cmp	r3, #31
 8002506:	d807      	bhi.n	8002518 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	61fa      	str	r2, [r7, #28]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4413      	add	r3, r2
 8002512:	2258      	movs	r2, #88	@ 0x58
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e00c      	b.n	8002532 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251a:	2b02      	cmp	r3, #2
 800251c:	d109      	bne.n	8002532 <_ntoa_format+0x12e>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	2b1f      	cmp	r3, #31
 8002522:	d806      	bhi.n	8002532 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	61fa      	str	r2, [r7, #28]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4413      	add	r3, r2
 800252e:	2262      	movs	r2, #98	@ 0x62
 8002530:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	2b1f      	cmp	r3, #31
 8002536:	d806      	bhi.n	8002546 <_ntoa_format+0x142>
      buf[len++] = '0';
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	61fa      	str	r2, [r7, #28]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	2230      	movs	r2, #48	@ 0x30
 8002544:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2b1f      	cmp	r3, #31
 800254a:	d824      	bhi.n	8002596 <_ntoa_format+0x192>
    if (negative) {
 800254c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	61fa      	str	r2, [r7, #28]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4413      	add	r3, r2
 800255e:	222d      	movs	r2, #45	@ 0x2d
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	e018      	b.n	8002596 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	61fa      	str	r2, [r7, #28]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4413      	add	r3, r2
 8002578:	222b      	movs	r2, #43	@ 0x2b
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e00b      	b.n	8002596 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800257e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	61fa      	str	r2, [r7, #28]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4413      	add	r3, r2
 8002592:	2220      	movs	r2, #32
 8002594:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002598:	9303      	str	r3, [sp, #12]
 800259a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259c:	9302      	str	r3, [sp, #8]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff fed9 	bl	8002364 <_out_rev>
 80025b2:	4603      	mov	r3, r0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b096      	sub	sp, #88	@ 0x58
 80025c0:	af08      	add	r7, sp, #32
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 80025ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80025d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d6:	f023 0310 	bic.w	r3, r3, #16
 80025da:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80025dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <_ntoa_long+0x30>
 80025e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d032      	beq.n	8002652 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80025ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80025f4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80025f6:	fb01 f202 	mul.w	r2, r1, r2
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002600:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002604:	2b09      	cmp	r3, #9
 8002606:	d804      	bhi.n	8002612 <_ntoa_long+0x56>
 8002608:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800260c:	3330      	adds	r3, #48	@ 0x30
 800260e:	b2da      	uxtb	r2, r3
 8002610:	e00d      	b.n	800262e <_ntoa_long+0x72>
 8002612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <_ntoa_long+0x64>
 800261c:	2241      	movs	r2, #65	@ 0x41
 800261e:	e000      	b.n	8002622 <_ntoa_long+0x66>
 8002620:	2261      	movs	r2, #97	@ 0x61
 8002622:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002626:	4413      	add	r3, r2
 8002628:	b2db      	uxtb	r3, r3
 800262a:	3b0a      	subs	r3, #10
 800262c:	b2da      	uxtb	r2, r3
 800262e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002630:	1c59      	adds	r1, r3, #1
 8002632:	6379      	str	r1, [r7, #52]	@ 0x34
 8002634:	3338      	adds	r3, #56	@ 0x38
 8002636:	443b      	add	r3, r7
 8002638:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800263c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800263e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002640:	fbb2 f3f3 	udiv	r3, r2, r3
 8002644:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <_ntoa_long+0x96>
 800264c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264e:	2b1f      	cmp	r3, #31
 8002650:	d9cc      	bls.n	80025ec <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002654:	9306      	str	r3, [sp, #24]
 8002656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002658:	9305      	str	r3, [sp, #20]
 800265a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800265c:	9304      	str	r3, [sp, #16]
 800265e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002660:	9303      	str	r3, [sp, #12]
 8002662:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002666:	9302      	str	r3, [sp, #8]
 8002668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff fec3 	bl	8002404 <_ntoa_format>
 800267e:	4603      	mov	r3, r0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3738      	adds	r7, #56	@ 0x38
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b096      	sub	sp, #88	@ 0x58
 800268c:	af08      	add	r7, sp, #32
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 800269a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800269e:	4313      	orrs	r3, r2
 80026a0:	d103      	bne.n	80026aa <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80026a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026a4:	f023 0310 	bic.w	r3, r3, #16
 80026a8:	663b      	str	r3, [r7, #96]	@ 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80026aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <_ntoa_long_long+0x34>
 80026b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026b8:	4313      	orrs	r3, r2
 80026ba:	d037      	beq.n	800272c <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80026bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80026c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026c4:	f7fe fae8 	bl	8000c98 <__aeabi_uldivmod>
 80026c8:	4613      	mov	r3, r2
 80026ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80026ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026d2:	2b09      	cmp	r3, #9
 80026d4:	d804      	bhi.n	80026e0 <_ntoa_long_long+0x58>
 80026d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026da:	3330      	adds	r3, #48	@ 0x30
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	e00d      	b.n	80026fc <_ntoa_long_long+0x74>
 80026e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <_ntoa_long_long+0x66>
 80026ea:	2241      	movs	r2, #65	@ 0x41
 80026ec:	e000      	b.n	80026f0 <_ntoa_long_long+0x68>
 80026ee:	2261      	movs	r2, #97	@ 0x61
 80026f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026f4:	4413      	add	r3, r2
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3b0a      	subs	r3, #10
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fe:	1c59      	adds	r1, r3, #1
 8002700:	6379      	str	r1, [r7, #52]	@ 0x34
 8002702:	3338      	adds	r3, #56	@ 0x38
 8002704:	443b      	add	r3, r7
 8002706:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800270a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800270e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002712:	f7fe fac1 	bl	8000c98 <__aeabi_uldivmod>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800271e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002722:	4313      	orrs	r3, r2
 8002724:	d002      	beq.n	800272c <_ntoa_long_long+0xa4>
 8002726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002728:	2b1f      	cmp	r3, #31
 800272a:	d9c7      	bls.n	80026bc <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800272c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800272e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002730:	9206      	str	r2, [sp, #24]
 8002732:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002734:	9205      	str	r2, [sp, #20]
 8002736:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002738:	9204      	str	r2, [sp, #16]
 800273a:	9303      	str	r3, [sp, #12]
 800273c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	f107 0310 	add.w	r3, r7, #16
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7ff fe56 	bl	8002404 <_ntoa_format>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3738      	adds	r7, #56	@ 0x38
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	0000      	movs	r0, r0
 8002764:	0000      	movs	r0, r0
	...

08002768 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b09d      	sub	sp, #116	@ 0x74
 800276c:	af04      	add	r7, sp, #16
 800276e:	6178      	str	r0, [r7, #20]
 8002770:	6139      	str	r1, [r7, #16]
 8002772:	60fa      	str	r2, [r7, #12]
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double diff = 0.0;
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800278a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800278e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002792:	f7fe f9a1 	bl	8000ad8 <__aeabi_dcmpeq>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10f      	bne.n	80027bc <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800279c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800279e:	9303      	str	r3, [sp, #12]
 80027a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a2:	9302      	str	r3, [sp, #8]
 80027a4:	2303      	movs	r3, #3
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	4ba7      	ldr	r3, [pc, #668]	@ (8002a48 <_ftoa+0x2e0>)
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	6939      	ldr	r1, [r7, #16]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff fdd6 	bl	8002364 <_out_rev>
 80027b8:	4603      	mov	r3, r0
 80027ba:	e222      	b.n	8002c02 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 80027c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027c8:	f7fe f990 	bl	8000aec <__aeabi_dcmplt>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00f      	beq.n	80027f2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80027d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027d4:	9303      	str	r3, [sp, #12]
 80027d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027d8:	9302      	str	r3, [sp, #8]
 80027da:	2304      	movs	r3, #4
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	4b9b      	ldr	r3, [pc, #620]	@ (8002a4c <_ftoa+0x2e4>)
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	6939      	ldr	r1, [r7, #16]
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f7ff fdbb 	bl	8002364 <_out_rev>
 80027ee:	4603      	mov	r3, r0
 80027f0:	e207      	b.n	8002c02 <_ftoa+0x49a>
  if (value > DBL_MAX)
 80027f2:	f04f 32ff 	mov.w	r2, #4294967295
 80027f6:	4b96      	ldr	r3, [pc, #600]	@ (8002a50 <_ftoa+0x2e8>)
 80027f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027fc:	f7fe f994 	bl	8000b28 <__aeabi_dcmpgt>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01d      	beq.n	8002842 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002806:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <_ftoa+0xac>
 8002810:	4b90      	ldr	r3, [pc, #576]	@ (8002a54 <_ftoa+0x2ec>)
 8002812:	e000      	b.n	8002816 <_ftoa+0xae>
 8002814:	4b90      	ldr	r3, [pc, #576]	@ (8002a58 <_ftoa+0x2f0>)
 8002816:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002818:	f002 0204 	and.w	r2, r2, #4
 800281c:	2a00      	cmp	r2, #0
 800281e:	d001      	beq.n	8002824 <_ftoa+0xbc>
 8002820:	2204      	movs	r2, #4
 8002822:	e000      	b.n	8002826 <_ftoa+0xbe>
 8002824:	2203      	movs	r2, #3
 8002826:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002828:	9103      	str	r1, [sp, #12]
 800282a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800282c:	9102      	str	r1, [sp, #8]
 800282e:	9201      	str	r2, [sp, #4]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	6939      	ldr	r1, [r7, #16]
 8002838:	6978      	ldr	r0, [r7, #20]
 800283a:	f7ff fd93 	bl	8002364 <_out_rev>
 800283e:	4603      	mov	r3, r0
 8002840:	e1df      	b.n	8002c02 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002842:	a37d      	add	r3, pc, #500	@ (adr r3, 8002a38 <_ftoa+0x2d0>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800284c:	f7fe f96c 	bl	8000b28 <__aeabi_dcmpgt>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <_ftoa+0x102>
 8002856:	a37a      	add	r3, pc, #488	@ (adr r3, 8002a40 <_ftoa+0x2d8>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002860:	f7fe f944 	bl	8000aec <__aeabi_dcmplt>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00f      	beq.n	800288a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800286a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800286c:	9302      	str	r3, [sp, #8]
 800286e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	ed97 0b00 	vldr	d0, [r7]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	6939      	ldr	r1, [r7, #16]
 8002880:	6978      	ldr	r0, [r7, #20]
 8002882:	f000 f9c9 	bl	8002c18 <_etoa>
 8002886:	4603      	mov	r3, r0
 8002888:	e1bb      	b.n	8002c02 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800288a:	2300      	movs	r3, #0
 800288c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  if (value < 0) {
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800289c:	f7fe f926 	bl	8000aec <__aeabi_dcmplt>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00e      	beq.n	80028c4 <_ftoa+0x15c>
    negative = true;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    value = 0 - value;
 80028ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028b0:	f04f 0000 	mov.w	r0, #0
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	f7fd fcee 	bl	8000298 <__aeabi_dsub>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80028c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10d      	bne.n	80028ea <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80028ce:	2306      	movs	r3, #6
 80028d0:	673b      	str	r3, [r7, #112]	@ 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80028d2:	e00a      	b.n	80028ea <_ftoa+0x182>
    buf[len++] = '0';
 80028d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80028da:	3360      	adds	r3, #96	@ 0x60
 80028dc:	443b      	add	r3, r7
 80028de:	2230      	movs	r2, #48	@ 0x30
 80028e0:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80028e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028e6:	3b01      	subs	r3, #1
 80028e8:	673b      	str	r3, [r7, #112]	@ 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80028ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028ec:	2b1f      	cmp	r3, #31
 80028ee:	d802      	bhi.n	80028f6 <_ftoa+0x18e>
 80028f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028f2:	2b09      	cmp	r3, #9
 80028f4:	d8ee      	bhi.n	80028d4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 80028f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028fa:	f7fe f935 	bl	8000b68 <__aeabi_d2iz>
 80028fe:	4603      	mov	r3, r0
 8002900:	657b      	str	r3, [r7, #84]	@ 0x54
  double tmp = (value - whole) * pow10[prec];
 8002902:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002904:	f7fd fe16 	bl	8000534 <__aeabi_i2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002910:	f7fd fcc2 	bl	8000298 <__aeabi_dsub>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	4a4f      	ldr	r2, [pc, #316]	@ (8002a5c <_ftoa+0x2f4>)
 800291e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002928:	f7fd fe6e 	bl	8000608 <__aeabi_dmul>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long frac = (unsigned long)tmp;
 8002934:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002938:	f7fe f93e 	bl	8000bb8 <__aeabi_d2uiz>
 800293c:	4603      	mov	r3, r0
 800293e:	653b      	str	r3, [r7, #80]	@ 0x50
  diff = tmp - frac;
 8002940:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002942:	f7fd fde7 	bl	8000514 <__aeabi_ui2d>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800294e:	f7fd fca3 	bl	8000298 <__aeabi_dsub>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  if (diff > 0.5) {
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	4b40      	ldr	r3, [pc, #256]	@ (8002a60 <_ftoa+0x2f8>)
 8002960:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002964:	f7fe f8e0 	bl	8000b28 <__aeabi_dcmpgt>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d016      	beq.n	800299c <_ftoa+0x234>
    ++frac;
 800296e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002970:	3301      	adds	r3, #1
 8002972:	653b      	str	r3, [r7, #80]	@ 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002974:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002976:	f7fd fdcd 	bl	8000514 <__aeabi_ui2d>
 800297a:	4a38      	ldr	r2, [pc, #224]	@ (8002a5c <_ftoa+0x2f4>)
 800297c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fe f8c5 	bl	8000b14 <__aeabi_dcmpge>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01a      	beq.n	80029c6 <_ftoa+0x25e>
      frac = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	653b      	str	r3, [r7, #80]	@ 0x50
      ++whole;
 8002994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002996:	3301      	adds	r3, #1
 8002998:	657b      	str	r3, [r7, #84]	@ 0x54
 800299a:	e014      	b.n	80029c6 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002a60 <_ftoa+0x2f8>)
 80029a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80029a6:	f7fe f8a1 	bl	8000aec <__aeabi_dcmplt>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80029b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <_ftoa+0x258>
 80029b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80029c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029c2:	3301      	adds	r3, #1
 80029c4:	653b      	str	r3, [r7, #80]	@ 0x50
  }

  if (prec == 0U) {
 80029c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d14b      	bne.n	8002a64 <_ftoa+0x2fc>
    diff = value - (double)whole;
 80029cc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80029ce:	f7fd fdb1 	bl	8000534 <__aeabi_i2d>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029da:	f7fd fc5d 	bl	8000298 <__aeabi_dsub>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80029e6:	2301      	movs	r3, #1
 80029e8:	461c      	mov	r4, r3
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002a60 <_ftoa+0x2f8>)
 80029f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80029f4:	f7fe f87a 	bl	8000aec <__aeabi_dcmplt>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <_ftoa+0x29a>
 80029fe:	2300      	movs	r3, #0
 8002a00:	461c      	mov	r4, r3
 8002a02:	b2e3      	uxtb	r3, r4
 8002a04:	f083 0301 	eor.w	r3, r3, #1
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <_ftoa+0x2ba>
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <_ftoa+0x2f8>)
 8002a14:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002a18:	f7fe f886 	bl	8000b28 <__aeabi_dcmpgt>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d064      	beq.n	8002aec <_ftoa+0x384>
 8002a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8081 	beq.w	8002b30 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a30:	3301      	adds	r3, #1
 8002a32:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a34:	e07c      	b.n	8002b30 <_ftoa+0x3c8>
 8002a36:	bf00      	nop
 8002a38:	00000000 	.word	0x00000000
 8002a3c:	41cdcd65 	.word	0x41cdcd65
 8002a40:	00000000 	.word	0x00000000
 8002a44:	c1cdcd65 	.word	0xc1cdcd65
 8002a48:	0800f494 	.word	0x0800f494
 8002a4c:	0800f498 	.word	0x0800f498
 8002a50:	7fefffff 	.word	0x7fefffff
 8002a54:	0800f4a0 	.word	0x0800f4a0
 8002a58:	0800f4a8 	.word	0x0800f4a8
 8002a5c:	0800f788 	.word	0x0800f788
 8002a60:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8002a64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a68:	e01f      	b.n	8002aaa <_ftoa+0x342>
      --count;
 8002a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002a70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002a72:	4b66      	ldr	r3, [pc, #408]	@ (8002c0c <_ftoa+0x4a4>)
 8002a74:	fba3 2301 	umull	r2, r3, r3, r1
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	1aca      	subs	r2, r1, r3
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a88:	1c59      	adds	r1, r3, #1
 8002a8a:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002a8c:	3230      	adds	r2, #48	@ 0x30
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	3360      	adds	r3, #96	@ 0x60
 8002a92:	443b      	add	r3, r7
 8002a94:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a9a:	4a5c      	ldr	r2, [pc, #368]	@ (8002c0c <_ftoa+0x4a4>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aac:	2b1f      	cmp	r3, #31
 8002aae:	d9dc      	bls.n	8002a6a <_ftoa+0x302>
 8002ab0:	e009      	b.n	8002ac6 <_ftoa+0x35e>
        break;
 8002ab2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002ab4:	e007      	b.n	8002ac6 <_ftoa+0x35e>
      buf[len++] = '0';
 8002ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002abc:	3360      	adds	r3, #96	@ 0x60
 8002abe:	443b      	add	r3, r7
 8002ac0:	2230      	movs	r2, #48	@ 0x30
 8002ac2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac8:	2b1f      	cmp	r3, #31
 8002aca:	d804      	bhi.n	8002ad6 <_ftoa+0x36e>
 8002acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ace:	1e5a      	subs	r2, r3, #1
 8002ad0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1ef      	bne.n	8002ab6 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ad8:	2b1f      	cmp	r3, #31
 8002ada:	d829      	bhi.n	8002b30 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8002adc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ae2:	3360      	adds	r3, #96	@ 0x60
 8002ae4:	443b      	add	r3, r7
 8002ae6:	222e      	movs	r2, #46	@ 0x2e
 8002ae8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002aec:	e020      	b.n	8002b30 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8002aee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002af0:	4b47      	ldr	r3, [pc, #284]	@ (8002c10 <_ftoa+0x4a8>)
 8002af2:	fb83 1302 	smull	r1, r3, r3, r2
 8002af6:	1099      	asrs	r1, r3, #2
 8002af8:	17d3      	asrs	r3, r2, #31
 8002afa:	1ac9      	subs	r1, r1, r3
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	1ad1      	subs	r1, r2, r3
 8002b06:	b2ca      	uxtb	r2, r1
 8002b08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b0a:	1c59      	adds	r1, r3, #1
 8002b0c:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002b0e:	3230      	adds	r2, #48	@ 0x30
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	3360      	adds	r3, #96	@ 0x60
 8002b14:	443b      	add	r3, r7
 8002b16:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1c:	4a3c      	ldr	r2, [pc, #240]	@ (8002c10 <_ftoa+0x4a8>)
 8002b1e:	fb82 1203 	smull	r1, r2, r2, r3
 8002b22:	1092      	asrs	r2, r2, #2
 8002b24:	17db      	asrs	r3, r3, #31
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002b30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b32:	2b1f      	cmp	r3, #31
 8002b34:	d9db      	bls.n	8002aee <_ftoa+0x386>
 8002b36:	e000      	b.n	8002b3a <_ftoa+0x3d2>
      break;
 8002b38:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002b3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d123      	bne.n	8002b8c <_ftoa+0x424>
 8002b44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01e      	beq.n	8002b8c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002b4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d014      	beq.n	8002b7e <_ftoa+0x416>
 8002b54:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d104      	bne.n	8002b66 <_ftoa+0x3fe>
 8002b5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <_ftoa+0x416>
      width--;
 8002b66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002b6c:	e007      	b.n	8002b7e <_ftoa+0x416>
      buf[len++] = '0';
 8002b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b74:	3360      	adds	r3, #96	@ 0x60
 8002b76:	443b      	add	r3, r7
 8002b78:	2230      	movs	r2, #48	@ 0x30
 8002b7a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002b7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d202      	bcs.n	8002b8c <_ftoa+0x424>
 8002b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b88:	2b1f      	cmp	r3, #31
 8002b8a:	d9f0      	bls.n	8002b6e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002b8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b8e:	2b1f      	cmp	r3, #31
 8002b90:	d827      	bhi.n	8002be2 <_ftoa+0x47a>
    if (negative) {
 8002b92:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <_ftoa+0x444>
      buf[len++] = '-';
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ba0:	3360      	adds	r3, #96	@ 0x60
 8002ba2:	443b      	add	r3, r7
 8002ba4:	222d      	movs	r2, #45	@ 0x2d
 8002ba6:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002baa:	e01a      	b.n	8002be2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8002bac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002bbc:	3360      	adds	r3, #96	@ 0x60
 8002bbe:	443b      	add	r3, r7
 8002bc0:	222b      	movs	r2, #43	@ 0x2b
 8002bc2:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002bc6:	e00c      	b.n	8002be2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002bc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <_ftoa+0x47a>
      buf[len++] = ' ';
 8002bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002bd8:	3360      	adds	r3, #96	@ 0x60
 8002bda:	443b      	add	r3, r7
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002be2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002be4:	9303      	str	r3, [sp, #12]
 8002be6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002be8:	9302      	str	r3, [sp, #8]
 8002bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bec:	9301      	str	r3, [sp, #4]
 8002bee:	f107 0318 	add.w	r3, r7, #24
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	6939      	ldr	r1, [r7, #16]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff fbb2 	bl	8002364 <_out_rev>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3764      	adds	r7, #100	@ 0x64
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	cccccccd 	.word	0xcccccccd
 8002c10:	66666667 	.word	0x66666667
 8002c14:	00000000 	.word	0x00000000

08002c18 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c1c:	b09f      	sub	sp, #124	@ 0x7c
 8002c1e:	af06      	add	r7, sp, #24
 8002c20:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c22:	6239      	str	r1, [r7, #32]
 8002c24:	61fa      	str	r2, [r7, #28]
 8002c26:	61bb      	str	r3, [r7, #24]
 8002c28:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002c2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c34:	f7fd ff50 	bl	8000ad8 <__aeabi_dcmpeq>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d014      	beq.n	8002c68 <_etoa+0x50>
 8002c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c42:	4bc1      	ldr	r3, [pc, #772]	@ (8002f48 <_etoa+0x330>)
 8002c44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c48:	f7fd ff6e 	bl	8000b28 <__aeabi_dcmpgt>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10a      	bne.n	8002c68 <_etoa+0x50>
 8002c52:	f04f 32ff 	mov.w	r2, #4294967295
 8002c56:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8002c5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c5e:	f7fd ff45 	bl	8000aec <__aeabi_dcmplt>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d012      	beq.n	8002c8e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002c68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c6c:	9302      	str	r3, [sp, #8]
 8002c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	ed97 0b04 	vldr	d0, [r7, #16]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	6a39      	ldr	r1, [r7, #32]
 8002c84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c86:	f7ff fd6f 	bl	8002768 <_ftoa>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	e23f      	b.n	800310e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	461e      	mov	r6, r3
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c9e:	f7fd ff25 	bl	8000aec <__aeabi_dcmplt>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <_etoa+0x94>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	461e      	mov	r6, r3
 8002cac:	f887 6053 	strb.w	r6, [r7, #83]	@ 0x53
  if (negative) {
 8002cb0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <_etoa+0xb4>
    value = -value;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	ed97 7b00 	vldr	d7, [r7]
 8002cc8:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002ccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002cd8:	2306      	movs	r3, #6
 8002cda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002cde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ce2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002ce6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	0d0a      	lsrs	r2, r1, #20
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cfc:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8002d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d06:	4690      	mov	r8, r2
 8002d08:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8002d0c:	4644      	mov	r4, r8
 8002d0e:	f049 557f 	orr.w	r5, r9, #1069547520	@ 0x3fc00000
 8002d12:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8002d16:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002d1a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002d1c:	f7fd fc0a 	bl	8000534 <__aeabi_i2d>
 8002d20:	a37d      	add	r3, pc, #500	@ (adr r3, 8002f18 <_etoa+0x300>)
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f7fd fc6f 	bl	8000608 <__aeabi_dmul>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4619      	mov	r1, r3
 8002d32:	a37b      	add	r3, pc, #492	@ (adr r3, 8002f20 <_etoa+0x308>)
 8002d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d38:	f7fd fab0 	bl	800029c <__adddf3>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4614      	mov	r4, r2
 8002d42:	461d      	mov	r5, r3
 8002d44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	4b7f      	ldr	r3, [pc, #508]	@ (8002f4c <_etoa+0x334>)
 8002d4e:	f7fd faa3 	bl	8000298 <__aeabi_dsub>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	a373      	add	r3, pc, #460	@ (adr r3, 8002f28 <_etoa+0x310>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f7fd fc52 	bl	8000608 <__aeabi_dmul>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4620      	mov	r0, r4
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	f7fd fa96 	bl	800029c <__adddf3>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	f7fd fef6 	bl	8000b68 <__aeabi_d2iz>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002d80:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002d82:	f7fd fbd7 	bl	8000534 <__aeabi_i2d>
 8002d86:	a36a      	add	r3, pc, #424	@ (adr r3, 8002f30 <_etoa+0x318>)
 8002d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8c:	f7fd fc3c 	bl	8000608 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f50 <_etoa+0x338>)
 8002d9e:	f7fd fa7d 	bl	800029c <__adddf3>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f7fd fedd 	bl	8000b68 <__aeabi_d2iz>
 8002dae:	4603      	mov	r3, r0
 8002db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002db2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002db4:	f7fd fbbe 	bl	8000534 <__aeabi_i2d>
 8002db8:	a35f      	add	r3, pc, #380	@ (adr r3, 8002f38 <_etoa+0x320>)
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	f7fd fc23 	bl	8000608 <__aeabi_dmul>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4614      	mov	r4, r2
 8002dc8:	461d      	mov	r5, r3
 8002dca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002dcc:	f7fd fbb2 	bl	8000534 <__aeabi_i2d>
 8002dd0:	a35b      	add	r3, pc, #364	@ (adr r3, 8002f40 <_etoa+0x328>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f7fd fc17 	bl	8000608 <__aeabi_dmul>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4620      	mov	r0, r4
 8002de0:	4629      	mov	r1, r5
 8002de2:	f7fd fa59 	bl	8000298 <__aeabi_dsub>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  const double z2 = z * z;
 8002dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002df2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002df6:	f7fd fc07 	bl	8000608 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e04:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002e08:	17da      	asrs	r2, r3, #31
 8002e0a:	469a      	mov	sl, r3
 8002e0c:	4693      	mov	fp, r2
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002e20:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002e24:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	f7fd fa36 	bl	800029c <__adddf3>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4690      	mov	r8, r2
 8002e36:	4699      	mov	r9, r3
 8002e38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e3c:	f04f 0000 	mov.w	r0, #0
 8002e40:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002e44:	f7fd fa28 	bl	8000298 <__aeabi_dsub>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4692      	mov	sl, r2
 8002e4e:	469b      	mov	fp, r3
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	4b3f      	ldr	r3, [pc, #252]	@ (8002f54 <_etoa+0x33c>)
 8002e56:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002e5a:	f7fd fcff 	bl	800085c <__aeabi_ddiv>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f58 <_etoa+0x340>)
 8002e6c:	f7fd fa16 	bl	800029c <__adddf3>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002e78:	f7fd fcf0 	bl	800085c <__aeabi_ddiv>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	4b34      	ldr	r3, [pc, #208]	@ (8002f5c <_etoa+0x344>)
 8002e8a:	f7fd fa07 	bl	800029c <__adddf3>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002e96:	f7fd fce1 	bl	800085c <__aeabi_ddiv>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4650      	mov	r0, sl
 8002ea0:	4659      	mov	r1, fp
 8002ea2:	f7fd f9fb 	bl	800029c <__adddf3>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4640      	mov	r0, r8
 8002eac:	4649      	mov	r1, r9
 8002eae:	f7fd fcd5 	bl	800085c <__aeabi_ddiv>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	4b28      	ldr	r3, [pc, #160]	@ (8002f60 <_etoa+0x348>)
 8002ec0:	f7fd f9ec 	bl	800029c <__adddf3>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd fb9c 	bl	8000608 <__aeabi_dmul>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002edc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ee0:	f7fd fe04 	bl	8000aec <__aeabi_dcmplt>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <_etoa+0x2ee>
    expval--;
 8002eea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eec:	3b01      	subs	r3, #1
 8002eee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    conv.F /= 10;
 8002ef0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	4b17      	ldr	r3, [pc, #92]	@ (8002f58 <_etoa+0x340>)
 8002efa:	f7fd fcaf 	bl	800085c <__aeabi_ddiv>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f08:	2b63      	cmp	r3, #99	@ 0x63
 8002f0a:	dc2b      	bgt.n	8002f64 <_etoa+0x34c>
 8002f0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f0e:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8002f12:	db27      	blt.n	8002f64 <_etoa+0x34c>
 8002f14:	2304      	movs	r3, #4
 8002f16:	e026      	b.n	8002f66 <_etoa+0x34e>
 8002f18:	509f79fb 	.word	0x509f79fb
 8002f1c:	3fd34413 	.word	0x3fd34413
 8002f20:	8b60c8b3 	.word	0x8b60c8b3
 8002f24:	3fc68a28 	.word	0x3fc68a28
 8002f28:	636f4361 	.word	0x636f4361
 8002f2c:	3fd287a7 	.word	0x3fd287a7
 8002f30:	0979a371 	.word	0x0979a371
 8002f34:	400a934f 	.word	0x400a934f
 8002f38:	bbb55516 	.word	0xbbb55516
 8002f3c:	40026bb1 	.word	0x40026bb1
 8002f40:	fefa39ef 	.word	0xfefa39ef
 8002f44:	3fe62e42 	.word	0x3fe62e42
 8002f48:	7fefffff 	.word	0x7fefffff
 8002f4c:	3ff80000 	.word	0x3ff80000
 8002f50:	3fe00000 	.word	0x3fe00000
 8002f54:	402c0000 	.word	0x402c0000
 8002f58:	40240000 	.word	0x40240000
 8002f5c:	40180000 	.word	0x40180000
 8002f60:	3ff00000 	.word	0x3ff00000
 8002f64:	2305      	movs	r3, #5
 8002f66:	65bb      	str	r3, [r7, #88]	@ 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d03d      	beq.n	8002ff0 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002f74:	a368      	add	r3, pc, #416	@ (adr r3, 8003118 <_etoa+0x500>)
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f7e:	f7fd fdc9 	bl	8000b14 <__aeabi_dcmpge>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d024      	beq.n	8002fd2 <_etoa+0x3ba>
 8002f88:	a365      	add	r3, pc, #404	@ (adr r3, 8003120 <_etoa+0x508>)
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f92:	f7fd fdab 	bl	8000aec <__aeabi_dcmplt>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01a      	beq.n	8002fd2 <_etoa+0x3ba>
      if ((int)prec > expval) {
 8002f9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fa0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	da07      	bge.n	8002fb6 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8002fa6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002faa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fb4:	e002      	b.n	8002fbc <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002fbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      // no characters in exponent
      minwidth = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	65bb      	str	r3, [r7, #88]	@ 0x58
      expval   = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fd0:	e00e      	b.n	8002ff0 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002fd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <_etoa+0x3d8>
 8002fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <_etoa+0x3d8>
        --prec;
 8002fe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fea:	3b01      	subs	r3, #1
 8002fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ff4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (width > minwidth) {
 8002ff6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002ffa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d904      	bls.n	800300a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003000:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	657b      	str	r3, [r7, #84]	@ 0x54
 8003008:	e001      	b.n	800300e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800300e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d004      	beq.n	8003024 <_etoa+0x40c>
 800301a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // rescale the float value
  if (expval) {
 8003024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <_etoa+0x426>
    value /= conv.F;
 800302a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800302e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003032:	f7fd fc13 	bl	800085c <__aeabi_ddiv>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	637b      	str	r3, [r7, #52]	@ 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003042:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <_etoa+0x440>
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e003      	b.n	8003060 <_etoa+0x448>
 8003058:	ed97 7b04 	vldr	d7, [r7, #16]
 800305c:	ed87 7b02 	vstr	d7, [r7, #8]
 8003060:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003064:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003068:	9302      	str	r3, [sp, #8]
 800306a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	ed97 0b02 	vldr	d0, [r7, #8]
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003080:	f7ff fb72 	bl	8002768 <_ftoa>
 8003084:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8003086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003088:	2b00      	cmp	r3, #0
 800308a:	d03f      	beq.n	800310c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800308c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <_etoa+0x484>
 8003098:	2045      	movs	r0, #69	@ 0x45
 800309a:	e000      	b.n	800309e <_etoa+0x486>
 800309c:	2065      	movs	r0, #101	@ 0x65
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	1c53      	adds	r3, r2, #1
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	6a39      	ldr	r1, [r7, #32]
 80030aa:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80030ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bfb8      	it	lt
 80030b2:	425b      	neglt	r3, r3
 80030b4:	4618      	mov	r0, r3
 80030b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030b8:	0fdb      	lsrs	r3, r3, #31
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030be:	3a01      	subs	r2, #1
 80030c0:	2105      	movs	r1, #5
 80030c2:	9105      	str	r1, [sp, #20]
 80030c4:	9204      	str	r2, [sp, #16]
 80030c6:	2200      	movs	r2, #0
 80030c8:	9203      	str	r2, [sp, #12]
 80030ca:	220a      	movs	r2, #10
 80030cc:	9202      	str	r2, [sp, #8]
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	9000      	str	r0, [sp, #0]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	6a39      	ldr	r1, [r7, #32]
 80030d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80030da:	f7ff fa6f 	bl	80025bc <_ntoa_long>
 80030de:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80030e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00f      	beq.n	800310c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80030ec:	e007      	b.n	80030fe <_etoa+0x4e6>
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	1c53      	adds	r3, r2, #1
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	6a39      	ldr	r1, [r7, #32]
 80030fa:	2020      	movs	r0, #32
 80030fc:	47a0      	blx	r4
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003108:	429a      	cmp	r2, r3
 800310a:	d8f0      	bhi.n	80030ee <_etoa+0x4d6>
    }
  }
  return idx;
 800310c:	69fb      	ldr	r3, [r7, #28]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3764      	adds	r7, #100	@ 0x64
 8003112:	46bd      	mov	sp, r7
 8003114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003118:	eb1c432d 	.word	0xeb1c432d
 800311c:	3f1a36e2 	.word	0x3f1a36e2
 8003120:	00000000 	.word	0x00000000
 8003124:	412e8480 	.word	0x412e8480

08003128 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800312c:	b0a3      	sub	sp, #140	@ 0x8c
 800312e:	af0a      	add	r7, sp, #40	@ 0x28
 8003130:	6178      	str	r0, [r7, #20]
 8003132:	6139      	str	r1, [r7, #16]
 8003134:	60fa      	str	r2, [r7, #12]
 8003136:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!buffer) {
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 84cf 	bne.w	8003ae2 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8003144:	4ba8      	ldr	r3, [pc, #672]	@ (80033e8 <_vsnprintf+0x2c0>)
 8003146:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003148:	f000 bccb 	b.w	8003ae2 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b25      	cmp	r3, #37	@ 0x25
 8003152:	d00d      	beq.n	8003170 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	7818      	ldrb	r0, [r3, #0]
 8003158:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800315a:	1c53      	adds	r3, r2, #1
 800315c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800315e:	697c      	ldr	r4, [r7, #20]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6939      	ldr	r1, [r7, #16]
 8003164:	47a0      	blx	r4
      format++;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3301      	adds	r3, #1
 800316a:	60bb      	str	r3, [r7, #8]
      continue;
 800316c:	f000 bcb9 	b.w	8003ae2 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	3301      	adds	r3, #1
 8003174:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	65fb      	str	r3, [r7, #92]	@ 0x5c
    do {
      switch (*format) {
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	3b20      	subs	r3, #32
 8003180:	2b10      	cmp	r3, #16
 8003182:	d857      	bhi.n	8003234 <_vsnprintf+0x10c>
 8003184:	a201      	add	r2, pc, #4	@ (adr r2, 800318c <_vsnprintf+0x64>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	0800320d 	.word	0x0800320d
 8003190:	08003235 	.word	0x08003235
 8003194:	08003235 	.word	0x08003235
 8003198:	08003221 	.word	0x08003221
 800319c:	08003235 	.word	0x08003235
 80031a0:	08003235 	.word	0x08003235
 80031a4:	08003235 	.word	0x08003235
 80031a8:	08003235 	.word	0x08003235
 80031ac:	08003235 	.word	0x08003235
 80031b0:	08003235 	.word	0x08003235
 80031b4:	08003235 	.word	0x08003235
 80031b8:	080031f9 	.word	0x080031f9
 80031bc:	08003235 	.word	0x08003235
 80031c0:	080031e5 	.word	0x080031e5
 80031c4:	08003235 	.word	0x08003235
 80031c8:	08003235 	.word	0x08003235
 80031cc:	080031d1 	.word	0x080031d1
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80031d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	3301      	adds	r3, #1
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	2301      	movs	r3, #1
 80031e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80031e2:	e02a      	b.n	800323a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80031e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3301      	adds	r3, #1
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	2301      	movs	r3, #1
 80031f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80031f6:	e020      	b.n	800323a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80031f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	3301      	adds	r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	2301      	movs	r3, #1
 8003208:	653b      	str	r3, [r7, #80]	@ 0x50
 800320a:	e016      	b.n	800323a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800320c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800320e:	f043 0308 	orr.w	r3, r3, #8
 8003212:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3301      	adds	r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	2301      	movs	r3, #1
 800321c:	653b      	str	r3, [r7, #80]	@ 0x50
 800321e:	e00c      	b.n	800323a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003220:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003222:	f043 0310 	orr.w	r3, r3, #16
 8003226:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	3301      	adds	r3, #1
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	2301      	movs	r3, #1
 8003230:	653b      	str	r3, [r7, #80]	@ 0x50
 8003232:	e002      	b.n	800323a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8003234:	2300      	movs	r3, #0
 8003236:	653b      	str	r3, [r7, #80]	@ 0x50
 8003238:	bf00      	nop
      }
    } while (n);
 800323a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800323c:	2b00      	cmp	r3, #0
 800323e:	d19c      	bne.n	800317a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (_is_digit(*format)) {
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff f850 	bl	80022ee <_is_digit>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d006      	beq.n	8003262 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8003254:	f107 0308 	add.w	r3, r7, #8
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff f85f 	bl	800231c <_atoi>
 800325e:	65b8      	str	r0, [r7, #88]	@ 0x58
 8003260:	e01a      	b.n	8003298 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b2a      	cmp	r3, #42	@ 0x2a
 8003268:	d116      	bne.n	8003298 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800326a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800326e:	1d1a      	adds	r2, r3, #4
 8003270:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	63bb      	str	r3, [r7, #56]	@ 0x38
      if (w < 0) {
 8003278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327a:	2b00      	cmp	r3, #0
 800327c:	da07      	bge.n	800328e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800327e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	65fb      	str	r3, [r7, #92]	@ 0x5c
        width = (unsigned int)-w;
 8003286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003288:	425b      	negs	r3, r3
 800328a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800328c:	e001      	b.n	8003292 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800328e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003290:	65bb      	str	r3, [r7, #88]	@ 0x58
      }
      format++;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3301      	adds	r3, #1
 8003296:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (*format == '.') {
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80032a2:	d127      	bne.n	80032f4 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80032a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
      format++;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	3301      	adds	r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f819 	bl	80022ee <_is_digit>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80032c2:	f107 0308 	add.w	r3, r7, #8
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff f828 	bl	800231c <_atoi>
 80032cc:	6578      	str	r0, [r7, #84]	@ 0x54
 80032ce:	e011      	b.n	80032f4 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80032d6:	d10d      	bne.n	80032f4 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80032d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032dc:	1d1a      	adds	r2, r3, #4
 80032de:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	637b      	str	r3, [r7, #52]	@ 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80032e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80032ec:	657b      	str	r3, [r7, #84]	@ 0x54
        format++;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	3b68      	subs	r3, #104	@ 0x68
 80032fa:	2b12      	cmp	r3, #18
 80032fc:	d866      	bhi.n	80033cc <_vsnprintf+0x2a4>
 80032fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <_vsnprintf+0x1dc>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003377 	.word	0x08003377
 8003308:	080033cd 	.word	0x080033cd
 800330c:	080033ad 	.word	0x080033ad
 8003310:	080033cd 	.word	0x080033cd
 8003314:	08003351 	.word	0x08003351
 8003318:	080033cd 	.word	0x080033cd
 800331c:	080033cd 	.word	0x080033cd
 8003320:	080033cd 	.word	0x080033cd
 8003324:	080033cd 	.word	0x080033cd
 8003328:	080033cd 	.word	0x080033cd
 800332c:	080033cd 	.word	0x080033cd
 8003330:	080033cd 	.word	0x080033cd
 8003334:	0800339d 	.word	0x0800339d
 8003338:	080033cd 	.word	0x080033cd
 800333c:	080033cd 	.word	0x080033cd
 8003340:	080033cd 	.word	0x080033cd
 8003344:	080033cd 	.word	0x080033cd
 8003348:	080033cd 	.word	0x080033cd
 800334c:	080033bd 	.word	0x080033bd
      case 'l' :
        flags |= FLAGS_LONG;
 8003350:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003356:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3301      	adds	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b6c      	cmp	r3, #108	@ 0x6c
 8003364:	d134      	bne.n	80033d0 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8003366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003368:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800336c:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3301      	adds	r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003374:	e02c      	b.n	80033d0 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800337c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3301      	adds	r3, #1
 8003382:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b68      	cmp	r3, #104	@ 0x68
 800338a:	d123      	bne.n	80033d4 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 800338c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800338e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003392:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	3301      	adds	r3, #1
 8003398:	60bb      	str	r3, [r7, #8]
        }
        break;
 800339a:	e01b      	b.n	80033d4 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800339c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800339e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	3301      	adds	r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
        break;
 80033aa:	e014      	b.n	80033d6 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80033ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60bb      	str	r3, [r7, #8]
        break;
 80033ba:	e00c      	b.n	80033d6 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80033bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	3301      	adds	r3, #1
 80033c8:	60bb      	str	r3, [r7, #8]
        break;
 80033ca:	e004      	b.n	80033d6 <_vsnprintf+0x2ae>
      default :
        break;
 80033cc:	bf00      	nop
 80033ce:	e002      	b.n	80033d6 <_vsnprintf+0x2ae>
        break;
 80033d0:	bf00      	nop
 80033d2:	e000      	b.n	80033d6 <_vsnprintf+0x2ae>
        break;
 80033d4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b67      	cmp	r3, #103	@ 0x67
 80033dc:	f300 80b8 	bgt.w	8003550 <_vsnprintf+0x428>
 80033e0:	2b25      	cmp	r3, #37	@ 0x25
 80033e2:	da27      	bge.n	8003434 <_vsnprintf+0x30c>
 80033e4:	e370      	b.n	8003ac8 <_vsnprintf+0x9a0>
 80033e6:	bf00      	nop
 80033e8:	08002273 	.word	0x08002273
 80033ec:	3b69      	subs	r3, #105	@ 0x69
 80033ee:	2201      	movs	r2, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	f249 0241 	movw	r2, #36929	@ 0x9041
 80033f8:	401a      	ands	r2, r3
 80033fa:	2a00      	cmp	r2, #0
 80033fc:	bf14      	ite	ne
 80033fe:	2201      	movne	r2, #1
 8003400:	2200      	moveq	r2, #0
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	2a00      	cmp	r2, #0
 8003406:	f040 80aa 	bne.w	800355e <_vsnprintf+0x436>
 800340a:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800340e:	2a00      	cmp	r2, #0
 8003410:	bf14      	ite	ne
 8003412:	2201      	movne	r2, #1
 8003414:	2200      	moveq	r2, #0
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	2a00      	cmp	r2, #0
 800341a:	f040 82fb 	bne.w	8003a14 <_vsnprintf+0x8ec>
 800341e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf14      	ite	ne
 8003426:	2301      	movne	r3, #1
 8003428:	2300      	moveq	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	f040 828d 	bne.w	800394c <_vsnprintf+0x824>
 8003432:	e349      	b.n	8003ac8 <_vsnprintf+0x9a0>
 8003434:	3b25      	subs	r3, #37	@ 0x25
 8003436:	2b42      	cmp	r3, #66	@ 0x42
 8003438:	f200 8346 	bhi.w	8003ac8 <_vsnprintf+0x9a0>
 800343c:	a201      	add	r2, pc, #4	@ (adr r2, 8003444 <_vsnprintf+0x31c>)
 800343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003442:	bf00      	nop
 8003444:	08003ab1 	.word	0x08003ab1
 8003448:	08003ac9 	.word	0x08003ac9
 800344c:	08003ac9 	.word	0x08003ac9
 8003450:	08003ac9 	.word	0x08003ac9
 8003454:	08003ac9 	.word	0x08003ac9
 8003458:	08003ac9 	.word	0x08003ac9
 800345c:	08003ac9 	.word	0x08003ac9
 8003460:	08003ac9 	.word	0x08003ac9
 8003464:	08003ac9 	.word	0x08003ac9
 8003468:	08003ac9 	.word	0x08003ac9
 800346c:	08003ac9 	.word	0x08003ac9
 8003470:	08003ac9 	.word	0x08003ac9
 8003474:	08003ac9 	.word	0x08003ac9
 8003478:	08003ac9 	.word	0x08003ac9
 800347c:	08003ac9 	.word	0x08003ac9
 8003480:	08003ac9 	.word	0x08003ac9
 8003484:	08003ac9 	.word	0x08003ac9
 8003488:	08003ac9 	.word	0x08003ac9
 800348c:	08003ac9 	.word	0x08003ac9
 8003490:	08003ac9 	.word	0x08003ac9
 8003494:	08003ac9 	.word	0x08003ac9
 8003498:	08003ac9 	.word	0x08003ac9
 800349c:	08003ac9 	.word	0x08003ac9
 80034a0:	08003ac9 	.word	0x08003ac9
 80034a4:	08003ac9 	.word	0x08003ac9
 80034a8:	08003ac9 	.word	0x08003ac9
 80034ac:	08003ac9 	.word	0x08003ac9
 80034b0:	08003ac9 	.word	0x08003ac9
 80034b4:	08003ac9 	.word	0x08003ac9
 80034b8:	08003ac9 	.word	0x08003ac9
 80034bc:	08003ac9 	.word	0x08003ac9
 80034c0:	08003ac9 	.word	0x08003ac9
 80034c4:	08003865 	.word	0x08003865
 80034c8:	08003815 	.word	0x08003815
 80034cc:	08003865 	.word	0x08003865
 80034d0:	08003ac9 	.word	0x08003ac9
 80034d4:	08003ac9 	.word	0x08003ac9
 80034d8:	08003ac9 	.word	0x08003ac9
 80034dc:	08003ac9 	.word	0x08003ac9
 80034e0:	08003ac9 	.word	0x08003ac9
 80034e4:	08003ac9 	.word	0x08003ac9
 80034e8:	08003ac9 	.word	0x08003ac9
 80034ec:	08003ac9 	.word	0x08003ac9
 80034f0:	08003ac9 	.word	0x08003ac9
 80034f4:	08003ac9 	.word	0x08003ac9
 80034f8:	08003ac9 	.word	0x08003ac9
 80034fc:	08003ac9 	.word	0x08003ac9
 8003500:	08003ac9 	.word	0x08003ac9
 8003504:	08003ac9 	.word	0x08003ac9
 8003508:	08003ac9 	.word	0x08003ac9
 800350c:	08003ac9 	.word	0x08003ac9
 8003510:	0800355f 	.word	0x0800355f
 8003514:	08003ac9 	.word	0x08003ac9
 8003518:	08003ac9 	.word	0x08003ac9
 800351c:	08003ac9 	.word	0x08003ac9
 8003520:	08003ac9 	.word	0x08003ac9
 8003524:	08003ac9 	.word	0x08003ac9
 8003528:	08003ac9 	.word	0x08003ac9
 800352c:	08003ac9 	.word	0x08003ac9
 8003530:	08003ac9 	.word	0x08003ac9
 8003534:	08003ac9 	.word	0x08003ac9
 8003538:	0800355f 	.word	0x0800355f
 800353c:	080038d5 	.word	0x080038d5
 8003540:	0800355f 	.word	0x0800355f
 8003544:	08003865 	.word	0x08003865
 8003548:	08003815 	.word	0x08003815
 800354c:	08003865 	.word	0x08003865
 8003550:	2b78      	cmp	r3, #120	@ 0x78
 8003552:	f300 82b9 	bgt.w	8003ac8 <_vsnprintf+0x9a0>
 8003556:	2b69      	cmp	r3, #105	@ 0x69
 8003558:	f6bf af48 	bge.w	80033ec <_vsnprintf+0x2c4>
 800355c:	e2b4      	b.n	8003ac8 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b78      	cmp	r3, #120	@ 0x78
 8003564:	d003      	beq.n	800356e <_vsnprintf+0x446>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b58      	cmp	r3, #88	@ 0x58
 800356c:	d102      	bne.n	8003574 <_vsnprintf+0x44c>
          base = 16U;
 800356e:	2310      	movs	r3, #16
 8003570:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003572:	e013      	b.n	800359c <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b6f      	cmp	r3, #111	@ 0x6f
 800357a:	d102      	bne.n	8003582 <_vsnprintf+0x45a>
          base =  8U;
 800357c:	2308      	movs	r3, #8
 800357e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003580:	e00c      	b.n	800359c <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b62      	cmp	r3, #98	@ 0x62
 8003588:	d102      	bne.n	8003590 <_vsnprintf+0x468>
          base =  2U;
 800358a:	2302      	movs	r3, #2
 800358c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800358e:	e005      	b.n	800359c <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8003590:	230a      	movs	r3, #10
 8003592:	64bb      	str	r3, [r7, #72]	@ 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003594:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003596:	f023 0310 	bic.w	r3, r3, #16
 800359a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }
        // uppercase
        if (*format == 'X') {
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b58      	cmp	r3, #88	@ 0x58
 80035a2:	d103      	bne.n	80035ac <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 80035a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035a6:	f043 0320 	orr.w	r3, r3, #32
 80035aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b69      	cmp	r3, #105	@ 0x69
 80035b2:	d007      	beq.n	80035c4 <_vsnprintf+0x49c>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b64      	cmp	r3, #100	@ 0x64
 80035ba:	d003      	beq.n	80035c4 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80035bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035be:	f023 030c 	bic.w	r3, r3, #12
 80035c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80035c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 80035ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b69      	cmp	r3, #105	@ 0x69
 80035dc:	d004      	beq.n	80035e8 <_vsnprintf+0x4c0>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b64      	cmp	r3, #100	@ 0x64
 80035e4:	f040 8098 	bne.w	8003718 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80035e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d031      	beq.n	8003656 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80035f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035f6:	3307      	adds	r3, #7
 80035f8:	f023 0307 	bic.w	r3, r3, #7
 80035fc:	f103 0208 	add.w	r2, r3, #8
 8003600:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800360c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	da06      	bge.n	8003622 <_vsnprintf+0x4fa>
 8003614:	2100      	movs	r1, #0
 8003616:	f1d2 0800 	rsbs	r8, r2, #0
 800361a:	eb61 0903 	sbc.w	r9, r1, r3
 800361e:	4642      	mov	r2, r8
 8003620:	464b      	mov	r3, r9
 8003622:	69f9      	ldr	r1, [r7, #28]
 8003624:	0fc9      	lsrs	r1, r1, #31
 8003626:	b2c9      	uxtb	r1, r1
 8003628:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800362a:	2400      	movs	r4, #0
 800362c:	4682      	mov	sl, r0
 800362e:	46a3      	mov	fp, r4
 8003630:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003632:	9008      	str	r0, [sp, #32]
 8003634:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003636:	9007      	str	r0, [sp, #28]
 8003638:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800363a:	9006      	str	r0, [sp, #24]
 800363c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003640:	9102      	str	r1, [sp, #8]
 8003642:	e9cd 2300 	strd	r2, r3, [sp]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800364a:	6939      	ldr	r1, [r7, #16]
 800364c:	6978      	ldr	r0, [r7, #20]
 800364e:	f7ff f81b 	bl	8002688 <_ntoa_long_long>
 8003652:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003654:	e0da      	b.n	800380c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8003660:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003664:	1d1a      	adds	r2, r3, #4
 8003666:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	627b      	str	r3, [r7, #36]	@ 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	2b00      	cmp	r3, #0
 8003672:	bfb8      	it	lt
 8003674:	425b      	neglt	r3, r3
 8003676:	4619      	mov	r1, r3
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	0fdb      	lsrs	r3, r3, #31
 800367c:	b2db      	uxtb	r3, r3
 800367e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003680:	9205      	str	r2, [sp, #20]
 8003682:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003684:	9204      	str	r2, [sp, #16]
 8003686:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003688:	9203      	str	r2, [sp, #12]
 800368a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800368c:	9202      	str	r2, [sp, #8]
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	9100      	str	r1, [sp, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003696:	6939      	ldr	r1, [r7, #16]
 8003698:	6978      	ldr	r0, [r7, #20]
 800369a:	f7fe ff8f 	bl	80025bc <_ntoa_long>
 800369e:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80036a0:	e0b4      	b.n	800380c <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80036a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <_vsnprintf+0x594>
 80036ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036b0:	1d1a      	adds	r2, r3, #4
 80036b2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e012      	b.n	80036e2 <_vsnprintf+0x5ba>
 80036bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d007      	beq.n	80036d6 <_vsnprintf+0x5ae>
 80036c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036ca:	1d1a      	adds	r2, r3, #4
 80036cc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	b21b      	sxth	r3, r3
 80036d4:	e005      	b.n	80036e2 <_vsnprintf+0x5ba>
 80036d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	62bb      	str	r3, [r7, #40]	@ 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80036e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bfb8      	it	lt
 80036ea:	425b      	neglt	r3, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f0:	0fdb      	lsrs	r3, r3, #31
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80036f6:	9205      	str	r2, [sp, #20]
 80036f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036fa:	9204      	str	r2, [sp, #16]
 80036fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036fe:	9203      	str	r2, [sp, #12]
 8003700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003702:	9202      	str	r2, [sp, #8]
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	9100      	str	r1, [sp, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800370c:	6939      	ldr	r1, [r7, #16]
 800370e:	6978      	ldr	r0, [r7, #20]
 8003710:	f7fe ff54 	bl	80025bc <_ntoa_long>
 8003714:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003716:	e079      	b.n	800380c <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800371a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800371e:	2b00      	cmp	r3, #0
 8003720:	d022      	beq.n	8003768 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003722:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003726:	3307      	adds	r3, #7
 8003728:	f023 0307 	bic.w	r3, r3, #7
 800372c:	f103 0208 	add.w	r2, r3, #8
 8003730:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800373a:	2000      	movs	r0, #0
 800373c:	460d      	mov	r5, r1
 800373e:	4606      	mov	r6, r0
 8003740:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003742:	9108      	str	r1, [sp, #32]
 8003744:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003746:	9107      	str	r1, [sp, #28]
 8003748:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800374a:	9106      	str	r1, [sp, #24]
 800374c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003750:	2100      	movs	r1, #0
 8003752:	9102      	str	r1, [sp, #8]
 8003754:	e9cd 2300 	strd	r2, r3, [sp]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800375c:	6939      	ldr	r1, [r7, #16]
 800375e:	6978      	ldr	r0, [r7, #20]
 8003760:	f7fe ff92 	bl	8002688 <_ntoa_long_long>
 8003764:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8003766:	e051      	b.n	800380c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003768:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800376a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d018      	beq.n	80037a4 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003772:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003776:	1d1a      	adds	r2, r3, #4
 8003778:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003780:	9205      	str	r2, [sp, #20]
 8003782:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003784:	9204      	str	r2, [sp, #16]
 8003786:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003788:	9203      	str	r2, [sp, #12]
 800378a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800378c:	9202      	str	r2, [sp, #8]
 800378e:	2200      	movs	r2, #0
 8003790:	9201      	str	r2, [sp, #4]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003798:	6939      	ldr	r1, [r7, #16]
 800379a:	6978      	ldr	r0, [r7, #20]
 800379c:	f7fe ff0e 	bl	80025bc <_ntoa_long>
 80037a0:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80037a2:	e033      	b.n	800380c <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80037a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <_vsnprintf+0x696>
 80037ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037b2:	1d1a      	adds	r2, r3, #4
 80037b4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	e012      	b.n	80037e4 <_vsnprintf+0x6bc>
 80037be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <_vsnprintf+0x6b0>
 80037c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037cc:	1d1a      	adds	r2, r3, #4
 80037ce:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	e005      	b.n	80037e4 <_vsnprintf+0x6bc>
 80037d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037dc:	1d1a      	adds	r2, r3, #4
 80037de:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80037e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037e8:	9305      	str	r3, [sp, #20]
 80037ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037ec:	9304      	str	r3, [sp, #16]
 80037ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f0:	9303      	str	r3, [sp, #12]
 80037f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037f4:	9302      	str	r3, [sp, #8]
 80037f6:	2300      	movs	r3, #0
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003802:	6939      	ldr	r1, [r7, #16]
 8003804:	6978      	ldr	r0, [r7, #20]
 8003806:	f7fe fed9 	bl	80025bc <_ntoa_long>
 800380a:	64f8      	str	r0, [r7, #76]	@ 0x4c
          }
        }
        format++;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	3301      	adds	r3, #1
 8003810:	60bb      	str	r3, [r7, #8]
        break;
 8003812:	e166      	b.n	8003ae2 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b46      	cmp	r3, #70	@ 0x46
 800381a:	d103      	bne.n	8003824 <_vsnprintf+0x6fc>
 800381c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800381e:	f043 0320 	orr.w	r3, r3, #32
 8003822:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003824:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003828:	3307      	adds	r3, #7
 800382a:	f023 0307 	bic.w	r3, r3, #7
 800382e:	f103 0208 	add.w	r2, r3, #8
 8003832:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003836:	ed93 7b00 	vldr	d7, [r3]
 800383a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800383c:	9302      	str	r3, [sp, #8]
 800383e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	eeb0 0a47 	vmov.f32	s0, s14
 800384a:	eef0 0a67 	vmov.f32	s1, s15
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003852:	6939      	ldr	r1, [r7, #16]
 8003854:	6978      	ldr	r0, [r7, #20]
 8003856:	f7fe ff87 	bl	8002768 <_ftoa>
 800385a:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	3301      	adds	r3, #1
 8003860:	60bb      	str	r3, [r7, #8]
        break;
 8003862:	e13e      	b.n	8003ae2 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b67      	cmp	r3, #103	@ 0x67
 800386a:	d003      	beq.n	8003874 <_vsnprintf+0x74c>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b47      	cmp	r3, #71	@ 0x47
 8003872:	d103      	bne.n	800387c <_vsnprintf+0x754>
 8003874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003876:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800387a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b45      	cmp	r3, #69	@ 0x45
 8003882:	d003      	beq.n	800388c <_vsnprintf+0x764>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b47      	cmp	r3, #71	@ 0x47
 800388a:	d103      	bne.n	8003894 <_vsnprintf+0x76c>
 800388c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800388e:	f043 0320 	orr.w	r3, r3, #32
 8003892:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003894:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003898:	3307      	adds	r3, #7
 800389a:	f023 0307 	bic.w	r3, r3, #7
 800389e:	f103 0208 	add.w	r2, r3, #8
 80038a2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80038a6:	ed93 7b00 	vldr	d7, [r3]
 80038aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ac:	9302      	str	r3, [sp, #8]
 80038ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	eeb0 0a47 	vmov.f32	s0, s14
 80038ba:	eef0 0a67 	vmov.f32	s1, s15
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038c2:	6939      	ldr	r1, [r7, #16]
 80038c4:	6978      	ldr	r0, [r7, #20]
 80038c6:	f7ff f9a7 	bl	8002c18 <_etoa>
 80038ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	3301      	adds	r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
        break;
 80038d2:	e106      	b.n	8003ae2 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80038d4:	2301      	movs	r3, #1
 80038d6:	647b      	str	r3, [r7, #68]	@ 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80038d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10e      	bne.n	8003900 <_vsnprintf+0x7d8>
          while (l++ < width) {
 80038e2:	e007      	b.n	80038f4 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 80038e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038e6:	1c53      	adds	r3, r2, #1
 80038e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038ea:	697c      	ldr	r4, [r7, #20]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6939      	ldr	r1, [r7, #16]
 80038f0:	2020      	movs	r0, #32
 80038f2:	47a0      	blx	r4
          while (l++ < width) {
 80038f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	647a      	str	r2, [r7, #68]	@ 0x44
 80038fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d8f1      	bhi.n	80038e4 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003900:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003904:	1d1a      	adds	r2, r3, #4
 8003906:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	b2d8      	uxtb	r0, r3
 800390e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003910:	1c53      	adds	r3, r2, #1
 8003912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003914:	697c      	ldr	r4, [r7, #20]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6939      	ldr	r1, [r7, #16]
 800391a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800391c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00e      	beq.n	8003944 <_vsnprintf+0x81c>
          while (l++ < width) {
 8003926:	e007      	b.n	8003938 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8003928:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800392a:	1c53      	adds	r3, r2, #1
 800392c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800392e:	697c      	ldr	r4, [r7, #20]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6939      	ldr	r1, [r7, #16]
 8003934:	2020      	movs	r0, #32
 8003936:	47a0      	blx	r4
          while (l++ < width) {
 8003938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	647a      	str	r2, [r7, #68]	@ 0x44
 800393e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003940:	429a      	cmp	r2, r3
 8003942:	d8f1      	bhi.n	8003928 <_vsnprintf+0x800>
          }
        }
        format++;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3301      	adds	r3, #1
 8003948:	60bb      	str	r3, [r7, #8]
        break;
 800394a:	e0ca      	b.n	8003ae2 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800394c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003950:	1d1a      	adds	r2, r3, #4
 8003952:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	643b      	str	r3, [r7, #64]	@ 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800395a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <_vsnprintf+0x83c>
 8003960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003962:	e001      	b.n	8003968 <_vsnprintf+0x840>
 8003964:	f04f 33ff 	mov.w	r3, #4294967295
 8003968:	4619      	mov	r1, r3
 800396a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800396c:	f7fe fca2 	bl	80022b4 <_strnlen_s>
 8003970:	63f8      	str	r0, [r7, #60]	@ 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 800397c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800397e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003980:	4293      	cmp	r3, r2
 8003982:	bf28      	it	cs
 8003984:	4613      	movcs	r3, r2
 8003986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003988:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11a      	bne.n	80039c8 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8003992:	e007      	b.n	80039a4 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8003994:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003996:	1c53      	adds	r3, r2, #1
 8003998:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800399a:	697c      	ldr	r4, [r7, #20]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6939      	ldr	r1, [r7, #16]
 80039a0:	2020      	movs	r0, #32
 80039a2:	47a0      	blx	r4
          while (l++ < width) {
 80039a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d8f1      	bhi.n	8003994 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80039b0:	e00a      	b.n	80039c8 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 80039b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80039b8:	7818      	ldrb	r0, [r3, #0]
 80039ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039bc:	1c53      	adds	r3, r2, #1
 80039be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039c0:	697c      	ldr	r4, [r7, #20]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6939      	ldr	r1, [r7, #16]
 80039c6:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80039c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <_vsnprintf+0x8bc>
 80039d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0eb      	beq.n	80039b2 <_vsnprintf+0x88a>
 80039da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039dc:	1e5a      	subs	r2, r3, #1
 80039de:	657a      	str	r2, [r7, #84]	@ 0x54
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e6      	bne.n	80039b2 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80039e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00e      	beq.n	8003a0c <_vsnprintf+0x8e4>
          while (l++ < width) {
 80039ee:	e007      	b.n	8003a00 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 80039f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039f2:	1c53      	adds	r3, r2, #1
 80039f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f6:	697c      	ldr	r4, [r7, #20]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6939      	ldr	r1, [r7, #16]
 80039fc:	2020      	movs	r0, #32
 80039fe:	47a0      	blx	r4
          while (l++ < width) {
 8003a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d8f1      	bhi.n	80039f0 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	60bb      	str	r3, [r7, #8]
        break;
 8003a12:	e066      	b.n	8003ae2 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003a14:	2308      	movs	r3, #8
 8003a16:	65bb      	str	r3, [r7, #88]	@ 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003a18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a1a:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8003a1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (is_ll) {
 8003a26:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d023      	beq.n	8003a76 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a32:	1d1a      	adds	r2, r3, #4
 8003a34:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	603a      	str	r2, [r7, #0]
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a44:	9308      	str	r3, [sp, #32]
 8003a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a48:	9307      	str	r3, [sp, #28]
 8003a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a4c:	9306      	str	r3, [sp, #24]
 8003a4e:	f04f 0210 	mov.w	r2, #16
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9302      	str	r3, [sp, #8]
 8003a5e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003a62:	e9cd 3400 	strd	r3, r4, [sp]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a6a:	6939      	ldr	r1, [r7, #16]
 8003a6c:	6978      	ldr	r0, [r7, #20]
 8003a6e:	f7fe fe0b 	bl	8002688 <_ntoa_long_long>
 8003a72:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8003a74:	e018      	b.n	8003aa8 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a7a:	1d1a      	adds	r2, r3, #4
 8003a7c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a86:	9305      	str	r3, [sp, #20]
 8003a88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a8a:	9304      	str	r3, [sp, #16]
 8003a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a8e:	9303      	str	r3, [sp, #12]
 8003a90:	2310      	movs	r3, #16
 8003a92:	9302      	str	r3, [sp, #8]
 8003a94:	2300      	movs	r3, #0
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	9200      	str	r2, [sp, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a9e:	6939      	ldr	r1, [r7, #16]
 8003aa0:	6978      	ldr	r0, [r7, #20]
 8003aa2:	f7fe fd8b 	bl	80025bc <_ntoa_long>
 8003aa6:	64f8      	str	r0, [r7, #76]	@ 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60bb      	str	r3, [r7, #8]
        break;
 8003aae:	e018      	b.n	8003ae2 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003ab0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ab2:	1c53      	adds	r3, r2, #1
 8003ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ab6:	697c      	ldr	r4, [r7, #20]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6939      	ldr	r1, [r7, #16]
 8003abc:	2025      	movs	r0, #37	@ 0x25
 8003abe:	47a0      	blx	r4
        format++;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60bb      	str	r3, [r7, #8]
        break;
 8003ac6:	e00c      	b.n	8003ae2 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	7818      	ldrb	r0, [r3, #0]
 8003acc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ace:	1c53      	adds	r3, r2, #1
 8003ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ad2:	697c      	ldr	r4, [r7, #20]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6939      	ldr	r1, [r7, #16]
 8003ad8:	47a0      	blx	r4
        format++;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3301      	adds	r3, #1
 8003ade:	60bb      	str	r3, [r7, #8]
        break;
 8003ae0:	bf00      	nop
  while (*format)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f47f ab30 	bne.w	800314c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003aec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d302      	bcc.n	8003afa <_vsnprintf+0x9d2>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1e5a      	subs	r2, r3, #1
 8003af8:	e000      	b.n	8003afc <_vsnprintf+0x9d4>
 8003afa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003afc:	697c      	ldr	r4, [r7, #20]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6939      	ldr	r1, [r7, #16]
 8003b02:	2000      	movs	r0, #0
 8003b04:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3764      	adds	r7, #100	@ 0x64
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b12:	bf00      	nop

08003b14 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8003b14:	b40f      	push	{r0, r1, r2, r3}
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8003b1c:	f107 031c 	add.w	r3, r7, #28
 8003b20:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003b22:	1d39      	adds	r1, r7, #4
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2e:	4806      	ldr	r0, [pc, #24]	@ (8003b48 <printf_+0x34>)
 8003b30:	f7ff fafa 	bl	8003128 <_vsnprintf>
 8003b34:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003b36:	68fb      	ldr	r3, [r7, #12]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b42:	b004      	add	sp, #16
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	0800228f 	.word	0x0800228f

08003b4c <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8003b4c:	b40e      	push	{r1, r2, r3}
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b087      	sub	sp, #28
 8003b52:	af02      	add	r7, sp, #8
 8003b54:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8003b56:	f107 0320 	add.w	r3, r7, #32
 8003b5a:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f04f 32ff 	mov.w	r2, #4294967295
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4805      	ldr	r0, [pc, #20]	@ (8003b80 <sprintf_+0x34>)
 8003b6a:	f7ff fadd 	bl	8003128 <_vsnprintf>
 8003b6e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003b70:	68fb      	ldr	r3, [r7, #12]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b7c:	b003      	add	sp, #12
 8003b7e:	4770      	bx	lr
 8003b80:	08002245 	.word	0x08002245

08003b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <HAL_MspInit+0x54>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	4a11      	ldr	r2, [pc, #68]	@ (8003bd8 <HAL_MspInit+0x54>)
 8003b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd8 <HAL_MspInit+0x54>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ba2:	607b      	str	r3, [r7, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <HAL_MspInit+0x54>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd8 <HAL_MspInit+0x54>)
 8003bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bb6:	4b08      	ldr	r3, [pc, #32]	@ (8003bd8 <HAL_MspInit+0x54>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	210f      	movs	r1, #15
 8003bc6:	f06f 0001 	mvn.w	r0, #1
 8003bca:	f000 fb0d 	bl	80041e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023800 	.word	0x40023800

08003bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08c      	sub	sp, #48	@ 0x30
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8003bec:	2300      	movs	r3, #0
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8003cac <HAL_InitTick+0xd0>)
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8003cac <HAL_InitTick+0xd0>)
 8003bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bfa:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003cac <HAL_InitTick+0xd0>)
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c08:	f107 020c 	add.w	r2, r7, #12
 8003c0c:	f107 0310 	add.w	r3, r7, #16
 8003c10:	4611      	mov	r1, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f002 f986 	bl	8005f24 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003c18:	f002 f970 	bl	8005efc <HAL_RCC_GetPCLK2Freq>
 8003c1c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c20:	4a23      	ldr	r2, [pc, #140]	@ (8003cb0 <HAL_InitTick+0xd4>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0c9b      	lsrs	r3, r3, #18
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8003c2c:	4b21      	ldr	r3, [pc, #132]	@ (8003cb4 <HAL_InitTick+0xd8>)
 8003c2e:	4a22      	ldr	r2, [pc, #136]	@ (8003cb8 <HAL_InitTick+0xdc>)
 8003c30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8003c32:	4b20      	ldr	r3, [pc, #128]	@ (8003cb4 <HAL_InitTick+0xd8>)
 8003c34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003c38:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb4 <HAL_InitTick+0xd8>)
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8003c40:	4b1c      	ldr	r3, [pc, #112]	@ (8003cb4 <HAL_InitTick+0xd8>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c46:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb4 <HAL_InitTick+0xd8>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c4c:	4b19      	ldr	r3, [pc, #100]	@ (8003cb4 <HAL_InitTick+0xd8>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8003c52:	4818      	ldr	r0, [pc, #96]	@ (8003cb4 <HAL_InitTick+0xd8>)
 8003c54:	f002 f998 	bl	8005f88 <HAL_TIM_Base_Init>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d11b      	bne.n	8003c9e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8003c66:	4813      	ldr	r0, [pc, #76]	@ (8003cb4 <HAL_InitTick+0xd8>)
 8003c68:	f002 f9e8 	bl	800603c <HAL_TIM_Base_Start_IT>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003c72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d111      	bne.n	8003c9e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c7a:	2019      	movs	r0, #25
 8003c7c:	f000 fad0 	bl	8004220 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b0f      	cmp	r3, #15
 8003c84:	d808      	bhi.n	8003c98 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003c86:	2200      	movs	r2, #0
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	2019      	movs	r0, #25
 8003c8c:	f000 faac 	bl	80041e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c90:	4a0a      	ldr	r2, [pc, #40]	@ (8003cbc <HAL_InitTick+0xe0>)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e002      	b.n	8003c9e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3730      	adds	r7, #48	@ 0x30
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	431bde83 	.word	0x431bde83
 8003cb4:	2000067c 	.word	0x2000067c
 8003cb8:	40014400 	.word	0x40014400
 8003cbc:	20000008 	.word	0x20000008

08003cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <NMI_Handler+0x4>

08003cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <HardFault_Handler+0x4>

08003cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <MemManage_Handler+0x4>

08003cd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cdc:	bf00      	nop
 8003cde:	e7fd      	b.n	8003cdc <BusFault_Handler+0x4>

08003ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ce4:	bf00      	nop
 8003ce6:	e7fd      	b.n	8003ce4 <UsageFault_Handler+0x4>

08003ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003cfc:	4802      	ldr	r0, [pc, #8]	@ (8003d08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003cfe:	f002 f9ff 	bl	8006100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	2000067c 	.word	0x2000067c

08003d0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return 1;
 8003d10:	2301      	movs	r3, #1
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_kill>:

int _kill(int pid, int sig)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d26:	f007 ffb1 	bl	800bc8c <__errno>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2216      	movs	r2, #22
 8003d2e:	601a      	str	r2, [r3, #0]
  return -1;
 8003d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <_exit>:

void _exit (int status)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d44:	f04f 31ff 	mov.w	r1, #4294967295
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ffe7 	bl	8003d1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d4e:	bf00      	nop
 8003d50:	e7fd      	b.n	8003d4e <_exit+0x12>

08003d52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e00a      	b.n	8003d7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d64:	f3af 8000 	nop.w
 8003d68:	4601      	mov	r1, r0
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	60ba      	str	r2, [r7, #8]
 8003d70:	b2ca      	uxtb	r2, r1
 8003d72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3301      	adds	r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	dbf0      	blt.n	8003d64 <_read+0x12>
  }

  return len;
 8003d82:	687b      	ldr	r3, [r7, #4]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e009      	b.n	8003db2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	60ba      	str	r2, [r7, #8]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	3301      	adds	r3, #1
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	dbf1      	blt.n	8003d9e <_write+0x12>
  }
  return len;
 8003dba:	687b      	ldr	r3, [r7, #4]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_close>:

int _close(int file)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dec:	605a      	str	r2, [r3, #4]
  return 0;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <_isatty>:

int _isatty(int file)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e04:	2301      	movs	r3, #1
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b085      	sub	sp, #20
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e34:	4a14      	ldr	r2, [pc, #80]	@ (8003e88 <_sbrk+0x5c>)
 8003e36:	4b15      	ldr	r3, [pc, #84]	@ (8003e8c <_sbrk+0x60>)
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e40:	4b13      	ldr	r3, [pc, #76]	@ (8003e90 <_sbrk+0x64>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e48:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <_sbrk+0x64>)
 8003e4a:	4a12      	ldr	r2, [pc, #72]	@ (8003e94 <_sbrk+0x68>)
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e4e:	4b10      	ldr	r3, [pc, #64]	@ (8003e90 <_sbrk+0x64>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d207      	bcs.n	8003e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e5c:	f007 ff16 	bl	800bc8c <__errno>
 8003e60:	4603      	mov	r3, r0
 8003e62:	220c      	movs	r2, #12
 8003e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6a:	e009      	b.n	8003e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e6c:	4b08      	ldr	r3, [pc, #32]	@ (8003e90 <_sbrk+0x64>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e72:	4b07      	ldr	r3, [pc, #28]	@ (8003e90 <_sbrk+0x64>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	4a05      	ldr	r2, [pc, #20]	@ (8003e90 <_sbrk+0x64>)
 8003e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20020000 	.word	0x20020000
 8003e8c:	00000400 	.word	0x00000400
 8003e90:	200006c4 	.word	0x200006c4
 8003e94:	20005248 	.word	0x20005248

08003e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e9c:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <SystemInit+0x20>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea2:	4a05      	ldr	r2, [pc, #20]	@ (8003eb8 <SystemInit+0x20>)
 8003ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ec0:	4b11      	ldr	r3, [pc, #68]	@ (8003f08 <MX_USART2_UART_Init+0x4c>)
 8003ec2:	4a12      	ldr	r2, [pc, #72]	@ (8003f0c <MX_USART2_UART_Init+0x50>)
 8003ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ec6:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <MX_USART2_UART_Init+0x4c>)
 8003ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ece:	4b0e      	ldr	r3, [pc, #56]	@ (8003f08 <MX_USART2_UART_Init+0x4c>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <MX_USART2_UART_Init+0x4c>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003eda:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <MX_USART2_UART_Init+0x4c>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ee0:	4b09      	ldr	r3, [pc, #36]	@ (8003f08 <MX_USART2_UART_Init+0x4c>)
 8003ee2:	220c      	movs	r2, #12
 8003ee4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ee6:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <MX_USART2_UART_Init+0x4c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eec:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <MX_USART2_UART_Init+0x4c>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ef2:	4805      	ldr	r0, [pc, #20]	@ (8003f08 <MX_USART2_UART_Init+0x4c>)
 8003ef4:	f002 fabc 	bl	8006470 <HAL_UART_Init>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003efe:	f7fe f99b 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200006c8 	.word	0x200006c8
 8003f0c:	40004400 	.word	0x40004400

08003f10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	@ 0x28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a19      	ldr	r2, [pc, #100]	@ (8003f94 <HAL_UART_MspInit+0x84>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d12b      	bne.n	8003f8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	4b18      	ldr	r3, [pc, #96]	@ (8003f98 <HAL_UART_MspInit+0x88>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	4a17      	ldr	r2, [pc, #92]	@ (8003f98 <HAL_UART_MspInit+0x88>)
 8003f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f42:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <HAL_UART_MspInit+0x88>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	4b11      	ldr	r3, [pc, #68]	@ (8003f98 <HAL_UART_MspInit+0x88>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	4a10      	ldr	r2, [pc, #64]	@ (8003f98 <HAL_UART_MspInit+0x88>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f98 <HAL_UART_MspInit+0x88>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f76:	2303      	movs	r3, #3
 8003f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f7a:	2307      	movs	r3, #7
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7e:	f107 0314 	add.w	r3, r7, #20
 8003f82:	4619      	mov	r1, r3
 8003f84:	4805      	ldr	r0, [pc, #20]	@ (8003f9c <HAL_UART_MspInit+0x8c>)
 8003f86:	f000 f959 	bl	800423c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3728      	adds	r7, #40	@ 0x28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40004400 	.word	0x40004400
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40020000 	.word	0x40020000

08003fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003fa4:	f7ff ff78 	bl	8003e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fa8:	480c      	ldr	r0, [pc, #48]	@ (8003fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003faa:	490d      	ldr	r1, [pc, #52]	@ (8003fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fac:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fb0:	e002      	b.n	8003fb8 <LoopCopyDataInit>

08003fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fb6:	3304      	adds	r3, #4

08003fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fbc:	d3f9      	bcc.n	8003fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8003fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fc4:	e001      	b.n	8003fca <LoopFillZerobss>

08003fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fc8:	3204      	adds	r2, #4

08003fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fcc:	d3fb      	bcc.n	8003fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fce:	f007 fe63 	bl	800bc98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fd2:	f7fe f8a3 	bl	800211c <main>
  bx  lr    
 8003fd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fe0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003fe4:	0800fc30 	.word	0x0800fc30
  ldr r2, =_sbss
 8003fe8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003fec:	20005248 	.word	0x20005248

08003ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ff0:	e7fe      	b.n	8003ff0 <ADC_IRQHandler>
	...

08003ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8004034 <HAL_Init+0x40>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8004034 <HAL_Init+0x40>)
 8003ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004004:	4b0b      	ldr	r3, [pc, #44]	@ (8004034 <HAL_Init+0x40>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0a      	ldr	r2, [pc, #40]	@ (8004034 <HAL_Init+0x40>)
 800400a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800400e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004010:	4b08      	ldr	r3, [pc, #32]	@ (8004034 <HAL_Init+0x40>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a07      	ldr	r2, [pc, #28]	@ (8004034 <HAL_Init+0x40>)
 8004016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800401a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800401c:	2003      	movs	r0, #3
 800401e:	f000 f8d8 	bl	80041d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004022:	200f      	movs	r0, #15
 8004024:	f7ff fdda 	bl	8003bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004028:	f7ff fdac 	bl	8003b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40023c00 	.word	0x40023c00

08004038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800403c:	4b06      	ldr	r3, [pc, #24]	@ (8004058 <HAL_IncTick+0x20>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	4b06      	ldr	r3, [pc, #24]	@ (800405c <HAL_IncTick+0x24>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4413      	add	r3, r2
 8004048:	4a04      	ldr	r2, [pc, #16]	@ (800405c <HAL_IncTick+0x24>)
 800404a:	6013      	str	r3, [r2, #0]
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	2000000c 	.word	0x2000000c
 800405c:	20000710 	.word	0x20000710

08004060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  return uwTick;
 8004064:	4b03      	ldr	r3, [pc, #12]	@ (8004074 <HAL_GetTick+0x14>)
 8004066:	681b      	ldr	r3, [r3, #0]
}
 8004068:	4618      	mov	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000710 	.word	0x20000710

08004078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004088:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <__NVIC_SetPriorityGrouping+0x44>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004094:	4013      	ands	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040aa:	4a04      	ldr	r2, [pc, #16]	@ (80040bc <__NVIC_SetPriorityGrouping+0x44>)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	60d3      	str	r3, [r2, #12]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040c4:	4b04      	ldr	r3, [pc, #16]	@ (80040d8 <__NVIC_GetPriorityGrouping+0x18>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	0a1b      	lsrs	r3, r3, #8
 80040ca:	f003 0307 	and.w	r3, r3, #7
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	db0b      	blt.n	8004106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	4907      	ldr	r1, [pc, #28]	@ (8004114 <__NVIC_EnableIRQ+0x38>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2001      	movs	r0, #1
 80040fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000e100 	.word	0xe000e100

08004118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	6039      	str	r1, [r7, #0]
 8004122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004128:	2b00      	cmp	r3, #0
 800412a:	db0a      	blt.n	8004142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	490c      	ldr	r1, [pc, #48]	@ (8004164 <__NVIC_SetPriority+0x4c>)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	0112      	lsls	r2, r2, #4
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	440b      	add	r3, r1
 800413c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004140:	e00a      	b.n	8004158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4908      	ldr	r1, [pc, #32]	@ (8004168 <__NVIC_SetPriority+0x50>)
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	3b04      	subs	r3, #4
 8004150:	0112      	lsls	r2, r2, #4
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	440b      	add	r3, r1
 8004156:	761a      	strb	r2, [r3, #24]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000e100 	.word	0xe000e100
 8004168:	e000ed00 	.word	0xe000ed00

0800416c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	@ 0x24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f1c3 0307 	rsb	r3, r3, #7
 8004186:	2b04      	cmp	r3, #4
 8004188:	bf28      	it	cs
 800418a:	2304      	movcs	r3, #4
 800418c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3304      	adds	r3, #4
 8004192:	2b06      	cmp	r3, #6
 8004194:	d902      	bls.n	800419c <NVIC_EncodePriority+0x30>
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3b03      	subs	r3, #3
 800419a:	e000      	b.n	800419e <NVIC_EncodePriority+0x32>
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	401a      	ands	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041b4:	f04f 31ff 	mov.w	r1, #4294967295
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	fa01 f303 	lsl.w	r3, r1, r3
 80041be:	43d9      	mvns	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c4:	4313      	orrs	r3, r2
         );
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3724      	adds	r7, #36	@ 0x24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff ff4c 	bl	8004078 <__NVIC_SetPriorityGrouping>
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041fa:	f7ff ff61 	bl	80040c0 <__NVIC_GetPriorityGrouping>
 80041fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	6978      	ldr	r0, [r7, #20]
 8004206:	f7ff ffb1 	bl	800416c <NVIC_EncodePriority>
 800420a:	4602      	mov	r2, r0
 800420c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff ff80 	bl	8004118 <__NVIC_SetPriority>
}
 8004218:	bf00      	nop
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff ff54 	bl	80040dc <__NVIC_EnableIRQ>
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	@ 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	e159      	b.n	800450c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004258:	2201      	movs	r2, #1
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	429a      	cmp	r2, r3
 8004272:	f040 8148 	bne.w	8004506 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d005      	beq.n	800428e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800428a:	2b02      	cmp	r3, #2
 800428c:	d130      	bne.n	80042f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	2203      	movs	r2, #3
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042c4:	2201      	movs	r2, #1
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 0201 	and.w	r2, r3, #1
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d017      	beq.n	800432c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	2203      	movs	r2, #3
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d123      	bne.n	8004380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	08da      	lsrs	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3208      	adds	r2, #8
 8004340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	220f      	movs	r2, #15
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4013      	ands	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	08da      	lsrs	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3208      	adds	r2, #8
 800437a:	69b9      	ldr	r1, [r7, #24]
 800437c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	2203      	movs	r2, #3
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 0203 	and.w	r2, r3, #3
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80a2 	beq.w	8004506 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	4b57      	ldr	r3, [pc, #348]	@ (8004524 <HAL_GPIO_Init+0x2e8>)
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	4a56      	ldr	r2, [pc, #344]	@ (8004524 <HAL_GPIO_Init+0x2e8>)
 80043cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80043d2:	4b54      	ldr	r3, [pc, #336]	@ (8004524 <HAL_GPIO_Init+0x2e8>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043de:	4a52      	ldr	r2, [pc, #328]	@ (8004528 <HAL_GPIO_Init+0x2ec>)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	089b      	lsrs	r3, r3, #2
 80043e4:	3302      	adds	r3, #2
 80043e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	220f      	movs	r2, #15
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43db      	mvns	r3, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4013      	ands	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a49      	ldr	r2, [pc, #292]	@ (800452c <HAL_GPIO_Init+0x2f0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d019      	beq.n	800443e <HAL_GPIO_Init+0x202>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a48      	ldr	r2, [pc, #288]	@ (8004530 <HAL_GPIO_Init+0x2f4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d013      	beq.n	800443a <HAL_GPIO_Init+0x1fe>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a47      	ldr	r2, [pc, #284]	@ (8004534 <HAL_GPIO_Init+0x2f8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00d      	beq.n	8004436 <HAL_GPIO_Init+0x1fa>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a46      	ldr	r2, [pc, #280]	@ (8004538 <HAL_GPIO_Init+0x2fc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d007      	beq.n	8004432 <HAL_GPIO_Init+0x1f6>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a45      	ldr	r2, [pc, #276]	@ (800453c <HAL_GPIO_Init+0x300>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d101      	bne.n	800442e <HAL_GPIO_Init+0x1f2>
 800442a:	2304      	movs	r3, #4
 800442c:	e008      	b.n	8004440 <HAL_GPIO_Init+0x204>
 800442e:	2307      	movs	r3, #7
 8004430:	e006      	b.n	8004440 <HAL_GPIO_Init+0x204>
 8004432:	2303      	movs	r3, #3
 8004434:	e004      	b.n	8004440 <HAL_GPIO_Init+0x204>
 8004436:	2302      	movs	r3, #2
 8004438:	e002      	b.n	8004440 <HAL_GPIO_Init+0x204>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <HAL_GPIO_Init+0x204>
 800443e:	2300      	movs	r3, #0
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	f002 0203 	and.w	r2, r2, #3
 8004446:	0092      	lsls	r2, r2, #2
 8004448:	4093      	lsls	r3, r2
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4313      	orrs	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004450:	4935      	ldr	r1, [pc, #212]	@ (8004528 <HAL_GPIO_Init+0x2ec>)
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	089b      	lsrs	r3, r3, #2
 8004456:	3302      	adds	r3, #2
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800445e:	4b38      	ldr	r3, [pc, #224]	@ (8004540 <HAL_GPIO_Init+0x304>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004482:	4a2f      	ldr	r2, [pc, #188]	@ (8004540 <HAL_GPIO_Init+0x304>)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004488:	4b2d      	ldr	r3, [pc, #180]	@ (8004540 <HAL_GPIO_Init+0x304>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044ac:	4a24      	ldr	r2, [pc, #144]	@ (8004540 <HAL_GPIO_Init+0x304>)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044b2:	4b23      	ldr	r3, [pc, #140]	@ (8004540 <HAL_GPIO_Init+0x304>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	43db      	mvns	r3, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	4013      	ands	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004540 <HAL_GPIO_Init+0x304>)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044dc:	4b18      	ldr	r3, [pc, #96]	@ (8004540 <HAL_GPIO_Init+0x304>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4013      	ands	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004500:	4a0f      	ldr	r2, [pc, #60]	@ (8004540 <HAL_GPIO_Init+0x304>)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3301      	adds	r3, #1
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	2b0f      	cmp	r3, #15
 8004510:	f67f aea2 	bls.w	8004258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	3724      	adds	r7, #36	@ 0x24
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800
 8004528:	40013800 	.word	0x40013800
 800452c:	40020000 	.word	0x40020000
 8004530:	40020400 	.word	0x40020400
 8004534:	40020800 	.word	0x40020800
 8004538:	40020c00 	.word	0x40020c00
 800453c:	40021000 	.word	0x40021000
 8004540:	40013c00 	.word	0x40013c00

08004544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
 8004550:	4613      	mov	r3, r2
 8004552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004554:	787b      	ldrb	r3, [r7, #1]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004560:	e003      	b.n	800456a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004562:	887b      	ldrh	r3, [r7, #2]
 8004564:	041a      	lsls	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	619a      	str	r2, [r3, #24]
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004588:	887a      	ldrh	r2, [r7, #2]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4013      	ands	r3, r2
 800458e:	041a      	lsls	r2, r3, #16
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	43d9      	mvns	r1, r3
 8004594:	887b      	ldrh	r3, [r7, #2]
 8004596:	400b      	ands	r3, r1
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	619a      	str	r2, [r3, #24]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e12b      	b.n	8004816 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fd fd5a 	bl	800208c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2224      	movs	r2, #36	@ 0x24
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800460e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004610:	f001 fc60 	bl	8005ed4 <HAL_RCC_GetPCLK1Freq>
 8004614:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4a81      	ldr	r2, [pc, #516]	@ (8004820 <HAL_I2C_Init+0x274>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d807      	bhi.n	8004630 <HAL_I2C_Init+0x84>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4a80      	ldr	r2, [pc, #512]	@ (8004824 <HAL_I2C_Init+0x278>)
 8004624:	4293      	cmp	r3, r2
 8004626:	bf94      	ite	ls
 8004628:	2301      	movls	r3, #1
 800462a:	2300      	movhi	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e006      	b.n	800463e <HAL_I2C_Init+0x92>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4a7d      	ldr	r2, [pc, #500]	@ (8004828 <HAL_I2C_Init+0x27c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	bf94      	ite	ls
 8004638:	2301      	movls	r3, #1
 800463a:	2300      	movhi	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0e7      	b.n	8004816 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a78      	ldr	r2, [pc, #480]	@ (800482c <HAL_I2C_Init+0x280>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	0c9b      	lsrs	r3, r3, #18
 8004650:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4a6a      	ldr	r2, [pc, #424]	@ (8004820 <HAL_I2C_Init+0x274>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d802      	bhi.n	8004680 <HAL_I2C_Init+0xd4>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	3301      	adds	r3, #1
 800467e:	e009      	b.n	8004694 <HAL_I2C_Init+0xe8>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	4a69      	ldr	r2, [pc, #420]	@ (8004830 <HAL_I2C_Init+0x284>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	099b      	lsrs	r3, r3, #6
 8004692:	3301      	adds	r3, #1
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	430b      	orrs	r3, r1
 800469a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	495c      	ldr	r1, [pc, #368]	@ (8004820 <HAL_I2C_Init+0x274>)
 80046b0:	428b      	cmp	r3, r1
 80046b2:	d819      	bhi.n	80046e8 <HAL_I2C_Init+0x13c>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1e59      	subs	r1, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c2:	1c59      	adds	r1, r3, #1
 80046c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046c8:	400b      	ands	r3, r1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_I2C_Init+0x138>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1e59      	subs	r1, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80046dc:	3301      	adds	r3, #1
 80046de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e2:	e051      	b.n	8004788 <HAL_I2C_Init+0x1dc>
 80046e4:	2304      	movs	r3, #4
 80046e6:	e04f      	b.n	8004788 <HAL_I2C_Init+0x1dc>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d111      	bne.n	8004714 <HAL_I2C_Init+0x168>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1e58      	subs	r0, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	440b      	add	r3, r1
 80046fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004702:	3301      	adds	r3, #1
 8004704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e012      	b.n	800473a <HAL_I2C_Init+0x18e>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	1e58      	subs	r0, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6859      	ldr	r1, [r3, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	0099      	lsls	r1, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	fbb0 f3f3 	udiv	r3, r0, r3
 800472a:	3301      	adds	r3, #1
 800472c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf0c      	ite	eq
 8004734:	2301      	moveq	r3, #1
 8004736:	2300      	movne	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_I2C_Init+0x196>
 800473e:	2301      	movs	r3, #1
 8004740:	e022      	b.n	8004788 <HAL_I2C_Init+0x1dc>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10e      	bne.n	8004768 <HAL_I2C_Init+0x1bc>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1e58      	subs	r0, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6859      	ldr	r1, [r3, #4]
 8004752:	460b      	mov	r3, r1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	440b      	add	r3, r1
 8004758:	fbb0 f3f3 	udiv	r3, r0, r3
 800475c:	3301      	adds	r3, #1
 800475e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004766:	e00f      	b.n	8004788 <HAL_I2C_Init+0x1dc>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1e58      	subs	r0, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6859      	ldr	r1, [r3, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	0099      	lsls	r1, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	fbb0 f3f3 	udiv	r3, r0, r3
 800477e:	3301      	adds	r3, #1
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004784:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	6809      	ldr	r1, [r1, #0]
 800478c:	4313      	orrs	r3, r2
 800478e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69da      	ldr	r2, [r3, #28]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6911      	ldr	r1, [r2, #16]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68d2      	ldr	r2, [r2, #12]
 80047c2:	4311      	orrs	r1, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	000186a0 	.word	0x000186a0
 8004824:	001e847f 	.word	0x001e847f
 8004828:	003d08ff 	.word	0x003d08ff
 800482c:	431bde83 	.word	0x431bde83
 8004830:	10624dd3 	.word	0x10624dd3

08004834 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	4608      	mov	r0, r1
 800483e:	4611      	mov	r1, r2
 8004840:	461a      	mov	r2, r3
 8004842:	4603      	mov	r3, r0
 8004844:	817b      	strh	r3, [r7, #10]
 8004846:	460b      	mov	r3, r1
 8004848:	813b      	strh	r3, [r7, #8]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800484e:	f7ff fc07 	bl	8004060 <HAL_GetTick>
 8004852:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b20      	cmp	r3, #32
 800485e:	f040 80d9 	bne.w	8004a14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2319      	movs	r3, #25
 8004868:	2201      	movs	r2, #1
 800486a:	496d      	ldr	r1, [pc, #436]	@ (8004a20 <HAL_I2C_Mem_Write+0x1ec>)
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 fc8b 	bl	8005188 <I2C_WaitOnFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004878:	2302      	movs	r3, #2
 800487a:	e0cc      	b.n	8004a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_I2C_Mem_Write+0x56>
 8004886:	2302      	movs	r3, #2
 8004888:	e0c5      	b.n	8004a16 <HAL_I2C_Mem_Write+0x1e2>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b01      	cmp	r3, #1
 800489e:	d007      	beq.n	80048b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2221      	movs	r2, #33	@ 0x21
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2240      	movs	r2, #64	@ 0x40
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a3a      	ldr	r2, [r7, #32]
 80048da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80048e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4a4d      	ldr	r2, [pc, #308]	@ (8004a24 <HAL_I2C_Mem_Write+0x1f0>)
 80048f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048f2:	88f8      	ldrh	r0, [r7, #6]
 80048f4:	893a      	ldrh	r2, [r7, #8]
 80048f6:	8979      	ldrh	r1, [r7, #10]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	4603      	mov	r3, r0
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fac2 	bl	8004e8c <I2C_RequestMemoryWrite>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d052      	beq.n	80049b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e081      	b.n	8004a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fd50 	bl	80053bc <I2C_WaitOnTXEFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00d      	beq.n	800493e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	2b04      	cmp	r3, #4
 8004928:	d107      	bne.n	800493a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e06b      	b.n	8004a16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	781a      	ldrb	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b04      	cmp	r3, #4
 800497a:	d11b      	bne.n	80049b4 <HAL_I2C_Mem_Write+0x180>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d017      	beq.n	80049b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1aa      	bne.n	8004912 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fd43 	bl	800544c <I2C_WaitOnBTFFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d107      	bne.n	80049e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e016      	b.n	8004a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	00100002 	.word	0x00100002
 8004a24:	ffff0000 	.word	0xffff0000

08004a28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08c      	sub	sp, #48	@ 0x30
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	4608      	mov	r0, r1
 8004a32:	4611      	mov	r1, r2
 8004a34:	461a      	mov	r2, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	817b      	strh	r3, [r7, #10]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	813b      	strh	r3, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a42:	f7ff fb0d 	bl	8004060 <HAL_GetTick>
 8004a46:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	f040 8214 	bne.w	8004e7e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2319      	movs	r3, #25
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	497b      	ldr	r1, [pc, #492]	@ (8004c4c <HAL_I2C_Mem_Read+0x224>)
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fb91 	bl	8005188 <I2C_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e207      	b.n	8004e80 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_I2C_Mem_Read+0x56>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e200      	b.n	8004e80 <HAL_I2C_Mem_Read+0x458>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d007      	beq.n	8004aa4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ab2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2222      	movs	r2, #34	@ 0x22
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2240      	movs	r2, #64	@ 0x40
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ace:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a5b      	ldr	r2, [pc, #364]	@ (8004c50 <HAL_I2C_Mem_Read+0x228>)
 8004ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ae6:	88f8      	ldrh	r0, [r7, #6]
 8004ae8:	893a      	ldrh	r2, [r7, #8]
 8004aea:	8979      	ldrh	r1, [r7, #10]
 8004aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4603      	mov	r3, r0
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 fa5e 	bl	8004fb8 <I2C_RequestMemoryRead>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e1bc      	b.n	8004e80 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d113      	bne.n	8004b36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0e:	2300      	movs	r3, #0
 8004b10:	623b      	str	r3, [r7, #32]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	623b      	str	r3, [r7, #32]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	623b      	str	r3, [r7, #32]
 8004b22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	e190      	b.n	8004e58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d11b      	bne.n	8004b76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e170      	b.n	8004e58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d11b      	bne.n	8004bb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	61bb      	str	r3, [r7, #24]
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	e150      	b.n	8004e58 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bcc:	e144      	b.n	8004e58 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	f200 80f1 	bhi.w	8004dba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d123      	bne.n	8004c28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fc79 	bl	80054dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e145      	b.n	8004e80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c26:	e117      	b.n	8004e58 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d14e      	bne.n	8004cce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c36:	2200      	movs	r2, #0
 8004c38:	4906      	ldr	r1, [pc, #24]	@ (8004c54 <HAL_I2C_Mem_Read+0x22c>)
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 faa4 	bl	8005188 <I2C_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e11a      	b.n	8004e80 <HAL_I2C_Mem_Read+0x458>
 8004c4a:	bf00      	nop
 8004c4c:	00100002 	.word	0x00100002
 8004c50:	ffff0000 	.word	0xffff0000
 8004c54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ccc:	e0c4      	b.n	8004e58 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	496c      	ldr	r1, [pc, #432]	@ (8004e88 <HAL_I2C_Mem_Read+0x460>)
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fa55 	bl	8005188 <I2C_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0cb      	b.n	8004e80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d30:	2200      	movs	r2, #0
 8004d32:	4955      	ldr	r1, [pc, #340]	@ (8004e88 <HAL_I2C_Mem_Read+0x460>)
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 fa27 	bl	8005188 <I2C_WaitOnFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e09d      	b.n	8004e80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004db8:	e04e      	b.n	8004e58 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fb8c 	bl	80054dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e058      	b.n	8004e80 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d124      	bne.n	8004e58 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d107      	bne.n	8004e26 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e24:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f47f aeb6 	bne.w	8004bce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e000      	b.n	8004e80 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004e7e:	2302      	movs	r3, #2
  }
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3728      	adds	r7, #40	@ 0x28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	00010004 	.word	0x00010004

08004e8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	817b      	strh	r3, [r7, #10]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	813b      	strh	r3, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f960 	bl	8005188 <I2C_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00d      	beq.n	8004eea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004edc:	d103      	bne.n	8004ee6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ee4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e05f      	b.n	8004faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eea:	897b      	ldrh	r3, [r7, #10]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ef8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	6a3a      	ldr	r2, [r7, #32]
 8004efe:	492d      	ldr	r1, [pc, #180]	@ (8004fb4 <I2C_RequestMemoryWrite+0x128>)
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f9bb 	bl	800527c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e04c      	b.n	8004faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f28:	6a39      	ldr	r1, [r7, #32]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fa46 	bl	80053bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d107      	bne.n	8004f4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e02b      	b.n	8004faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d105      	bne.n	8004f64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f58:	893b      	ldrh	r3, [r7, #8]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	611a      	str	r2, [r3, #16]
 8004f62:	e021      	b.n	8004fa8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f64:	893b      	ldrh	r3, [r7, #8]
 8004f66:	0a1b      	lsrs	r3, r3, #8
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f74:	6a39      	ldr	r1, [r7, #32]
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fa20 	bl	80053bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d107      	bne.n	8004f9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e005      	b.n	8004faa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f9e:	893b      	ldrh	r3, [r7, #8]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	00010002 	.word	0x00010002

08004fb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	817b      	strh	r3, [r7, #10]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	813b      	strh	r3, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ff0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f8c2 	bl	8005188 <I2C_WaitOnFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00d      	beq.n	8005026 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005018:	d103      	bne.n	8005022 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005020:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e0aa      	b.n	800517c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005026:	897b      	ldrh	r3, [r7, #10]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005034:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	6a3a      	ldr	r2, [r7, #32]
 800503a:	4952      	ldr	r1, [pc, #328]	@ (8005184 <I2C_RequestMemoryRead+0x1cc>)
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f91d 	bl	800527c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e097      	b.n	800517c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005064:	6a39      	ldr	r1, [r7, #32]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f9a8 	bl	80053bc <I2C_WaitOnTXEFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00d      	beq.n	800508e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	2b04      	cmp	r3, #4
 8005078:	d107      	bne.n	800508a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005088:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e076      	b.n	800517c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d105      	bne.n	80050a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005094:	893b      	ldrh	r3, [r7, #8]
 8005096:	b2da      	uxtb	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	611a      	str	r2, [r3, #16]
 800509e:	e021      	b.n	80050e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050a0:	893b      	ldrh	r3, [r7, #8]
 80050a2:	0a1b      	lsrs	r3, r3, #8
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b0:	6a39      	ldr	r1, [r7, #32]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f982 	bl	80053bc <I2C_WaitOnTXEFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00d      	beq.n	80050da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d107      	bne.n	80050d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e050      	b.n	800517c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050da:	893b      	ldrh	r3, [r7, #8]
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e6:	6a39      	ldr	r1, [r7, #32]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f967 	bl	80053bc <I2C_WaitOnTXEFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00d      	beq.n	8005110 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d107      	bne.n	800510c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800510a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e035      	b.n	800517c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800511e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	2200      	movs	r2, #0
 8005128:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f82b 	bl	8005188 <I2C_WaitOnFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00d      	beq.n	8005154 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005146:	d103      	bne.n	8005150 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800514e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e013      	b.n	800517c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005154:	897b      	ldrh	r3, [r7, #10]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	b2da      	uxtb	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	6a3a      	ldr	r2, [r7, #32]
 8005168:	4906      	ldr	r1, [pc, #24]	@ (8005184 <I2C_RequestMemoryRead+0x1cc>)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f886 	bl	800527c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	00010002 	.word	0x00010002

08005188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	4613      	mov	r3, r2
 8005196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005198:	e048      	b.n	800522c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d044      	beq.n	800522c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fe ff5d 	bl	8004060 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d139      	bne.n	800522c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10d      	bne.n	80051de <I2C_WaitOnFlagUntilTimeout+0x56>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	43da      	mvns	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4013      	ands	r3, r2
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	e00c      	b.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	43da      	mvns	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4013      	ands	r3, r2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bf0c      	ite	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2300      	movne	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d116      	bne.n	800522c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e023      	b.n	8005274 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	0c1b      	lsrs	r3, r3, #16
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10d      	bne.n	8005252 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	43da      	mvns	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4013      	ands	r3, r2
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf0c      	ite	eq
 8005248:	2301      	moveq	r3, #1
 800524a:	2300      	movne	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	e00c      	b.n	800526c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	43da      	mvns	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4013      	ands	r3, r2
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	79fb      	ldrb	r3, [r7, #7]
 800526e:	429a      	cmp	r2, r3
 8005270:	d093      	beq.n	800519a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800528a:	e071      	b.n	8005370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529a:	d123      	bne.n	80052e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d0:	f043 0204 	orr.w	r2, r3, #4
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e067      	b.n	80053b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d041      	beq.n	8005370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ec:	f7fe feb8 	bl	8004060 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d302      	bcc.n	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d136      	bne.n	8005370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d10c      	bne.n	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	43da      	mvns	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	bf14      	ite	ne
 800531e:	2301      	movne	r3, #1
 8005320:	2300      	moveq	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	e00b      	b.n	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	43da      	mvns	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	bf14      	ite	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2300      	moveq	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d016      	beq.n	8005370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535c:	f043 0220 	orr.w	r2, r3, #32
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e021      	b.n	80053b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	0c1b      	lsrs	r3, r3, #16
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	d10c      	bne.n	8005394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	43da      	mvns	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4013      	ands	r3, r2
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf14      	ite	ne
 800538c:	2301      	movne	r3, #1
 800538e:	2300      	moveq	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	e00b      	b.n	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	43da      	mvns	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4013      	ands	r3, r2
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bf14      	ite	ne
 80053a6:	2301      	movne	r3, #1
 80053a8:	2300      	moveq	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f47f af6d 	bne.w	800528c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c8:	e034      	b.n	8005434 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f8e3 	bl	8005596 <I2C_IsAcknowledgeFailed>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e034      	b.n	8005444 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d028      	beq.n	8005434 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e2:	f7fe fe3d 	bl	8004060 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d302      	bcc.n	80053f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d11d      	bne.n	8005434 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005402:	2b80      	cmp	r3, #128	@ 0x80
 8005404:	d016      	beq.n	8005434 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e007      	b.n	8005444 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800543e:	2b80      	cmp	r3, #128	@ 0x80
 8005440:	d1c3      	bne.n	80053ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005458:	e034      	b.n	80054c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 f89b 	bl	8005596 <I2C_IsAcknowledgeFailed>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e034      	b.n	80054d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d028      	beq.n	80054c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005472:	f7fe fdf5 	bl	8004060 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	d302      	bcc.n	8005488 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d11d      	bne.n	80054c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b04      	cmp	r3, #4
 8005494:	d016      	beq.n	80054c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b0:	f043 0220 	orr.w	r2, r3, #32
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e007      	b.n	80054d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d1c3      	bne.n	800545a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054e8:	e049      	b.n	800557e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d119      	bne.n	800552c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0210 	mvn.w	r2, #16
 8005500:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e030      	b.n	800558e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552c:	f7fe fd98 	bl	8004060 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	429a      	cmp	r2, r3
 800553a:	d302      	bcc.n	8005542 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d11d      	bne.n	800557e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554c:	2b40      	cmp	r3, #64	@ 0x40
 800554e:	d016      	beq.n	800557e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556a:	f043 0220 	orr.w	r2, r3, #32
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e007      	b.n	800558e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005588:	2b40      	cmp	r3, #64	@ 0x40
 800558a:	d1ae      	bne.n	80054ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ac:	d11b      	bne.n	80055e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d2:	f043 0204 	orr.w	r2, r3, #4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e267      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d075      	beq.n	80056fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005612:	4b88      	ldr	r3, [pc, #544]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 030c 	and.w	r3, r3, #12
 800561a:	2b04      	cmp	r3, #4
 800561c:	d00c      	beq.n	8005638 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800561e:	4b85      	ldr	r3, [pc, #532]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005626:	2b08      	cmp	r3, #8
 8005628:	d112      	bne.n	8005650 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800562a:	4b82      	ldr	r3, [pc, #520]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005632:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005636:	d10b      	bne.n	8005650 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005638:	4b7e      	ldr	r3, [pc, #504]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d05b      	beq.n	80056fc <HAL_RCC_OscConfig+0x108>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d157      	bne.n	80056fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e242      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005658:	d106      	bne.n	8005668 <HAL_RCC_OscConfig+0x74>
 800565a:	4b76      	ldr	r3, [pc, #472]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a75      	ldr	r2, [pc, #468]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	e01d      	b.n	80056a4 <HAL_RCC_OscConfig+0xb0>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005670:	d10c      	bne.n	800568c <HAL_RCC_OscConfig+0x98>
 8005672:	4b70      	ldr	r3, [pc, #448]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a6f      	ldr	r2, [pc, #444]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	4b6d      	ldr	r3, [pc, #436]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a6c      	ldr	r2, [pc, #432]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	e00b      	b.n	80056a4 <HAL_RCC_OscConfig+0xb0>
 800568c:	4b69      	ldr	r3, [pc, #420]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a68      	ldr	r2, [pc, #416]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4b66      	ldr	r3, [pc, #408]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a65      	ldr	r2, [pc, #404]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 800569e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d013      	beq.n	80056d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ac:	f7fe fcd8 	bl	8004060 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b4:	f7fe fcd4 	bl	8004060 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b64      	cmp	r3, #100	@ 0x64
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e207      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c6:	4b5b      	ldr	r3, [pc, #364]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0xc0>
 80056d2:	e014      	b.n	80056fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d4:	f7fe fcc4 	bl	8004060 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056dc:	f7fe fcc0 	bl	8004060 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b64      	cmp	r3, #100	@ 0x64
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e1f3      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ee:	4b51      	ldr	r3, [pc, #324]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0xe8>
 80056fa:	e000      	b.n	80056fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d063      	beq.n	80057d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800570a:	4b4a      	ldr	r3, [pc, #296]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00b      	beq.n	800572e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005716:	4b47      	ldr	r3, [pc, #284]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800571e:	2b08      	cmp	r3, #8
 8005720:	d11c      	bne.n	800575c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005722:	4b44      	ldr	r3, [pc, #272]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d116      	bne.n	800575c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572e:	4b41      	ldr	r3, [pc, #260]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <HAL_RCC_OscConfig+0x152>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d001      	beq.n	8005746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e1c7      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005746:	4b3b      	ldr	r3, [pc, #236]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4937      	ldr	r1, [pc, #220]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005756:	4313      	orrs	r3, r2
 8005758:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800575a:	e03a      	b.n	80057d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d020      	beq.n	80057a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005764:	4b34      	ldr	r3, [pc, #208]	@ (8005838 <HAL_RCC_OscConfig+0x244>)
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576a:	f7fe fc79 	bl	8004060 <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005772:	f7fe fc75 	bl	8004060 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e1a8      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005784:	4b2b      	ldr	r3, [pc, #172]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0f0      	beq.n	8005772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005790:	4b28      	ldr	r3, [pc, #160]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	4925      	ldr	r1, [pc, #148]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	600b      	str	r3, [r1, #0]
 80057a4:	e015      	b.n	80057d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a6:	4b24      	ldr	r3, [pc, #144]	@ (8005838 <HAL_RCC_OscConfig+0x244>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ac:	f7fe fc58 	bl	8004060 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b4:	f7fe fc54 	bl	8004060 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e187      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d036      	beq.n	800584c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d016      	beq.n	8005814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057e6:	4b15      	ldr	r3, [pc, #84]	@ (800583c <HAL_RCC_OscConfig+0x248>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ec:	f7fe fc38 	bl	8004060 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f4:	f7fe fc34 	bl	8004060 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e167      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005806:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <HAL_RCC_OscConfig+0x240>)
 8005808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f0      	beq.n	80057f4 <HAL_RCC_OscConfig+0x200>
 8005812:	e01b      	b.n	800584c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005814:	4b09      	ldr	r3, [pc, #36]	@ (800583c <HAL_RCC_OscConfig+0x248>)
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800581a:	f7fe fc21 	bl	8004060 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005820:	e00e      	b.n	8005840 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005822:	f7fe fc1d 	bl	8004060 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d907      	bls.n	8005840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e150      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
 8005834:	40023800 	.word	0x40023800
 8005838:	42470000 	.word	0x42470000
 800583c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005840:	4b88      	ldr	r3, [pc, #544]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ea      	bne.n	8005822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 8097 	beq.w	8005988 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585a:	2300      	movs	r3, #0
 800585c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800585e:	4b81      	ldr	r3, [pc, #516]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10f      	bne.n	800588a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800586a:	2300      	movs	r3, #0
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	4b7d      	ldr	r3, [pc, #500]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005872:	4a7c      	ldr	r2, [pc, #496]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005878:	6413      	str	r3, [r2, #64]	@ 0x40
 800587a:	4b7a      	ldr	r3, [pc, #488]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 800587c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005886:	2301      	movs	r3, #1
 8005888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588a:	4b77      	ldr	r3, [pc, #476]	@ (8005a68 <HAL_RCC_OscConfig+0x474>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005892:	2b00      	cmp	r3, #0
 8005894:	d118      	bne.n	80058c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005896:	4b74      	ldr	r3, [pc, #464]	@ (8005a68 <HAL_RCC_OscConfig+0x474>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a73      	ldr	r2, [pc, #460]	@ (8005a68 <HAL_RCC_OscConfig+0x474>)
 800589c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a2:	f7fe fbdd 	bl	8004060 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058aa:	f7fe fbd9 	bl	8004060 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e10c      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058bc:	4b6a      	ldr	r3, [pc, #424]	@ (8005a68 <HAL_RCC_OscConfig+0x474>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0f0      	beq.n	80058aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d106      	bne.n	80058de <HAL_RCC_OscConfig+0x2ea>
 80058d0:	4b64      	ldr	r3, [pc, #400]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d4:	4a63      	ldr	r2, [pc, #396]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	6713      	str	r3, [r2, #112]	@ 0x70
 80058dc:	e01c      	b.n	8005918 <HAL_RCC_OscConfig+0x324>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b05      	cmp	r3, #5
 80058e4:	d10c      	bne.n	8005900 <HAL_RCC_OscConfig+0x30c>
 80058e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ea:	4a5e      	ldr	r2, [pc, #376]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 80058ec:	f043 0304 	orr.w	r3, r3, #4
 80058f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f6:	4a5b      	ldr	r2, [pc, #364]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 80058f8:	f043 0301 	orr.w	r3, r3, #1
 80058fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80058fe:	e00b      	b.n	8005918 <HAL_RCC_OscConfig+0x324>
 8005900:	4b58      	ldr	r3, [pc, #352]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005904:	4a57      	ldr	r2, [pc, #348]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005906:	f023 0301 	bic.w	r3, r3, #1
 800590a:	6713      	str	r3, [r2, #112]	@ 0x70
 800590c:	4b55      	ldr	r3, [pc, #340]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 800590e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005910:	4a54      	ldr	r2, [pc, #336]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005912:	f023 0304 	bic.w	r3, r3, #4
 8005916:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d015      	beq.n	800594c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005920:	f7fe fb9e 	bl	8004060 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005926:	e00a      	b.n	800593e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005928:	f7fe fb9a 	bl	8004060 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e0cb      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593e:	4b49      	ldr	r3, [pc, #292]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0ee      	beq.n	8005928 <HAL_RCC_OscConfig+0x334>
 800594a:	e014      	b.n	8005976 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800594c:	f7fe fb88 	bl	8004060 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005952:	e00a      	b.n	800596a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005954:	f7fe fb84 	bl	8004060 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e0b5      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800596a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1ee      	bne.n	8005954 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005976:	7dfb      	ldrb	r3, [r7, #23]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d105      	bne.n	8005988 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800597c:	4b39      	ldr	r3, [pc, #228]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 800597e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005980:	4a38      	ldr	r2, [pc, #224]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005986:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80a1 	beq.w	8005ad4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005992:	4b34      	ldr	r3, [pc, #208]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
 800599a:	2b08      	cmp	r3, #8
 800599c:	d05c      	beq.n	8005a58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d141      	bne.n	8005a2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a6:	4b31      	ldr	r3, [pc, #196]	@ (8005a6c <HAL_RCC_OscConfig+0x478>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ac:	f7fe fb58 	bl	8004060 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b4:	f7fe fb54 	bl	8004060 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e087      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c6:	4b27      	ldr	r3, [pc, #156]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	019b      	lsls	r3, r3, #6
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	3b01      	subs	r3, #1
 80059ec:	041b      	lsls	r3, r3, #16
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f4:	061b      	lsls	r3, r3, #24
 80059f6:	491b      	ldr	r1, [pc, #108]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059fc:	4b1b      	ldr	r3, [pc, #108]	@ (8005a6c <HAL_RCC_OscConfig+0x478>)
 80059fe:	2201      	movs	r2, #1
 8005a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a02:	f7fe fb2d 	bl	8004060 <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a0a:	f7fe fb29 	bl	8004060 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e05c      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1c:	4b11      	ldr	r3, [pc, #68]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCC_OscConfig+0x416>
 8005a28:	e054      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a2a:	4b10      	ldr	r3, [pc, #64]	@ (8005a6c <HAL_RCC_OscConfig+0x478>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a30:	f7fe fb16 	bl	8004060 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a38:	f7fe fb12 	bl	8004060 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e045      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a4a:	4b06      	ldr	r3, [pc, #24]	@ (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f0      	bne.n	8005a38 <HAL_RCC_OscConfig+0x444>
 8005a56:	e03d      	b.n	8005ad4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d107      	bne.n	8005a70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e038      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
 8005a64:	40023800 	.word	0x40023800
 8005a68:	40007000 	.word	0x40007000
 8005a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a70:	4b1b      	ldr	r3, [pc, #108]	@ (8005ae0 <HAL_RCC_OscConfig+0x4ec>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d028      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d121      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d11a      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005aa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d111      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d107      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d001      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40023800 	.word	0x40023800

08005ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e0cc      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005af8:	4b68      	ldr	r3, [pc, #416]	@ (8005c9c <HAL_RCC_ClockConfig+0x1b8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d90c      	bls.n	8005b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b06:	4b65      	ldr	r3, [pc, #404]	@ (8005c9c <HAL_RCC_ClockConfig+0x1b8>)
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0e:	4b63      	ldr	r3, [pc, #396]	@ (8005c9c <HAL_RCC_ClockConfig+0x1b8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d001      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0b8      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d020      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b38:	4b59      	ldr	r3, [pc, #356]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	4a58      	ldr	r2, [pc, #352]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0308 	and.w	r3, r3, #8
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b50:	4b53      	ldr	r3, [pc, #332]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	4a52      	ldr	r2, [pc, #328]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b5c:	4b50      	ldr	r3, [pc, #320]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	494d      	ldr	r1, [pc, #308]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d044      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d107      	bne.n	8005b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b82:	4b47      	ldr	r3, [pc, #284]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d119      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e07f      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d003      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d107      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e06f      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e067      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bc2:	4b37      	ldr	r3, [pc, #220]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f023 0203 	bic.w	r2, r3, #3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4934      	ldr	r1, [pc, #208]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bd4:	f7fe fa44 	bl	8004060 <HAL_GetTick>
 8005bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bda:	e00a      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bdc:	f7fe fa40 	bl	8004060 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e04f      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 020c 	and.w	r2, r3, #12
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d1eb      	bne.n	8005bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c04:	4b25      	ldr	r3, [pc, #148]	@ (8005c9c <HAL_RCC_ClockConfig+0x1b8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d20c      	bcs.n	8005c2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	4b22      	ldr	r3, [pc, #136]	@ (8005c9c <HAL_RCC_ClockConfig+0x1b8>)
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1a:	4b20      	ldr	r3, [pc, #128]	@ (8005c9c <HAL_RCC_ClockConfig+0x1b8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d001      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e032      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c38:	4b19      	ldr	r3, [pc, #100]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	4916      	ldr	r1, [pc, #88]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c56:	4b12      	ldr	r3, [pc, #72]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	490e      	ldr	r1, [pc, #56]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c6a:	f000 f821 	bl	8005cb0 <HAL_RCC_GetSysClockFreq>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	091b      	lsrs	r3, r3, #4
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	490a      	ldr	r1, [pc, #40]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c7c:	5ccb      	ldrb	r3, [r1, r3]
 8005c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c82:	4a09      	ldr	r2, [pc, #36]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005c86:	4b09      	ldr	r3, [pc, #36]	@ (8005cac <HAL_RCC_ClockConfig+0x1c8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fd ffa6 	bl	8003bdc <HAL_InitTick>

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40023c00 	.word	0x40023c00
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	0800f7d8 	.word	0x0800f7d8
 8005ca8:	20000004 	.word	0x20000004
 8005cac:	20000008 	.word	0x20000008

08005cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb4:	b094      	sub	sp, #80	@ 0x50
 8005cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cc8:	4b79      	ldr	r3, [pc, #484]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 030c 	and.w	r3, r3, #12
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d00d      	beq.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	f200 80e1 	bhi.w	8005e9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d003      	beq.n	8005cea <HAL_RCC_GetSysClockFreq+0x3a>
 8005ce2:	e0db      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ce4:	4b73      	ldr	r3, [pc, #460]	@ (8005eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ce8:	e0db      	b.n	8005ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cea:	4b73      	ldr	r3, [pc, #460]	@ (8005eb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005cec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005cee:	e0d8      	b.n	8005ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cf8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d063      	beq.n	8005dce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d06:	4b6a      	ldr	r3, [pc, #424]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	099b      	lsrs	r3, r3, #6
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d22:	4622      	mov	r2, r4
 8005d24:	462b      	mov	r3, r5
 8005d26:	f04f 0000 	mov.w	r0, #0
 8005d2a:	f04f 0100 	mov.w	r1, #0
 8005d2e:	0159      	lsls	r1, r3, #5
 8005d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d34:	0150      	lsls	r0, r2, #5
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	1a51      	subs	r1, r2, r1
 8005d3e:	6139      	str	r1, [r7, #16]
 8005d40:	4629      	mov	r1, r5
 8005d42:	eb63 0301 	sbc.w	r3, r3, r1
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d54:	4659      	mov	r1, fp
 8005d56:	018b      	lsls	r3, r1, #6
 8005d58:	4651      	mov	r1, sl
 8005d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d5e:	4651      	mov	r1, sl
 8005d60:	018a      	lsls	r2, r1, #6
 8005d62:	4651      	mov	r1, sl
 8005d64:	ebb2 0801 	subs.w	r8, r2, r1
 8005d68:	4659      	mov	r1, fp
 8005d6a:	eb63 0901 	sbc.w	r9, r3, r1
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d82:	4690      	mov	r8, r2
 8005d84:	4699      	mov	r9, r3
 8005d86:	4623      	mov	r3, r4
 8005d88:	eb18 0303 	adds.w	r3, r8, r3
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	462b      	mov	r3, r5
 8005d90:	eb49 0303 	adc.w	r3, r9, r3
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	f04f 0300 	mov.w	r3, #0
 8005d9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005da2:	4629      	mov	r1, r5
 8005da4:	024b      	lsls	r3, r1, #9
 8005da6:	4621      	mov	r1, r4
 8005da8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005dac:	4621      	mov	r1, r4
 8005dae:	024a      	lsls	r2, r1, #9
 8005db0:	4610      	mov	r0, r2
 8005db2:	4619      	mov	r1, r3
 8005db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005db6:	2200      	movs	r2, #0
 8005db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dc0:	f7fa ff6a 	bl	8000c98 <__aeabi_uldivmod>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4613      	mov	r3, r2
 8005dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dcc:	e058      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dce:	4b38      	ldr	r3, [pc, #224]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	099b      	lsrs	r3, r3, #6
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	4611      	mov	r1, r2
 8005dda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005dde:	623b      	str	r3, [r7, #32]
 8005de0:	2300      	movs	r3, #0
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005de8:	4642      	mov	r2, r8
 8005dea:	464b      	mov	r3, r9
 8005dec:	f04f 0000 	mov.w	r0, #0
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	0159      	lsls	r1, r3, #5
 8005df6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dfa:	0150      	lsls	r0, r2, #5
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4641      	mov	r1, r8
 8005e02:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e06:	4649      	mov	r1, r9
 8005e08:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e20:	ebb2 040a 	subs.w	r4, r2, sl
 8005e24:	eb63 050b 	sbc.w	r5, r3, fp
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	00eb      	lsls	r3, r5, #3
 8005e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e36:	00e2      	lsls	r2, r4, #3
 8005e38:	4614      	mov	r4, r2
 8005e3a:	461d      	mov	r5, r3
 8005e3c:	4643      	mov	r3, r8
 8005e3e:	18e3      	adds	r3, r4, r3
 8005e40:	603b      	str	r3, [r7, #0]
 8005e42:	464b      	mov	r3, r9
 8005e44:	eb45 0303 	adc.w	r3, r5, r3
 8005e48:	607b      	str	r3, [r7, #4]
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e56:	4629      	mov	r1, r5
 8005e58:	028b      	lsls	r3, r1, #10
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e60:	4621      	mov	r1, r4
 8005e62:	028a      	lsls	r2, r1, #10
 8005e64:	4610      	mov	r0, r2
 8005e66:	4619      	mov	r1, r3
 8005e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	61fa      	str	r2, [r7, #28]
 8005e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e74:	f7fa ff10 	bl	8000c98 <__aeabi_uldivmod>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e80:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	0c1b      	lsrs	r3, r3, #16
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005e90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e9a:	e002      	b.n	8005ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e9c:	4b05      	ldr	r3, [pc, #20]	@ (8005eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3750      	adds	r7, #80	@ 0x50
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eae:	bf00      	nop
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	00f42400 	.word	0x00f42400
 8005eb8:	007a1200 	.word	0x007a1200

08005ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ec0:	4b03      	ldr	r3, [pc, #12]	@ (8005ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	20000004 	.word	0x20000004

08005ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ed8:	f7ff fff0 	bl	8005ebc <HAL_RCC_GetHCLKFreq>
 8005edc:	4602      	mov	r2, r0
 8005ede:	4b05      	ldr	r3, [pc, #20]	@ (8005ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	0a9b      	lsrs	r3, r3, #10
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	4903      	ldr	r1, [pc, #12]	@ (8005ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eea:	5ccb      	ldrb	r3, [r1, r3]
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	0800f7e8 	.word	0x0800f7e8

08005efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f00:	f7ff ffdc 	bl	8005ebc <HAL_RCC_GetHCLKFreq>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4b05      	ldr	r3, [pc, #20]	@ (8005f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	0b5b      	lsrs	r3, r3, #13
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	4903      	ldr	r1, [pc, #12]	@ (8005f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f12:	5ccb      	ldrb	r3, [r1, r3]
 8005f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	0800f7e8 	.word	0x0800f7e8

08005f24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	220f      	movs	r2, #15
 8005f32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f34:	4b12      	ldr	r3, [pc, #72]	@ (8005f80 <HAL_RCC_GetClockConfig+0x5c>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 0203 	and.w	r2, r3, #3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f40:	4b0f      	ldr	r3, [pc, #60]	@ (8005f80 <HAL_RCC_GetClockConfig+0x5c>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f80 <HAL_RCC_GetClockConfig+0x5c>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005f58:	4b09      	ldr	r3, [pc, #36]	@ (8005f80 <HAL_RCC_GetClockConfig+0x5c>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	08db      	lsrs	r3, r3, #3
 8005f5e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f66:	4b07      	ldr	r3, [pc, #28]	@ (8005f84 <HAL_RCC_GetClockConfig+0x60>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0207 	and.w	r2, r3, #7
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	601a      	str	r2, [r3, #0]
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40023800 	.word	0x40023800
 8005f84:	40023c00 	.word	0x40023c00

08005f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e041      	b.n	800601e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f839 	bl	8006026 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f000 f9b2 	bl	8006330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
	...

0800603c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d001      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e044      	b.n	80060de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1e      	ldr	r2, [pc, #120]	@ (80060ec <HAL_TIM_Base_Start_IT+0xb0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d018      	beq.n	80060a8 <HAL_TIM_Base_Start_IT+0x6c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607e:	d013      	beq.n	80060a8 <HAL_TIM_Base_Start_IT+0x6c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a1a      	ldr	r2, [pc, #104]	@ (80060f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00e      	beq.n	80060a8 <HAL_TIM_Base_Start_IT+0x6c>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a19      	ldr	r2, [pc, #100]	@ (80060f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d009      	beq.n	80060a8 <HAL_TIM_Base_Start_IT+0x6c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a17      	ldr	r2, [pc, #92]	@ (80060f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d004      	beq.n	80060a8 <HAL_TIM_Base_Start_IT+0x6c>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a16      	ldr	r2, [pc, #88]	@ (80060fc <HAL_TIM_Base_Start_IT+0xc0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d111      	bne.n	80060cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b06      	cmp	r3, #6
 80060b8:	d010      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0201 	orr.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ca:	e007      	b.n	80060dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40014000 	.word	0x40014000

08006100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d020      	beq.n	8006164 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01b      	beq.n	8006164 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0202 	mvn.w	r2, #2
 8006134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f8d2 	bl	80062f4 <HAL_TIM_IC_CaptureCallback>
 8006150:	e005      	b.n	800615e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f8c4 	bl	80062e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f8d5 	bl	8006308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d020      	beq.n	80061b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01b      	beq.n	80061b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0204 	mvn.w	r2, #4
 8006180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8ac 	bl	80062f4 <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f89e 	bl	80062e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f8af 	bl	8006308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d020      	beq.n	80061fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01b      	beq.n	80061fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0208 	mvn.w	r2, #8
 80061cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2204      	movs	r2, #4
 80061d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f886 	bl	80062f4 <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f878 	bl	80062e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f889 	bl	8006308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b00      	cmp	r3, #0
 8006204:	d020      	beq.n	8006248 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0210 	mvn.w	r2, #16
 8006218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2208      	movs	r2, #8
 800621e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f860 	bl	80062f4 <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f852 	bl	80062e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f863 	bl	8006308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0201 	mvn.w	r2, #1
 8006264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fb ffd4 	bl	8002214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00c      	beq.n	8006290 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f8e6 	bl	800645c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00c      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d007      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f834 	bl	800631c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00c      	beq.n	80062d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0220 	mvn.w	r2, #32
 80062d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f8b8 	bl	8006448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062d8:	bf00      	nop
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3a      	ldr	r2, [pc, #232]	@ (800642c <TIM_Base_SetConfig+0xfc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00f      	beq.n	8006368 <TIM_Base_SetConfig+0x38>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634e:	d00b      	beq.n	8006368 <TIM_Base_SetConfig+0x38>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a37      	ldr	r2, [pc, #220]	@ (8006430 <TIM_Base_SetConfig+0x100>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d007      	beq.n	8006368 <TIM_Base_SetConfig+0x38>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a36      	ldr	r2, [pc, #216]	@ (8006434 <TIM_Base_SetConfig+0x104>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d003      	beq.n	8006368 <TIM_Base_SetConfig+0x38>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a35      	ldr	r2, [pc, #212]	@ (8006438 <TIM_Base_SetConfig+0x108>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d108      	bne.n	800637a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800636e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2b      	ldr	r2, [pc, #172]	@ (800642c <TIM_Base_SetConfig+0xfc>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d01b      	beq.n	80063ba <TIM_Base_SetConfig+0x8a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006388:	d017      	beq.n	80063ba <TIM_Base_SetConfig+0x8a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a28      	ldr	r2, [pc, #160]	@ (8006430 <TIM_Base_SetConfig+0x100>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d013      	beq.n	80063ba <TIM_Base_SetConfig+0x8a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a27      	ldr	r2, [pc, #156]	@ (8006434 <TIM_Base_SetConfig+0x104>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00f      	beq.n	80063ba <TIM_Base_SetConfig+0x8a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a26      	ldr	r2, [pc, #152]	@ (8006438 <TIM_Base_SetConfig+0x108>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00b      	beq.n	80063ba <TIM_Base_SetConfig+0x8a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a25      	ldr	r2, [pc, #148]	@ (800643c <TIM_Base_SetConfig+0x10c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d007      	beq.n	80063ba <TIM_Base_SetConfig+0x8a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a24      	ldr	r2, [pc, #144]	@ (8006440 <TIM_Base_SetConfig+0x110>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d003      	beq.n	80063ba <TIM_Base_SetConfig+0x8a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a23      	ldr	r2, [pc, #140]	@ (8006444 <TIM_Base_SetConfig+0x114>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d108      	bne.n	80063cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a0e      	ldr	r2, [pc, #56]	@ (800642c <TIM_Base_SetConfig+0xfc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d103      	bne.n	8006400 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b01      	cmp	r3, #1
 8006410:	d105      	bne.n	800641e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f023 0201 	bic.w	r2, r3, #1
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	611a      	str	r2, [r3, #16]
  }
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40014000 	.word	0x40014000
 8006440:	40014400 	.word	0x40014400
 8006444:	40014800 	.word	0x40014800

08006448 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e042      	b.n	8006508 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fd fd3a 	bl	8003f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2224      	movs	r2, #36	@ 0x24
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f973 	bl	80067a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695a      	ldr	r2, [r3, #20]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08a      	sub	sp, #40	@ 0x28
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b20      	cmp	r3, #32
 800652e:	d175      	bne.n	800661c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_UART_Transmit+0x2c>
 8006536:	88fb      	ldrh	r3, [r7, #6]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e06e      	b.n	800661e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2221      	movs	r2, #33	@ 0x21
 800654a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800654e:	f7fd fd87 	bl	8004060 <HAL_GetTick>
 8006552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	88fa      	ldrh	r2, [r7, #6]
 8006558:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	88fa      	ldrh	r2, [r7, #6]
 800655e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006568:	d108      	bne.n	800657c <HAL_UART_Transmit+0x6c>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	e003      	b.n	8006584 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006580:	2300      	movs	r3, #0
 8006582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006584:	e02e      	b.n	80065e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2200      	movs	r2, #0
 800658e:	2180      	movs	r1, #128	@ 0x80
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f848 	bl	8006626 <UART_WaitOnFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e03a      	b.n	800661e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10b      	bne.n	80065c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	3302      	adds	r3, #2
 80065c2:	61bb      	str	r3, [r7, #24]
 80065c4:	e007      	b.n	80065d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	781a      	ldrb	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	3301      	adds	r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1cb      	bne.n	8006586 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2200      	movs	r2, #0
 80065f6:	2140      	movs	r1, #64	@ 0x40
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f814 	bl	8006626 <UART_WaitOnFlagUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e006      	b.n	800661e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e000      	b.n	800661e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800661c:	2302      	movs	r3, #2
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	3720      	adds	r7, #32
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	603b      	str	r3, [r7, #0]
 8006632:	4613      	mov	r3, r2
 8006634:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006636:	e03b      	b.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663e:	d037      	beq.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006640:	f7fd fd0e 	bl	8004060 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	6a3a      	ldr	r2, [r7, #32]
 800664c:	429a      	cmp	r2, r3
 800664e:	d302      	bcc.n	8006656 <UART_WaitOnFlagUntilTimeout+0x30>
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e03a      	b.n	80066d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d023      	beq.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b80      	cmp	r3, #128	@ 0x80
 800666c:	d020      	beq.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b40      	cmp	r3, #64	@ 0x40
 8006672:	d01d      	beq.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b08      	cmp	r3, #8
 8006680:	d116      	bne.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f81d 	bl	80066d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2208      	movs	r2, #8
 80066a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e00f      	b.n	80066d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	4013      	ands	r3, r2
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	429a      	cmp	r2, r3
 80066be:	bf0c      	ite	eq
 80066c0:	2301      	moveq	r3, #1
 80066c2:	2300      	movne	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	461a      	mov	r2, r3
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d0b4      	beq.n	8006638 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066d8:	b480      	push	{r7}
 80066da:	b095      	sub	sp, #84	@ 0x54
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	330c      	adds	r3, #12
 80066fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006700:	643a      	str	r2, [r7, #64]	@ 0x40
 8006702:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800670e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e5      	bne.n	80066e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3314      	adds	r3, #20
 800671a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	61fb      	str	r3, [r7, #28]
   return(result);
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	f023 0301 	bic.w	r3, r3, #1
 800672a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3314      	adds	r3, #20
 8006732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006734:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006736:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800673a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e5      	bne.n	8006714 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674c:	2b01      	cmp	r3, #1
 800674e:	d119      	bne.n	8006784 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	330c      	adds	r3, #12
 8006756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f023 0310 	bic.w	r3, r3, #16
 8006766:	647b      	str	r3, [r7, #68]	@ 0x44
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	330c      	adds	r3, #12
 800676e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006770:	61ba      	str	r2, [r7, #24]
 8006772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6979      	ldr	r1, [r7, #20]
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	613b      	str	r3, [r7, #16]
   return(result);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e5      	bne.n	8006750 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006792:	bf00      	nop
 8006794:	3754      	adds	r7, #84	@ 0x54
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
	...

080067a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a4:	b0c0      	sub	sp, #256	@ 0x100
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067bc:	68d9      	ldr	r1, [r3, #12]
 80067be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	ea40 0301 	orr.w	r3, r0, r1
 80067c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	431a      	orrs	r2, r3
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80067f8:	f021 010c 	bic.w	r1, r1, #12
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006806:	430b      	orrs	r3, r1
 8006808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681a:	6999      	ldr	r1, [r3, #24]
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	ea40 0301 	orr.w	r3, r0, r1
 8006826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	4b8f      	ldr	r3, [pc, #572]	@ (8006a6c <UART_SetConfig+0x2cc>)
 8006830:	429a      	cmp	r2, r3
 8006832:	d005      	beq.n	8006840 <UART_SetConfig+0xa0>
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b8d      	ldr	r3, [pc, #564]	@ (8006a70 <UART_SetConfig+0x2d0>)
 800683c:	429a      	cmp	r2, r3
 800683e:	d104      	bne.n	800684a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006840:	f7ff fb5c 	bl	8005efc <HAL_RCC_GetPCLK2Freq>
 8006844:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006848:	e003      	b.n	8006852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800684a:	f7ff fb43 	bl	8005ed4 <HAL_RCC_GetPCLK1Freq>
 800684e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800685c:	f040 810c 	bne.w	8006a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006864:	2200      	movs	r2, #0
 8006866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800686a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800686e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006872:	4622      	mov	r2, r4
 8006874:	462b      	mov	r3, r5
 8006876:	1891      	adds	r1, r2, r2
 8006878:	65b9      	str	r1, [r7, #88]	@ 0x58
 800687a:	415b      	adcs	r3, r3
 800687c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800687e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006882:	4621      	mov	r1, r4
 8006884:	eb12 0801 	adds.w	r8, r2, r1
 8006888:	4629      	mov	r1, r5
 800688a:	eb43 0901 	adc.w	r9, r3, r1
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800689a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800689e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068a2:	4690      	mov	r8, r2
 80068a4:	4699      	mov	r9, r3
 80068a6:	4623      	mov	r3, r4
 80068a8:	eb18 0303 	adds.w	r3, r8, r3
 80068ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068b0:	462b      	mov	r3, r5
 80068b2:	eb49 0303 	adc.w	r3, r9, r3
 80068b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80068ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80068ce:	460b      	mov	r3, r1
 80068d0:	18db      	adds	r3, r3, r3
 80068d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80068d4:	4613      	mov	r3, r2
 80068d6:	eb42 0303 	adc.w	r3, r2, r3
 80068da:	657b      	str	r3, [r7, #84]	@ 0x54
 80068dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80068e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80068e4:	f7fa f9d8 	bl	8000c98 <__aeabi_uldivmod>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4b61      	ldr	r3, [pc, #388]	@ (8006a74 <UART_SetConfig+0x2d4>)
 80068ee:	fba3 2302 	umull	r2, r3, r3, r2
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	011c      	lsls	r4, r3, #4
 80068f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006900:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006908:	4642      	mov	r2, r8
 800690a:	464b      	mov	r3, r9
 800690c:	1891      	adds	r1, r2, r2
 800690e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006910:	415b      	adcs	r3, r3
 8006912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006918:	4641      	mov	r1, r8
 800691a:	eb12 0a01 	adds.w	sl, r2, r1
 800691e:	4649      	mov	r1, r9
 8006920:	eb43 0b01 	adc.w	fp, r3, r1
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006938:	4692      	mov	sl, r2
 800693a:	469b      	mov	fp, r3
 800693c:	4643      	mov	r3, r8
 800693e:	eb1a 0303 	adds.w	r3, sl, r3
 8006942:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006946:	464b      	mov	r3, r9
 8006948:	eb4b 0303 	adc.w	r3, fp, r3
 800694c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800695c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006964:	460b      	mov	r3, r1
 8006966:	18db      	adds	r3, r3, r3
 8006968:	643b      	str	r3, [r7, #64]	@ 0x40
 800696a:	4613      	mov	r3, r2
 800696c:	eb42 0303 	adc.w	r3, r2, r3
 8006970:	647b      	str	r3, [r7, #68]	@ 0x44
 8006972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800697a:	f7fa f98d 	bl	8000c98 <__aeabi_uldivmod>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4611      	mov	r1, r2
 8006984:	4b3b      	ldr	r3, [pc, #236]	@ (8006a74 <UART_SetConfig+0x2d4>)
 8006986:	fba3 2301 	umull	r2, r3, r3, r1
 800698a:	095b      	lsrs	r3, r3, #5
 800698c:	2264      	movs	r2, #100	@ 0x64
 800698e:	fb02 f303 	mul.w	r3, r2, r3
 8006992:	1acb      	subs	r3, r1, r3
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800699a:	4b36      	ldr	r3, [pc, #216]	@ (8006a74 <UART_SetConfig+0x2d4>)
 800699c:	fba3 2302 	umull	r2, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069a8:	441c      	add	r4, r3
 80069aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80069b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80069bc:	4642      	mov	r2, r8
 80069be:	464b      	mov	r3, r9
 80069c0:	1891      	adds	r1, r2, r2
 80069c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80069c4:	415b      	adcs	r3, r3
 80069c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069cc:	4641      	mov	r1, r8
 80069ce:	1851      	adds	r1, r2, r1
 80069d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80069d2:	4649      	mov	r1, r9
 80069d4:	414b      	adcs	r3, r1
 80069d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80069e4:	4659      	mov	r1, fp
 80069e6:	00cb      	lsls	r3, r1, #3
 80069e8:	4651      	mov	r1, sl
 80069ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ee:	4651      	mov	r1, sl
 80069f0:	00ca      	lsls	r2, r1, #3
 80069f2:	4610      	mov	r0, r2
 80069f4:	4619      	mov	r1, r3
 80069f6:	4603      	mov	r3, r0
 80069f8:	4642      	mov	r2, r8
 80069fa:	189b      	adds	r3, r3, r2
 80069fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a00:	464b      	mov	r3, r9
 8006a02:	460a      	mov	r2, r1
 8006a04:	eb42 0303 	adc.w	r3, r2, r3
 8006a08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a20:	460b      	mov	r3, r1
 8006a22:	18db      	adds	r3, r3, r3
 8006a24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a26:	4613      	mov	r3, r2
 8006a28:	eb42 0303 	adc.w	r3, r2, r3
 8006a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a36:	f7fa f92f 	bl	8000c98 <__aeabi_uldivmod>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <UART_SetConfig+0x2d4>)
 8006a40:	fba3 1302 	umull	r1, r3, r3, r2
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	2164      	movs	r1, #100	@ 0x64
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	3332      	adds	r3, #50	@ 0x32
 8006a52:	4a08      	ldr	r2, [pc, #32]	@ (8006a74 <UART_SetConfig+0x2d4>)
 8006a54:	fba2 2303 	umull	r2, r3, r2, r3
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	f003 0207 	and.w	r2, r3, #7
 8006a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4422      	add	r2, r4
 8006a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a68:	e106      	b.n	8006c78 <UART_SetConfig+0x4d8>
 8006a6a:	bf00      	nop
 8006a6c:	40011000 	.word	0x40011000
 8006a70:	40011400 	.word	0x40011400
 8006a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a8a:	4642      	mov	r2, r8
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	1891      	adds	r1, r2, r2
 8006a90:	6239      	str	r1, [r7, #32]
 8006a92:	415b      	adcs	r3, r3
 8006a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	1854      	adds	r4, r2, r1
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	eb43 0501 	adc.w	r5, r3, r1
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	f04f 0300 	mov.w	r3, #0
 8006aac:	00eb      	lsls	r3, r5, #3
 8006aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ab2:	00e2      	lsls	r2, r4, #3
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	461d      	mov	r5, r3
 8006ab8:	4643      	mov	r3, r8
 8006aba:	18e3      	adds	r3, r4, r3
 8006abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ac0:	464b      	mov	r3, r9
 8006ac2:	eb45 0303 	adc.w	r3, r5, r3
 8006ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ad6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	008b      	lsls	r3, r1, #2
 8006aea:	4621      	mov	r1, r4
 8006aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006af0:	4621      	mov	r1, r4
 8006af2:	008a      	lsls	r2, r1, #2
 8006af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006af8:	f7fa f8ce 	bl	8000c98 <__aeabi_uldivmod>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4b60      	ldr	r3, [pc, #384]	@ (8006c84 <UART_SetConfig+0x4e4>)
 8006b02:	fba3 2302 	umull	r2, r3, r3, r2
 8006b06:	095b      	lsrs	r3, r3, #5
 8006b08:	011c      	lsls	r4, r3, #4
 8006b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	464b      	mov	r3, r9
 8006b20:	1891      	adds	r1, r2, r2
 8006b22:	61b9      	str	r1, [r7, #24]
 8006b24:	415b      	adcs	r3, r3
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b2c:	4641      	mov	r1, r8
 8006b2e:	1851      	adds	r1, r2, r1
 8006b30:	6139      	str	r1, [r7, #16]
 8006b32:	4649      	mov	r1, r9
 8006b34:	414b      	adcs	r3, r1
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	f04f 0300 	mov.w	r3, #0
 8006b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b44:	4659      	mov	r1, fp
 8006b46:	00cb      	lsls	r3, r1, #3
 8006b48:	4651      	mov	r1, sl
 8006b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b4e:	4651      	mov	r1, sl
 8006b50:	00ca      	lsls	r2, r1, #3
 8006b52:	4610      	mov	r0, r2
 8006b54:	4619      	mov	r1, r3
 8006b56:	4603      	mov	r3, r0
 8006b58:	4642      	mov	r2, r8
 8006b5a:	189b      	adds	r3, r3, r2
 8006b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b60:	464b      	mov	r3, r9
 8006b62:	460a      	mov	r2, r1
 8006b64:	eb42 0303 	adc.w	r3, r2, r3
 8006b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b84:	4649      	mov	r1, r9
 8006b86:	008b      	lsls	r3, r1, #2
 8006b88:	4641      	mov	r1, r8
 8006b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b8e:	4641      	mov	r1, r8
 8006b90:	008a      	lsls	r2, r1, #2
 8006b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006b96:	f7fa f87f 	bl	8000c98 <__aeabi_uldivmod>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4b38      	ldr	r3, [pc, #224]	@ (8006c84 <UART_SetConfig+0x4e4>)
 8006ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	2264      	movs	r2, #100	@ 0x64
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
 8006bae:	1acb      	subs	r3, r1, r3
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	3332      	adds	r3, #50	@ 0x32
 8006bb4:	4a33      	ldr	r2, [pc, #204]	@ (8006c84 <UART_SetConfig+0x4e4>)
 8006bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bc0:	441c      	add	r4, r3
 8006bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bca:	677a      	str	r2, [r7, #116]	@ 0x74
 8006bcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	1891      	adds	r1, r2, r2
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	415b      	adcs	r3, r3
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006be0:	4641      	mov	r1, r8
 8006be2:	1851      	adds	r1, r2, r1
 8006be4:	6039      	str	r1, [r7, #0]
 8006be6:	4649      	mov	r1, r9
 8006be8:	414b      	adcs	r3, r1
 8006bea:	607b      	str	r3, [r7, #4]
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bf8:	4659      	mov	r1, fp
 8006bfa:	00cb      	lsls	r3, r1, #3
 8006bfc:	4651      	mov	r1, sl
 8006bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c02:	4651      	mov	r1, sl
 8006c04:	00ca      	lsls	r2, r1, #3
 8006c06:	4610      	mov	r0, r2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	189b      	adds	r3, r3, r2
 8006c10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c12:	464b      	mov	r3, r9
 8006c14:	460a      	mov	r2, r1
 8006c16:	eb42 0303 	adc.w	r3, r2, r3
 8006c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c26:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c34:	4649      	mov	r1, r9
 8006c36:	008b      	lsls	r3, r1, #2
 8006c38:	4641      	mov	r1, r8
 8006c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c3e:	4641      	mov	r1, r8
 8006c40:	008a      	lsls	r2, r1, #2
 8006c42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c46:	f7fa f827 	bl	8000c98 <__aeabi_uldivmod>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <UART_SetConfig+0x4e4>)
 8006c50:	fba3 1302 	umull	r1, r3, r3, r2
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	2164      	movs	r1, #100	@ 0x64
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	3332      	adds	r3, #50	@ 0x32
 8006c62:	4a08      	ldr	r2, [pc, #32]	@ (8006c84 <UART_SetConfig+0x4e4>)
 8006c64:	fba2 2303 	umull	r2, r3, r2, r3
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	f003 020f 	and.w	r2, r3, #15
 8006c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4422      	add	r2, r4
 8006c76:	609a      	str	r2, [r3, #8]
}
 8006c78:	bf00      	nop
 8006c7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c84:	51eb851f 	.word	0x51eb851f

08006c88 <__NVIC_SetPriority>:
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	6039      	str	r1, [r7, #0]
 8006c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	db0a      	blt.n	8006cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	490c      	ldr	r1, [pc, #48]	@ (8006cd4 <__NVIC_SetPriority+0x4c>)
 8006ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ca6:	0112      	lsls	r2, r2, #4
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	440b      	add	r3, r1
 8006cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006cb0:	e00a      	b.n	8006cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	4908      	ldr	r1, [pc, #32]	@ (8006cd8 <__NVIC_SetPriority+0x50>)
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	3b04      	subs	r3, #4
 8006cc0:	0112      	lsls	r2, r2, #4
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	761a      	strb	r2, [r3, #24]
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	e000e100 	.word	0xe000e100
 8006cd8:	e000ed00 	.word	0xe000ed00

08006cdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006ce0:	4b05      	ldr	r3, [pc, #20]	@ (8006cf8 <SysTick_Handler+0x1c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006ce4:	f002 fd5e 	bl	80097a4 <xTaskGetSchedulerState>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d001      	beq.n	8006cf2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006cee:	f003 fd13 	bl	800a718 <xPortSysTickHandler>
  }
}
 8006cf2:	bf00      	nop
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	e000e010 	.word	0xe000e010

08006cfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d00:	2100      	movs	r1, #0
 8006d02:	f06f 0004 	mvn.w	r0, #4
 8006d06:	f7ff ffbf 	bl	8006c88 <__NVIC_SetPriority>
#endif
}
 8006d0a:	bf00      	nop
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d16:	f3ef 8305 	mrs	r3, IPSR
 8006d1a:	603b      	str	r3, [r7, #0]
  return(result);
 8006d1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d22:	f06f 0305 	mvn.w	r3, #5
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	e00c      	b.n	8006d44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d54 <osKernelInitialize+0x44>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d105      	bne.n	8006d3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d32:	4b08      	ldr	r3, [pc, #32]	@ (8006d54 <osKernelInitialize+0x44>)
 8006d34:	2201      	movs	r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	607b      	str	r3, [r7, #4]
 8006d3c:	e002      	b.n	8006d44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d44:	687b      	ldr	r3, [r7, #4]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	20000714 	.word	0x20000714

08006d58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d5e:	f3ef 8305 	mrs	r3, IPSR
 8006d62:	603b      	str	r3, [r7, #0]
  return(result);
 8006d64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d6a:	f06f 0305 	mvn.w	r3, #5
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	e010      	b.n	8006d94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d72:	4b0b      	ldr	r3, [pc, #44]	@ (8006da0 <osKernelStart+0x48>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d109      	bne.n	8006d8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d7a:	f7ff ffbf 	bl	8006cfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d7e:	4b08      	ldr	r3, [pc, #32]	@ (8006da0 <osKernelStart+0x48>)
 8006d80:	2202      	movs	r2, #2
 8006d82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d84:	f002 f89a 	bl	8008ebc <vTaskStartScheduler>
      stat = osOK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	607b      	str	r3, [r7, #4]
 8006d8c:	e002      	b.n	8006d94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d94:	687b      	ldr	r3, [r7, #4]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000714 	.word	0x20000714

08006da4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08e      	sub	sp, #56	@ 0x38
 8006da8:	af04      	add	r7, sp, #16
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006db4:	f3ef 8305 	mrs	r3, IPSR
 8006db8:	617b      	str	r3, [r7, #20]
  return(result);
 8006dba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d17e      	bne.n	8006ebe <osThreadNew+0x11a>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d07b      	beq.n	8006ebe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006dc6:	2380      	movs	r3, #128	@ 0x80
 8006dc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006dca:	2318      	movs	r3, #24
 8006dcc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d045      	beq.n	8006e6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <osThreadNew+0x48>
        name = attr->name;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d008      	beq.n	8006e12 <osThreadNew+0x6e>
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	2b38      	cmp	r3, #56	@ 0x38
 8006e04:	d805      	bhi.n	8006e12 <osThreadNew+0x6e>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <osThreadNew+0x72>
        return (NULL);
 8006e12:	2300      	movs	r3, #0
 8006e14:	e054      	b.n	8006ec0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	089b      	lsrs	r3, r3, #2
 8006e24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00e      	beq.n	8006e4c <osThreadNew+0xa8>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	2ba7      	cmp	r3, #167	@ 0xa7
 8006e34:	d90a      	bls.n	8006e4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d006      	beq.n	8006e4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <osThreadNew+0xa8>
        mem = 1;
 8006e46:	2301      	movs	r3, #1
 8006e48:	61bb      	str	r3, [r7, #24]
 8006e4a:	e010      	b.n	8006e6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10c      	bne.n	8006e6e <osThreadNew+0xca>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d108      	bne.n	8006e6e <osThreadNew+0xca>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <osThreadNew+0xca>
          mem = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61bb      	str	r3, [r7, #24]
 8006e68:	e001      	b.n	8006e6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d110      	bne.n	8006e96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e7c:	9202      	str	r2, [sp, #8]
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	6a3a      	ldr	r2, [r7, #32]
 8006e88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f001 fe22 	bl	8008ad4 <xTaskCreateStatic>
 8006e90:	4603      	mov	r3, r0
 8006e92:	613b      	str	r3, [r7, #16]
 8006e94:	e013      	b.n	8006ebe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d110      	bne.n	8006ebe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	f107 0310 	add.w	r3, r7, #16
 8006ea4:	9301      	str	r3, [sp, #4]
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f001 fe70 	bl	8008b94 <xTaskCreate>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d001      	beq.n	8006ebe <osThreadNew+0x11a>
            hTask = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ebe:	693b      	ldr	r3, [r7, #16]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3728      	adds	r7, #40	@ 0x28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ed0:	f3ef 8305 	mrs	r3, IPSR
 8006ed4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ed6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <osDelay+0x1c>
    stat = osErrorISR;
 8006edc:	f06f 0305 	mvn.w	r3, #5
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	e007      	b.n	8006ef4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f001 ffae 	bl	8008e50 <vTaskDelay>
    }
  }

  return (stat);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f003 fa26 	bl	800a358 <pvTimerGetTimerID>
 8006f0c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	6852      	ldr	r2, [r2, #4]
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3
  }
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08c      	sub	sp, #48	@ 0x30
 8006f2c:	af02      	add	r7, sp, #8
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	607a      	str	r2, [r7, #4]
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	460b      	mov	r3, r1
 8006f36:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f3c:	f3ef 8305 	mrs	r3, IPSR
 8006f40:	613b      	str	r3, [r7, #16]
  return(result);
 8006f42:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d163      	bne.n	8007010 <osTimerNew+0xe8>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d060      	beq.n	8007010 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006f4e:	2008      	movs	r0, #8
 8006f50:	f003 fc74 	bl	800a83c <pvPortMalloc>
 8006f54:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d059      	beq.n	8007010 <osTimerNew+0xe8>
      callb->func = func;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006f68:	7afb      	ldrb	r3, [r7, #11]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <osTimerNew+0x4c>
        reload = pdFALSE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	e001      	b.n	8006f78 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006f74:	2301      	movs	r3, #1
 8006f76:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006f78:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d01c      	beq.n	8006fc2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <osTimerNew+0x6e>
          name = attr->name;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d006      	beq.n	8006fac <osTimerNew+0x84>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	2b2b      	cmp	r3, #43	@ 0x2b
 8006fa4:	d902      	bls.n	8006fac <osTimerNew+0x84>
          mem = 1;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	e00c      	b.n	8006fc6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d108      	bne.n	8006fc6 <osTimerNew+0x9e>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d104      	bne.n	8006fc6 <osTimerNew+0x9e>
            mem = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	e001      	b.n	8006fc6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d10c      	bne.n	8006fe6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	4b12      	ldr	r3, [pc, #72]	@ (800701c <osTimerNew+0xf4>)
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	69fa      	ldr	r2, [r7, #28]
 8006fda:	2101      	movs	r1, #1
 8006fdc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006fde:	f002 fe2e 	bl	8009c3e <xTimerCreateStatic>
 8006fe2:	6238      	str	r0, [r7, #32]
 8006fe4:	e00b      	b.n	8006ffe <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d108      	bne.n	8006ffe <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006fec:	4b0b      	ldr	r3, [pc, #44]	@ (800701c <osTimerNew+0xf4>)
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ff8:	f002 fe00 	bl	8009bfc <xTimerCreate>
 8006ffc:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d105      	bne.n	8007010 <osTimerNew+0xe8>
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <osTimerNew+0xe8>
        vPortFree (callb);
 800700a:	6978      	ldr	r0, [r7, #20]
 800700c:	f003 fce4 	bl	800a9d8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007010:	6a3b      	ldr	r3, [r7, #32]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3728      	adds	r7, #40	@ 0x28
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	08006eff 	.word	0x08006eff

08007020 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af02      	add	r7, sp, #8
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800702e:	f3ef 8305 	mrs	r3, IPSR
 8007032:	60fb      	str	r3, [r7, #12]
  return(result);
 8007034:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <osTimerStart+0x22>
    stat = osErrorISR;
 800703a:	f06f 0305 	mvn.w	r3, #5
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	e017      	b.n	8007072 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d103      	bne.n	8007050 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007048:	f06f 0303 	mvn.w	r3, #3
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	e010      	b.n	8007072 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007050:	2300      	movs	r3, #0
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	2300      	movs	r3, #0
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	2104      	movs	r1, #4
 800705a:	6938      	ldr	r0, [r7, #16]
 800705c:	f002 fe6c 	bl	8009d38 <xTimerGenericCommand>
 8007060:	4603      	mov	r3, r0
 8007062:	2b01      	cmp	r3, #1
 8007064:	d102      	bne.n	800706c <osTimerStart+0x4c>
      stat = osOK;
 8007066:	2300      	movs	r3, #0
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	e002      	b.n	8007072 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800706c:	f06f 0302 	mvn.w	r3, #2
 8007070:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007072:	697b      	ldr	r3, [r7, #20]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007084:	2300      	movs	r3, #0
 8007086:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007088:	f3ef 8305 	mrs	r3, IPSR
 800708c:	60bb      	str	r3, [r7, #8]
  return(result);
 800708e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007090:	2b00      	cmp	r3, #0
 8007092:	d174      	bne.n	800717e <osMutexNew+0x102>
    if (attr != NULL) {
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <osMutexNew+0x26>
      type = attr->attr_bits;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	61bb      	str	r3, [r7, #24]
 80070a0:	e001      	b.n	80070a6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <osMutexNew+0x3a>
      rmtx = 1U;
 80070b0:	2301      	movs	r3, #1
 80070b2:	617b      	str	r3, [r7, #20]
 80070b4:	e001      	b.n	80070ba <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f003 0308 	and.w	r3, r3, #8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d15c      	bne.n	800717e <osMutexNew+0x102>
      mem = -1;
 80070c4:	f04f 33ff 	mov.w	r3, #4294967295
 80070c8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d015      	beq.n	80070fc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d006      	beq.n	80070e6 <osMutexNew+0x6a>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	2b4f      	cmp	r3, #79	@ 0x4f
 80070de:	d902      	bls.n	80070e6 <osMutexNew+0x6a>
          mem = 1;
 80070e0:	2301      	movs	r3, #1
 80070e2:	613b      	str	r3, [r7, #16]
 80070e4:	e00c      	b.n	8007100 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d108      	bne.n	8007100 <osMutexNew+0x84>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d104      	bne.n	8007100 <osMutexNew+0x84>
            mem = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	e001      	b.n	8007100 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d112      	bne.n	800712c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	4619      	mov	r1, r3
 8007112:	2004      	movs	r0, #4
 8007114:	f000 fd71 	bl	8007bfa <xQueueCreateMutexStatic>
 8007118:	61f8      	str	r0, [r7, #28]
 800711a:	e016      	b.n	800714a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	4619      	mov	r1, r3
 8007122:	2001      	movs	r0, #1
 8007124:	f000 fd69 	bl	8007bfa <xQueueCreateMutexStatic>
 8007128:	61f8      	str	r0, [r7, #28]
 800712a:	e00e      	b.n	800714a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10b      	bne.n	800714a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007138:	2004      	movs	r0, #4
 800713a:	f000 fd46 	bl	8007bca <xQueueCreateMutex>
 800713e:	61f8      	str	r0, [r7, #28]
 8007140:	e003      	b.n	800714a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007142:	2001      	movs	r0, #1
 8007144:	f000 fd41 	bl	8007bca <xQueueCreateMutex>
 8007148:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00c      	beq.n	800716a <osMutexNew+0xee>
        if (attr != NULL) {
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <osMutexNew+0xe2>
          name = attr->name;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e001      	b.n	8007162 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007162:	68f9      	ldr	r1, [r7, #12]
 8007164:	69f8      	ldr	r0, [r7, #28]
 8007166:	f001 fc2d 	bl	80089c4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d006      	beq.n	800717e <osMutexNew+0x102>
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	f043 0301 	orr.w	r3, r3, #1
 800717c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800717e:	69fb      	ldr	r3, [r7, #28]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3720      	adds	r7, #32
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f023 0301 	bic.w	r3, r3, #1
 8007198:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a6:	f3ef 8305 	mrs	r3, IPSR
 80071aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80071ac:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <osMutexAcquire+0x32>
    stat = osErrorISR;
 80071b2:	f06f 0305 	mvn.w	r3, #5
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	e02c      	b.n	8007214 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80071c0:	f06f 0303 	mvn.w	r3, #3
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	e025      	b.n	8007214 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d011      	beq.n	80071f2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6938      	ldr	r0, [r7, #16]
 80071d2:	f000 fd62 	bl	8007c9a <xQueueTakeMutexRecursive>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d01b      	beq.n	8007214 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80071e2:	f06f 0301 	mvn.w	r3, #1
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	e014      	b.n	8007214 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80071ea:	f06f 0302 	mvn.w	r3, #2
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	e010      	b.n	8007214 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6938      	ldr	r0, [r7, #16]
 80071f6:	f001 f907 	bl	8008408 <xQueueSemaphoreTake>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d009      	beq.n	8007214 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007206:	f06f 0301 	mvn.w	r3, #1
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	e002      	b.n	8007214 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800720e:	f06f 0302 	mvn.w	r3, #2
 8007212:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007214:	697b      	ldr	r3, [r7, #20]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800721e:	b580      	push	{r7, lr}
 8007220:	b086      	sub	sp, #24
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f023 0301 	bic.w	r3, r3, #1
 800722c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007236:	2300      	movs	r3, #0
 8007238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800723a:	f3ef 8305 	mrs	r3, IPSR
 800723e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007240:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <osMutexRelease+0x30>
    stat = osErrorISR;
 8007246:	f06f 0305 	mvn.w	r3, #5
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	e01f      	b.n	800728e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007254:	f06f 0303 	mvn.w	r3, #3
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	e018      	b.n	800728e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d009      	beq.n	8007276 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007262:	6938      	ldr	r0, [r7, #16]
 8007264:	f000 fce4 	bl	8007c30 <xQueueGiveMutexRecursive>
 8007268:	4603      	mov	r3, r0
 800726a:	2b01      	cmp	r3, #1
 800726c:	d00f      	beq.n	800728e <osMutexRelease+0x70>
        stat = osErrorResource;
 800726e:	f06f 0302 	mvn.w	r3, #2
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	e00b      	b.n	800728e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007276:	2300      	movs	r3, #0
 8007278:	2200      	movs	r2, #0
 800727a:	2100      	movs	r1, #0
 800727c:	6938      	ldr	r0, [r7, #16]
 800727e:	f000 fdb1 	bl	8007de4 <xQueueGenericSend>
 8007282:	4603      	mov	r3, r0
 8007284:	2b01      	cmp	r3, #1
 8007286:	d002      	beq.n	800728e <osMutexRelease+0x70>
        stat = osErrorResource;
 8007288:	f06f 0302 	mvn.w	r3, #2
 800728c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800728e:	697b      	ldr	r3, [r7, #20]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b08a      	sub	sp, #40	@ 0x28
 800729c:	af02      	add	r7, sp, #8
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072a8:	f3ef 8305 	mrs	r3, IPSR
 80072ac:	613b      	str	r3, [r7, #16]
  return(result);
 80072ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d175      	bne.n	80073a0 <osSemaphoreNew+0x108>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d072      	beq.n	80073a0 <osSemaphoreNew+0x108>
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d86e      	bhi.n	80073a0 <osSemaphoreNew+0x108>
    mem = -1;
 80072c2:	f04f 33ff 	mov.w	r3, #4294967295
 80072c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d015      	beq.n	80072fa <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d006      	beq.n	80072e4 <osSemaphoreNew+0x4c>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	2b4f      	cmp	r3, #79	@ 0x4f
 80072dc:	d902      	bls.n	80072e4 <osSemaphoreNew+0x4c>
        mem = 1;
 80072de:	2301      	movs	r3, #1
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	e00c      	b.n	80072fe <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d108      	bne.n	80072fe <osSemaphoreNew+0x66>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d104      	bne.n	80072fe <osSemaphoreNew+0x66>
          mem = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61bb      	str	r3, [r7, #24]
 80072f8:	e001      	b.n	80072fe <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d04c      	beq.n	80073a0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d128      	bne.n	800735e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d10a      	bne.n	8007328 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	2203      	movs	r2, #3
 8007318:	9200      	str	r2, [sp, #0]
 800731a:	2200      	movs	r2, #0
 800731c:	2100      	movs	r1, #0
 800731e:	2001      	movs	r0, #1
 8007320:	f000 fb5e 	bl	80079e0 <xQueueGenericCreateStatic>
 8007324:	61f8      	str	r0, [r7, #28]
 8007326:	e005      	b.n	8007334 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007328:	2203      	movs	r2, #3
 800732a:	2100      	movs	r1, #0
 800732c:	2001      	movs	r0, #1
 800732e:	f000 fbd4 	bl	8007ada <xQueueGenericCreate>
 8007332:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d022      	beq.n	8007380 <osSemaphoreNew+0xe8>
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01f      	beq.n	8007380 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007340:	2300      	movs	r3, #0
 8007342:	2200      	movs	r2, #0
 8007344:	2100      	movs	r1, #0
 8007346:	69f8      	ldr	r0, [r7, #28]
 8007348:	f000 fd4c 	bl	8007de4 <xQueueGenericSend>
 800734c:	4603      	mov	r3, r0
 800734e:	2b01      	cmp	r3, #1
 8007350:	d016      	beq.n	8007380 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007352:	69f8      	ldr	r0, [r7, #28]
 8007354:	f001 f9ea 	bl	800872c <vQueueDelete>
            hSemaphore = NULL;
 8007358:	2300      	movs	r3, #0
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	e010      	b.n	8007380 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d108      	bne.n	8007376 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	461a      	mov	r2, r3
 800736a:	68b9      	ldr	r1, [r7, #8]
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 fccb 	bl	8007d08 <xQueueCreateCountingSemaphoreStatic>
 8007372:	61f8      	str	r0, [r7, #28]
 8007374:	e004      	b.n	8007380 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fcfe 	bl	8007d7a <xQueueCreateCountingSemaphore>
 800737e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00c      	beq.n	80073a0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <osSemaphoreNew+0xfc>
          name = attr->name;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	e001      	b.n	8007398 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007398:	6979      	ldr	r1, [r7, #20]
 800739a:	69f8      	ldr	r0, [r7, #28]
 800739c:	f001 fb12 	bl	80089c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80073a0:	69fb      	ldr	r3, [r7, #28]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3720      	adds	r7, #32
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d103      	bne.n	80073cc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80073c4:	f06f 0303 	mvn.w	r3, #3
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	e039      	b.n	8007440 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073cc:	f3ef 8305 	mrs	r3, IPSR
 80073d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80073d2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d022      	beq.n	800741e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80073de:	f06f 0303 	mvn.w	r3, #3
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e02c      	b.n	8007440 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80073ea:	f107 0308 	add.w	r3, r7, #8
 80073ee:	461a      	mov	r2, r3
 80073f0:	2100      	movs	r1, #0
 80073f2:	6938      	ldr	r0, [r7, #16]
 80073f4:	f001 f918 	bl	8008628 <xQueueReceiveFromISR>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d003      	beq.n	8007406 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80073fe:	f06f 0302 	mvn.w	r3, #2
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	e01c      	b.n	8007440 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d019      	beq.n	8007440 <osSemaphoreAcquire+0x94>
 800740c:	4b0f      	ldr	r3, [pc, #60]	@ (800744c <osSemaphoreAcquire+0xa0>)
 800740e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	e010      	b.n	8007440 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6938      	ldr	r0, [r7, #16]
 8007422:	f000 fff1 	bl	8008408 <xQueueSemaphoreTake>
 8007426:	4603      	mov	r3, r0
 8007428:	2b01      	cmp	r3, #1
 800742a:	d009      	beq.n	8007440 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007432:	f06f 0301 	mvn.w	r3, #1
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e002      	b.n	8007440 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800743a:	f06f 0302 	mvn.w	r3, #2
 800743e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007440:	697b      	ldr	r3, [r7, #20]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	e000ed04 	.word	0xe000ed04

08007450 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800745c:	2300      	movs	r3, #0
 800745e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d103      	bne.n	800746e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007466:	f06f 0303 	mvn.w	r3, #3
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	e02c      	b.n	80074c8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800746e:	f3ef 8305 	mrs	r3, IPSR
 8007472:	60fb      	str	r3, [r7, #12]
  return(result);
 8007474:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01a      	beq.n	80074b0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800747a:	2300      	movs	r3, #0
 800747c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800747e:	f107 0308 	add.w	r3, r7, #8
 8007482:	4619      	mov	r1, r3
 8007484:	6938      	ldr	r0, [r7, #16]
 8007486:	f000 fe4d 	bl	8008124 <xQueueGiveFromISR>
 800748a:	4603      	mov	r3, r0
 800748c:	2b01      	cmp	r3, #1
 800748e:	d003      	beq.n	8007498 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007490:	f06f 0302 	mvn.w	r3, #2
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	e017      	b.n	80074c8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d014      	beq.n	80074c8 <osSemaphoreRelease+0x78>
 800749e:	4b0d      	ldr	r3, [pc, #52]	@ (80074d4 <osSemaphoreRelease+0x84>)
 80074a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	e00b      	b.n	80074c8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80074b0:	2300      	movs	r3, #0
 80074b2:	2200      	movs	r2, #0
 80074b4:	2100      	movs	r1, #0
 80074b6:	6938      	ldr	r0, [r7, #16]
 80074b8:	f000 fc94 	bl	8007de4 <xQueueGenericSend>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d002      	beq.n	80074c8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80074c2:	f06f 0302 	mvn.w	r3, #2
 80074c6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80074c8:	697b      	ldr	r3, [r7, #20]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	e000ed04 	.word	0xe000ed04

080074d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08a      	sub	sp, #40	@ 0x28
 80074dc:	af02      	add	r7, sp, #8
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074e8:	f3ef 8305 	mrs	r3, IPSR
 80074ec:	613b      	str	r3, [r7, #16]
  return(result);
 80074ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d15f      	bne.n	80075b4 <osMessageQueueNew+0xdc>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d05c      	beq.n	80075b4 <osMessageQueueNew+0xdc>
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d059      	beq.n	80075b4 <osMessageQueueNew+0xdc>
    mem = -1;
 8007500:	f04f 33ff 	mov.w	r3, #4294967295
 8007504:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d029      	beq.n	8007560 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d012      	beq.n	800753a <osMessageQueueNew+0x62>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	2b4f      	cmp	r3, #79	@ 0x4f
 800751a:	d90e      	bls.n	800753a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	695a      	ldr	r2, [r3, #20]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	fb01 f303 	mul.w	r3, r1, r3
 8007530:	429a      	cmp	r2, r3
 8007532:	d302      	bcc.n	800753a <osMessageQueueNew+0x62>
        mem = 1;
 8007534:	2301      	movs	r3, #1
 8007536:	61bb      	str	r3, [r7, #24]
 8007538:	e014      	b.n	8007564 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d110      	bne.n	8007564 <osMessageQueueNew+0x8c>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10c      	bne.n	8007564 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800754e:	2b00      	cmp	r3, #0
 8007550:	d108      	bne.n	8007564 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d104      	bne.n	8007564 <osMessageQueueNew+0x8c>
          mem = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	61bb      	str	r3, [r7, #24]
 800755e:	e001      	b.n	8007564 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d10b      	bne.n	8007582 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691a      	ldr	r2, [r3, #16]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	2100      	movs	r1, #0
 8007574:	9100      	str	r1, [sp, #0]
 8007576:	68b9      	ldr	r1, [r7, #8]
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 fa31 	bl	80079e0 <xQueueGenericCreateStatic>
 800757e:	61f8      	str	r0, [r7, #28]
 8007580:	e008      	b.n	8007594 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d105      	bne.n	8007594 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007588:	2200      	movs	r2, #0
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 faa4 	bl	8007ada <xQueueGenericCreate>
 8007592:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00c      	beq.n	80075b4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e001      	b.n	80075ac <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80075a8:	2300      	movs	r3, #0
 80075aa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80075ac:	6979      	ldr	r1, [r7, #20]
 80075ae:	69f8      	ldr	r0, [r7, #28]
 80075b0:	f001 fa08 	bl	80089c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80075b4:	69fb      	ldr	r3, [r7, #28]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3720      	adds	r7, #32
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	4613      	mov	r3, r2
 80075ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075d8:	f3ef 8305 	mrs	r3, IPSR
 80075dc:	617b      	str	r3, [r7, #20]
  return(result);
 80075de:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d028      	beq.n	8007636 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <osMessageQueuePut+0x36>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <osMessageQueuePut+0x36>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80075f6:	f06f 0303 	mvn.w	r3, #3
 80075fa:	61fb      	str	r3, [r7, #28]
 80075fc:	e038      	b.n	8007670 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80075fe:	2300      	movs	r3, #0
 8007600:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007602:	f107 0210 	add.w	r2, r7, #16
 8007606:	2300      	movs	r3, #0
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	69b8      	ldr	r0, [r7, #24]
 800760c:	f000 fcec 	bl	8007fe8 <xQueueGenericSendFromISR>
 8007610:	4603      	mov	r3, r0
 8007612:	2b01      	cmp	r3, #1
 8007614:	d003      	beq.n	800761e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007616:	f06f 0302 	mvn.w	r3, #2
 800761a:	61fb      	str	r3, [r7, #28]
 800761c:	e028      	b.n	8007670 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d025      	beq.n	8007670 <osMessageQueuePut+0xb0>
 8007624:	4b15      	ldr	r3, [pc, #84]	@ (800767c <osMessageQueuePut+0xbc>)
 8007626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	e01c      	b.n	8007670 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <osMessageQueuePut+0x82>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d103      	bne.n	800764a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007642:	f06f 0303 	mvn.w	r3, #3
 8007646:	61fb      	str	r3, [r7, #28]
 8007648:	e012      	b.n	8007670 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800764a:	2300      	movs	r3, #0
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	69b8      	ldr	r0, [r7, #24]
 8007652:	f000 fbc7 	bl	8007de4 <xQueueGenericSend>
 8007656:	4603      	mov	r3, r0
 8007658:	2b01      	cmp	r3, #1
 800765a:	d009      	beq.n	8007670 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007662:	f06f 0301 	mvn.w	r3, #1
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	e002      	b.n	8007670 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800766a:	f06f 0302 	mvn.w	r3, #2
 800766e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007670:	69fb      	ldr	r3, [r7, #28]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3720      	adds	r7, #32
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	e000ed04 	.word	0xe000ed04

08007680 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007692:	2300      	movs	r3, #0
 8007694:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007696:	f3ef 8305 	mrs	r3, IPSR
 800769a:	617b      	str	r3, [r7, #20]
  return(result);
 800769c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d028      	beq.n	80076f4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <osMessageQueueGet+0x34>
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <osMessageQueueGet+0x34>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80076b4:	f06f 0303 	mvn.w	r3, #3
 80076b8:	61fb      	str	r3, [r7, #28]
 80076ba:	e037      	b.n	800772c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80076bc:	2300      	movs	r3, #0
 80076be:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80076c0:	f107 0310 	add.w	r3, r7, #16
 80076c4:	461a      	mov	r2, r3
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	69b8      	ldr	r0, [r7, #24]
 80076ca:	f000 ffad 	bl	8008628 <xQueueReceiveFromISR>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d003      	beq.n	80076dc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80076d4:	f06f 0302 	mvn.w	r3, #2
 80076d8:	61fb      	str	r3, [r7, #28]
 80076da:	e027      	b.n	800772c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d024      	beq.n	800772c <osMessageQueueGet+0xac>
 80076e2:	4b15      	ldr	r3, [pc, #84]	@ (8007738 <osMessageQueueGet+0xb8>)
 80076e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	e01b      	b.n	800772c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <osMessageQueueGet+0x80>
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d103      	bne.n	8007708 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007700:	f06f 0303 	mvn.w	r3, #3
 8007704:	61fb      	str	r3, [r7, #28]
 8007706:	e011      	b.n	800772c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	69b8      	ldr	r0, [r7, #24]
 800770e:	f000 fd99 	bl	8008244 <xQueueReceive>
 8007712:	4603      	mov	r3, r0
 8007714:	2b01      	cmp	r3, #1
 8007716:	d009      	beq.n	800772c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800771e:	f06f 0301 	mvn.w	r3, #1
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	e002      	b.n	800772c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007726:	f06f 0302 	mvn.w	r3, #2
 800772a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800772c:	69fb      	ldr	r3, [r7, #28]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4a07      	ldr	r2, [pc, #28]	@ (8007768 <vApplicationGetIdleTaskMemory+0x2c>)
 800774c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	4a06      	ldr	r2, [pc, #24]	@ (800776c <vApplicationGetIdleTaskMemory+0x30>)
 8007752:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2280      	movs	r2, #128	@ 0x80
 8007758:	601a      	str	r2, [r3, #0]
}
 800775a:	bf00      	nop
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	20000718 	.word	0x20000718
 800776c:	200007c0 	.word	0x200007c0

08007770 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4a07      	ldr	r2, [pc, #28]	@ (800779c <vApplicationGetTimerTaskMemory+0x2c>)
 8007780:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	4a06      	ldr	r2, [pc, #24]	@ (80077a0 <vApplicationGetTimerTaskMemory+0x30>)
 8007786:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800778e:	601a      	str	r2, [r3, #0]
}
 8007790:	bf00      	nop
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	200009c0 	.word	0x200009c0
 80077a0:	20000a68 	.word	0x20000a68

080077a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f103 0208 	add.w	r2, r3, #8
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f04f 32ff 	mov.w	r2, #4294967295
 80077bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f103 0208 	add.w	r2, r3, #8
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f103 0208 	add.w	r2, r3, #8
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077fe:	b480      	push	{r7}
 8007800:	b085      	sub	sp, #20
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	601a      	str	r2, [r3, #0]
}
 800783a:	bf00      	nop
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007846:	b480      	push	{r7}
 8007848:	b085      	sub	sp, #20
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785c:	d103      	bne.n	8007866 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	e00c      	b.n	8007880 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3308      	adds	r3, #8
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	e002      	b.n	8007874 <vListInsert+0x2e>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	429a      	cmp	r2, r3
 800787e:	d2f6      	bcs.n	800786e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	601a      	str	r2, [r3, #0]
}
 80078ac:	bf00      	nop
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	6892      	ldr	r2, [r2, #8]
 80078ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6852      	ldr	r2, [r2, #4]
 80078d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d103      	bne.n	80078ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	1e5a      	subs	r2, r3, #1
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10b      	bne.n	8007938 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	e7fd      	b.n	8007934 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007938:	f002 fe5e 	bl	800a5f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007944:	68f9      	ldr	r1, [r7, #12]
 8007946:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007948:	fb01 f303 	mul.w	r3, r1, r3
 800794c:	441a      	add	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007968:	3b01      	subs	r3, #1
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800796e:	fb01 f303 	mul.w	r3, r1, r3
 8007972:	441a      	add	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	22ff      	movs	r2, #255	@ 0xff
 800797c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	22ff      	movs	r2, #255	@ 0xff
 8007984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d114      	bne.n	80079b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01a      	beq.n	80079cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3310      	adds	r3, #16
 800799a:	4618      	mov	r0, r3
 800799c:	f001 fd2c 	bl	80093f8 <xTaskRemoveFromEventList>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d012      	beq.n	80079cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079a6:	4b0d      	ldr	r3, [pc, #52]	@ (80079dc <xQueueGenericReset+0xd0>)
 80079a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	e009      	b.n	80079cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3310      	adds	r3, #16
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff fef1 	bl	80077a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3324      	adds	r3, #36	@ 0x24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff feec 	bl	80077a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079cc:	f002 fe46 	bl	800a65c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079d0:	2301      	movs	r3, #1
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	e000ed04 	.word	0xe000ed04

080079e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08e      	sub	sp, #56	@ 0x38
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10b      	bne.n	8007a0c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	e7fd      	b.n	8007a08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	e7fd      	b.n	8007a26 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <xQueueGenericCreateStatic+0x56>
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <xQueueGenericCreateStatic+0x5a>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <xQueueGenericCreateStatic+0x5c>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10b      	bne.n	8007a58 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	623b      	str	r3, [r7, #32]
}
 8007a52:	bf00      	nop
 8007a54:	bf00      	nop
 8007a56:	e7fd      	b.n	8007a54 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d102      	bne.n	8007a64 <xQueueGenericCreateStatic+0x84>
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <xQueueGenericCreateStatic+0x88>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <xQueueGenericCreateStatic+0x8a>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	61fb      	str	r3, [r7, #28]
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	e7fd      	b.n	8007a82 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a86:	2350      	movs	r3, #80	@ 0x50
 8007a88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b50      	cmp	r3, #80	@ 0x50
 8007a8e:	d00b      	beq.n	8007aa8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	61bb      	str	r3, [r7, #24]
}
 8007aa2:	bf00      	nop
 8007aa4:	bf00      	nop
 8007aa6:	e7fd      	b.n	8007aa4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007aa8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00d      	beq.n	8007ad0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007abc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	68b9      	ldr	r1, [r7, #8]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 f840 	bl	8007b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3730      	adds	r7, #48	@ 0x30
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b08a      	sub	sp, #40	@ 0x28
 8007ade:	af02      	add	r7, sp, #8
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10b      	bne.n	8007b06 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	613b      	str	r3, [r7, #16]
}
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
 8007b04:	e7fd      	b.n	8007b02 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	fb02 f303 	mul.w	r3, r2, r3
 8007b0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	3350      	adds	r3, #80	@ 0x50
 8007b14:	4618      	mov	r0, r3
 8007b16:	f002 fe91 	bl	800a83c <pvPortMalloc>
 8007b1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d011      	beq.n	8007b46 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	3350      	adds	r3, #80	@ 0x50
 8007b2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b34:	79fa      	ldrb	r2, [r7, #7]
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	68b9      	ldr	r1, [r7, #8]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f805 	bl	8007b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b46:	69bb      	ldr	r3, [r7, #24]
	}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3720      	adds	r7, #32
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d103      	bne.n	8007b6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	e002      	b.n	8007b72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b7e:	2101      	movs	r1, #1
 8007b80:	69b8      	ldr	r0, [r7, #24]
 8007b82:	f7ff fec3 	bl	800790c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	78fa      	ldrb	r2, [r7, #3]
 8007b8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b8e:	bf00      	nop
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00e      	beq.n	8007bc2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2100      	movs	r1, #0
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f911 	bl	8007de4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007bc2:	bf00      	nop
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b086      	sub	sp, #24
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	461a      	mov	r2, r3
 8007be0:	6939      	ldr	r1, [r7, #16]
 8007be2:	6978      	ldr	r0, [r7, #20]
 8007be4:	f7ff ff79 	bl	8007ada <xQueueGenericCreate>
 8007be8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f7ff ffd3 	bl	8007b96 <prvInitialiseMutex>

		return xNewQueue;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
	}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b088      	sub	sp, #32
 8007bfe:	af02      	add	r7, sp, #8
 8007c00:	4603      	mov	r3, r0
 8007c02:	6039      	str	r1, [r7, #0]
 8007c04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c06:	2301      	movs	r3, #1
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2200      	movs	r2, #0
 8007c16:	6939      	ldr	r1, [r7, #16]
 8007c18:	6978      	ldr	r0, [r7, #20]
 8007c1a:	f7ff fee1 	bl	80079e0 <xQueueGenericCreateStatic>
 8007c1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f7ff ffb8 	bl	8007b96 <prvInitialiseMutex>

		return xNewQueue;
 8007c26:	68fb      	ldr	r3, [r7, #12]
	}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007c30:	b590      	push	{r4, r7, lr}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10b      	bne.n	8007c5a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	60fb      	str	r3, [r7, #12]
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	e7fd      	b.n	8007c56 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	689c      	ldr	r4, [r3, #8]
 8007c5e:	f001 fd91 	bl	8009784 <xTaskGetCurrentTaskHandle>
 8007c62:	4603      	mov	r3, r0
 8007c64:	429c      	cmp	r4, r3
 8007c66:	d111      	bne.n	8007c8c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	1e5a      	subs	r2, r3, #1
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d105      	bne.n	8007c86 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6938      	ldr	r0, [r7, #16]
 8007c82:	f000 f8af 	bl	8007de4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007c86:	2301      	movs	r3, #1
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	e001      	b.n	8007c90 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007c90:	697b      	ldr	r3, [r7, #20]
	}
 8007c92:	4618      	mov	r0, r3
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd90      	pop	{r4, r7, pc}

08007c9a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007c9a:	b590      	push	{r4, r7, lr}
 8007c9c:	b087      	sub	sp, #28
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10b      	bne.n	8007cc6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	60fb      	str	r3, [r7, #12]
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	e7fd      	b.n	8007cc2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	689c      	ldr	r4, [r3, #8]
 8007cca:	f001 fd5b 	bl	8009784 <xTaskGetCurrentTaskHandle>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	429c      	cmp	r4, r3
 8007cd2:	d107      	bne.n	8007ce4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	617b      	str	r3, [r7, #20]
 8007ce2:	e00c      	b.n	8007cfe <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6938      	ldr	r0, [r7, #16]
 8007ce8:	f000 fb8e 	bl	8008408 <xQueueSemaphoreTake>
 8007cec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d004      	beq.n	8007cfe <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007cfe:	697b      	ldr	r3, [r7, #20]
	}
 8007d00:	4618      	mov	r0, r3
 8007d02:	371c      	adds	r7, #28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd90      	pop	{r4, r7, pc}

08007d08 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08a      	sub	sp, #40	@ 0x28
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	61bb      	str	r3, [r7, #24]
}
 8007d2c:	bf00      	nop
 8007d2e:	bf00      	nop
 8007d30:	e7fd      	b.n	8007d2e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d90b      	bls.n	8007d52 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	617b      	str	r3, [r7, #20]
}
 8007d4c:	bf00      	nop
 8007d4e:	bf00      	nop
 8007d50:	e7fd      	b.n	8007d4e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d52:	2302      	movs	r3, #2
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff fe3f 	bl	80079e0 <xQueueGenericCreateStatic>
 8007d62:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d70:	69fb      	ldr	r3, [r7, #28]
	}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3720      	adds	r7, #32
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b086      	sub	sp, #24
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10b      	bne.n	8007da2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	613b      	str	r3, [r7, #16]
}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	e7fd      	b.n	8007d9e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d90b      	bls.n	8007dc2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	60fb      	str	r3, [r7, #12]
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	e7fd      	b.n	8007dbe <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7ff fe87 	bl	8007ada <xQueueGenericCreate>
 8007dcc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007dda:	697b      	ldr	r3, [r7, #20]
	}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b08e      	sub	sp, #56	@ 0x38
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007df2:	2300      	movs	r3, #0
 8007df4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10b      	bne.n	8007e18 <xQueueGenericSend+0x34>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e12:	bf00      	nop
 8007e14:	bf00      	nop
 8007e16:	e7fd      	b.n	8007e14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d103      	bne.n	8007e26 <xQueueGenericSend+0x42>
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <xQueueGenericSend+0x46>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <xQueueGenericSend+0x48>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10b      	bne.n	8007e48 <xQueueGenericSend+0x64>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	e7fd      	b.n	8007e44 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d103      	bne.n	8007e56 <xQueueGenericSend+0x72>
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <xQueueGenericSend+0x76>
 8007e56:	2301      	movs	r3, #1
 8007e58:	e000      	b.n	8007e5c <xQueueGenericSend+0x78>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10b      	bne.n	8007e78 <xQueueGenericSend+0x94>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	623b      	str	r3, [r7, #32]
}
 8007e72:	bf00      	nop
 8007e74:	bf00      	nop
 8007e76:	e7fd      	b.n	8007e74 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e78:	f001 fc94 	bl	80097a4 <xTaskGetSchedulerState>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d102      	bne.n	8007e88 <xQueueGenericSend+0xa4>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <xQueueGenericSend+0xa8>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e000      	b.n	8007e8e <xQueueGenericSend+0xaa>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10b      	bne.n	8007eaa <xQueueGenericSend+0xc6>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	61fb      	str	r3, [r7, #28]
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop
 8007ea8:	e7fd      	b.n	8007ea6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007eaa:	f002 fba5 	bl	800a5f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d302      	bcc.n	8007ec0 <xQueueGenericSend+0xdc>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d129      	bne.n	8007f14 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ec6:	f000 fc6d 	bl	80087a4 <prvCopyDataToQueue>
 8007eca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d010      	beq.n	8007ef6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed6:	3324      	adds	r3, #36	@ 0x24
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f001 fa8d 	bl	80093f8 <xTaskRemoveFromEventList>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d013      	beq.n	8007f0c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8007fe4 <xQueueGenericSend+0x200>)
 8007ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	e00a      	b.n	8007f0c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d007      	beq.n	8007f0c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007efc:	4b39      	ldr	r3, [pc, #228]	@ (8007fe4 <xQueueGenericSend+0x200>)
 8007efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f0c:	f002 fba6 	bl	800a65c <vPortExitCritical>
				return pdPASS;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e063      	b.n	8007fdc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d103      	bne.n	8007f22 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f1a:	f002 fb9f 	bl	800a65c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e05c      	b.n	8007fdc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f28:	f107 0314 	add.w	r3, r7, #20
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 fac7 	bl	80094c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f36:	f002 fb91 	bl	800a65c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f3a:	f001 f82f 	bl	8008f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f3e:	f002 fb5b 	bl	800a5f8 <vPortEnterCritical>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f48:	b25b      	sxtb	r3, r3
 8007f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4e:	d103      	bne.n	8007f58 <xQueueGenericSend+0x174>
 8007f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f5e:	b25b      	sxtb	r3, r3
 8007f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f64:	d103      	bne.n	8007f6e <xQueueGenericSend+0x18a>
 8007f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f6e:	f002 fb75 	bl	800a65c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f72:	1d3a      	adds	r2, r7, #4
 8007f74:	f107 0314 	add.w	r3, r7, #20
 8007f78:	4611      	mov	r1, r2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 fab6 	bl	80094ec <xTaskCheckForTimeOut>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d124      	bne.n	8007fd0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f88:	f000 fd04 	bl	8008994 <prvIsQueueFull>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d018      	beq.n	8007fc4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	3310      	adds	r3, #16
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 f9da 	bl	8009354 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fa2:	f000 fc8f 	bl	80088c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007fa6:	f001 f807 	bl	8008fb8 <xTaskResumeAll>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f47f af7c 	bne.w	8007eaa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe4 <xQueueGenericSend+0x200>)
 8007fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	e772      	b.n	8007eaa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007fc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fc6:	f000 fc7d 	bl	80088c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fca:	f000 fff5 	bl	8008fb8 <xTaskResumeAll>
 8007fce:	e76c      	b.n	8007eaa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007fd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fd2:	f000 fc77 	bl	80088c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fd6:	f000 ffef 	bl	8008fb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3738      	adds	r7, #56	@ 0x38
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	e000ed04 	.word	0xe000ed04

08007fe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b090      	sub	sp, #64	@ 0x40
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10b      	bne.n	8008018 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	e7fd      	b.n	8008014 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d103      	bne.n	8008026 <xQueueGenericSendFromISR+0x3e>
 800801e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <xQueueGenericSendFromISR+0x42>
 8008026:	2301      	movs	r3, #1
 8008028:	e000      	b.n	800802c <xQueueGenericSendFromISR+0x44>
 800802a:	2300      	movs	r3, #0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10b      	bne.n	8008048 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	e7fd      	b.n	8008044 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d103      	bne.n	8008056 <xQueueGenericSendFromISR+0x6e>
 800804e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <xQueueGenericSendFromISR+0x72>
 8008056:	2301      	movs	r3, #1
 8008058:	e000      	b.n	800805c <xQueueGenericSendFromISR+0x74>
 800805a:	2300      	movs	r3, #0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10b      	bne.n	8008078 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	623b      	str	r3, [r7, #32]
}
 8008072:	bf00      	nop
 8008074:	bf00      	nop
 8008076:	e7fd      	b.n	8008074 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008078:	f002 fb9e 	bl	800a7b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800807c:	f3ef 8211 	mrs	r2, BASEPRI
 8008080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	61fa      	str	r2, [r7, #28]
 8008092:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008094:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008096:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800809c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d302      	bcc.n	80080aa <xQueueGenericSendFromISR+0xc2>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d12f      	bne.n	800810a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80080aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	68b9      	ldr	r1, [r7, #8]
 80080be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080c0:	f000 fb70 	bl	80087a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80080c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80080c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080cc:	d112      	bne.n	80080f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d016      	beq.n	8008104 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d8:	3324      	adds	r3, #36	@ 0x24
 80080da:	4618      	mov	r0, r3
 80080dc:	f001 f98c 	bl	80093f8 <xTaskRemoveFromEventList>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00e      	beq.n	8008104 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	e007      	b.n	8008104 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80080f8:	3301      	adds	r3, #1
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	b25a      	sxtb	r2, r3
 80080fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008104:	2301      	movs	r3, #1
 8008106:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008108:	e001      	b.n	800810e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800810a:	2300      	movs	r3, #0
 800810c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800810e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008110:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008118:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800811a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800811c:	4618      	mov	r0, r3
 800811e:	3740      	adds	r7, #64	@ 0x40
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08e      	sub	sp, #56	@ 0x38
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	623b      	str	r3, [r7, #32]
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	e7fd      	b.n	800814c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00b      	beq.n	8008170 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	61fb      	str	r3, [r7, #28]
}
 800816a:	bf00      	nop
 800816c:	bf00      	nop
 800816e:	e7fd      	b.n	800816c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d103      	bne.n	8008180 <xQueueGiveFromISR+0x5c>
 8008178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <xQueueGiveFromISR+0x60>
 8008180:	2301      	movs	r3, #1
 8008182:	e000      	b.n	8008186 <xQueueGiveFromISR+0x62>
 8008184:	2300      	movs	r3, #0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10b      	bne.n	80081a2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	61bb      	str	r3, [r7, #24]
}
 800819c:	bf00      	nop
 800819e:	bf00      	nop
 80081a0:	e7fd      	b.n	800819e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081a2:	f002 fb09 	bl	800a7b8 <vPortValidateInterruptPriority>
	__asm volatile
 80081a6:	f3ef 8211 	mrs	r2, BASEPRI
 80081aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	617a      	str	r2, [r7, #20]
 80081bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80081be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80081c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d22b      	bcs.n	800822a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ec:	d112      	bne.n	8008214 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d016      	beq.n	8008224 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	3324      	adds	r3, #36	@ 0x24
 80081fa:	4618      	mov	r0, r3
 80081fc:	f001 f8fc 	bl	80093f8 <xTaskRemoveFromEventList>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00e      	beq.n	8008224 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00b      	beq.n	8008224 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2201      	movs	r2, #1
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	e007      	b.n	8008224 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008218:	3301      	adds	r3, #1
 800821a:	b2db      	uxtb	r3, r3
 800821c:	b25a      	sxtb	r2, r3
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008224:	2301      	movs	r3, #1
 8008226:	637b      	str	r3, [r7, #52]	@ 0x34
 8008228:	e001      	b.n	800822e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800822a:	2300      	movs	r3, #0
 800822c:	637b      	str	r3, [r7, #52]	@ 0x34
 800822e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008230:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f383 8811 	msr	BASEPRI, r3
}
 8008238:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800823a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800823c:	4618      	mov	r0, r3
 800823e:	3738      	adds	r7, #56	@ 0x38
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08c      	sub	sp, #48	@ 0x30
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008250:	2300      	movs	r3, #0
 8008252:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <xQueueReceive+0x32>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	623b      	str	r3, [r7, #32]
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	e7fd      	b.n	8008272 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d103      	bne.n	8008284 <xQueueReceive+0x40>
 800827c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <xQueueReceive+0x44>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <xQueueReceive+0x46>
 8008288:	2300      	movs	r3, #0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10b      	bne.n	80082a6 <xQueueReceive+0x62>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	61fb      	str	r3, [r7, #28]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082a6:	f001 fa7d 	bl	80097a4 <xTaskGetSchedulerState>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <xQueueReceive+0x72>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <xQueueReceive+0x76>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <xQueueReceive+0x78>
 80082ba:	2300      	movs	r3, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10b      	bne.n	80082d8 <xQueueReceive+0x94>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	61bb      	str	r3, [r7, #24]
}
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	e7fd      	b.n	80082d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082d8:	f002 f98e 	bl	800a5f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01f      	beq.n	8008328 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082e8:	68b9      	ldr	r1, [r7, #8]
 80082ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082ec:	f000 fac4 	bl	8008878 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f2:	1e5a      	subs	r2, r3, #1
 80082f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00f      	beq.n	8008320 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008302:	3310      	adds	r3, #16
 8008304:	4618      	mov	r0, r3
 8008306:	f001 f877 	bl	80093f8 <xTaskRemoveFromEventList>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d007      	beq.n	8008320 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008310:	4b3c      	ldr	r3, [pc, #240]	@ (8008404 <xQueueReceive+0x1c0>)
 8008312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008320:	f002 f99c 	bl	800a65c <vPortExitCritical>
				return pdPASS;
 8008324:	2301      	movs	r3, #1
 8008326:	e069      	b.n	80083fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d103      	bne.n	8008336 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800832e:	f002 f995 	bl	800a65c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008332:	2300      	movs	r3, #0
 8008334:	e062      	b.n	80083fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d106      	bne.n	800834a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800833c:	f107 0310 	add.w	r3, r7, #16
 8008340:	4618      	mov	r0, r3
 8008342:	f001 f8bd 	bl	80094c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008346:	2301      	movs	r3, #1
 8008348:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800834a:	f002 f987 	bl	800a65c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800834e:	f000 fe25 	bl	8008f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008352:	f002 f951 	bl	800a5f8 <vPortEnterCritical>
 8008356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008358:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800835c:	b25b      	sxtb	r3, r3
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d103      	bne.n	800836c <xQueueReceive+0x128>
 8008364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008372:	b25b      	sxtb	r3, r3
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d103      	bne.n	8008382 <xQueueReceive+0x13e>
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008382:	f002 f96b 	bl	800a65c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008386:	1d3a      	adds	r2, r7, #4
 8008388:	f107 0310 	add.w	r3, r7, #16
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f001 f8ac 	bl	80094ec <xTaskCheckForTimeOut>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d123      	bne.n	80083e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800839a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800839c:	f000 fae4 	bl	8008968 <prvIsQueueEmpty>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d017      	beq.n	80083d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a8:	3324      	adds	r3, #36	@ 0x24
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	4611      	mov	r1, r2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 ffd0 	bl	8009354 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083b6:	f000 fa85 	bl	80088c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083ba:	f000 fdfd 	bl	8008fb8 <xTaskResumeAll>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d189      	bne.n	80082d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80083c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008404 <xQueueReceive+0x1c0>)
 80083c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	e780      	b.n	80082d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083d8:	f000 fa74 	bl	80088c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083dc:	f000 fdec 	bl	8008fb8 <xTaskResumeAll>
 80083e0:	e77a      	b.n	80082d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083e4:	f000 fa6e 	bl	80088c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083e8:	f000 fde6 	bl	8008fb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ee:	f000 fabb 	bl	8008968 <prvIsQueueEmpty>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f43f af6f 	beq.w	80082d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3730      	adds	r7, #48	@ 0x30
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	e000ed04 	.word	0xe000ed04

08008408 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08e      	sub	sp, #56	@ 0x38
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008412:	2300      	movs	r3, #0
 8008414:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800841a:	2300      	movs	r3, #0
 800841c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800841e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10b      	bne.n	800843c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	623b      	str	r3, [r7, #32]
}
 8008436:	bf00      	nop
 8008438:	bf00      	nop
 800843a:	e7fd      	b.n	8008438 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800843c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00b      	beq.n	800845c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	61fb      	str	r3, [r7, #28]
}
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	e7fd      	b.n	8008458 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800845c:	f001 f9a2 	bl	80097a4 <xTaskGetSchedulerState>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d102      	bne.n	800846c <xQueueSemaphoreTake+0x64>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <xQueueSemaphoreTake+0x68>
 800846c:	2301      	movs	r3, #1
 800846e:	e000      	b.n	8008472 <xQueueSemaphoreTake+0x6a>
 8008470:	2300      	movs	r3, #0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10b      	bne.n	800848e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	61bb      	str	r3, [r7, #24]
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	e7fd      	b.n	800848a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800848e:	f002 f8b3 	bl	800a5f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008496:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849a:	2b00      	cmp	r3, #0
 800849c:	d024      	beq.n	80084e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a0:	1e5a      	subs	r2, r3, #1
 80084a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d104      	bne.n	80084b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80084ae:	f001 faf3 	bl	8009a98 <pvTaskIncrementMutexHeldCount>
 80084b2:	4602      	mov	r2, r0
 80084b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00f      	beq.n	80084e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c2:	3310      	adds	r3, #16
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 ff97 	bl	80093f8 <xTaskRemoveFromEventList>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084d0:	4b54      	ldr	r3, [pc, #336]	@ (8008624 <xQueueSemaphoreTake+0x21c>)
 80084d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084e0:	f002 f8bc 	bl	800a65c <vPortExitCritical>
				return pdPASS;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e098      	b.n	800861a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d112      	bne.n	8008514 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <xQueueSemaphoreTake+0x104>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	617b      	str	r3, [r7, #20]
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	e7fd      	b.n	8008508 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800850c:	f002 f8a6 	bl	800a65c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008510:	2300      	movs	r3, #0
 8008512:	e082      	b.n	800861a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008516:	2b00      	cmp	r3, #0
 8008518:	d106      	bne.n	8008528 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800851a:	f107 030c 	add.w	r3, r7, #12
 800851e:	4618      	mov	r0, r3
 8008520:	f000 ffce 	bl	80094c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008524:	2301      	movs	r3, #1
 8008526:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008528:	f002 f898 	bl	800a65c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800852c:	f000 fd36 	bl	8008f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008530:	f002 f862 	bl	800a5f8 <vPortEnterCritical>
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008536:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800853a:	b25b      	sxtb	r3, r3
 800853c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008540:	d103      	bne.n	800854a <xQueueSemaphoreTake+0x142>
 8008542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800854a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800854c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008550:	b25b      	sxtb	r3, r3
 8008552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008556:	d103      	bne.n	8008560 <xQueueSemaphoreTake+0x158>
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008560:	f002 f87c 	bl	800a65c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008564:	463a      	mov	r2, r7
 8008566:	f107 030c 	add.w	r3, r7, #12
 800856a:	4611      	mov	r1, r2
 800856c:	4618      	mov	r0, r3
 800856e:	f000 ffbd 	bl	80094ec <xTaskCheckForTimeOut>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d132      	bne.n	80085de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008578:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800857a:	f000 f9f5 	bl	8008968 <prvIsQueueEmpty>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d026      	beq.n	80085d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d109      	bne.n	80085a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800858c:	f002 f834 	bl	800a5f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	4618      	mov	r0, r3
 8008596:	f001 f923 	bl	80097e0 <xTaskPriorityInherit>
 800859a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800859c:	f002 f85e 	bl	800a65c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a2:	3324      	adds	r3, #36	@ 0x24
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	4611      	mov	r1, r2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 fed3 	bl	8009354 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085b0:	f000 f988 	bl	80088c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085b4:	f000 fd00 	bl	8008fb8 <xTaskResumeAll>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f47f af67 	bne.w	800848e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80085c0:	4b18      	ldr	r3, [pc, #96]	@ (8008624 <xQueueSemaphoreTake+0x21c>)
 80085c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	e75d      	b.n	800848e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80085d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085d4:	f000 f976 	bl	80088c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085d8:	f000 fcee 	bl	8008fb8 <xTaskResumeAll>
 80085dc:	e757      	b.n	800848e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80085de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085e0:	f000 f970 	bl	80088c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085e4:	f000 fce8 	bl	8008fb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085ea:	f000 f9bd 	bl	8008968 <prvIsQueueEmpty>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f43f af4c 	beq.w	800848e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00d      	beq.n	8008618 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80085fc:	f001 fffc 	bl	800a5f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008600:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008602:	f000 f8b7 	bl	8008774 <prvGetDisinheritPriorityAfterTimeout>
 8008606:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800860e:	4618      	mov	r0, r3
 8008610:	f001 f9be 	bl	8009990 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008614:	f002 f822 	bl	800a65c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008618:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800861a:	4618      	mov	r0, r3
 800861c:	3738      	adds	r7, #56	@ 0x38
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	e000ed04 	.word	0xe000ed04

08008628 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08e      	sub	sp, #56	@ 0x38
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10b      	bne.n	8008656 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	623b      	str	r3, [r7, #32]
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	e7fd      	b.n	8008652 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d103      	bne.n	8008664 <xQueueReceiveFromISR+0x3c>
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <xQueueReceiveFromISR+0x40>
 8008664:	2301      	movs	r3, #1
 8008666:	e000      	b.n	800866a <xQueueReceiveFromISR+0x42>
 8008668:	2300      	movs	r3, #0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10b      	bne.n	8008686 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	61fb      	str	r3, [r7, #28]
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	e7fd      	b.n	8008682 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008686:	f002 f897 	bl	800a7b8 <vPortValidateInterruptPriority>
	__asm volatile
 800868a:	f3ef 8211 	mrs	r2, BASEPRI
 800868e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	61ba      	str	r2, [r7, #24]
 80086a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80086a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d02f      	beq.n	8008712 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086c0:	f000 f8da 	bl	8008878 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c6:	1e5a      	subs	r2, r3, #1
 80086c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80086cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80086d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d4:	d112      	bne.n	80086fc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d016      	beq.n	800870c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e0:	3310      	adds	r3, #16
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 fe88 	bl	80093f8 <xTaskRemoveFromEventList>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00e      	beq.n	800870c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	e007      	b.n	800870c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80086fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008700:	3301      	adds	r3, #1
 8008702:	b2db      	uxtb	r3, r3
 8008704:	b25a      	sxtb	r2, r3
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800870c:	2301      	movs	r3, #1
 800870e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008710:	e001      	b.n	8008716 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008712:	2300      	movs	r3, #0
 8008714:	637b      	str	r3, [r7, #52]	@ 0x34
 8008716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008718:	613b      	str	r3, [r7, #16]
	__asm volatile
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	f383 8811 	msr	BASEPRI, r3
}
 8008720:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008724:	4618      	mov	r0, r3
 8008726:	3738      	adds	r7, #56	@ 0x38
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10b      	bne.n	8008756 <vQueueDelete+0x2a>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	60bb      	str	r3, [r7, #8]
}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	e7fd      	b.n	8008752 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 f95e 	bl	8008a18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008762:	2b00      	cmp	r3, #0
 8008764:	d102      	bne.n	800876c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f002 f936 	bl	800a9d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008780:	2b00      	cmp	r3, #0
 8008782:	d006      	beq.n	8008792 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	e001      	b.n	8008796 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008796:	68fb      	ldr	r3, [r7, #12]
	}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087b0:	2300      	movs	r3, #0
 80087b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10d      	bne.n	80087de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d14d      	bne.n	8008866 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 f86e 	bl	80098b0 <xTaskPriorityDisinherit>
 80087d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	609a      	str	r2, [r3, #8]
 80087dc:	e043      	b.n	8008866 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d119      	bne.n	8008818 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6858      	ldr	r0, [r3, #4]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ec:	461a      	mov	r2, r3
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	f003 fa79 	bl	800bce6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fc:	441a      	add	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	429a      	cmp	r2, r3
 800880c:	d32b      	bcc.n	8008866 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	605a      	str	r2, [r3, #4]
 8008816:	e026      	b.n	8008866 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	68d8      	ldr	r0, [r3, #12]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008820:	461a      	mov	r2, r3
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	f003 fa5f 	bl	800bce6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008830:	425b      	negs	r3, r3
 8008832:	441a      	add	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	429a      	cmp	r2, r3
 8008842:	d207      	bcs.n	8008854 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	689a      	ldr	r2, [r3, #8]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800884c:	425b      	negs	r3, r3
 800884e:	441a      	add	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d105      	bne.n	8008866 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	3b01      	subs	r3, #1
 8008864:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800886e:	697b      	ldr	r3, [r7, #20]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	d018      	beq.n	80088bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008892:	441a      	add	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68da      	ldr	r2, [r3, #12]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d303      	bcc.n	80088ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68d9      	ldr	r1, [r3, #12]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b4:	461a      	mov	r2, r3
 80088b6:	6838      	ldr	r0, [r7, #0]
 80088b8:	f003 fa15 	bl	800bce6 <memcpy>
	}
}
 80088bc:	bf00      	nop
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088cc:	f001 fe94 	bl	800a5f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088d8:	e011      	b.n	80088fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d012      	beq.n	8008908 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3324      	adds	r3, #36	@ 0x24
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 fd86 	bl	80093f8 <xTaskRemoveFromEventList>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088f2:	f000 fe5f 	bl	80095b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008902:	2b00      	cmp	r3, #0
 8008904:	dce9      	bgt.n	80088da <prvUnlockQueue+0x16>
 8008906:	e000      	b.n	800890a <prvUnlockQueue+0x46>
					break;
 8008908:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	22ff      	movs	r2, #255	@ 0xff
 800890e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008912:	f001 fea3 	bl	800a65c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008916:	f001 fe6f 	bl	800a5f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008920:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008922:	e011      	b.n	8008948 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d012      	beq.n	8008952 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3310      	adds	r3, #16
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fd61 	bl	80093f8 <xTaskRemoveFromEventList>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800893c:	f000 fe3a 	bl	80095b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	3b01      	subs	r3, #1
 8008944:	b2db      	uxtb	r3, r3
 8008946:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800894c:	2b00      	cmp	r3, #0
 800894e:	dce9      	bgt.n	8008924 <prvUnlockQueue+0x60>
 8008950:	e000      	b.n	8008954 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008952:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	22ff      	movs	r2, #255	@ 0xff
 8008958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800895c:	f001 fe7e 	bl	800a65c <vPortExitCritical>
}
 8008960:	bf00      	nop
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008970:	f001 fe42 	bl	800a5f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008978:	2b00      	cmp	r3, #0
 800897a:	d102      	bne.n	8008982 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800897c:	2301      	movs	r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	e001      	b.n	8008986 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008986:	f001 fe69 	bl	800a65c <vPortExitCritical>

	return xReturn;
 800898a:	68fb      	ldr	r3, [r7, #12]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800899c:	f001 fe2c 	bl	800a5f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d102      	bne.n	80089b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089ac:	2301      	movs	r3, #1
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	e001      	b.n	80089b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089b6:	f001 fe51 	bl	800a65c <vPortExitCritical>

	return xReturn;
 80089ba:	68fb      	ldr	r3, [r7, #12]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	e014      	b.n	80089fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089d4:	4a0f      	ldr	r2, [pc, #60]	@ (8008a14 <vQueueAddToRegistry+0x50>)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10b      	bne.n	80089f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089e0:	490c      	ldr	r1, [pc, #48]	@ (8008a14 <vQueueAddToRegistry+0x50>)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008a14 <vQueueAddToRegistry+0x50>)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	4413      	add	r3, r2
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089f6:	e006      	b.n	8008a06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3301      	adds	r3, #1
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b07      	cmp	r3, #7
 8008a02:	d9e7      	bls.n	80089d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	20000e68 	.word	0x20000e68

08008a18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	e016      	b.n	8008a54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008a26:	4a10      	ldr	r2, [pc, #64]	@ (8008a68 <vQueueUnregisterQueue+0x50>)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	4413      	add	r3, r2
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d10b      	bne.n	8008a4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008a36:	4a0c      	ldr	r2, [pc, #48]	@ (8008a68 <vQueueUnregisterQueue+0x50>)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008a40:	4a09      	ldr	r2, [pc, #36]	@ (8008a68 <vQueueUnregisterQueue+0x50>)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	00db      	lsls	r3, r3, #3
 8008a46:	4413      	add	r3, r2
 8008a48:	2200      	movs	r2, #0
 8008a4a:	605a      	str	r2, [r3, #4]
				break;
 8008a4c:	e006      	b.n	8008a5c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3301      	adds	r3, #1
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b07      	cmp	r3, #7
 8008a58:	d9e5      	bls.n	8008a26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008a5a:	bf00      	nop
 8008a5c:	bf00      	nop
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr
 8008a68:	20000e68 	.word	0x20000e68

08008a6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a7c:	f001 fdbc 	bl	800a5f8 <vPortEnterCritical>
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a86:	b25b      	sxtb	r3, r3
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8c:	d103      	bne.n	8008a96 <vQueueWaitForMessageRestricted+0x2a>
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a9c:	b25b      	sxtb	r3, r3
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa2:	d103      	bne.n	8008aac <vQueueWaitForMessageRestricted+0x40>
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008aac:	f001 fdd6 	bl	800a65c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d106      	bne.n	8008ac6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	3324      	adds	r3, #36	@ 0x24
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	68b9      	ldr	r1, [r7, #8]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fc6d 	bl	80093a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ac6:	6978      	ldr	r0, [r7, #20]
 8008ac8:	f7ff fefc 	bl	80088c4 <prvUnlockQueue>
	}
 8008acc:	bf00      	nop
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08e      	sub	sp, #56	@ 0x38
 8008ad8:	af04      	add	r7, sp, #16
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10b      	bne.n	8008b00 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	623b      	str	r3, [r7, #32]
}
 8008afa:	bf00      	nop
 8008afc:	bf00      	nop
 8008afe:	e7fd      	b.n	8008afc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10b      	bne.n	8008b1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	61fb      	str	r3, [r7, #28]
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	e7fd      	b.n	8008b1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b1e:	23a8      	movs	r3, #168	@ 0xa8
 8008b20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	2ba8      	cmp	r3, #168	@ 0xa8
 8008b26:	d00b      	beq.n	8008b40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	61bb      	str	r3, [r7, #24]
}
 8008b3a:	bf00      	nop
 8008b3c:	bf00      	nop
 8008b3e:	e7fd      	b.n	8008b3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d01e      	beq.n	8008b86 <xTaskCreateStatic+0xb2>
 8008b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d01b      	beq.n	8008b86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b60:	2300      	movs	r3, #0
 8008b62:	9303      	str	r3, [sp, #12]
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	9302      	str	r3, [sp, #8]
 8008b68:	f107 0314 	add.w	r3, r7, #20
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 f851 	bl	8008c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b80:	f000 f8f6 	bl	8008d70 <prvAddNewTaskToReadyList>
 8008b84:	e001      	b.n	8008b8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b8a:	697b      	ldr	r3, [r7, #20]
	}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3728      	adds	r7, #40	@ 0x28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08c      	sub	sp, #48	@ 0x30
 8008b98:	af04      	add	r7, sp, #16
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ba4:	88fb      	ldrh	r3, [r7, #6]
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f001 fe47 	bl	800a83c <pvPortMalloc>
 8008bae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00e      	beq.n	8008bd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008bb6:	20a8      	movs	r0, #168	@ 0xa8
 8008bb8:	f001 fe40 	bl	800a83c <pvPortMalloc>
 8008bbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8008bca:	e005      	b.n	8008bd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008bcc:	6978      	ldr	r0, [r7, #20]
 8008bce:	f001 ff03 	bl	800a9d8 <vPortFree>
 8008bd2:	e001      	b.n	8008bd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d017      	beq.n	8008c0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008be6:	88fa      	ldrh	r2, [r7, #6]
 8008be8:	2300      	movs	r3, #0
 8008bea:	9303      	str	r3, [sp, #12]
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	9302      	str	r3, [sp, #8]
 8008bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	68b9      	ldr	r1, [r7, #8]
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 f80f 	bl	8008c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c02:	69f8      	ldr	r0, [r7, #28]
 8008c04:	f000 f8b4 	bl	8008d70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	61bb      	str	r3, [r7, #24]
 8008c0c:	e002      	b.n	8008c14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c14:	69bb      	ldr	r3, [r7, #24]
	}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3720      	adds	r7, #32
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
	...

08008c20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c30:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	461a      	mov	r2, r3
 8008c38:	21a5      	movs	r1, #165	@ 0xa5
 8008c3a:	f002 ff7e 	bl	800bb3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	f023 0307 	bic.w	r3, r3, #7
 8008c56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	617b      	str	r3, [r7, #20]
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	e7fd      	b.n	8008c76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01f      	beq.n	8008cc0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c80:	2300      	movs	r3, #0
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	e012      	b.n	8008cac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	7819      	ldrb	r1, [r3, #0]
 8008c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	4413      	add	r3, r2
 8008c94:	3334      	adds	r3, #52	@ 0x34
 8008c96:	460a      	mov	r2, r1
 8008c98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d006      	beq.n	8008cb4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	61fb      	str	r3, [r7, #28]
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	2b0f      	cmp	r3, #15
 8008cb0:	d9e9      	bls.n	8008c86 <prvInitialiseNewTask+0x66>
 8008cb2:	e000      	b.n	8008cb6 <prvInitialiseNewTask+0x96>
			{
				break;
 8008cb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cbe:	e003      	b.n	8008cc8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cca:	2b37      	cmp	r3, #55	@ 0x37
 8008ccc:	d901      	bls.n	8008cd2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008cce:	2337      	movs	r3, #55	@ 0x37
 8008cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cdc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe fd7b 	bl	80077e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf0:	3318      	adds	r3, #24
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fe fd76 	bl	80077e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cfc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d20:	3354      	adds	r3, #84	@ 0x54
 8008d22:	224c      	movs	r2, #76	@ 0x4c
 8008d24:	2100      	movs	r1, #0
 8008d26:	4618      	mov	r0, r3
 8008d28:	f002 ff07 	bl	800bb3a <memset>
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8008d64 <prvInitialiseNewTask+0x144>)
 8008d30:	659a      	str	r2, [r3, #88]	@ 0x58
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	4a0c      	ldr	r2, [pc, #48]	@ (8008d68 <prvInitialiseNewTask+0x148>)
 8008d36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8008d6c <prvInitialiseNewTask+0x14c>)
 8008d3c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	68f9      	ldr	r1, [r7, #12]
 8008d42:	69b8      	ldr	r0, [r7, #24]
 8008d44:	f001 fb2a 	bl	800a39c <pxPortInitialiseStack>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d5a:	bf00      	nop
 8008d5c:	3720      	adds	r7, #32
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	200050fc 	.word	0x200050fc
 8008d68:	20005164 	.word	0x20005164
 8008d6c:	200051cc 	.word	0x200051cc

08008d70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d78:	f001 fc3e 	bl	800a5f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8008e34 <prvAddNewTaskToReadyList+0xc4>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3301      	adds	r3, #1
 8008d82:	4a2c      	ldr	r2, [pc, #176]	@ (8008e34 <prvAddNewTaskToReadyList+0xc4>)
 8008d84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d86:	4b2c      	ldr	r3, [pc, #176]	@ (8008e38 <prvAddNewTaskToReadyList+0xc8>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d109      	bne.n	8008da2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8008e38 <prvAddNewTaskToReadyList+0xc8>)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d94:	4b27      	ldr	r3, [pc, #156]	@ (8008e34 <prvAddNewTaskToReadyList+0xc4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d110      	bne.n	8008dbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d9c:	f000 fc2e 	bl	80095fc <prvInitialiseTaskLists>
 8008da0:	e00d      	b.n	8008dbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008da2:	4b26      	ldr	r3, [pc, #152]	@ (8008e3c <prvAddNewTaskToReadyList+0xcc>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d109      	bne.n	8008dbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008daa:	4b23      	ldr	r3, [pc, #140]	@ (8008e38 <prvAddNewTaskToReadyList+0xc8>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d802      	bhi.n	8008dbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008db8:	4a1f      	ldr	r2, [pc, #124]	@ (8008e38 <prvAddNewTaskToReadyList+0xc8>)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008dbe:	4b20      	ldr	r3, [pc, #128]	@ (8008e40 <prvAddNewTaskToReadyList+0xd0>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8008e40 <prvAddNewTaskToReadyList+0xd0>)
 8008dc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8008e40 <prvAddNewTaskToReadyList+0xd0>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8008e44 <prvAddNewTaskToReadyList+0xd4>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d903      	bls.n	8008de4 <prvAddNewTaskToReadyList+0x74>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de0:	4a18      	ldr	r2, [pc, #96]	@ (8008e44 <prvAddNewTaskToReadyList+0xd4>)
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de8:	4613      	mov	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4a15      	ldr	r2, [pc, #84]	@ (8008e48 <prvAddNewTaskToReadyList+0xd8>)
 8008df2:	441a      	add	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	3304      	adds	r3, #4
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	f7fe fcff 	bl	80077fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e00:	f001 fc2c 	bl	800a65c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e04:	4b0d      	ldr	r3, [pc, #52]	@ (8008e3c <prvAddNewTaskToReadyList+0xcc>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00e      	beq.n	8008e2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e38 <prvAddNewTaskToReadyList+0xc8>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d207      	bcs.n	8008e2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008e4c <prvAddNewTaskToReadyList+0xdc>)
 8008e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	2000137c 	.word	0x2000137c
 8008e38:	20000ea8 	.word	0x20000ea8
 8008e3c:	20001388 	.word	0x20001388
 8008e40:	20001398 	.word	0x20001398
 8008e44:	20001384 	.word	0x20001384
 8008e48:	20000eac 	.word	0x20000eac
 8008e4c:	e000ed04 	.word	0xe000ed04

08008e50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d018      	beq.n	8008e94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e62:	4b14      	ldr	r3, [pc, #80]	@ (8008eb4 <vTaskDelay+0x64>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00b      	beq.n	8008e82 <vTaskDelay+0x32>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	60bb      	str	r3, [r7, #8]
}
 8008e7c:	bf00      	nop
 8008e7e:	bf00      	nop
 8008e80:	e7fd      	b.n	8008e7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e82:	f000 f88b 	bl	8008f9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e86:	2100      	movs	r1, #0
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fe19 	bl	8009ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e8e:	f000 f893 	bl	8008fb8 <xTaskResumeAll>
 8008e92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d107      	bne.n	8008eaa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008e9a:	4b07      	ldr	r3, [pc, #28]	@ (8008eb8 <vTaskDelay+0x68>)
 8008e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008eaa:	bf00      	nop
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	200013a4 	.word	0x200013a4
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08a      	sub	sp, #40	@ 0x28
 8008ec0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008eca:	463a      	mov	r2, r7
 8008ecc:	1d39      	adds	r1, r7, #4
 8008ece:	f107 0308 	add.w	r3, r7, #8
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fc32 	bl	800773c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	9202      	str	r2, [sp, #8]
 8008ee0:	9301      	str	r3, [sp, #4]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	460a      	mov	r2, r1
 8008eea:	4924      	ldr	r1, [pc, #144]	@ (8008f7c <vTaskStartScheduler+0xc0>)
 8008eec:	4824      	ldr	r0, [pc, #144]	@ (8008f80 <vTaskStartScheduler+0xc4>)
 8008eee:	f7ff fdf1 	bl	8008ad4 <xTaskCreateStatic>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	4a23      	ldr	r2, [pc, #140]	@ (8008f84 <vTaskStartScheduler+0xc8>)
 8008ef6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ef8:	4b22      	ldr	r3, [pc, #136]	@ (8008f84 <vTaskStartScheduler+0xc8>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f00:	2301      	movs	r3, #1
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	e001      	b.n	8008f0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d102      	bne.n	8008f16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f10:	f000 fe2a 	bl	8009b68 <xTimerCreateTimerTask>
 8008f14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d11b      	bne.n	8008f54 <vTaskStartScheduler+0x98>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	613b      	str	r3, [r7, #16]
}
 8008f2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f30:	4b15      	ldr	r3, [pc, #84]	@ (8008f88 <vTaskStartScheduler+0xcc>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3354      	adds	r3, #84	@ 0x54
 8008f36:	4a15      	ldr	r2, [pc, #84]	@ (8008f8c <vTaskStartScheduler+0xd0>)
 8008f38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f3a:	4b15      	ldr	r3, [pc, #84]	@ (8008f90 <vTaskStartScheduler+0xd4>)
 8008f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f42:	4b14      	ldr	r3, [pc, #80]	@ (8008f94 <vTaskStartScheduler+0xd8>)
 8008f44:	2201      	movs	r2, #1
 8008f46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f48:	4b13      	ldr	r3, [pc, #76]	@ (8008f98 <vTaskStartScheduler+0xdc>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f4e:	f001 faaf 	bl	800a4b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f52:	e00f      	b.n	8008f74 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5a:	d10b      	bne.n	8008f74 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	60fb      	str	r3, [r7, #12]
}
 8008f6e:	bf00      	nop
 8008f70:	bf00      	nop
 8008f72:	e7fd      	b.n	8008f70 <vTaskStartScheduler+0xb4>
}
 8008f74:	bf00      	nop
 8008f76:	3718      	adds	r7, #24
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	0800f4ac 	.word	0x0800f4ac
 8008f80:	080095cd 	.word	0x080095cd
 8008f84:	200013a0 	.word	0x200013a0
 8008f88:	20000ea8 	.word	0x20000ea8
 8008f8c:	20000020 	.word	0x20000020
 8008f90:	2000139c 	.word	0x2000139c
 8008f94:	20001388 	.word	0x20001388
 8008f98:	20001380 	.word	0x20001380

08008f9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008fa0:	4b04      	ldr	r3, [pc, #16]	@ (8008fb4 <vTaskSuspendAll+0x18>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	4a03      	ldr	r2, [pc, #12]	@ (8008fb4 <vTaskSuspendAll+0x18>)
 8008fa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008faa:	bf00      	nop
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	200013a4 	.word	0x200013a4

08008fb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008fc6:	4b42      	ldr	r3, [pc, #264]	@ (80090d0 <xTaskResumeAll+0x118>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10b      	bne.n	8008fe6 <xTaskResumeAll+0x2e>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	603b      	str	r3, [r7, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	e7fd      	b.n	8008fe2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008fe6:	f001 fb07 	bl	800a5f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008fea:	4b39      	ldr	r3, [pc, #228]	@ (80090d0 <xTaskResumeAll+0x118>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	4a37      	ldr	r2, [pc, #220]	@ (80090d0 <xTaskResumeAll+0x118>)
 8008ff2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ff4:	4b36      	ldr	r3, [pc, #216]	@ (80090d0 <xTaskResumeAll+0x118>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d162      	bne.n	80090c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ffc:	4b35      	ldr	r3, [pc, #212]	@ (80090d4 <xTaskResumeAll+0x11c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d05e      	beq.n	80090c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009004:	e02f      	b.n	8009066 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009006:	4b34      	ldr	r3, [pc, #208]	@ (80090d8 <xTaskResumeAll+0x120>)
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3318      	adds	r3, #24
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe fc50 	bl	80078b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3304      	adds	r3, #4
 800901c:	4618      	mov	r0, r3
 800901e:	f7fe fc4b 	bl	80078b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009026:	4b2d      	ldr	r3, [pc, #180]	@ (80090dc <xTaskResumeAll+0x124>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	d903      	bls.n	8009036 <xTaskResumeAll+0x7e>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009032:	4a2a      	ldr	r2, [pc, #168]	@ (80090dc <xTaskResumeAll+0x124>)
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800903a:	4613      	mov	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4a27      	ldr	r2, [pc, #156]	@ (80090e0 <xTaskResumeAll+0x128>)
 8009044:	441a      	add	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3304      	adds	r3, #4
 800904a:	4619      	mov	r1, r3
 800904c:	4610      	mov	r0, r2
 800904e:	f7fe fbd6 	bl	80077fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009056:	4b23      	ldr	r3, [pc, #140]	@ (80090e4 <xTaskResumeAll+0x12c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905c:	429a      	cmp	r2, r3
 800905e:	d302      	bcc.n	8009066 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009060:	4b21      	ldr	r3, [pc, #132]	@ (80090e8 <xTaskResumeAll+0x130>)
 8009062:	2201      	movs	r2, #1
 8009064:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009066:	4b1c      	ldr	r3, [pc, #112]	@ (80090d8 <xTaskResumeAll+0x120>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1cb      	bne.n	8009006 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009074:	f000 fb66 	bl	8009744 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009078:	4b1c      	ldr	r3, [pc, #112]	@ (80090ec <xTaskResumeAll+0x134>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d010      	beq.n	80090a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009084:	f000 f846 	bl	8009114 <xTaskIncrementTick>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d002      	beq.n	8009094 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800908e:	4b16      	ldr	r3, [pc, #88]	@ (80090e8 <xTaskResumeAll+0x130>)
 8009090:	2201      	movs	r2, #1
 8009092:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3b01      	subs	r3, #1
 8009098:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1f1      	bne.n	8009084 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80090a0:	4b12      	ldr	r3, [pc, #72]	@ (80090ec <xTaskResumeAll+0x134>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090a6:	4b10      	ldr	r3, [pc, #64]	@ (80090e8 <xTaskResumeAll+0x130>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d009      	beq.n	80090c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090ae:	2301      	movs	r3, #1
 80090b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090b2:	4b0f      	ldr	r3, [pc, #60]	@ (80090f0 <xTaskResumeAll+0x138>)
 80090b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090c2:	f001 facb 	bl	800a65c <vPortExitCritical>

	return xAlreadyYielded;
 80090c6:	68bb      	ldr	r3, [r7, #8]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	200013a4 	.word	0x200013a4
 80090d4:	2000137c 	.word	0x2000137c
 80090d8:	2000133c 	.word	0x2000133c
 80090dc:	20001384 	.word	0x20001384
 80090e0:	20000eac 	.word	0x20000eac
 80090e4:	20000ea8 	.word	0x20000ea8
 80090e8:	20001390 	.word	0x20001390
 80090ec:	2000138c 	.word	0x2000138c
 80090f0:	e000ed04 	.word	0xe000ed04

080090f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090fa:	4b05      	ldr	r3, [pc, #20]	@ (8009110 <xTaskGetTickCount+0x1c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009100:	687b      	ldr	r3, [r7, #4]
}
 8009102:	4618      	mov	r0, r3
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	20001380 	.word	0x20001380

08009114 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800911a:	2300      	movs	r3, #0
 800911c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800911e:	4b4f      	ldr	r3, [pc, #316]	@ (800925c <xTaskIncrementTick+0x148>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	f040 8090 	bne.w	8009248 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009128:	4b4d      	ldr	r3, [pc, #308]	@ (8009260 <xTaskIncrementTick+0x14c>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3301      	adds	r3, #1
 800912e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009130:	4a4b      	ldr	r2, [pc, #300]	@ (8009260 <xTaskIncrementTick+0x14c>)
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d121      	bne.n	8009180 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800913c:	4b49      	ldr	r3, [pc, #292]	@ (8009264 <xTaskIncrementTick+0x150>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00b      	beq.n	800915e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	603b      	str	r3, [r7, #0]
}
 8009158:	bf00      	nop
 800915a:	bf00      	nop
 800915c:	e7fd      	b.n	800915a <xTaskIncrementTick+0x46>
 800915e:	4b41      	ldr	r3, [pc, #260]	@ (8009264 <xTaskIncrementTick+0x150>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	4b40      	ldr	r3, [pc, #256]	@ (8009268 <xTaskIncrementTick+0x154>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a3e      	ldr	r2, [pc, #248]	@ (8009264 <xTaskIncrementTick+0x150>)
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	4a3e      	ldr	r2, [pc, #248]	@ (8009268 <xTaskIncrementTick+0x154>)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	4b3e      	ldr	r3, [pc, #248]	@ (800926c <xTaskIncrementTick+0x158>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3301      	adds	r3, #1
 8009178:	4a3c      	ldr	r2, [pc, #240]	@ (800926c <xTaskIncrementTick+0x158>)
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	f000 fae2 	bl	8009744 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009180:	4b3b      	ldr	r3, [pc, #236]	@ (8009270 <xTaskIncrementTick+0x15c>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	429a      	cmp	r2, r3
 8009188:	d349      	bcc.n	800921e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800918a:	4b36      	ldr	r3, [pc, #216]	@ (8009264 <xTaskIncrementTick+0x150>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d104      	bne.n	800919e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009194:	4b36      	ldr	r3, [pc, #216]	@ (8009270 <xTaskIncrementTick+0x15c>)
 8009196:	f04f 32ff 	mov.w	r2, #4294967295
 800919a:	601a      	str	r2, [r3, #0]
					break;
 800919c:	e03f      	b.n	800921e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919e:	4b31      	ldr	r3, [pc, #196]	@ (8009264 <xTaskIncrementTick+0x150>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091ae:	693a      	ldr	r2, [r7, #16]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d203      	bcs.n	80091be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091b6:	4a2e      	ldr	r2, [pc, #184]	@ (8009270 <xTaskIncrementTick+0x15c>)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091bc:	e02f      	b.n	800921e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	3304      	adds	r3, #4
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe fb78 	bl	80078b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d004      	beq.n	80091da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	3318      	adds	r3, #24
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe fb6f 	bl	80078b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091de:	4b25      	ldr	r3, [pc, #148]	@ (8009274 <xTaskIncrementTick+0x160>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d903      	bls.n	80091ee <xTaskIncrementTick+0xda>
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ea:	4a22      	ldr	r2, [pc, #136]	@ (8009274 <xTaskIncrementTick+0x160>)
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f2:	4613      	mov	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009278 <xTaskIncrementTick+0x164>)
 80091fc:	441a      	add	r2, r3
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	3304      	adds	r3, #4
 8009202:	4619      	mov	r1, r3
 8009204:	4610      	mov	r0, r2
 8009206:	f7fe fafa 	bl	80077fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800920e:	4b1b      	ldr	r3, [pc, #108]	@ (800927c <xTaskIncrementTick+0x168>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009214:	429a      	cmp	r2, r3
 8009216:	d3b8      	bcc.n	800918a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009218:	2301      	movs	r3, #1
 800921a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800921c:	e7b5      	b.n	800918a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800921e:	4b17      	ldr	r3, [pc, #92]	@ (800927c <xTaskIncrementTick+0x168>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009224:	4914      	ldr	r1, [pc, #80]	@ (8009278 <xTaskIncrementTick+0x164>)
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	440b      	add	r3, r1
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d901      	bls.n	800923a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009236:	2301      	movs	r3, #1
 8009238:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800923a:	4b11      	ldr	r3, [pc, #68]	@ (8009280 <xTaskIncrementTick+0x16c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009242:	2301      	movs	r3, #1
 8009244:	617b      	str	r3, [r7, #20]
 8009246:	e004      	b.n	8009252 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009248:	4b0e      	ldr	r3, [pc, #56]	@ (8009284 <xTaskIncrementTick+0x170>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3301      	adds	r3, #1
 800924e:	4a0d      	ldr	r2, [pc, #52]	@ (8009284 <xTaskIncrementTick+0x170>)
 8009250:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009252:	697b      	ldr	r3, [r7, #20]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	200013a4 	.word	0x200013a4
 8009260:	20001380 	.word	0x20001380
 8009264:	20001334 	.word	0x20001334
 8009268:	20001338 	.word	0x20001338
 800926c:	20001394 	.word	0x20001394
 8009270:	2000139c 	.word	0x2000139c
 8009274:	20001384 	.word	0x20001384
 8009278:	20000eac 	.word	0x20000eac
 800927c:	20000ea8 	.word	0x20000ea8
 8009280:	20001390 	.word	0x20001390
 8009284:	2000138c 	.word	0x2000138c

08009288 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800928e:	4b2b      	ldr	r3, [pc, #172]	@ (800933c <vTaskSwitchContext+0xb4>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009296:	4b2a      	ldr	r3, [pc, #168]	@ (8009340 <vTaskSwitchContext+0xb8>)
 8009298:	2201      	movs	r2, #1
 800929a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800929c:	e047      	b.n	800932e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800929e:	4b28      	ldr	r3, [pc, #160]	@ (8009340 <vTaskSwitchContext+0xb8>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a4:	4b27      	ldr	r3, [pc, #156]	@ (8009344 <vTaskSwitchContext+0xbc>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	60fb      	str	r3, [r7, #12]
 80092aa:	e011      	b.n	80092d0 <vTaskSwitchContext+0x48>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10b      	bne.n	80092ca <vTaskSwitchContext+0x42>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	607b      	str	r3, [r7, #4]
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop
 80092c8:	e7fd      	b.n	80092c6 <vTaskSwitchContext+0x3e>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	491d      	ldr	r1, [pc, #116]	@ (8009348 <vTaskSwitchContext+0xc0>)
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	4613      	mov	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	440b      	add	r3, r1
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d0e3      	beq.n	80092ac <vTaskSwitchContext+0x24>
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	4613      	mov	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4a16      	ldr	r2, [pc, #88]	@ (8009348 <vTaskSwitchContext+0xc0>)
 80092f0:	4413      	add	r3, r2
 80092f2:	60bb      	str	r3, [r7, #8]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	685a      	ldr	r2, [r3, #4]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	605a      	str	r2, [r3, #4]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	3308      	adds	r3, #8
 8009306:	429a      	cmp	r2, r3
 8009308:	d104      	bne.n	8009314 <vTaskSwitchContext+0x8c>
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	605a      	str	r2, [r3, #4]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	4a0c      	ldr	r2, [pc, #48]	@ (800934c <vTaskSwitchContext+0xc4>)
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	4a09      	ldr	r2, [pc, #36]	@ (8009344 <vTaskSwitchContext+0xbc>)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009324:	4b09      	ldr	r3, [pc, #36]	@ (800934c <vTaskSwitchContext+0xc4>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3354      	adds	r3, #84	@ 0x54
 800932a:	4a09      	ldr	r2, [pc, #36]	@ (8009350 <vTaskSwitchContext+0xc8>)
 800932c:	6013      	str	r3, [r2, #0]
}
 800932e:	bf00      	nop
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	200013a4 	.word	0x200013a4
 8009340:	20001390 	.word	0x20001390
 8009344:	20001384 	.word	0x20001384
 8009348:	20000eac 	.word	0x20000eac
 800934c:	20000ea8 	.word	0x20000ea8
 8009350:	20000020 	.word	0x20000020

08009354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10b      	bne.n	800937c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	60fb      	str	r3, [r7, #12]
}
 8009376:	bf00      	nop
 8009378:	bf00      	nop
 800937a:	e7fd      	b.n	8009378 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800937c:	4b07      	ldr	r3, [pc, #28]	@ (800939c <vTaskPlaceOnEventList+0x48>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3318      	adds	r3, #24
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7fe fa5e 	bl	8007846 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800938a:	2101      	movs	r1, #1
 800938c:	6838      	ldr	r0, [r7, #0]
 800938e:	f000 fb97 	bl	8009ac0 <prvAddCurrentTaskToDelayedList>
}
 8009392:	bf00      	nop
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	20000ea8 	.word	0x20000ea8

080093a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10b      	bne.n	80093ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	617b      	str	r3, [r7, #20]
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop
 80093c8:	e7fd      	b.n	80093c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093ca:	4b0a      	ldr	r3, [pc, #40]	@ (80093f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3318      	adds	r3, #24
 80093d0:	4619      	mov	r1, r3
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f7fe fa13 	bl	80077fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80093de:	f04f 33ff 	mov.w	r3, #4294967295
 80093e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80093e4:	6879      	ldr	r1, [r7, #4]
 80093e6:	68b8      	ldr	r0, [r7, #8]
 80093e8:	f000 fb6a 	bl	8009ac0 <prvAddCurrentTaskToDelayedList>
	}
 80093ec:	bf00      	nop
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20000ea8 	.word	0x20000ea8

080093f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10b      	bne.n	8009426 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	60fb      	str	r3, [r7, #12]
}
 8009420:	bf00      	nop
 8009422:	bf00      	nop
 8009424:	e7fd      	b.n	8009422 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	3318      	adds	r3, #24
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fa44 	bl	80078b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009430:	4b1d      	ldr	r3, [pc, #116]	@ (80094a8 <xTaskRemoveFromEventList+0xb0>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d11d      	bne.n	8009474 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	3304      	adds	r3, #4
 800943c:	4618      	mov	r0, r3
 800943e:	f7fe fa3b 	bl	80078b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009446:	4b19      	ldr	r3, [pc, #100]	@ (80094ac <xTaskRemoveFromEventList+0xb4>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d903      	bls.n	8009456 <xTaskRemoveFromEventList+0x5e>
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009452:	4a16      	ldr	r2, [pc, #88]	@ (80094ac <xTaskRemoveFromEventList+0xb4>)
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4a13      	ldr	r2, [pc, #76]	@ (80094b0 <xTaskRemoveFromEventList+0xb8>)
 8009464:	441a      	add	r2, r3
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	3304      	adds	r3, #4
 800946a:	4619      	mov	r1, r3
 800946c:	4610      	mov	r0, r2
 800946e:	f7fe f9c6 	bl	80077fe <vListInsertEnd>
 8009472:	e005      	b.n	8009480 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	3318      	adds	r3, #24
 8009478:	4619      	mov	r1, r3
 800947a:	480e      	ldr	r0, [pc, #56]	@ (80094b4 <xTaskRemoveFromEventList+0xbc>)
 800947c:	f7fe f9bf 	bl	80077fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009484:	4b0c      	ldr	r3, [pc, #48]	@ (80094b8 <xTaskRemoveFromEventList+0xc0>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948a:	429a      	cmp	r2, r3
 800948c:	d905      	bls.n	800949a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800948e:	2301      	movs	r3, #1
 8009490:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009492:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <xTaskRemoveFromEventList+0xc4>)
 8009494:	2201      	movs	r2, #1
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	e001      	b.n	800949e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800949a:	2300      	movs	r3, #0
 800949c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800949e:	697b      	ldr	r3, [r7, #20]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3718      	adds	r7, #24
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	200013a4 	.word	0x200013a4
 80094ac:	20001384 	.word	0x20001384
 80094b0:	20000eac 	.word	0x20000eac
 80094b4:	2000133c 	.word	0x2000133c
 80094b8:	20000ea8 	.word	0x20000ea8
 80094bc:	20001390 	.word	0x20001390

080094c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094c8:	4b06      	ldr	r3, [pc, #24]	@ (80094e4 <vTaskInternalSetTimeOutState+0x24>)
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094d0:	4b05      	ldr	r3, [pc, #20]	@ (80094e8 <vTaskInternalSetTimeOutState+0x28>)
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	605a      	str	r2, [r3, #4]
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	20001394 	.word	0x20001394
 80094e8:	20001380 	.word	0x20001380

080094ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10b      	bne.n	8009514 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	613b      	str	r3, [r7, #16]
}
 800950e:	bf00      	nop
 8009510:	bf00      	nop
 8009512:	e7fd      	b.n	8009510 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10b      	bne.n	8009532 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	60fb      	str	r3, [r7, #12]
}
 800952c:	bf00      	nop
 800952e:	bf00      	nop
 8009530:	e7fd      	b.n	800952e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009532:	f001 f861 	bl	800a5f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009536:	4b1d      	ldr	r3, [pc, #116]	@ (80095ac <xTaskCheckForTimeOut+0xc0>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954e:	d102      	bne.n	8009556 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009550:	2300      	movs	r3, #0
 8009552:	61fb      	str	r3, [r7, #28]
 8009554:	e023      	b.n	800959e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	4b15      	ldr	r3, [pc, #84]	@ (80095b0 <xTaskCheckForTimeOut+0xc4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d007      	beq.n	8009572 <xTaskCheckForTimeOut+0x86>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	429a      	cmp	r2, r3
 800956a:	d302      	bcc.n	8009572 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800956c:	2301      	movs	r3, #1
 800956e:	61fb      	str	r3, [r7, #28]
 8009570:	e015      	b.n	800959e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	429a      	cmp	r2, r3
 800957a:	d20b      	bcs.n	8009594 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	1ad2      	subs	r2, r2, r3
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7ff ff99 	bl	80094c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800958e:	2300      	movs	r3, #0
 8009590:	61fb      	str	r3, [r7, #28]
 8009592:	e004      	b.n	800959e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800959a:	2301      	movs	r3, #1
 800959c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800959e:	f001 f85d 	bl	800a65c <vPortExitCritical>

	return xReturn;
 80095a2:	69fb      	ldr	r3, [r7, #28]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3720      	adds	r7, #32
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	20001380 	.word	0x20001380
 80095b0:	20001394 	.word	0x20001394

080095b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80095b4:	b480      	push	{r7}
 80095b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095b8:	4b03      	ldr	r3, [pc, #12]	@ (80095c8 <vTaskMissedYield+0x14>)
 80095ba:	2201      	movs	r2, #1
 80095bc:	601a      	str	r2, [r3, #0]
}
 80095be:	bf00      	nop
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	20001390 	.word	0x20001390

080095cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095d4:	f000 f852 	bl	800967c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095d8:	4b06      	ldr	r3, [pc, #24]	@ (80095f4 <prvIdleTask+0x28>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d9f9      	bls.n	80095d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80095e0:	4b05      	ldr	r3, [pc, #20]	@ (80095f8 <prvIdleTask+0x2c>)
 80095e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095f0:	e7f0      	b.n	80095d4 <prvIdleTask+0x8>
 80095f2:	bf00      	nop
 80095f4:	20000eac 	.word	0x20000eac
 80095f8:	e000ed04 	.word	0xe000ed04

080095fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009602:	2300      	movs	r3, #0
 8009604:	607b      	str	r3, [r7, #4]
 8009606:	e00c      	b.n	8009622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	4613      	mov	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4a12      	ldr	r2, [pc, #72]	@ (800965c <prvInitialiseTaskLists+0x60>)
 8009614:	4413      	add	r3, r2
 8009616:	4618      	mov	r0, r3
 8009618:	f7fe f8c4 	bl	80077a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3301      	adds	r3, #1
 8009620:	607b      	str	r3, [r7, #4]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b37      	cmp	r3, #55	@ 0x37
 8009626:	d9ef      	bls.n	8009608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009628:	480d      	ldr	r0, [pc, #52]	@ (8009660 <prvInitialiseTaskLists+0x64>)
 800962a:	f7fe f8bb 	bl	80077a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800962e:	480d      	ldr	r0, [pc, #52]	@ (8009664 <prvInitialiseTaskLists+0x68>)
 8009630:	f7fe f8b8 	bl	80077a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009634:	480c      	ldr	r0, [pc, #48]	@ (8009668 <prvInitialiseTaskLists+0x6c>)
 8009636:	f7fe f8b5 	bl	80077a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800963a:	480c      	ldr	r0, [pc, #48]	@ (800966c <prvInitialiseTaskLists+0x70>)
 800963c:	f7fe f8b2 	bl	80077a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009640:	480b      	ldr	r0, [pc, #44]	@ (8009670 <prvInitialiseTaskLists+0x74>)
 8009642:	f7fe f8af 	bl	80077a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009646:	4b0b      	ldr	r3, [pc, #44]	@ (8009674 <prvInitialiseTaskLists+0x78>)
 8009648:	4a05      	ldr	r2, [pc, #20]	@ (8009660 <prvInitialiseTaskLists+0x64>)
 800964a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800964c:	4b0a      	ldr	r3, [pc, #40]	@ (8009678 <prvInitialiseTaskLists+0x7c>)
 800964e:	4a05      	ldr	r2, [pc, #20]	@ (8009664 <prvInitialiseTaskLists+0x68>)
 8009650:	601a      	str	r2, [r3, #0]
}
 8009652:	bf00      	nop
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20000eac 	.word	0x20000eac
 8009660:	2000130c 	.word	0x2000130c
 8009664:	20001320 	.word	0x20001320
 8009668:	2000133c 	.word	0x2000133c
 800966c:	20001350 	.word	0x20001350
 8009670:	20001368 	.word	0x20001368
 8009674:	20001334 	.word	0x20001334
 8009678:	20001338 	.word	0x20001338

0800967c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009682:	e019      	b.n	80096b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009684:	f000 ffb8 	bl	800a5f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009688:	4b10      	ldr	r3, [pc, #64]	@ (80096cc <prvCheckTasksWaitingTermination+0x50>)
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3304      	adds	r3, #4
 8009694:	4618      	mov	r0, r3
 8009696:	f7fe f90f 	bl	80078b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800969a:	4b0d      	ldr	r3, [pc, #52]	@ (80096d0 <prvCheckTasksWaitingTermination+0x54>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3b01      	subs	r3, #1
 80096a0:	4a0b      	ldr	r2, [pc, #44]	@ (80096d0 <prvCheckTasksWaitingTermination+0x54>)
 80096a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096a4:	4b0b      	ldr	r3, [pc, #44]	@ (80096d4 <prvCheckTasksWaitingTermination+0x58>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	4a0a      	ldr	r2, [pc, #40]	@ (80096d4 <prvCheckTasksWaitingTermination+0x58>)
 80096ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80096ae:	f000 ffd5 	bl	800a65c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f810 	bl	80096d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096b8:	4b06      	ldr	r3, [pc, #24]	@ (80096d4 <prvCheckTasksWaitingTermination+0x58>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e1      	bne.n	8009684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096c0:	bf00      	nop
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20001350 	.word	0x20001350
 80096d0:	2000137c 	.word	0x2000137c
 80096d4:	20001364 	.word	0x20001364

080096d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3354      	adds	r3, #84	@ 0x54
 80096e4:	4618      	mov	r0, r3
 80096e6:	f002 fa45 	bl	800bb74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d108      	bne.n	8009706 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 f96d 	bl	800a9d8 <vPortFree>
				vPortFree( pxTCB );
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 f96a 	bl	800a9d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009704:	e019      	b.n	800973a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800970c:	2b01      	cmp	r3, #1
 800970e:	d103      	bne.n	8009718 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f001 f961 	bl	800a9d8 <vPortFree>
	}
 8009716:	e010      	b.n	800973a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800971e:	2b02      	cmp	r3, #2
 8009720:	d00b      	beq.n	800973a <prvDeleteTCB+0x62>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	60fb      	str	r3, [r7, #12]
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	e7fd      	b.n	8009736 <prvDeleteTCB+0x5e>
	}
 800973a:	bf00      	nop
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800974a:	4b0c      	ldr	r3, [pc, #48]	@ (800977c <prvResetNextTaskUnblockTime+0x38>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d104      	bne.n	800975e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009754:	4b0a      	ldr	r3, [pc, #40]	@ (8009780 <prvResetNextTaskUnblockTime+0x3c>)
 8009756:	f04f 32ff 	mov.w	r2, #4294967295
 800975a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800975c:	e008      	b.n	8009770 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975e:	4b07      	ldr	r3, [pc, #28]	@ (800977c <prvResetNextTaskUnblockTime+0x38>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	4a04      	ldr	r2, [pc, #16]	@ (8009780 <prvResetNextTaskUnblockTime+0x3c>)
 800976e:	6013      	str	r3, [r2, #0]
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	20001334 	.word	0x20001334
 8009780:	2000139c 	.word	0x2000139c

08009784 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800978a:	4b05      	ldr	r3, [pc, #20]	@ (80097a0 <xTaskGetCurrentTaskHandle+0x1c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009790:	687b      	ldr	r3, [r7, #4]
	}
 8009792:	4618      	mov	r0, r3
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	20000ea8 	.word	0x20000ea8

080097a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097aa:	4b0b      	ldr	r3, [pc, #44]	@ (80097d8 <xTaskGetSchedulerState+0x34>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d102      	bne.n	80097b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097b2:	2301      	movs	r3, #1
 80097b4:	607b      	str	r3, [r7, #4]
 80097b6:	e008      	b.n	80097ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097b8:	4b08      	ldr	r3, [pc, #32]	@ (80097dc <xTaskGetSchedulerState+0x38>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d102      	bne.n	80097c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80097c0:	2302      	movs	r3, #2
 80097c2:	607b      	str	r3, [r7, #4]
 80097c4:	e001      	b.n	80097ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80097c6:	2300      	movs	r3, #0
 80097c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80097ca:	687b      	ldr	r3, [r7, #4]
	}
 80097cc:	4618      	mov	r0, r3
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	20001388 	.word	0x20001388
 80097dc:	200013a4 	.word	0x200013a4

080097e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d051      	beq.n	800989a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097fa:	4b2a      	ldr	r3, [pc, #168]	@ (80098a4 <xTaskPriorityInherit+0xc4>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009800:	429a      	cmp	r2, r3
 8009802:	d241      	bcs.n	8009888 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	2b00      	cmp	r3, #0
 800980a:	db06      	blt.n	800981a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800980c:	4b25      	ldr	r3, [pc, #148]	@ (80098a4 <xTaskPriorityInherit+0xc4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009812:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	6959      	ldr	r1, [r3, #20]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009822:	4613      	mov	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4a1f      	ldr	r2, [pc, #124]	@ (80098a8 <xTaskPriorityInherit+0xc8>)
 800982c:	4413      	add	r3, r2
 800982e:	4299      	cmp	r1, r3
 8009830:	d122      	bne.n	8009878 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	3304      	adds	r3, #4
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe f83e 	bl	80078b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800983c:	4b19      	ldr	r3, [pc, #100]	@ (80098a4 <xTaskPriorityInherit+0xc4>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800984a:	4b18      	ldr	r3, [pc, #96]	@ (80098ac <xTaskPriorityInherit+0xcc>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d903      	bls.n	800985a <xTaskPriorityInherit+0x7a>
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009856:	4a15      	ldr	r2, [pc, #84]	@ (80098ac <xTaskPriorityInherit+0xcc>)
 8009858:	6013      	str	r3, [r2, #0]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800985e:	4613      	mov	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4a10      	ldr	r2, [pc, #64]	@ (80098a8 <xTaskPriorityInherit+0xc8>)
 8009868:	441a      	add	r2, r3
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	3304      	adds	r3, #4
 800986e:	4619      	mov	r1, r3
 8009870:	4610      	mov	r0, r2
 8009872:	f7fd ffc4 	bl	80077fe <vListInsertEnd>
 8009876:	e004      	b.n	8009882 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009878:	4b0a      	ldr	r3, [pc, #40]	@ (80098a4 <xTaskPriorityInherit+0xc4>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009882:	2301      	movs	r3, #1
 8009884:	60fb      	str	r3, [r7, #12]
 8009886:	e008      	b.n	800989a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800988c:	4b05      	ldr	r3, [pc, #20]	@ (80098a4 <xTaskPriorityInherit+0xc4>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009892:	429a      	cmp	r2, r3
 8009894:	d201      	bcs.n	800989a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009896:	2301      	movs	r3, #1
 8009898:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800989a:	68fb      	ldr	r3, [r7, #12]
	}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20000ea8 	.word	0x20000ea8
 80098a8:	20000eac 	.word	0x20000eac
 80098ac:	20001384 	.word	0x20001384

080098b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098bc:	2300      	movs	r3, #0
 80098be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d058      	beq.n	8009978 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80098c6:	4b2f      	ldr	r3, [pc, #188]	@ (8009984 <xTaskPriorityDisinherit+0xd4>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d00b      	beq.n	80098e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	60fb      	str	r3, [r7, #12]
}
 80098e2:	bf00      	nop
 80098e4:	bf00      	nop
 80098e6:	e7fd      	b.n	80098e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10b      	bne.n	8009908 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60bb      	str	r3, [r7, #8]
}
 8009902:	bf00      	nop
 8009904:	bf00      	nop
 8009906:	e7fd      	b.n	8009904 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800990c:	1e5a      	subs	r2, r3, #1
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800991a:	429a      	cmp	r2, r3
 800991c:	d02c      	beq.n	8009978 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009922:	2b00      	cmp	r3, #0
 8009924:	d128      	bne.n	8009978 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	3304      	adds	r3, #4
 800992a:	4618      	mov	r0, r3
 800992c:	f7fd ffc4 	bl	80078b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009948:	4b0f      	ldr	r3, [pc, #60]	@ (8009988 <xTaskPriorityDisinherit+0xd8>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	429a      	cmp	r2, r3
 800994e:	d903      	bls.n	8009958 <xTaskPriorityDisinherit+0xa8>
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009954:	4a0c      	ldr	r2, [pc, #48]	@ (8009988 <xTaskPriorityDisinherit+0xd8>)
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800995c:	4613      	mov	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4a09      	ldr	r2, [pc, #36]	@ (800998c <xTaskPriorityDisinherit+0xdc>)
 8009966:	441a      	add	r2, r3
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	3304      	adds	r3, #4
 800996c:	4619      	mov	r1, r3
 800996e:	4610      	mov	r0, r2
 8009970:	f7fd ff45 	bl	80077fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009974:	2301      	movs	r3, #1
 8009976:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009978:	697b      	ldr	r3, [r7, #20]
	}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20000ea8 	.word	0x20000ea8
 8009988:	20001384 	.word	0x20001384
 800998c:	20000eac 	.word	0x20000eac

08009990 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800999e:	2301      	movs	r3, #1
 80099a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d06c      	beq.n	8009a82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10b      	bne.n	80099c8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	60fb      	str	r3, [r7, #12]
}
 80099c2:	bf00      	nop
 80099c4:	bf00      	nop
 80099c6:	e7fd      	b.n	80099c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d902      	bls.n	80099d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	61fb      	str	r3, [r7, #28]
 80099d6:	e002      	b.n	80099de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099dc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e2:	69fa      	ldr	r2, [r7, #28]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d04c      	beq.n	8009a82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d147      	bne.n	8009a82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80099f2:	4b26      	ldr	r3, [pc, #152]	@ (8009a8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	69ba      	ldr	r2, [r7, #24]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d10b      	bne.n	8009a14 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	60bb      	str	r3, [r7, #8]
}
 8009a0e:	bf00      	nop
 8009a10:	bf00      	nop
 8009a12:	e7fd      	b.n	8009a10 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	69fa      	ldr	r2, [r7, #28]
 8009a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	db04      	blt.n	8009a32 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	6959      	ldr	r1, [r3, #20]
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4a13      	ldr	r2, [pc, #76]	@ (8009a90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009a42:	4413      	add	r3, r2
 8009a44:	4299      	cmp	r1, r3
 8009a46:	d11c      	bne.n	8009a82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fd ff33 	bl	80078b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a56:	4b0f      	ldr	r3, [pc, #60]	@ (8009a94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d903      	bls.n	8009a66 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a62:	4a0c      	ldr	r2, [pc, #48]	@ (8009a94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4a07      	ldr	r2, [pc, #28]	@ (8009a90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009a74:	441a      	add	r2, r3
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	f7fd febe 	bl	80077fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a82:	bf00      	nop
 8009a84:	3720      	adds	r7, #32
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20000ea8 	.word	0x20000ea8
 8009a90:	20000eac 	.word	0x20000eac
 8009a94:	20001384 	.word	0x20001384

08009a98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009a98:	b480      	push	{r7}
 8009a9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009a9c:	4b07      	ldr	r3, [pc, #28]	@ (8009abc <pvTaskIncrementMutexHeldCount+0x24>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d004      	beq.n	8009aae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009aa4:	4b05      	ldr	r3, [pc, #20]	@ (8009abc <pvTaskIncrementMutexHeldCount+0x24>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009aaa:	3201      	adds	r2, #1
 8009aac:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009aae:	4b03      	ldr	r3, [pc, #12]	@ (8009abc <pvTaskIncrementMutexHeldCount+0x24>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
	}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	20000ea8 	.word	0x20000ea8

08009ac0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009aca:	4b21      	ldr	r3, [pc, #132]	@ (8009b50 <prvAddCurrentTaskToDelayedList+0x90>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ad0:	4b20      	ldr	r3, [pc, #128]	@ (8009b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fd feee 	bl	80078b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae2:	d10a      	bne.n	8009afa <prvAddCurrentTaskToDelayedList+0x3a>
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d007      	beq.n	8009afa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aea:	4b1a      	ldr	r3, [pc, #104]	@ (8009b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4619      	mov	r1, r3
 8009af2:	4819      	ldr	r0, [pc, #100]	@ (8009b58 <prvAddCurrentTaskToDelayedList+0x98>)
 8009af4:	f7fd fe83 	bl	80077fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009af8:	e026      	b.n	8009b48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4413      	add	r3, r2
 8009b00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b02:	4b14      	ldr	r3, [pc, #80]	@ (8009b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68ba      	ldr	r2, [r7, #8]
 8009b08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d209      	bcs.n	8009b26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b12:	4b12      	ldr	r3, [pc, #72]	@ (8009b5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	4b0f      	ldr	r3, [pc, #60]	@ (8009b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4610      	mov	r0, r2
 8009b20:	f7fd fe91 	bl	8007846 <vListInsert>
}
 8009b24:	e010      	b.n	8009b48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b26:	4b0e      	ldr	r3, [pc, #56]	@ (8009b60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	4619      	mov	r1, r3
 8009b32:	4610      	mov	r0, r2
 8009b34:	f7fd fe87 	bl	8007846 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b38:	4b0a      	ldr	r3, [pc, #40]	@ (8009b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d202      	bcs.n	8009b48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b42:	4a08      	ldr	r2, [pc, #32]	@ (8009b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	6013      	str	r3, [r2, #0]
}
 8009b48:	bf00      	nop
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	20001380 	.word	0x20001380
 8009b54:	20000ea8 	.word	0x20000ea8
 8009b58:	20001368 	.word	0x20001368
 8009b5c:	20001338 	.word	0x20001338
 8009b60:	20001334 	.word	0x20001334
 8009b64:	2000139c 	.word	0x2000139c

08009b68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08a      	sub	sp, #40	@ 0x28
 8009b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b72:	f000 fbb1 	bl	800a2d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b76:	4b1d      	ldr	r3, [pc, #116]	@ (8009bec <xTimerCreateTimerTask+0x84>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d021      	beq.n	8009bc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b86:	1d3a      	adds	r2, r7, #4
 8009b88:	f107 0108 	add.w	r1, r7, #8
 8009b8c:	f107 030c 	add.w	r3, r7, #12
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fd fded 	bl	8007770 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	9202      	str	r2, [sp, #8]
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	460a      	mov	r2, r1
 8009ba8:	4911      	ldr	r1, [pc, #68]	@ (8009bf0 <xTimerCreateTimerTask+0x88>)
 8009baa:	4812      	ldr	r0, [pc, #72]	@ (8009bf4 <xTimerCreateTimerTask+0x8c>)
 8009bac:	f7fe ff92 	bl	8008ad4 <xTaskCreateStatic>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	4a11      	ldr	r2, [pc, #68]	@ (8009bf8 <xTimerCreateTimerTask+0x90>)
 8009bb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009bb6:	4b10      	ldr	r3, [pc, #64]	@ (8009bf8 <xTimerCreateTimerTask+0x90>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10b      	bne.n	8009be0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	613b      	str	r3, [r7, #16]
}
 8009bda:	bf00      	nop
 8009bdc:	bf00      	nop
 8009bde:	e7fd      	b.n	8009bdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009be0:	697b      	ldr	r3, [r7, #20]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	200013d8 	.word	0x200013d8
 8009bf0:	0800f4b4 	.word	0x0800f4b4
 8009bf4:	08009e71 	.word	0x08009e71
 8009bf8:	200013dc 	.word	0x200013dc

08009bfc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b088      	sub	sp, #32
 8009c00:	af02      	add	r7, sp, #8
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009c0a:	202c      	movs	r0, #44	@ 0x2c
 8009c0c:	f000 fe16 	bl	800a83c <pvPortMalloc>
 8009c10:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00d      	beq.n	8009c34 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	9301      	str	r3, [sp, #4]
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	68b9      	ldr	r1, [r7, #8]
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f000 f845 	bl	8009cbe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009c34:	697b      	ldr	r3, [r7, #20]
	}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3718      	adds	r7, #24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b08a      	sub	sp, #40	@ 0x28
 8009c42:	af02      	add	r7, sp, #8
 8009c44:	60f8      	str	r0, [r7, #12]
 8009c46:	60b9      	str	r1, [r7, #8]
 8009c48:	607a      	str	r2, [r7, #4]
 8009c4a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009c4c:	232c      	movs	r3, #44	@ 0x2c
 8009c4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	2b2c      	cmp	r3, #44	@ 0x2c
 8009c54:	d00b      	beq.n	8009c6e <xTimerCreateStatic+0x30>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	61bb      	str	r3, [r7, #24]
}
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	e7fd      	b.n	8009c6a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10b      	bne.n	8009c8e <xTimerCreateStatic+0x50>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	617b      	str	r3, [r7, #20]
}
 8009c88:	bf00      	nop
 8009c8a:	bf00      	nop
 8009c8c:	e7fd      	b.n	8009c8a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c90:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00d      	beq.n	8009cb4 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	9301      	str	r3, [sp, #4]
 8009ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	68b9      	ldr	r1, [r7, #8]
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f000 f805 	bl	8009cbe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009cb4:	69fb      	ldr	r3, [r7, #28]
	}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3720      	adds	r7, #32
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b086      	sub	sp, #24
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	60f8      	str	r0, [r7, #12]
 8009cc6:	60b9      	str	r1, [r7, #8]
 8009cc8:	607a      	str	r2, [r7, #4]
 8009cca:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10b      	bne.n	8009cea <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	617b      	str	r3, [r7, #20]
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop
 8009ce8:	e7fd      	b.n	8009ce6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d01e      	beq.n	8009d2e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009cf0:	f000 faf2 	bl	800a2d8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d08:	6a3a      	ldr	r2, [r7, #32]
 8009d0a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fd fd67 	bl	80077e4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d008      	beq.n	8009d2e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d22:	f043 0304 	orr.w	r3, r3, #4
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009d2e:	bf00      	nop
 8009d30:	3718      	adds	r7, #24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08a      	sub	sp, #40	@ 0x28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10b      	bne.n	8009d68 <xTimerGenericCommand+0x30>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	623b      	str	r3, [r7, #32]
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	e7fd      	b.n	8009d64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d68:	4b19      	ldr	r3, [pc, #100]	@ (8009dd0 <xTimerGenericCommand+0x98>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d02a      	beq.n	8009dc6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	dc18      	bgt.n	8009db4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d82:	f7ff fd0f 	bl	80097a4 <xTaskGetSchedulerState>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d109      	bne.n	8009da0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d8c:	4b10      	ldr	r3, [pc, #64]	@ (8009dd0 <xTimerGenericCommand+0x98>)
 8009d8e:	6818      	ldr	r0, [r3, #0]
 8009d90:	f107 0110 	add.w	r1, r7, #16
 8009d94:	2300      	movs	r3, #0
 8009d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d98:	f7fe f824 	bl	8007de4 <xQueueGenericSend>
 8009d9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d9e:	e012      	b.n	8009dc6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009da0:	4b0b      	ldr	r3, [pc, #44]	@ (8009dd0 <xTimerGenericCommand+0x98>)
 8009da2:	6818      	ldr	r0, [r3, #0]
 8009da4:	f107 0110 	add.w	r1, r7, #16
 8009da8:	2300      	movs	r3, #0
 8009daa:	2200      	movs	r2, #0
 8009dac:	f7fe f81a 	bl	8007de4 <xQueueGenericSend>
 8009db0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009db2:	e008      	b.n	8009dc6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009db4:	4b06      	ldr	r3, [pc, #24]	@ (8009dd0 <xTimerGenericCommand+0x98>)
 8009db6:	6818      	ldr	r0, [r3, #0]
 8009db8:	f107 0110 	add.w	r1, r7, #16
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	f7fe f912 	bl	8007fe8 <xQueueGenericSendFromISR>
 8009dc4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3728      	adds	r7, #40	@ 0x28
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	200013d8 	.word	0x200013d8

08009dd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af02      	add	r7, sp, #8
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dde:	4b23      	ldr	r3, [pc, #140]	@ (8009e6c <prvProcessExpiredTimer+0x98>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	3304      	adds	r3, #4
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fd fd63 	bl	80078b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009df8:	f003 0304 	and.w	r3, r3, #4
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d023      	beq.n	8009e48 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	699a      	ldr	r2, [r3, #24]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	18d1      	adds	r1, r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	6978      	ldr	r0, [r7, #20]
 8009e0e:	f000 f8d5 	bl	8009fbc <prvInsertTimerInActiveList>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d020      	beq.n	8009e5a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	2100      	movs	r1, #0
 8009e22:	6978      	ldr	r0, [r7, #20]
 8009e24:	f7ff ff88 	bl	8009d38 <xTimerGenericCommand>
 8009e28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d114      	bne.n	8009e5a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	60fb      	str	r3, [r7, #12]
}
 8009e42:	bf00      	nop
 8009e44:	bf00      	nop
 8009e46:	e7fd      	b.n	8009e44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e4e:	f023 0301 	bic.w	r3, r3, #1
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	6978      	ldr	r0, [r7, #20]
 8009e60:	4798      	blx	r3
}
 8009e62:	bf00      	nop
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	200013d0 	.word	0x200013d0

08009e70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e78:	f107 0308 	add.w	r3, r7, #8
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f000 f859 	bl	8009f34 <prvGetNextExpireTime>
 8009e82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4619      	mov	r1, r3
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f000 f805 	bl	8009e98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e8e:	f000 f8d7 	bl	800a040 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e92:	bf00      	nop
 8009e94:	e7f0      	b.n	8009e78 <prvTimerTask+0x8>
	...

08009e98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009ea2:	f7ff f87b 	bl	8008f9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ea6:	f107 0308 	add.w	r3, r7, #8
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 f866 	bl	8009f7c <prvSampleTimeNow>
 8009eb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d130      	bne.n	8009f1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10a      	bne.n	8009ed4 <prvProcessTimerOrBlockTask+0x3c>
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d806      	bhi.n	8009ed4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ec6:	f7ff f877 	bl	8008fb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009eca:	68f9      	ldr	r1, [r7, #12]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7ff ff81 	bl	8009dd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ed2:	e024      	b.n	8009f1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d008      	beq.n	8009eec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009eda:	4b13      	ldr	r3, [pc, #76]	@ (8009f28 <prvProcessTimerOrBlockTask+0x90>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <prvProcessTimerOrBlockTask+0x50>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e000      	b.n	8009eea <prvProcessTimerOrBlockTask+0x52>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009eec:	4b0f      	ldr	r3, [pc, #60]	@ (8009f2c <prvProcessTimerOrBlockTask+0x94>)
 8009eee:	6818      	ldr	r0, [r3, #0]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	f7fe fdb7 	bl	8008a6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009efe:	f7ff f85b 	bl	8008fb8 <xTaskResumeAll>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10a      	bne.n	8009f1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f08:	4b09      	ldr	r3, [pc, #36]	@ (8009f30 <prvProcessTimerOrBlockTask+0x98>)
 8009f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f0e:	601a      	str	r2, [r3, #0]
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	f3bf 8f6f 	isb	sy
}
 8009f18:	e001      	b.n	8009f1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f1a:	f7ff f84d 	bl	8008fb8 <xTaskResumeAll>
}
 8009f1e:	bf00      	nop
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	200013d4 	.word	0x200013d4
 8009f2c:	200013d8 	.word	0x200013d8
 8009f30:	e000ed04 	.word	0xe000ed04

08009f34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009f78 <prvGetNextExpireTime+0x44>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d101      	bne.n	8009f4a <prvGetNextExpireTime+0x16>
 8009f46:	2201      	movs	r2, #1
 8009f48:	e000      	b.n	8009f4c <prvGetNextExpireTime+0x18>
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d105      	bne.n	8009f64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f58:	4b07      	ldr	r3, [pc, #28]	@ (8009f78 <prvGetNextExpireTime+0x44>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	e001      	b.n	8009f68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f64:	2300      	movs	r3, #0
 8009f66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f68:	68fb      	ldr	r3, [r7, #12]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	200013d0 	.word	0x200013d0

08009f7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f84:	f7ff f8b6 	bl	80090f4 <xTaskGetTickCount>
 8009f88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb8 <prvSampleTimeNow+0x3c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d205      	bcs.n	8009fa0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f94:	f000 f93a 	bl	800a20c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	e002      	b.n	8009fa6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009fa6:	4a04      	ldr	r2, [pc, #16]	@ (8009fb8 <prvSampleTimeNow+0x3c>)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009fac:	68fb      	ldr	r3, [r7, #12]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	200013e0 	.word	0x200013e0

08009fbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d812      	bhi.n	800a008 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	1ad2      	subs	r2, r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d302      	bcc.n	8009ff6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	617b      	str	r3, [r7, #20]
 8009ff4:	e01b      	b.n	800a02e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ff6:	4b10      	ldr	r3, [pc, #64]	@ (800a038 <prvInsertTimerInActiveList+0x7c>)
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	4619      	mov	r1, r3
 800a000:	4610      	mov	r0, r2
 800a002:	f7fd fc20 	bl	8007846 <vListInsert>
 800a006:	e012      	b.n	800a02e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d206      	bcs.n	800a01e <prvInsertTimerInActiveList+0x62>
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d302      	bcc.n	800a01e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a018:	2301      	movs	r3, #1
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	e007      	b.n	800a02e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a01e:	4b07      	ldr	r3, [pc, #28]	@ (800a03c <prvInsertTimerInActiveList+0x80>)
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3304      	adds	r3, #4
 800a026:	4619      	mov	r1, r3
 800a028:	4610      	mov	r0, r2
 800a02a:	f7fd fc0c 	bl	8007846 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a02e:	697b      	ldr	r3, [r7, #20]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3718      	adds	r7, #24
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	200013d4 	.word	0x200013d4
 800a03c:	200013d0 	.word	0x200013d0

0800a040 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08e      	sub	sp, #56	@ 0x38
 800a044:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a046:	e0ce      	b.n	800a1e6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	da19      	bge.n	800a082 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a04e:	1d3b      	adds	r3, r7, #4
 800a050:	3304      	adds	r3, #4
 800a052:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10b      	bne.n	800a072 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	61fb      	str	r3, [r7, #28]
}
 800a06c:	bf00      	nop
 800a06e:	bf00      	nop
 800a070:	e7fd      	b.n	800a06e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a078:	6850      	ldr	r0, [r2, #4]
 800a07a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a07c:	6892      	ldr	r2, [r2, #8]
 800a07e:	4611      	mov	r1, r2
 800a080:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f2c0 80ae 	blt.w	800a1e6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d004      	beq.n	800a0a0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a098:	3304      	adds	r3, #4
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fd fc0c 	bl	80078b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0a0:	463b      	mov	r3, r7
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7ff ff6a 	bl	8009f7c <prvSampleTimeNow>
 800a0a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b09      	cmp	r3, #9
 800a0ae:	f200 8097 	bhi.w	800a1e0 <prvProcessReceivedCommands+0x1a0>
 800a0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b8 <prvProcessReceivedCommands+0x78>)
 800a0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b8:	0800a0e1 	.word	0x0800a0e1
 800a0bc:	0800a0e1 	.word	0x0800a0e1
 800a0c0:	0800a0e1 	.word	0x0800a0e1
 800a0c4:	0800a157 	.word	0x0800a157
 800a0c8:	0800a16b 	.word	0x0800a16b
 800a0cc:	0800a1b7 	.word	0x0800a1b7
 800a0d0:	0800a0e1 	.word	0x0800a0e1
 800a0d4:	0800a0e1 	.word	0x0800a0e1
 800a0d8:	0800a157 	.word	0x0800a157
 800a0dc:	0800a16b 	.word	0x0800a16b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0e6:	f043 0301 	orr.w	r3, r3, #1
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	18d1      	adds	r1, r2, r3
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a100:	f7ff ff5c 	bl	8009fbc <prvInsertTimerInActiveList>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d06c      	beq.n	800a1e4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a10c:	6a1b      	ldr	r3, [r3, #32]
 800a10e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a110:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a114:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d061      	beq.n	800a1e4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	441a      	add	r2, r3
 800a128:	2300      	movs	r3, #0
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	2300      	movs	r3, #0
 800a12e:	2100      	movs	r1, #0
 800a130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a132:	f7ff fe01 	bl	8009d38 <xTimerGenericCommand>
 800a136:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d152      	bne.n	800a1e4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	61bb      	str	r3, [r7, #24]
}
 800a150:	bf00      	nop
 800a152:	bf00      	nop
 800a154:	e7fd      	b.n	800a152 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a158:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a15c:	f023 0301 	bic.w	r3, r3, #1
 800a160:	b2da      	uxtb	r2, r3
 800a162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a164:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a168:	e03d      	b.n	800a1e6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a170:	f043 0301 	orr.w	r3, r3, #1
 800a174:	b2da      	uxtb	r2, r3
 800a176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a178:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a180:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10b      	bne.n	800a1a2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	617b      	str	r3, [r7, #20]
}
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	e7fd      	b.n	800a19e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a4:	699a      	ldr	r2, [r3, #24]
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a8:	18d1      	adds	r1, r2, r3
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1b0:	f7ff ff04 	bl	8009fbc <prvInsertTimerInActiveList>
					break;
 800a1b4:	e017      	b.n	800a1e6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1bc:	f003 0302 	and.w	r3, r3, #2
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d103      	bne.n	800a1cc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a1c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1c6:	f000 fc07 	bl	800a9d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a1ca:	e00c      	b.n	800a1e6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1d2:	f023 0301 	bic.w	r3, r3, #1
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a1de:	e002      	b.n	800a1e6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a1e0:	bf00      	nop
 800a1e2:	e000      	b.n	800a1e6 <prvProcessReceivedCommands+0x1a6>
					break;
 800a1e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1e6:	4b08      	ldr	r3, [pc, #32]	@ (800a208 <prvProcessReceivedCommands+0x1c8>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	1d39      	adds	r1, r7, #4
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe f828 	bl	8008244 <xQueueReceive>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f47f af26 	bne.w	800a048 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a1fc:	bf00      	nop
 800a1fe:	bf00      	nop
 800a200:	3730      	adds	r7, #48	@ 0x30
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	200013d8 	.word	0x200013d8

0800a20c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b088      	sub	sp, #32
 800a210:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a212:	e049      	b.n	800a2a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a214:	4b2e      	ldr	r3, [pc, #184]	@ (800a2d0 <prvSwitchTimerLists+0xc4>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a21e:	4b2c      	ldr	r3, [pc, #176]	@ (800a2d0 <prvSwitchTimerLists+0xc4>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	3304      	adds	r3, #4
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fd fb43 	bl	80078b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a240:	f003 0304 	and.w	r3, r3, #4
 800a244:	2b00      	cmp	r3, #0
 800a246:	d02f      	beq.n	800a2a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	4413      	add	r3, r2
 800a250:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	429a      	cmp	r2, r3
 800a258:	d90e      	bls.n	800a278 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a266:	4b1a      	ldr	r3, [pc, #104]	@ (800a2d0 <prvSwitchTimerLists+0xc4>)
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3304      	adds	r3, #4
 800a26e:	4619      	mov	r1, r3
 800a270:	4610      	mov	r0, r2
 800a272:	f7fd fae8 	bl	8007846 <vListInsert>
 800a276:	e017      	b.n	800a2a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a278:	2300      	movs	r3, #0
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	2300      	movs	r3, #0
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	2100      	movs	r1, #0
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f7ff fd58 	bl	8009d38 <xTimerGenericCommand>
 800a288:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10b      	bne.n	800a2a8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	603b      	str	r3, [r7, #0]
}
 800a2a2:	bf00      	nop
 800a2a4:	bf00      	nop
 800a2a6:	e7fd      	b.n	800a2a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2a8:	4b09      	ldr	r3, [pc, #36]	@ (800a2d0 <prvSwitchTimerLists+0xc4>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1b0      	bne.n	800a214 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2b2:	4b07      	ldr	r3, [pc, #28]	@ (800a2d0 <prvSwitchTimerLists+0xc4>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a2b8:	4b06      	ldr	r3, [pc, #24]	@ (800a2d4 <prvSwitchTimerLists+0xc8>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a04      	ldr	r2, [pc, #16]	@ (800a2d0 <prvSwitchTimerLists+0xc4>)
 800a2be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a2c0:	4a04      	ldr	r2, [pc, #16]	@ (800a2d4 <prvSwitchTimerLists+0xc8>)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	6013      	str	r3, [r2, #0]
}
 800a2c6:	bf00      	nop
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	200013d0 	.word	0x200013d0
 800a2d4:	200013d4 	.word	0x200013d4

0800a2d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a2de:	f000 f98b 	bl	800a5f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2e2:	4b15      	ldr	r3, [pc, #84]	@ (800a338 <prvCheckForValidListAndQueue+0x60>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d120      	bne.n	800a32c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a2ea:	4814      	ldr	r0, [pc, #80]	@ (800a33c <prvCheckForValidListAndQueue+0x64>)
 800a2ec:	f7fd fa5a 	bl	80077a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2f0:	4813      	ldr	r0, [pc, #76]	@ (800a340 <prvCheckForValidListAndQueue+0x68>)
 800a2f2:	f7fd fa57 	bl	80077a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2f6:	4b13      	ldr	r3, [pc, #76]	@ (800a344 <prvCheckForValidListAndQueue+0x6c>)
 800a2f8:	4a10      	ldr	r2, [pc, #64]	@ (800a33c <prvCheckForValidListAndQueue+0x64>)
 800a2fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a2fc:	4b12      	ldr	r3, [pc, #72]	@ (800a348 <prvCheckForValidListAndQueue+0x70>)
 800a2fe:	4a10      	ldr	r2, [pc, #64]	@ (800a340 <prvCheckForValidListAndQueue+0x68>)
 800a300:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a302:	2300      	movs	r3, #0
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	4b11      	ldr	r3, [pc, #68]	@ (800a34c <prvCheckForValidListAndQueue+0x74>)
 800a308:	4a11      	ldr	r2, [pc, #68]	@ (800a350 <prvCheckForValidListAndQueue+0x78>)
 800a30a:	2110      	movs	r1, #16
 800a30c:	200a      	movs	r0, #10
 800a30e:	f7fd fb67 	bl	80079e0 <xQueueGenericCreateStatic>
 800a312:	4603      	mov	r3, r0
 800a314:	4a08      	ldr	r2, [pc, #32]	@ (800a338 <prvCheckForValidListAndQueue+0x60>)
 800a316:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a318:	4b07      	ldr	r3, [pc, #28]	@ (800a338 <prvCheckForValidListAndQueue+0x60>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d005      	beq.n	800a32c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a320:	4b05      	ldr	r3, [pc, #20]	@ (800a338 <prvCheckForValidListAndQueue+0x60>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	490b      	ldr	r1, [pc, #44]	@ (800a354 <prvCheckForValidListAndQueue+0x7c>)
 800a326:	4618      	mov	r0, r3
 800a328:	f7fe fb4c 	bl	80089c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a32c:	f000 f996 	bl	800a65c <vPortExitCritical>
}
 800a330:	bf00      	nop
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	200013d8 	.word	0x200013d8
 800a33c:	200013a8 	.word	0x200013a8
 800a340:	200013bc 	.word	0x200013bc
 800a344:	200013d0 	.word	0x200013d0
 800a348:	200013d4 	.word	0x200013d4
 800a34c:	20001484 	.word	0x20001484
 800a350:	200013e4 	.word	0x200013e4
 800a354:	0800f4bc 	.word	0x0800f4bc

0800a358 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10b      	bne.n	800a382 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	60fb      	str	r3, [r7, #12]
}
 800a37c:	bf00      	nop
 800a37e:	bf00      	nop
 800a380:	e7fd      	b.n	800a37e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800a382:	f000 f939 	bl	800a5f8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a38c:	f000 f966 	bl	800a65c <vPortExitCritical>

	return pvReturn;
 800a390:	693b      	ldr	r3, [r7, #16]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
	...

0800a39c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3b04      	subs	r3, #4
 800a3ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a3b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3b04      	subs	r3, #4
 800a3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	f023 0201 	bic.w	r2, r3, #1
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	3b04      	subs	r3, #4
 800a3ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3cc:	4a0c      	ldr	r2, [pc, #48]	@ (800a400 <pxPortInitialiseStack+0x64>)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3b14      	subs	r3, #20
 800a3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3b04      	subs	r3, #4
 800a3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f06f 0202 	mvn.w	r2, #2
 800a3ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3b20      	subs	r3, #32
 800a3f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3714      	adds	r7, #20
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	0800a405 	.word	0x0800a405

0800a404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a40e:	4b13      	ldr	r3, [pc, #76]	@ (800a45c <prvTaskExitError+0x58>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a416:	d00b      	beq.n	800a430 <prvTaskExitError+0x2c>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	60fb      	str	r3, [r7, #12]
}
 800a42a:	bf00      	nop
 800a42c:	bf00      	nop
 800a42e:	e7fd      	b.n	800a42c <prvTaskExitError+0x28>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	60bb      	str	r3, [r7, #8]
}
 800a442:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a444:	bf00      	nop
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d0fc      	beq.n	800a446 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a44c:	bf00      	nop
 800a44e:	bf00      	nop
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	20000010 	.word	0x20000010

0800a460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a460:	4b07      	ldr	r3, [pc, #28]	@ (800a480 <pxCurrentTCBConst2>)
 800a462:	6819      	ldr	r1, [r3, #0]
 800a464:	6808      	ldr	r0, [r1, #0]
 800a466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46a:	f380 8809 	msr	PSP, r0
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f04f 0000 	mov.w	r0, #0
 800a476:	f380 8811 	msr	BASEPRI, r0
 800a47a:	4770      	bx	lr
 800a47c:	f3af 8000 	nop.w

0800a480 <pxCurrentTCBConst2>:
 800a480:	20000ea8 	.word	0x20000ea8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop

0800a488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a488:	4808      	ldr	r0, [pc, #32]	@ (800a4ac <prvPortStartFirstTask+0x24>)
 800a48a:	6800      	ldr	r0, [r0, #0]
 800a48c:	6800      	ldr	r0, [r0, #0]
 800a48e:	f380 8808 	msr	MSP, r0
 800a492:	f04f 0000 	mov.w	r0, #0
 800a496:	f380 8814 	msr	CONTROL, r0
 800a49a:	b662      	cpsie	i
 800a49c:	b661      	cpsie	f
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	df00      	svc	0
 800a4a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a4aa:	bf00      	nop
 800a4ac:	e000ed08 	.word	0xe000ed08

0800a4b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a4b6:	4b47      	ldr	r3, [pc, #284]	@ (800a5d4 <xPortStartScheduler+0x124>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a47      	ldr	r2, [pc, #284]	@ (800a5d8 <xPortStartScheduler+0x128>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d10b      	bne.n	800a4d8 <xPortStartScheduler+0x28>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	613b      	str	r3, [r7, #16]
}
 800a4d2:	bf00      	nop
 800a4d4:	bf00      	nop
 800a4d6:	e7fd      	b.n	800a4d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a4d8:	4b3e      	ldr	r3, [pc, #248]	@ (800a5d4 <xPortStartScheduler+0x124>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a3f      	ldr	r2, [pc, #252]	@ (800a5dc <xPortStartScheduler+0x12c>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d10b      	bne.n	800a4fa <xPortStartScheduler+0x4a>
	__asm volatile
 800a4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	60fb      	str	r3, [r7, #12]
}
 800a4f4:	bf00      	nop
 800a4f6:	bf00      	nop
 800a4f8:	e7fd      	b.n	800a4f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a4fa:	4b39      	ldr	r3, [pc, #228]	@ (800a5e0 <xPortStartScheduler+0x130>)
 800a4fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	b2db      	uxtb	r3, r3
 800a504:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	22ff      	movs	r2, #255	@ 0xff
 800a50a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	b2db      	uxtb	r3, r3
 800a512:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	b2db      	uxtb	r3, r3
 800a518:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	4b31      	ldr	r3, [pc, #196]	@ (800a5e4 <xPortStartScheduler+0x134>)
 800a520:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a522:	4b31      	ldr	r3, [pc, #196]	@ (800a5e8 <xPortStartScheduler+0x138>)
 800a524:	2207      	movs	r2, #7
 800a526:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a528:	e009      	b.n	800a53e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a52a:	4b2f      	ldr	r3, [pc, #188]	@ (800a5e8 <xPortStartScheduler+0x138>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3b01      	subs	r3, #1
 800a530:	4a2d      	ldr	r2, [pc, #180]	@ (800a5e8 <xPortStartScheduler+0x138>)
 800a532:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	b2db      	uxtb	r3, r3
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a53e:	78fb      	ldrb	r3, [r7, #3]
 800a540:	b2db      	uxtb	r3, r3
 800a542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a546:	2b80      	cmp	r3, #128	@ 0x80
 800a548:	d0ef      	beq.n	800a52a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a54a:	4b27      	ldr	r3, [pc, #156]	@ (800a5e8 <xPortStartScheduler+0x138>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f1c3 0307 	rsb	r3, r3, #7
 800a552:	2b04      	cmp	r3, #4
 800a554:	d00b      	beq.n	800a56e <xPortStartScheduler+0xbe>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	60bb      	str	r3, [r7, #8]
}
 800a568:	bf00      	nop
 800a56a:	bf00      	nop
 800a56c:	e7fd      	b.n	800a56a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a56e:	4b1e      	ldr	r3, [pc, #120]	@ (800a5e8 <xPortStartScheduler+0x138>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	021b      	lsls	r3, r3, #8
 800a574:	4a1c      	ldr	r2, [pc, #112]	@ (800a5e8 <xPortStartScheduler+0x138>)
 800a576:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a578:	4b1b      	ldr	r3, [pc, #108]	@ (800a5e8 <xPortStartScheduler+0x138>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a580:	4a19      	ldr	r2, [pc, #100]	@ (800a5e8 <xPortStartScheduler+0x138>)
 800a582:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	b2da      	uxtb	r2, r3
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a58c:	4b17      	ldr	r3, [pc, #92]	@ (800a5ec <xPortStartScheduler+0x13c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a16      	ldr	r2, [pc, #88]	@ (800a5ec <xPortStartScheduler+0x13c>)
 800a592:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a596:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a598:	4b14      	ldr	r3, [pc, #80]	@ (800a5ec <xPortStartScheduler+0x13c>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a13      	ldr	r2, [pc, #76]	@ (800a5ec <xPortStartScheduler+0x13c>)
 800a59e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a5a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a5a4:	f000 f8da 	bl	800a75c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5a8:	4b11      	ldr	r3, [pc, #68]	@ (800a5f0 <xPortStartScheduler+0x140>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a5ae:	f000 f8f9 	bl	800a7a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a5b2:	4b10      	ldr	r3, [pc, #64]	@ (800a5f4 <xPortStartScheduler+0x144>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a5f4 <xPortStartScheduler+0x144>)
 800a5b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a5bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a5be:	f7ff ff63 	bl	800a488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a5c2:	f7fe fe61 	bl	8009288 <vTaskSwitchContext>
	prvTaskExitError();
 800a5c6:	f7ff ff1d 	bl	800a404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3718      	adds	r7, #24
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	e000ed00 	.word	0xe000ed00
 800a5d8:	410fc271 	.word	0x410fc271
 800a5dc:	410fc270 	.word	0x410fc270
 800a5e0:	e000e400 	.word	0xe000e400
 800a5e4:	200014d4 	.word	0x200014d4
 800a5e8:	200014d8 	.word	0x200014d8
 800a5ec:	e000ed20 	.word	0xe000ed20
 800a5f0:	20000010 	.word	0x20000010
 800a5f4:	e000ef34 	.word	0xe000ef34

0800a5f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	607b      	str	r3, [r7, #4]
}
 800a610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a612:	4b10      	ldr	r3, [pc, #64]	@ (800a654 <vPortEnterCritical+0x5c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3301      	adds	r3, #1
 800a618:	4a0e      	ldr	r2, [pc, #56]	@ (800a654 <vPortEnterCritical+0x5c>)
 800a61a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a61c:	4b0d      	ldr	r3, [pc, #52]	@ (800a654 <vPortEnterCritical+0x5c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d110      	bne.n	800a646 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a624:	4b0c      	ldr	r3, [pc, #48]	@ (800a658 <vPortEnterCritical+0x60>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00b      	beq.n	800a646 <vPortEnterCritical+0x4e>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	603b      	str	r3, [r7, #0]
}
 800a640:	bf00      	nop
 800a642:	bf00      	nop
 800a644:	e7fd      	b.n	800a642 <vPortEnterCritical+0x4a>
	}
}
 800a646:	bf00      	nop
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	20000010 	.word	0x20000010
 800a658:	e000ed04 	.word	0xe000ed04

0800a65c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a662:	4b12      	ldr	r3, [pc, #72]	@ (800a6ac <vPortExitCritical+0x50>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10b      	bne.n	800a682 <vPortExitCritical+0x26>
	__asm volatile
 800a66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	607b      	str	r3, [r7, #4]
}
 800a67c:	bf00      	nop
 800a67e:	bf00      	nop
 800a680:	e7fd      	b.n	800a67e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a682:	4b0a      	ldr	r3, [pc, #40]	@ (800a6ac <vPortExitCritical+0x50>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3b01      	subs	r3, #1
 800a688:	4a08      	ldr	r2, [pc, #32]	@ (800a6ac <vPortExitCritical+0x50>)
 800a68a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a68c:	4b07      	ldr	r3, [pc, #28]	@ (800a6ac <vPortExitCritical+0x50>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d105      	bne.n	800a6a0 <vPortExitCritical+0x44>
 800a694:	2300      	movs	r3, #0
 800a696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	f383 8811 	msr	BASEPRI, r3
}
 800a69e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	20000010 	.word	0x20000010

0800a6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a6b0:	f3ef 8009 	mrs	r0, PSP
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	4b15      	ldr	r3, [pc, #84]	@ (800a710 <pxCurrentTCBConst>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	f01e 0f10 	tst.w	lr, #16
 800a6c0:	bf08      	it	eq
 800a6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ca:	6010      	str	r0, [r2, #0]
 800a6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a6d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a6d4:	f380 8811 	msr	BASEPRI, r0
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f7fe fdd2 	bl	8009288 <vTaskSwitchContext>
 800a6e4:	f04f 0000 	mov.w	r0, #0
 800a6e8:	f380 8811 	msr	BASEPRI, r0
 800a6ec:	bc09      	pop	{r0, r3}
 800a6ee:	6819      	ldr	r1, [r3, #0]
 800a6f0:	6808      	ldr	r0, [r1, #0]
 800a6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f6:	f01e 0f10 	tst.w	lr, #16
 800a6fa:	bf08      	it	eq
 800a6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a700:	f380 8809 	msr	PSP, r0
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	f3af 8000 	nop.w

0800a710 <pxCurrentTCBConst>:
 800a710:	20000ea8 	.word	0x20000ea8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a714:	bf00      	nop
 800a716:	bf00      	nop

0800a718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	607b      	str	r3, [r7, #4]
}
 800a730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a732:	f7fe fcef 	bl	8009114 <xTaskIncrementTick>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a73c:	4b06      	ldr	r3, [pc, #24]	@ (800a758 <xPortSysTickHandler+0x40>)
 800a73e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	2300      	movs	r3, #0
 800a746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	f383 8811 	msr	BASEPRI, r3
}
 800a74e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a750:	bf00      	nop
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	e000ed04 	.word	0xe000ed04

0800a75c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a760:	4b0b      	ldr	r3, [pc, #44]	@ (800a790 <vPortSetupTimerInterrupt+0x34>)
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a766:	4b0b      	ldr	r3, [pc, #44]	@ (800a794 <vPortSetupTimerInterrupt+0x38>)
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a76c:	4b0a      	ldr	r3, [pc, #40]	@ (800a798 <vPortSetupTimerInterrupt+0x3c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a0a      	ldr	r2, [pc, #40]	@ (800a79c <vPortSetupTimerInterrupt+0x40>)
 800a772:	fba2 2303 	umull	r2, r3, r2, r3
 800a776:	099b      	lsrs	r3, r3, #6
 800a778:	4a09      	ldr	r2, [pc, #36]	@ (800a7a0 <vPortSetupTimerInterrupt+0x44>)
 800a77a:	3b01      	subs	r3, #1
 800a77c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a77e:	4b04      	ldr	r3, [pc, #16]	@ (800a790 <vPortSetupTimerInterrupt+0x34>)
 800a780:	2207      	movs	r2, #7
 800a782:	601a      	str	r2, [r3, #0]
}
 800a784:	bf00      	nop
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	e000e010 	.word	0xe000e010
 800a794:	e000e018 	.word	0xe000e018
 800a798:	20000004 	.word	0x20000004
 800a79c:	10624dd3 	.word	0x10624dd3
 800a7a0:	e000e014 	.word	0xe000e014

0800a7a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a7b4 <vPortEnableVFP+0x10>
 800a7a8:	6801      	ldr	r1, [r0, #0]
 800a7aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a7ae:	6001      	str	r1, [r0, #0]
 800a7b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a7b2:	bf00      	nop
 800a7b4:	e000ed88 	.word	0xe000ed88

0800a7b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a7be:	f3ef 8305 	mrs	r3, IPSR
 800a7c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b0f      	cmp	r3, #15
 800a7c8:	d915      	bls.n	800a7f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a7ca:	4a18      	ldr	r2, [pc, #96]	@ (800a82c <vPortValidateInterruptPriority+0x74>)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a7d4:	4b16      	ldr	r3, [pc, #88]	@ (800a830 <vPortValidateInterruptPriority+0x78>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	7afa      	ldrb	r2, [r7, #11]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d20b      	bcs.n	800a7f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	607b      	str	r3, [r7, #4]
}
 800a7f0:	bf00      	nop
 800a7f2:	bf00      	nop
 800a7f4:	e7fd      	b.n	800a7f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a7f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a834 <vPortValidateInterruptPriority+0x7c>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a7fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a838 <vPortValidateInterruptPriority+0x80>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	429a      	cmp	r2, r3
 800a804:	d90b      	bls.n	800a81e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	603b      	str	r3, [r7, #0]
}
 800a818:	bf00      	nop
 800a81a:	bf00      	nop
 800a81c:	e7fd      	b.n	800a81a <vPortValidateInterruptPriority+0x62>
	}
 800a81e:	bf00      	nop
 800a820:	3714      	adds	r7, #20
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	e000e3f0 	.word	0xe000e3f0
 800a830:	200014d4 	.word	0x200014d4
 800a834:	e000ed0c 	.word	0xe000ed0c
 800a838:	200014d8 	.word	0x200014d8

0800a83c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08a      	sub	sp, #40	@ 0x28
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a844:	2300      	movs	r3, #0
 800a846:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a848:	f7fe fba8 	bl	8008f9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a84c:	4b5c      	ldr	r3, [pc, #368]	@ (800a9c0 <pvPortMalloc+0x184>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a854:	f000 f924 	bl	800aaa0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a858:	4b5a      	ldr	r3, [pc, #360]	@ (800a9c4 <pvPortMalloc+0x188>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4013      	ands	r3, r2
 800a860:	2b00      	cmp	r3, #0
 800a862:	f040 8095 	bne.w	800a990 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01e      	beq.n	800a8aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a86c:	2208      	movs	r2, #8
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4413      	add	r3, r2
 800a872:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f003 0307 	and.w	r3, r3, #7
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d015      	beq.n	800a8aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f023 0307 	bic.w	r3, r3, #7
 800a884:	3308      	adds	r3, #8
 800a886:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f003 0307 	and.w	r3, r3, #7
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00b      	beq.n	800a8aa <pvPortMalloc+0x6e>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	617b      	str	r3, [r7, #20]
}
 800a8a4:	bf00      	nop
 800a8a6:	bf00      	nop
 800a8a8:	e7fd      	b.n	800a8a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d06f      	beq.n	800a990 <pvPortMalloc+0x154>
 800a8b0:	4b45      	ldr	r3, [pc, #276]	@ (800a9c8 <pvPortMalloc+0x18c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d86a      	bhi.n	800a990 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8ba:	4b44      	ldr	r3, [pc, #272]	@ (800a9cc <pvPortMalloc+0x190>)
 800a8bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8be:	4b43      	ldr	r3, [pc, #268]	@ (800a9cc <pvPortMalloc+0x190>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8c4:	e004      	b.n	800a8d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d903      	bls.n	800a8e2 <pvPortMalloc+0xa6>
 800a8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1f1      	bne.n	800a8c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a8e2:	4b37      	ldr	r3, [pc, #220]	@ (800a9c0 <pvPortMalloc+0x184>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d051      	beq.n	800a990 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2208      	movs	r2, #8
 800a8f2:	4413      	add	r3, r2
 800a8f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	6a3b      	ldr	r3, [r7, #32]
 800a8fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a900:	685a      	ldr	r2, [r3, #4]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	1ad2      	subs	r2, r2, r3
 800a906:	2308      	movs	r3, #8
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d920      	bls.n	800a950 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a90e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4413      	add	r3, r2
 800a914:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	f003 0307 	and.w	r3, r3, #7
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00b      	beq.n	800a938 <pvPortMalloc+0xfc>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	613b      	str	r3, [r7, #16]
}
 800a932:	bf00      	nop
 800a934:	bf00      	nop
 800a936:	e7fd      	b.n	800a934 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	1ad2      	subs	r2, r2, r3
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a94a:	69b8      	ldr	r0, [r7, #24]
 800a94c:	f000 f90a 	bl	800ab64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a950:	4b1d      	ldr	r3, [pc, #116]	@ (800a9c8 <pvPortMalloc+0x18c>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	4a1b      	ldr	r2, [pc, #108]	@ (800a9c8 <pvPortMalloc+0x18c>)
 800a95c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a95e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9c8 <pvPortMalloc+0x18c>)
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	4b1b      	ldr	r3, [pc, #108]	@ (800a9d0 <pvPortMalloc+0x194>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	429a      	cmp	r2, r3
 800a968:	d203      	bcs.n	800a972 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a96a:	4b17      	ldr	r3, [pc, #92]	@ (800a9c8 <pvPortMalloc+0x18c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a18      	ldr	r2, [pc, #96]	@ (800a9d0 <pvPortMalloc+0x194>)
 800a970:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	4b13      	ldr	r3, [pc, #76]	@ (800a9c4 <pvPortMalloc+0x188>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	431a      	orrs	r2, r3
 800a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a982:	2200      	movs	r2, #0
 800a984:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a986:	4b13      	ldr	r3, [pc, #76]	@ (800a9d4 <pvPortMalloc+0x198>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3301      	adds	r3, #1
 800a98c:	4a11      	ldr	r2, [pc, #68]	@ (800a9d4 <pvPortMalloc+0x198>)
 800a98e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a990:	f7fe fb12 	bl	8008fb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	f003 0307 	and.w	r3, r3, #7
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00b      	beq.n	800a9b6 <pvPortMalloc+0x17a>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	60fb      	str	r3, [r7, #12]
}
 800a9b0:	bf00      	nop
 800a9b2:	bf00      	nop
 800a9b4:	e7fd      	b.n	800a9b2 <pvPortMalloc+0x176>
	return pvReturn;
 800a9b6:	69fb      	ldr	r3, [r7, #28]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3728      	adds	r7, #40	@ 0x28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	200050e4 	.word	0x200050e4
 800a9c4:	200050f8 	.word	0x200050f8
 800a9c8:	200050e8 	.word	0x200050e8
 800a9cc:	200050dc 	.word	0x200050dc
 800a9d0:	200050ec 	.word	0x200050ec
 800a9d4:	200050f0 	.word	0x200050f0

0800a9d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d04f      	beq.n	800aa8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a9ea:	2308      	movs	r3, #8
 800a9ec:	425b      	negs	r3, r3
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	4b25      	ldr	r3, [pc, #148]	@ (800aa94 <vPortFree+0xbc>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4013      	ands	r3, r2
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10b      	bne.n	800aa1e <vPortFree+0x46>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	60fb      	str	r3, [r7, #12]
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	e7fd      	b.n	800aa1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00b      	beq.n	800aa3e <vPortFree+0x66>
	__asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	60bb      	str	r3, [r7, #8]
}
 800aa38:	bf00      	nop
 800aa3a:	bf00      	nop
 800aa3c:	e7fd      	b.n	800aa3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	4b14      	ldr	r3, [pc, #80]	@ (800aa94 <vPortFree+0xbc>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4013      	ands	r3, r2
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d01e      	beq.n	800aa8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d11a      	bne.n	800aa8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	4b0e      	ldr	r3, [pc, #56]	@ (800aa94 <vPortFree+0xbc>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	43db      	mvns	r3, r3
 800aa5e:	401a      	ands	r2, r3
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa64:	f7fe fa9a 	bl	8008f9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa98 <vPortFree+0xc0>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4413      	add	r3, r2
 800aa72:	4a09      	ldr	r2, [pc, #36]	@ (800aa98 <vPortFree+0xc0>)
 800aa74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa76:	6938      	ldr	r0, [r7, #16]
 800aa78:	f000 f874 	bl	800ab64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa7c:	4b07      	ldr	r3, [pc, #28]	@ (800aa9c <vPortFree+0xc4>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	3301      	adds	r3, #1
 800aa82:	4a06      	ldr	r2, [pc, #24]	@ (800aa9c <vPortFree+0xc4>)
 800aa84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa86:	f7fe fa97 	bl	8008fb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa8a:	bf00      	nop
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	200050f8 	.word	0x200050f8
 800aa98:	200050e8 	.word	0x200050e8
 800aa9c:	200050f4 	.word	0x200050f4

0800aaa0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aaa6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800aaaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aaac:	4b27      	ldr	r3, [pc, #156]	@ (800ab4c <prvHeapInit+0xac>)
 800aaae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f003 0307 	and.w	r3, r3, #7
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00c      	beq.n	800aad4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	3307      	adds	r3, #7
 800aabe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f023 0307 	bic.w	r3, r3, #7
 800aac6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	4a1f      	ldr	r2, [pc, #124]	@ (800ab4c <prvHeapInit+0xac>)
 800aad0:	4413      	add	r3, r2
 800aad2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aad8:	4a1d      	ldr	r2, [pc, #116]	@ (800ab50 <prvHeapInit+0xb0>)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aade:	4b1c      	ldr	r3, [pc, #112]	@ (800ab50 <prvHeapInit+0xb0>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	4413      	add	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aaec:	2208      	movs	r2, #8
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	1a9b      	subs	r3, r3, r2
 800aaf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f023 0307 	bic.w	r3, r3, #7
 800aafa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	4a15      	ldr	r2, [pc, #84]	@ (800ab54 <prvHeapInit+0xb4>)
 800ab00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab02:	4b14      	ldr	r3, [pc, #80]	@ (800ab54 <prvHeapInit+0xb4>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2200      	movs	r2, #0
 800ab08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab0a:	4b12      	ldr	r3, [pc, #72]	@ (800ab54 <prvHeapInit+0xb4>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	1ad2      	subs	r2, r2, r3
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab20:	4b0c      	ldr	r3, [pc, #48]	@ (800ab54 <prvHeapInit+0xb4>)
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ab58 <prvHeapInit+0xb8>)
 800ab2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	4a09      	ldr	r2, [pc, #36]	@ (800ab5c <prvHeapInit+0xbc>)
 800ab36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab38:	4b09      	ldr	r3, [pc, #36]	@ (800ab60 <prvHeapInit+0xc0>)
 800ab3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ab3e:	601a      	str	r2, [r3, #0]
}
 800ab40:	bf00      	nop
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr
 800ab4c:	200014dc 	.word	0x200014dc
 800ab50:	200050dc 	.word	0x200050dc
 800ab54:	200050e4 	.word	0x200050e4
 800ab58:	200050ec 	.word	0x200050ec
 800ab5c:	200050e8 	.word	0x200050e8
 800ab60:	200050f8 	.word	0x200050f8

0800ab64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab6c:	4b28      	ldr	r3, [pc, #160]	@ (800ac10 <prvInsertBlockIntoFreeList+0xac>)
 800ab6e:	60fb      	str	r3, [r7, #12]
 800ab70:	e002      	b.n	800ab78 <prvInsertBlockIntoFreeList+0x14>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	60fb      	str	r3, [r7, #12]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d8f7      	bhi.n	800ab72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d108      	bne.n	800aba6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	441a      	add	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	441a      	add	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d118      	bne.n	800abec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	4b15      	ldr	r3, [pc, #84]	@ (800ac14 <prvInsertBlockIntoFreeList+0xb0>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d00d      	beq.n	800abe2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	441a      	add	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	e008      	b.n	800abf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800abe2:	4b0c      	ldr	r3, [pc, #48]	@ (800ac14 <prvInsertBlockIntoFreeList+0xb0>)
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	e003      	b.n	800abf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d002      	beq.n	800ac02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac02:	bf00      	nop
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	200050dc 	.word	0x200050dc
 800ac14:	200050e4 	.word	0x200050e4

0800ac18 <__cvt>:
 800ac18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac1c:	ec57 6b10 	vmov	r6, r7, d0
 800ac20:	2f00      	cmp	r7, #0
 800ac22:	460c      	mov	r4, r1
 800ac24:	4619      	mov	r1, r3
 800ac26:	463b      	mov	r3, r7
 800ac28:	bfbb      	ittet	lt
 800ac2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ac2e:	461f      	movlt	r7, r3
 800ac30:	2300      	movge	r3, #0
 800ac32:	232d      	movlt	r3, #45	@ 0x2d
 800ac34:	700b      	strb	r3, [r1, #0]
 800ac36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ac3c:	4691      	mov	r9, r2
 800ac3e:	f023 0820 	bic.w	r8, r3, #32
 800ac42:	bfbc      	itt	lt
 800ac44:	4632      	movlt	r2, r6
 800ac46:	4616      	movlt	r6, r2
 800ac48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac4c:	d005      	beq.n	800ac5a <__cvt+0x42>
 800ac4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ac52:	d100      	bne.n	800ac56 <__cvt+0x3e>
 800ac54:	3401      	adds	r4, #1
 800ac56:	2102      	movs	r1, #2
 800ac58:	e000      	b.n	800ac5c <__cvt+0x44>
 800ac5a:	2103      	movs	r1, #3
 800ac5c:	ab03      	add	r3, sp, #12
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	ab02      	add	r3, sp, #8
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	ec47 6b10 	vmov	d0, r6, r7
 800ac68:	4653      	mov	r3, sl
 800ac6a:	4622      	mov	r2, r4
 800ac6c:	f001 f8d8 	bl	800be20 <_dtoa_r>
 800ac70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ac74:	4605      	mov	r5, r0
 800ac76:	d119      	bne.n	800acac <__cvt+0x94>
 800ac78:	f019 0f01 	tst.w	r9, #1
 800ac7c:	d00e      	beq.n	800ac9c <__cvt+0x84>
 800ac7e:	eb00 0904 	add.w	r9, r0, r4
 800ac82:	2200      	movs	r2, #0
 800ac84:	2300      	movs	r3, #0
 800ac86:	4630      	mov	r0, r6
 800ac88:	4639      	mov	r1, r7
 800ac8a:	f7f5 ff25 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac8e:	b108      	cbz	r0, 800ac94 <__cvt+0x7c>
 800ac90:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac94:	2230      	movs	r2, #48	@ 0x30
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	454b      	cmp	r3, r9
 800ac9a:	d31e      	bcc.n	800acda <__cvt+0xc2>
 800ac9c:	9b03      	ldr	r3, [sp, #12]
 800ac9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aca0:	1b5b      	subs	r3, r3, r5
 800aca2:	4628      	mov	r0, r5
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	b004      	add	sp, #16
 800aca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800acb0:	eb00 0904 	add.w	r9, r0, r4
 800acb4:	d1e5      	bne.n	800ac82 <__cvt+0x6a>
 800acb6:	7803      	ldrb	r3, [r0, #0]
 800acb8:	2b30      	cmp	r3, #48	@ 0x30
 800acba:	d10a      	bne.n	800acd2 <__cvt+0xba>
 800acbc:	2200      	movs	r2, #0
 800acbe:	2300      	movs	r3, #0
 800acc0:	4630      	mov	r0, r6
 800acc2:	4639      	mov	r1, r7
 800acc4:	f7f5 ff08 	bl	8000ad8 <__aeabi_dcmpeq>
 800acc8:	b918      	cbnz	r0, 800acd2 <__cvt+0xba>
 800acca:	f1c4 0401 	rsb	r4, r4, #1
 800acce:	f8ca 4000 	str.w	r4, [sl]
 800acd2:	f8da 3000 	ldr.w	r3, [sl]
 800acd6:	4499      	add	r9, r3
 800acd8:	e7d3      	b.n	800ac82 <__cvt+0x6a>
 800acda:	1c59      	adds	r1, r3, #1
 800acdc:	9103      	str	r1, [sp, #12]
 800acde:	701a      	strb	r2, [r3, #0]
 800ace0:	e7d9      	b.n	800ac96 <__cvt+0x7e>

0800ace2 <__exponent>:
 800ace2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ace4:	2900      	cmp	r1, #0
 800ace6:	bfba      	itte	lt
 800ace8:	4249      	neglt	r1, r1
 800acea:	232d      	movlt	r3, #45	@ 0x2d
 800acec:	232b      	movge	r3, #43	@ 0x2b
 800acee:	2909      	cmp	r1, #9
 800acf0:	7002      	strb	r2, [r0, #0]
 800acf2:	7043      	strb	r3, [r0, #1]
 800acf4:	dd29      	ble.n	800ad4a <__exponent+0x68>
 800acf6:	f10d 0307 	add.w	r3, sp, #7
 800acfa:	461d      	mov	r5, r3
 800acfc:	270a      	movs	r7, #10
 800acfe:	461a      	mov	r2, r3
 800ad00:	fbb1 f6f7 	udiv	r6, r1, r7
 800ad04:	fb07 1416 	mls	r4, r7, r6, r1
 800ad08:	3430      	adds	r4, #48	@ 0x30
 800ad0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ad0e:	460c      	mov	r4, r1
 800ad10:	2c63      	cmp	r4, #99	@ 0x63
 800ad12:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad16:	4631      	mov	r1, r6
 800ad18:	dcf1      	bgt.n	800acfe <__exponent+0x1c>
 800ad1a:	3130      	adds	r1, #48	@ 0x30
 800ad1c:	1e94      	subs	r4, r2, #2
 800ad1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ad22:	1c41      	adds	r1, r0, #1
 800ad24:	4623      	mov	r3, r4
 800ad26:	42ab      	cmp	r3, r5
 800ad28:	d30a      	bcc.n	800ad40 <__exponent+0x5e>
 800ad2a:	f10d 0309 	add.w	r3, sp, #9
 800ad2e:	1a9b      	subs	r3, r3, r2
 800ad30:	42ac      	cmp	r4, r5
 800ad32:	bf88      	it	hi
 800ad34:	2300      	movhi	r3, #0
 800ad36:	3302      	adds	r3, #2
 800ad38:	4403      	add	r3, r0
 800ad3a:	1a18      	subs	r0, r3, r0
 800ad3c:	b003      	add	sp, #12
 800ad3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad40:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ad44:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ad48:	e7ed      	b.n	800ad26 <__exponent+0x44>
 800ad4a:	2330      	movs	r3, #48	@ 0x30
 800ad4c:	3130      	adds	r1, #48	@ 0x30
 800ad4e:	7083      	strb	r3, [r0, #2]
 800ad50:	70c1      	strb	r1, [r0, #3]
 800ad52:	1d03      	adds	r3, r0, #4
 800ad54:	e7f1      	b.n	800ad3a <__exponent+0x58>
	...

0800ad58 <_printf_float>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	b08d      	sub	sp, #52	@ 0x34
 800ad5e:	460c      	mov	r4, r1
 800ad60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ad64:	4616      	mov	r6, r2
 800ad66:	461f      	mov	r7, r3
 800ad68:	4605      	mov	r5, r0
 800ad6a:	f000 feef 	bl	800bb4c <_localeconv_r>
 800ad6e:	6803      	ldr	r3, [r0, #0]
 800ad70:	9304      	str	r3, [sp, #16]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7f5 fa84 	bl	8000280 <strlen>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad7c:	f8d8 3000 	ldr.w	r3, [r8]
 800ad80:	9005      	str	r0, [sp, #20]
 800ad82:	3307      	adds	r3, #7
 800ad84:	f023 0307 	bic.w	r3, r3, #7
 800ad88:	f103 0208 	add.w	r2, r3, #8
 800ad8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ad90:	f8d4 b000 	ldr.w	fp, [r4]
 800ad94:	f8c8 2000 	str.w	r2, [r8]
 800ad98:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ada0:	9307      	str	r3, [sp, #28]
 800ada2:	f8cd 8018 	str.w	r8, [sp, #24]
 800ada6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800adaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adae:	4b9c      	ldr	r3, [pc, #624]	@ (800b020 <_printf_float+0x2c8>)
 800adb0:	f04f 32ff 	mov.w	r2, #4294967295
 800adb4:	f7f5 fec2 	bl	8000b3c <__aeabi_dcmpun>
 800adb8:	bb70      	cbnz	r0, 800ae18 <_printf_float+0xc0>
 800adba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adbe:	4b98      	ldr	r3, [pc, #608]	@ (800b020 <_printf_float+0x2c8>)
 800adc0:	f04f 32ff 	mov.w	r2, #4294967295
 800adc4:	f7f5 fe9c 	bl	8000b00 <__aeabi_dcmple>
 800adc8:	bb30      	cbnz	r0, 800ae18 <_printf_float+0xc0>
 800adca:	2200      	movs	r2, #0
 800adcc:	2300      	movs	r3, #0
 800adce:	4640      	mov	r0, r8
 800add0:	4649      	mov	r1, r9
 800add2:	f7f5 fe8b 	bl	8000aec <__aeabi_dcmplt>
 800add6:	b110      	cbz	r0, 800adde <_printf_float+0x86>
 800add8:	232d      	movs	r3, #45	@ 0x2d
 800adda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adde:	4a91      	ldr	r2, [pc, #580]	@ (800b024 <_printf_float+0x2cc>)
 800ade0:	4b91      	ldr	r3, [pc, #580]	@ (800b028 <_printf_float+0x2d0>)
 800ade2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ade6:	bf94      	ite	ls
 800ade8:	4690      	movls	r8, r2
 800adea:	4698      	movhi	r8, r3
 800adec:	2303      	movs	r3, #3
 800adee:	6123      	str	r3, [r4, #16]
 800adf0:	f02b 0304 	bic.w	r3, fp, #4
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	f04f 0900 	mov.w	r9, #0
 800adfa:	9700      	str	r7, [sp, #0]
 800adfc:	4633      	mov	r3, r6
 800adfe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ae00:	4621      	mov	r1, r4
 800ae02:	4628      	mov	r0, r5
 800ae04:	f000 f9d2 	bl	800b1ac <_printf_common>
 800ae08:	3001      	adds	r0, #1
 800ae0a:	f040 808d 	bne.w	800af28 <_printf_float+0x1d0>
 800ae0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae12:	b00d      	add	sp, #52	@ 0x34
 800ae14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae18:	4642      	mov	r2, r8
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	4640      	mov	r0, r8
 800ae1e:	4649      	mov	r1, r9
 800ae20:	f7f5 fe8c 	bl	8000b3c <__aeabi_dcmpun>
 800ae24:	b140      	cbz	r0, 800ae38 <_printf_float+0xe0>
 800ae26:	464b      	mov	r3, r9
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	bfbc      	itt	lt
 800ae2c:	232d      	movlt	r3, #45	@ 0x2d
 800ae2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ae32:	4a7e      	ldr	r2, [pc, #504]	@ (800b02c <_printf_float+0x2d4>)
 800ae34:	4b7e      	ldr	r3, [pc, #504]	@ (800b030 <_printf_float+0x2d8>)
 800ae36:	e7d4      	b.n	800ade2 <_printf_float+0x8a>
 800ae38:	6863      	ldr	r3, [r4, #4]
 800ae3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ae3e:	9206      	str	r2, [sp, #24]
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	d13b      	bne.n	800aebc <_printf_float+0x164>
 800ae44:	2306      	movs	r3, #6
 800ae46:	6063      	str	r3, [r4, #4]
 800ae48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	6022      	str	r2, [r4, #0]
 800ae50:	9303      	str	r3, [sp, #12]
 800ae52:	ab0a      	add	r3, sp, #40	@ 0x28
 800ae54:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ae58:	ab09      	add	r3, sp, #36	@ 0x24
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	6861      	ldr	r1, [r4, #4]
 800ae5e:	ec49 8b10 	vmov	d0, r8, r9
 800ae62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ae66:	4628      	mov	r0, r5
 800ae68:	f7ff fed6 	bl	800ac18 <__cvt>
 800ae6c:	9b06      	ldr	r3, [sp, #24]
 800ae6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae70:	2b47      	cmp	r3, #71	@ 0x47
 800ae72:	4680      	mov	r8, r0
 800ae74:	d129      	bne.n	800aeca <_printf_float+0x172>
 800ae76:	1cc8      	adds	r0, r1, #3
 800ae78:	db02      	blt.n	800ae80 <_printf_float+0x128>
 800ae7a:	6863      	ldr	r3, [r4, #4]
 800ae7c:	4299      	cmp	r1, r3
 800ae7e:	dd41      	ble.n	800af04 <_printf_float+0x1ac>
 800ae80:	f1aa 0a02 	sub.w	sl, sl, #2
 800ae84:	fa5f fa8a 	uxtb.w	sl, sl
 800ae88:	3901      	subs	r1, #1
 800ae8a:	4652      	mov	r2, sl
 800ae8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ae90:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae92:	f7ff ff26 	bl	800ace2 <__exponent>
 800ae96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae98:	1813      	adds	r3, r2, r0
 800ae9a:	2a01      	cmp	r2, #1
 800ae9c:	4681      	mov	r9, r0
 800ae9e:	6123      	str	r3, [r4, #16]
 800aea0:	dc02      	bgt.n	800aea8 <_printf_float+0x150>
 800aea2:	6822      	ldr	r2, [r4, #0]
 800aea4:	07d2      	lsls	r2, r2, #31
 800aea6:	d501      	bpl.n	800aeac <_printf_float+0x154>
 800aea8:	3301      	adds	r3, #1
 800aeaa:	6123      	str	r3, [r4, #16]
 800aeac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d0a2      	beq.n	800adfa <_printf_float+0xa2>
 800aeb4:	232d      	movs	r3, #45	@ 0x2d
 800aeb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aeba:	e79e      	b.n	800adfa <_printf_float+0xa2>
 800aebc:	9a06      	ldr	r2, [sp, #24]
 800aebe:	2a47      	cmp	r2, #71	@ 0x47
 800aec0:	d1c2      	bne.n	800ae48 <_printf_float+0xf0>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1c0      	bne.n	800ae48 <_printf_float+0xf0>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e7bd      	b.n	800ae46 <_printf_float+0xee>
 800aeca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aece:	d9db      	bls.n	800ae88 <_printf_float+0x130>
 800aed0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aed4:	d118      	bne.n	800af08 <_printf_float+0x1b0>
 800aed6:	2900      	cmp	r1, #0
 800aed8:	6863      	ldr	r3, [r4, #4]
 800aeda:	dd0b      	ble.n	800aef4 <_printf_float+0x19c>
 800aedc:	6121      	str	r1, [r4, #16]
 800aede:	b913      	cbnz	r3, 800aee6 <_printf_float+0x18e>
 800aee0:	6822      	ldr	r2, [r4, #0]
 800aee2:	07d0      	lsls	r0, r2, #31
 800aee4:	d502      	bpl.n	800aeec <_printf_float+0x194>
 800aee6:	3301      	adds	r3, #1
 800aee8:	440b      	add	r3, r1
 800aeea:	6123      	str	r3, [r4, #16]
 800aeec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aeee:	f04f 0900 	mov.w	r9, #0
 800aef2:	e7db      	b.n	800aeac <_printf_float+0x154>
 800aef4:	b913      	cbnz	r3, 800aefc <_printf_float+0x1a4>
 800aef6:	6822      	ldr	r2, [r4, #0]
 800aef8:	07d2      	lsls	r2, r2, #31
 800aefa:	d501      	bpl.n	800af00 <_printf_float+0x1a8>
 800aefc:	3302      	adds	r3, #2
 800aefe:	e7f4      	b.n	800aeea <_printf_float+0x192>
 800af00:	2301      	movs	r3, #1
 800af02:	e7f2      	b.n	800aeea <_printf_float+0x192>
 800af04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800af08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af0a:	4299      	cmp	r1, r3
 800af0c:	db05      	blt.n	800af1a <_printf_float+0x1c2>
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	6121      	str	r1, [r4, #16]
 800af12:	07d8      	lsls	r0, r3, #31
 800af14:	d5ea      	bpl.n	800aeec <_printf_float+0x194>
 800af16:	1c4b      	adds	r3, r1, #1
 800af18:	e7e7      	b.n	800aeea <_printf_float+0x192>
 800af1a:	2900      	cmp	r1, #0
 800af1c:	bfd4      	ite	le
 800af1e:	f1c1 0202 	rsble	r2, r1, #2
 800af22:	2201      	movgt	r2, #1
 800af24:	4413      	add	r3, r2
 800af26:	e7e0      	b.n	800aeea <_printf_float+0x192>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	055a      	lsls	r2, r3, #21
 800af2c:	d407      	bmi.n	800af3e <_printf_float+0x1e6>
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	4642      	mov	r2, r8
 800af32:	4631      	mov	r1, r6
 800af34:	4628      	mov	r0, r5
 800af36:	47b8      	blx	r7
 800af38:	3001      	adds	r0, #1
 800af3a:	d12b      	bne.n	800af94 <_printf_float+0x23c>
 800af3c:	e767      	b.n	800ae0e <_printf_float+0xb6>
 800af3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af42:	f240 80dd 	bls.w	800b100 <_printf_float+0x3a8>
 800af46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af4a:	2200      	movs	r2, #0
 800af4c:	2300      	movs	r3, #0
 800af4e:	f7f5 fdc3 	bl	8000ad8 <__aeabi_dcmpeq>
 800af52:	2800      	cmp	r0, #0
 800af54:	d033      	beq.n	800afbe <_printf_float+0x266>
 800af56:	4a37      	ldr	r2, [pc, #220]	@ (800b034 <_printf_float+0x2dc>)
 800af58:	2301      	movs	r3, #1
 800af5a:	4631      	mov	r1, r6
 800af5c:	4628      	mov	r0, r5
 800af5e:	47b8      	blx	r7
 800af60:	3001      	adds	r0, #1
 800af62:	f43f af54 	beq.w	800ae0e <_printf_float+0xb6>
 800af66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800af6a:	4543      	cmp	r3, r8
 800af6c:	db02      	blt.n	800af74 <_printf_float+0x21c>
 800af6e:	6823      	ldr	r3, [r4, #0]
 800af70:	07d8      	lsls	r0, r3, #31
 800af72:	d50f      	bpl.n	800af94 <_printf_float+0x23c>
 800af74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af78:	4631      	mov	r1, r6
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b8      	blx	r7
 800af7e:	3001      	adds	r0, #1
 800af80:	f43f af45 	beq.w	800ae0e <_printf_float+0xb6>
 800af84:	f04f 0900 	mov.w	r9, #0
 800af88:	f108 38ff 	add.w	r8, r8, #4294967295
 800af8c:	f104 0a1a 	add.w	sl, r4, #26
 800af90:	45c8      	cmp	r8, r9
 800af92:	dc09      	bgt.n	800afa8 <_printf_float+0x250>
 800af94:	6823      	ldr	r3, [r4, #0]
 800af96:	079b      	lsls	r3, r3, #30
 800af98:	f100 8103 	bmi.w	800b1a2 <_printf_float+0x44a>
 800af9c:	68e0      	ldr	r0, [r4, #12]
 800af9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afa0:	4298      	cmp	r0, r3
 800afa2:	bfb8      	it	lt
 800afa4:	4618      	movlt	r0, r3
 800afa6:	e734      	b.n	800ae12 <_printf_float+0xba>
 800afa8:	2301      	movs	r3, #1
 800afaa:	4652      	mov	r2, sl
 800afac:	4631      	mov	r1, r6
 800afae:	4628      	mov	r0, r5
 800afb0:	47b8      	blx	r7
 800afb2:	3001      	adds	r0, #1
 800afb4:	f43f af2b 	beq.w	800ae0e <_printf_float+0xb6>
 800afb8:	f109 0901 	add.w	r9, r9, #1
 800afbc:	e7e8      	b.n	800af90 <_printf_float+0x238>
 800afbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	dc39      	bgt.n	800b038 <_printf_float+0x2e0>
 800afc4:	4a1b      	ldr	r2, [pc, #108]	@ (800b034 <_printf_float+0x2dc>)
 800afc6:	2301      	movs	r3, #1
 800afc8:	4631      	mov	r1, r6
 800afca:	4628      	mov	r0, r5
 800afcc:	47b8      	blx	r7
 800afce:	3001      	adds	r0, #1
 800afd0:	f43f af1d 	beq.w	800ae0e <_printf_float+0xb6>
 800afd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800afd8:	ea59 0303 	orrs.w	r3, r9, r3
 800afdc:	d102      	bne.n	800afe4 <_printf_float+0x28c>
 800afde:	6823      	ldr	r3, [r4, #0]
 800afe0:	07d9      	lsls	r1, r3, #31
 800afe2:	d5d7      	bpl.n	800af94 <_printf_float+0x23c>
 800afe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afe8:	4631      	mov	r1, r6
 800afea:	4628      	mov	r0, r5
 800afec:	47b8      	blx	r7
 800afee:	3001      	adds	r0, #1
 800aff0:	f43f af0d 	beq.w	800ae0e <_printf_float+0xb6>
 800aff4:	f04f 0a00 	mov.w	sl, #0
 800aff8:	f104 0b1a 	add.w	fp, r4, #26
 800affc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800affe:	425b      	negs	r3, r3
 800b000:	4553      	cmp	r3, sl
 800b002:	dc01      	bgt.n	800b008 <_printf_float+0x2b0>
 800b004:	464b      	mov	r3, r9
 800b006:	e793      	b.n	800af30 <_printf_float+0x1d8>
 800b008:	2301      	movs	r3, #1
 800b00a:	465a      	mov	r2, fp
 800b00c:	4631      	mov	r1, r6
 800b00e:	4628      	mov	r0, r5
 800b010:	47b8      	blx	r7
 800b012:	3001      	adds	r0, #1
 800b014:	f43f aefb 	beq.w	800ae0e <_printf_float+0xb6>
 800b018:	f10a 0a01 	add.w	sl, sl, #1
 800b01c:	e7ee      	b.n	800affc <_printf_float+0x2a4>
 800b01e:	bf00      	nop
 800b020:	7fefffff 	.word	0x7fefffff
 800b024:	0800f7f0 	.word	0x0800f7f0
 800b028:	0800f7f4 	.word	0x0800f7f4
 800b02c:	0800f7f8 	.word	0x0800f7f8
 800b030:	0800f7fc 	.word	0x0800f7fc
 800b034:	0800f800 	.word	0x0800f800
 800b038:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b03a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b03e:	4553      	cmp	r3, sl
 800b040:	bfa8      	it	ge
 800b042:	4653      	movge	r3, sl
 800b044:	2b00      	cmp	r3, #0
 800b046:	4699      	mov	r9, r3
 800b048:	dc36      	bgt.n	800b0b8 <_printf_float+0x360>
 800b04a:	f04f 0b00 	mov.w	fp, #0
 800b04e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b052:	f104 021a 	add.w	r2, r4, #26
 800b056:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b058:	9306      	str	r3, [sp, #24]
 800b05a:	eba3 0309 	sub.w	r3, r3, r9
 800b05e:	455b      	cmp	r3, fp
 800b060:	dc31      	bgt.n	800b0c6 <_printf_float+0x36e>
 800b062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b064:	459a      	cmp	sl, r3
 800b066:	dc3a      	bgt.n	800b0de <_printf_float+0x386>
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	07da      	lsls	r2, r3, #31
 800b06c:	d437      	bmi.n	800b0de <_printf_float+0x386>
 800b06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b070:	ebaa 0903 	sub.w	r9, sl, r3
 800b074:	9b06      	ldr	r3, [sp, #24]
 800b076:	ebaa 0303 	sub.w	r3, sl, r3
 800b07a:	4599      	cmp	r9, r3
 800b07c:	bfa8      	it	ge
 800b07e:	4699      	movge	r9, r3
 800b080:	f1b9 0f00 	cmp.w	r9, #0
 800b084:	dc33      	bgt.n	800b0ee <_printf_float+0x396>
 800b086:	f04f 0800 	mov.w	r8, #0
 800b08a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b08e:	f104 0b1a 	add.w	fp, r4, #26
 800b092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b094:	ebaa 0303 	sub.w	r3, sl, r3
 800b098:	eba3 0309 	sub.w	r3, r3, r9
 800b09c:	4543      	cmp	r3, r8
 800b09e:	f77f af79 	ble.w	800af94 <_printf_float+0x23c>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	465a      	mov	r2, fp
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	47b8      	blx	r7
 800b0ac:	3001      	adds	r0, #1
 800b0ae:	f43f aeae 	beq.w	800ae0e <_printf_float+0xb6>
 800b0b2:	f108 0801 	add.w	r8, r8, #1
 800b0b6:	e7ec      	b.n	800b092 <_printf_float+0x33a>
 800b0b8:	4642      	mov	r2, r8
 800b0ba:	4631      	mov	r1, r6
 800b0bc:	4628      	mov	r0, r5
 800b0be:	47b8      	blx	r7
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	d1c2      	bne.n	800b04a <_printf_float+0x2f2>
 800b0c4:	e6a3      	b.n	800ae0e <_printf_float+0xb6>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	9206      	str	r2, [sp, #24]
 800b0ce:	47b8      	blx	r7
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	f43f ae9c 	beq.w	800ae0e <_printf_float+0xb6>
 800b0d6:	9a06      	ldr	r2, [sp, #24]
 800b0d8:	f10b 0b01 	add.w	fp, fp, #1
 800b0dc:	e7bb      	b.n	800b056 <_printf_float+0x2fe>
 800b0de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	47b8      	blx	r7
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	d1c0      	bne.n	800b06e <_printf_float+0x316>
 800b0ec:	e68f      	b.n	800ae0e <_printf_float+0xb6>
 800b0ee:	9a06      	ldr	r2, [sp, #24]
 800b0f0:	464b      	mov	r3, r9
 800b0f2:	4442      	add	r2, r8
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	47b8      	blx	r7
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	d1c3      	bne.n	800b086 <_printf_float+0x32e>
 800b0fe:	e686      	b.n	800ae0e <_printf_float+0xb6>
 800b100:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b104:	f1ba 0f01 	cmp.w	sl, #1
 800b108:	dc01      	bgt.n	800b10e <_printf_float+0x3b6>
 800b10a:	07db      	lsls	r3, r3, #31
 800b10c:	d536      	bpl.n	800b17c <_printf_float+0x424>
 800b10e:	2301      	movs	r3, #1
 800b110:	4642      	mov	r2, r8
 800b112:	4631      	mov	r1, r6
 800b114:	4628      	mov	r0, r5
 800b116:	47b8      	blx	r7
 800b118:	3001      	adds	r0, #1
 800b11a:	f43f ae78 	beq.w	800ae0e <_printf_float+0xb6>
 800b11e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b122:	4631      	mov	r1, r6
 800b124:	4628      	mov	r0, r5
 800b126:	47b8      	blx	r7
 800b128:	3001      	adds	r0, #1
 800b12a:	f43f ae70 	beq.w	800ae0e <_printf_float+0xb6>
 800b12e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b132:	2200      	movs	r2, #0
 800b134:	2300      	movs	r3, #0
 800b136:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b13a:	f7f5 fccd 	bl	8000ad8 <__aeabi_dcmpeq>
 800b13e:	b9c0      	cbnz	r0, 800b172 <_printf_float+0x41a>
 800b140:	4653      	mov	r3, sl
 800b142:	f108 0201 	add.w	r2, r8, #1
 800b146:	4631      	mov	r1, r6
 800b148:	4628      	mov	r0, r5
 800b14a:	47b8      	blx	r7
 800b14c:	3001      	adds	r0, #1
 800b14e:	d10c      	bne.n	800b16a <_printf_float+0x412>
 800b150:	e65d      	b.n	800ae0e <_printf_float+0xb6>
 800b152:	2301      	movs	r3, #1
 800b154:	465a      	mov	r2, fp
 800b156:	4631      	mov	r1, r6
 800b158:	4628      	mov	r0, r5
 800b15a:	47b8      	blx	r7
 800b15c:	3001      	adds	r0, #1
 800b15e:	f43f ae56 	beq.w	800ae0e <_printf_float+0xb6>
 800b162:	f108 0801 	add.w	r8, r8, #1
 800b166:	45d0      	cmp	r8, sl
 800b168:	dbf3      	blt.n	800b152 <_printf_float+0x3fa>
 800b16a:	464b      	mov	r3, r9
 800b16c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b170:	e6df      	b.n	800af32 <_printf_float+0x1da>
 800b172:	f04f 0800 	mov.w	r8, #0
 800b176:	f104 0b1a 	add.w	fp, r4, #26
 800b17a:	e7f4      	b.n	800b166 <_printf_float+0x40e>
 800b17c:	2301      	movs	r3, #1
 800b17e:	4642      	mov	r2, r8
 800b180:	e7e1      	b.n	800b146 <_printf_float+0x3ee>
 800b182:	2301      	movs	r3, #1
 800b184:	464a      	mov	r2, r9
 800b186:	4631      	mov	r1, r6
 800b188:	4628      	mov	r0, r5
 800b18a:	47b8      	blx	r7
 800b18c:	3001      	adds	r0, #1
 800b18e:	f43f ae3e 	beq.w	800ae0e <_printf_float+0xb6>
 800b192:	f108 0801 	add.w	r8, r8, #1
 800b196:	68e3      	ldr	r3, [r4, #12]
 800b198:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b19a:	1a5b      	subs	r3, r3, r1
 800b19c:	4543      	cmp	r3, r8
 800b19e:	dcf0      	bgt.n	800b182 <_printf_float+0x42a>
 800b1a0:	e6fc      	b.n	800af9c <_printf_float+0x244>
 800b1a2:	f04f 0800 	mov.w	r8, #0
 800b1a6:	f104 0919 	add.w	r9, r4, #25
 800b1aa:	e7f4      	b.n	800b196 <_printf_float+0x43e>

0800b1ac <_printf_common>:
 800b1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b0:	4616      	mov	r6, r2
 800b1b2:	4698      	mov	r8, r3
 800b1b4:	688a      	ldr	r2, [r1, #8]
 800b1b6:	690b      	ldr	r3, [r1, #16]
 800b1b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	bfb8      	it	lt
 800b1c0:	4613      	movlt	r3, r2
 800b1c2:	6033      	str	r3, [r6, #0]
 800b1c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b1c8:	4607      	mov	r7, r0
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	b10a      	cbz	r2, 800b1d2 <_printf_common+0x26>
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	6033      	str	r3, [r6, #0]
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	0699      	lsls	r1, r3, #26
 800b1d6:	bf42      	ittt	mi
 800b1d8:	6833      	ldrmi	r3, [r6, #0]
 800b1da:	3302      	addmi	r3, #2
 800b1dc:	6033      	strmi	r3, [r6, #0]
 800b1de:	6825      	ldr	r5, [r4, #0]
 800b1e0:	f015 0506 	ands.w	r5, r5, #6
 800b1e4:	d106      	bne.n	800b1f4 <_printf_common+0x48>
 800b1e6:	f104 0a19 	add.w	sl, r4, #25
 800b1ea:	68e3      	ldr	r3, [r4, #12]
 800b1ec:	6832      	ldr	r2, [r6, #0]
 800b1ee:	1a9b      	subs	r3, r3, r2
 800b1f0:	42ab      	cmp	r3, r5
 800b1f2:	dc26      	bgt.n	800b242 <_printf_common+0x96>
 800b1f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b1f8:	6822      	ldr	r2, [r4, #0]
 800b1fa:	3b00      	subs	r3, #0
 800b1fc:	bf18      	it	ne
 800b1fe:	2301      	movne	r3, #1
 800b200:	0692      	lsls	r2, r2, #26
 800b202:	d42b      	bmi.n	800b25c <_printf_common+0xb0>
 800b204:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b208:	4641      	mov	r1, r8
 800b20a:	4638      	mov	r0, r7
 800b20c:	47c8      	blx	r9
 800b20e:	3001      	adds	r0, #1
 800b210:	d01e      	beq.n	800b250 <_printf_common+0xa4>
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	6922      	ldr	r2, [r4, #16]
 800b216:	f003 0306 	and.w	r3, r3, #6
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	bf02      	ittt	eq
 800b21e:	68e5      	ldreq	r5, [r4, #12]
 800b220:	6833      	ldreq	r3, [r6, #0]
 800b222:	1aed      	subeq	r5, r5, r3
 800b224:	68a3      	ldr	r3, [r4, #8]
 800b226:	bf0c      	ite	eq
 800b228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b22c:	2500      	movne	r5, #0
 800b22e:	4293      	cmp	r3, r2
 800b230:	bfc4      	itt	gt
 800b232:	1a9b      	subgt	r3, r3, r2
 800b234:	18ed      	addgt	r5, r5, r3
 800b236:	2600      	movs	r6, #0
 800b238:	341a      	adds	r4, #26
 800b23a:	42b5      	cmp	r5, r6
 800b23c:	d11a      	bne.n	800b274 <_printf_common+0xc8>
 800b23e:	2000      	movs	r0, #0
 800b240:	e008      	b.n	800b254 <_printf_common+0xa8>
 800b242:	2301      	movs	r3, #1
 800b244:	4652      	mov	r2, sl
 800b246:	4641      	mov	r1, r8
 800b248:	4638      	mov	r0, r7
 800b24a:	47c8      	blx	r9
 800b24c:	3001      	adds	r0, #1
 800b24e:	d103      	bne.n	800b258 <_printf_common+0xac>
 800b250:	f04f 30ff 	mov.w	r0, #4294967295
 800b254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b258:	3501      	adds	r5, #1
 800b25a:	e7c6      	b.n	800b1ea <_printf_common+0x3e>
 800b25c:	18e1      	adds	r1, r4, r3
 800b25e:	1c5a      	adds	r2, r3, #1
 800b260:	2030      	movs	r0, #48	@ 0x30
 800b262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b266:	4422      	add	r2, r4
 800b268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b26c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b270:	3302      	adds	r3, #2
 800b272:	e7c7      	b.n	800b204 <_printf_common+0x58>
 800b274:	2301      	movs	r3, #1
 800b276:	4622      	mov	r2, r4
 800b278:	4641      	mov	r1, r8
 800b27a:	4638      	mov	r0, r7
 800b27c:	47c8      	blx	r9
 800b27e:	3001      	adds	r0, #1
 800b280:	d0e6      	beq.n	800b250 <_printf_common+0xa4>
 800b282:	3601      	adds	r6, #1
 800b284:	e7d9      	b.n	800b23a <_printf_common+0x8e>
	...

0800b288 <_printf_i>:
 800b288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b28c:	7e0f      	ldrb	r7, [r1, #24]
 800b28e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b290:	2f78      	cmp	r7, #120	@ 0x78
 800b292:	4691      	mov	r9, r2
 800b294:	4680      	mov	r8, r0
 800b296:	460c      	mov	r4, r1
 800b298:	469a      	mov	sl, r3
 800b29a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b29e:	d807      	bhi.n	800b2b0 <_printf_i+0x28>
 800b2a0:	2f62      	cmp	r7, #98	@ 0x62
 800b2a2:	d80a      	bhi.n	800b2ba <_printf_i+0x32>
 800b2a4:	2f00      	cmp	r7, #0
 800b2a6:	f000 80d2 	beq.w	800b44e <_printf_i+0x1c6>
 800b2aa:	2f58      	cmp	r7, #88	@ 0x58
 800b2ac:	f000 80b9 	beq.w	800b422 <_printf_i+0x19a>
 800b2b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b2b8:	e03a      	b.n	800b330 <_printf_i+0xa8>
 800b2ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b2be:	2b15      	cmp	r3, #21
 800b2c0:	d8f6      	bhi.n	800b2b0 <_printf_i+0x28>
 800b2c2:	a101      	add	r1, pc, #4	@ (adr r1, 800b2c8 <_printf_i+0x40>)
 800b2c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2c8:	0800b321 	.word	0x0800b321
 800b2cc:	0800b335 	.word	0x0800b335
 800b2d0:	0800b2b1 	.word	0x0800b2b1
 800b2d4:	0800b2b1 	.word	0x0800b2b1
 800b2d8:	0800b2b1 	.word	0x0800b2b1
 800b2dc:	0800b2b1 	.word	0x0800b2b1
 800b2e0:	0800b335 	.word	0x0800b335
 800b2e4:	0800b2b1 	.word	0x0800b2b1
 800b2e8:	0800b2b1 	.word	0x0800b2b1
 800b2ec:	0800b2b1 	.word	0x0800b2b1
 800b2f0:	0800b2b1 	.word	0x0800b2b1
 800b2f4:	0800b435 	.word	0x0800b435
 800b2f8:	0800b35f 	.word	0x0800b35f
 800b2fc:	0800b3ef 	.word	0x0800b3ef
 800b300:	0800b2b1 	.word	0x0800b2b1
 800b304:	0800b2b1 	.word	0x0800b2b1
 800b308:	0800b457 	.word	0x0800b457
 800b30c:	0800b2b1 	.word	0x0800b2b1
 800b310:	0800b35f 	.word	0x0800b35f
 800b314:	0800b2b1 	.word	0x0800b2b1
 800b318:	0800b2b1 	.word	0x0800b2b1
 800b31c:	0800b3f7 	.word	0x0800b3f7
 800b320:	6833      	ldr	r3, [r6, #0]
 800b322:	1d1a      	adds	r2, r3, #4
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	6032      	str	r2, [r6, #0]
 800b328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b32c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b330:	2301      	movs	r3, #1
 800b332:	e09d      	b.n	800b470 <_printf_i+0x1e8>
 800b334:	6833      	ldr	r3, [r6, #0]
 800b336:	6820      	ldr	r0, [r4, #0]
 800b338:	1d19      	adds	r1, r3, #4
 800b33a:	6031      	str	r1, [r6, #0]
 800b33c:	0606      	lsls	r6, r0, #24
 800b33e:	d501      	bpl.n	800b344 <_printf_i+0xbc>
 800b340:	681d      	ldr	r5, [r3, #0]
 800b342:	e003      	b.n	800b34c <_printf_i+0xc4>
 800b344:	0645      	lsls	r5, r0, #25
 800b346:	d5fb      	bpl.n	800b340 <_printf_i+0xb8>
 800b348:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b34c:	2d00      	cmp	r5, #0
 800b34e:	da03      	bge.n	800b358 <_printf_i+0xd0>
 800b350:	232d      	movs	r3, #45	@ 0x2d
 800b352:	426d      	negs	r5, r5
 800b354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b358:	4859      	ldr	r0, [pc, #356]	@ (800b4c0 <_printf_i+0x238>)
 800b35a:	230a      	movs	r3, #10
 800b35c:	e011      	b.n	800b382 <_printf_i+0xfa>
 800b35e:	6821      	ldr	r1, [r4, #0]
 800b360:	6833      	ldr	r3, [r6, #0]
 800b362:	0608      	lsls	r0, r1, #24
 800b364:	f853 5b04 	ldr.w	r5, [r3], #4
 800b368:	d402      	bmi.n	800b370 <_printf_i+0xe8>
 800b36a:	0649      	lsls	r1, r1, #25
 800b36c:	bf48      	it	mi
 800b36e:	b2ad      	uxthmi	r5, r5
 800b370:	2f6f      	cmp	r7, #111	@ 0x6f
 800b372:	4853      	ldr	r0, [pc, #332]	@ (800b4c0 <_printf_i+0x238>)
 800b374:	6033      	str	r3, [r6, #0]
 800b376:	bf14      	ite	ne
 800b378:	230a      	movne	r3, #10
 800b37a:	2308      	moveq	r3, #8
 800b37c:	2100      	movs	r1, #0
 800b37e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b382:	6866      	ldr	r6, [r4, #4]
 800b384:	60a6      	str	r6, [r4, #8]
 800b386:	2e00      	cmp	r6, #0
 800b388:	bfa2      	ittt	ge
 800b38a:	6821      	ldrge	r1, [r4, #0]
 800b38c:	f021 0104 	bicge.w	r1, r1, #4
 800b390:	6021      	strge	r1, [r4, #0]
 800b392:	b90d      	cbnz	r5, 800b398 <_printf_i+0x110>
 800b394:	2e00      	cmp	r6, #0
 800b396:	d04b      	beq.n	800b430 <_printf_i+0x1a8>
 800b398:	4616      	mov	r6, r2
 800b39a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b39e:	fb03 5711 	mls	r7, r3, r1, r5
 800b3a2:	5dc7      	ldrb	r7, [r0, r7]
 800b3a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3a8:	462f      	mov	r7, r5
 800b3aa:	42bb      	cmp	r3, r7
 800b3ac:	460d      	mov	r5, r1
 800b3ae:	d9f4      	bls.n	800b39a <_printf_i+0x112>
 800b3b0:	2b08      	cmp	r3, #8
 800b3b2:	d10b      	bne.n	800b3cc <_printf_i+0x144>
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	07df      	lsls	r7, r3, #31
 800b3b8:	d508      	bpl.n	800b3cc <_printf_i+0x144>
 800b3ba:	6923      	ldr	r3, [r4, #16]
 800b3bc:	6861      	ldr	r1, [r4, #4]
 800b3be:	4299      	cmp	r1, r3
 800b3c0:	bfde      	ittt	le
 800b3c2:	2330      	movle	r3, #48	@ 0x30
 800b3c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b3c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b3cc:	1b92      	subs	r2, r2, r6
 800b3ce:	6122      	str	r2, [r4, #16]
 800b3d0:	f8cd a000 	str.w	sl, [sp]
 800b3d4:	464b      	mov	r3, r9
 800b3d6:	aa03      	add	r2, sp, #12
 800b3d8:	4621      	mov	r1, r4
 800b3da:	4640      	mov	r0, r8
 800b3dc:	f7ff fee6 	bl	800b1ac <_printf_common>
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	d14a      	bne.n	800b47a <_printf_i+0x1f2>
 800b3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e8:	b004      	add	sp, #16
 800b3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	f043 0320 	orr.w	r3, r3, #32
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	4833      	ldr	r0, [pc, #204]	@ (800b4c4 <_printf_i+0x23c>)
 800b3f8:	2778      	movs	r7, #120	@ 0x78
 800b3fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	6831      	ldr	r1, [r6, #0]
 800b402:	061f      	lsls	r7, r3, #24
 800b404:	f851 5b04 	ldr.w	r5, [r1], #4
 800b408:	d402      	bmi.n	800b410 <_printf_i+0x188>
 800b40a:	065f      	lsls	r7, r3, #25
 800b40c:	bf48      	it	mi
 800b40e:	b2ad      	uxthmi	r5, r5
 800b410:	6031      	str	r1, [r6, #0]
 800b412:	07d9      	lsls	r1, r3, #31
 800b414:	bf44      	itt	mi
 800b416:	f043 0320 	orrmi.w	r3, r3, #32
 800b41a:	6023      	strmi	r3, [r4, #0]
 800b41c:	b11d      	cbz	r5, 800b426 <_printf_i+0x19e>
 800b41e:	2310      	movs	r3, #16
 800b420:	e7ac      	b.n	800b37c <_printf_i+0xf4>
 800b422:	4827      	ldr	r0, [pc, #156]	@ (800b4c0 <_printf_i+0x238>)
 800b424:	e7e9      	b.n	800b3fa <_printf_i+0x172>
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	f023 0320 	bic.w	r3, r3, #32
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	e7f6      	b.n	800b41e <_printf_i+0x196>
 800b430:	4616      	mov	r6, r2
 800b432:	e7bd      	b.n	800b3b0 <_printf_i+0x128>
 800b434:	6833      	ldr	r3, [r6, #0]
 800b436:	6825      	ldr	r5, [r4, #0]
 800b438:	6961      	ldr	r1, [r4, #20]
 800b43a:	1d18      	adds	r0, r3, #4
 800b43c:	6030      	str	r0, [r6, #0]
 800b43e:	062e      	lsls	r6, r5, #24
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	d501      	bpl.n	800b448 <_printf_i+0x1c0>
 800b444:	6019      	str	r1, [r3, #0]
 800b446:	e002      	b.n	800b44e <_printf_i+0x1c6>
 800b448:	0668      	lsls	r0, r5, #25
 800b44a:	d5fb      	bpl.n	800b444 <_printf_i+0x1bc>
 800b44c:	8019      	strh	r1, [r3, #0]
 800b44e:	2300      	movs	r3, #0
 800b450:	6123      	str	r3, [r4, #16]
 800b452:	4616      	mov	r6, r2
 800b454:	e7bc      	b.n	800b3d0 <_printf_i+0x148>
 800b456:	6833      	ldr	r3, [r6, #0]
 800b458:	1d1a      	adds	r2, r3, #4
 800b45a:	6032      	str	r2, [r6, #0]
 800b45c:	681e      	ldr	r6, [r3, #0]
 800b45e:	6862      	ldr	r2, [r4, #4]
 800b460:	2100      	movs	r1, #0
 800b462:	4630      	mov	r0, r6
 800b464:	f7f4 febc 	bl	80001e0 <memchr>
 800b468:	b108      	cbz	r0, 800b46e <_printf_i+0x1e6>
 800b46a:	1b80      	subs	r0, r0, r6
 800b46c:	6060      	str	r0, [r4, #4]
 800b46e:	6863      	ldr	r3, [r4, #4]
 800b470:	6123      	str	r3, [r4, #16]
 800b472:	2300      	movs	r3, #0
 800b474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b478:	e7aa      	b.n	800b3d0 <_printf_i+0x148>
 800b47a:	6923      	ldr	r3, [r4, #16]
 800b47c:	4632      	mov	r2, r6
 800b47e:	4649      	mov	r1, r9
 800b480:	4640      	mov	r0, r8
 800b482:	47d0      	blx	sl
 800b484:	3001      	adds	r0, #1
 800b486:	d0ad      	beq.n	800b3e4 <_printf_i+0x15c>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	079b      	lsls	r3, r3, #30
 800b48c:	d413      	bmi.n	800b4b6 <_printf_i+0x22e>
 800b48e:	68e0      	ldr	r0, [r4, #12]
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	4298      	cmp	r0, r3
 800b494:	bfb8      	it	lt
 800b496:	4618      	movlt	r0, r3
 800b498:	e7a6      	b.n	800b3e8 <_printf_i+0x160>
 800b49a:	2301      	movs	r3, #1
 800b49c:	4632      	mov	r2, r6
 800b49e:	4649      	mov	r1, r9
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	47d0      	blx	sl
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	d09d      	beq.n	800b3e4 <_printf_i+0x15c>
 800b4a8:	3501      	adds	r5, #1
 800b4aa:	68e3      	ldr	r3, [r4, #12]
 800b4ac:	9903      	ldr	r1, [sp, #12]
 800b4ae:	1a5b      	subs	r3, r3, r1
 800b4b0:	42ab      	cmp	r3, r5
 800b4b2:	dcf2      	bgt.n	800b49a <_printf_i+0x212>
 800b4b4:	e7eb      	b.n	800b48e <_printf_i+0x206>
 800b4b6:	2500      	movs	r5, #0
 800b4b8:	f104 0619 	add.w	r6, r4, #25
 800b4bc:	e7f5      	b.n	800b4aa <_printf_i+0x222>
 800b4be:	bf00      	nop
 800b4c0:	0800f802 	.word	0x0800f802
 800b4c4:	0800f813 	.word	0x0800f813

0800b4c8 <_scanf_float>:
 800b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4cc:	b087      	sub	sp, #28
 800b4ce:	4617      	mov	r7, r2
 800b4d0:	9303      	str	r3, [sp, #12]
 800b4d2:	688b      	ldr	r3, [r1, #8]
 800b4d4:	1e5a      	subs	r2, r3, #1
 800b4d6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b4da:	bf81      	itttt	hi
 800b4dc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b4e0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b4e4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b4e8:	608b      	strhi	r3, [r1, #8]
 800b4ea:	680b      	ldr	r3, [r1, #0]
 800b4ec:	460a      	mov	r2, r1
 800b4ee:	f04f 0500 	mov.w	r5, #0
 800b4f2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b4f6:	f842 3b1c 	str.w	r3, [r2], #28
 800b4fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b4fe:	4680      	mov	r8, r0
 800b500:	460c      	mov	r4, r1
 800b502:	bf98      	it	ls
 800b504:	f04f 0b00 	movls.w	fp, #0
 800b508:	9201      	str	r2, [sp, #4]
 800b50a:	4616      	mov	r6, r2
 800b50c:	46aa      	mov	sl, r5
 800b50e:	46a9      	mov	r9, r5
 800b510:	9502      	str	r5, [sp, #8]
 800b512:	68a2      	ldr	r2, [r4, #8]
 800b514:	b152      	cbz	r2, 800b52c <_scanf_float+0x64>
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b51c:	d864      	bhi.n	800b5e8 <_scanf_float+0x120>
 800b51e:	2b40      	cmp	r3, #64	@ 0x40
 800b520:	d83c      	bhi.n	800b59c <_scanf_float+0xd4>
 800b522:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b526:	b2c8      	uxtb	r0, r1
 800b528:	280e      	cmp	r0, #14
 800b52a:	d93a      	bls.n	800b5a2 <_scanf_float+0xda>
 800b52c:	f1b9 0f00 	cmp.w	r9, #0
 800b530:	d003      	beq.n	800b53a <_scanf_float+0x72>
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b53e:	f1ba 0f01 	cmp.w	sl, #1
 800b542:	f200 8117 	bhi.w	800b774 <_scanf_float+0x2ac>
 800b546:	9b01      	ldr	r3, [sp, #4]
 800b548:	429e      	cmp	r6, r3
 800b54a:	f200 8108 	bhi.w	800b75e <_scanf_float+0x296>
 800b54e:	2001      	movs	r0, #1
 800b550:	b007      	add	sp, #28
 800b552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b556:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b55a:	2a0d      	cmp	r2, #13
 800b55c:	d8e6      	bhi.n	800b52c <_scanf_float+0x64>
 800b55e:	a101      	add	r1, pc, #4	@ (adr r1, 800b564 <_scanf_float+0x9c>)
 800b560:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b564:	0800b6ab 	.word	0x0800b6ab
 800b568:	0800b52d 	.word	0x0800b52d
 800b56c:	0800b52d 	.word	0x0800b52d
 800b570:	0800b52d 	.word	0x0800b52d
 800b574:	0800b70b 	.word	0x0800b70b
 800b578:	0800b6e3 	.word	0x0800b6e3
 800b57c:	0800b52d 	.word	0x0800b52d
 800b580:	0800b52d 	.word	0x0800b52d
 800b584:	0800b6b9 	.word	0x0800b6b9
 800b588:	0800b52d 	.word	0x0800b52d
 800b58c:	0800b52d 	.word	0x0800b52d
 800b590:	0800b52d 	.word	0x0800b52d
 800b594:	0800b52d 	.word	0x0800b52d
 800b598:	0800b671 	.word	0x0800b671
 800b59c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b5a0:	e7db      	b.n	800b55a <_scanf_float+0x92>
 800b5a2:	290e      	cmp	r1, #14
 800b5a4:	d8c2      	bhi.n	800b52c <_scanf_float+0x64>
 800b5a6:	a001      	add	r0, pc, #4	@ (adr r0, 800b5ac <_scanf_float+0xe4>)
 800b5a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b5ac:	0800b661 	.word	0x0800b661
 800b5b0:	0800b52d 	.word	0x0800b52d
 800b5b4:	0800b661 	.word	0x0800b661
 800b5b8:	0800b6f7 	.word	0x0800b6f7
 800b5bc:	0800b52d 	.word	0x0800b52d
 800b5c0:	0800b609 	.word	0x0800b609
 800b5c4:	0800b647 	.word	0x0800b647
 800b5c8:	0800b647 	.word	0x0800b647
 800b5cc:	0800b647 	.word	0x0800b647
 800b5d0:	0800b647 	.word	0x0800b647
 800b5d4:	0800b647 	.word	0x0800b647
 800b5d8:	0800b647 	.word	0x0800b647
 800b5dc:	0800b647 	.word	0x0800b647
 800b5e0:	0800b647 	.word	0x0800b647
 800b5e4:	0800b647 	.word	0x0800b647
 800b5e8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b5ea:	d809      	bhi.n	800b600 <_scanf_float+0x138>
 800b5ec:	2b60      	cmp	r3, #96	@ 0x60
 800b5ee:	d8b2      	bhi.n	800b556 <_scanf_float+0x8e>
 800b5f0:	2b54      	cmp	r3, #84	@ 0x54
 800b5f2:	d07b      	beq.n	800b6ec <_scanf_float+0x224>
 800b5f4:	2b59      	cmp	r3, #89	@ 0x59
 800b5f6:	d199      	bne.n	800b52c <_scanf_float+0x64>
 800b5f8:	2d07      	cmp	r5, #7
 800b5fa:	d197      	bne.n	800b52c <_scanf_float+0x64>
 800b5fc:	2508      	movs	r5, #8
 800b5fe:	e02c      	b.n	800b65a <_scanf_float+0x192>
 800b600:	2b74      	cmp	r3, #116	@ 0x74
 800b602:	d073      	beq.n	800b6ec <_scanf_float+0x224>
 800b604:	2b79      	cmp	r3, #121	@ 0x79
 800b606:	e7f6      	b.n	800b5f6 <_scanf_float+0x12e>
 800b608:	6821      	ldr	r1, [r4, #0]
 800b60a:	05c8      	lsls	r0, r1, #23
 800b60c:	d51b      	bpl.n	800b646 <_scanf_float+0x17e>
 800b60e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b612:	6021      	str	r1, [r4, #0]
 800b614:	f109 0901 	add.w	r9, r9, #1
 800b618:	f1bb 0f00 	cmp.w	fp, #0
 800b61c:	d003      	beq.n	800b626 <_scanf_float+0x15e>
 800b61e:	3201      	adds	r2, #1
 800b620:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b624:	60a2      	str	r2, [r4, #8]
 800b626:	68a3      	ldr	r3, [r4, #8]
 800b628:	3b01      	subs	r3, #1
 800b62a:	60a3      	str	r3, [r4, #8]
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	3301      	adds	r3, #1
 800b630:	6123      	str	r3, [r4, #16]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3b01      	subs	r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	607b      	str	r3, [r7, #4]
 800b63a:	f340 8087 	ble.w	800b74c <_scanf_float+0x284>
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	3301      	adds	r3, #1
 800b642:	603b      	str	r3, [r7, #0]
 800b644:	e765      	b.n	800b512 <_scanf_float+0x4a>
 800b646:	eb1a 0105 	adds.w	r1, sl, r5
 800b64a:	f47f af6f 	bne.w	800b52c <_scanf_float+0x64>
 800b64e:	6822      	ldr	r2, [r4, #0]
 800b650:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b654:	6022      	str	r2, [r4, #0]
 800b656:	460d      	mov	r5, r1
 800b658:	468a      	mov	sl, r1
 800b65a:	f806 3b01 	strb.w	r3, [r6], #1
 800b65e:	e7e2      	b.n	800b626 <_scanf_float+0x15e>
 800b660:	6822      	ldr	r2, [r4, #0]
 800b662:	0610      	lsls	r0, r2, #24
 800b664:	f57f af62 	bpl.w	800b52c <_scanf_float+0x64>
 800b668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b66c:	6022      	str	r2, [r4, #0]
 800b66e:	e7f4      	b.n	800b65a <_scanf_float+0x192>
 800b670:	f1ba 0f00 	cmp.w	sl, #0
 800b674:	d10e      	bne.n	800b694 <_scanf_float+0x1cc>
 800b676:	f1b9 0f00 	cmp.w	r9, #0
 800b67a:	d10e      	bne.n	800b69a <_scanf_float+0x1d2>
 800b67c:	6822      	ldr	r2, [r4, #0]
 800b67e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b682:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b686:	d108      	bne.n	800b69a <_scanf_float+0x1d2>
 800b688:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b68c:	6022      	str	r2, [r4, #0]
 800b68e:	f04f 0a01 	mov.w	sl, #1
 800b692:	e7e2      	b.n	800b65a <_scanf_float+0x192>
 800b694:	f1ba 0f02 	cmp.w	sl, #2
 800b698:	d055      	beq.n	800b746 <_scanf_float+0x27e>
 800b69a:	2d01      	cmp	r5, #1
 800b69c:	d002      	beq.n	800b6a4 <_scanf_float+0x1dc>
 800b69e:	2d04      	cmp	r5, #4
 800b6a0:	f47f af44 	bne.w	800b52c <_scanf_float+0x64>
 800b6a4:	3501      	adds	r5, #1
 800b6a6:	b2ed      	uxtb	r5, r5
 800b6a8:	e7d7      	b.n	800b65a <_scanf_float+0x192>
 800b6aa:	f1ba 0f01 	cmp.w	sl, #1
 800b6ae:	f47f af3d 	bne.w	800b52c <_scanf_float+0x64>
 800b6b2:	f04f 0a02 	mov.w	sl, #2
 800b6b6:	e7d0      	b.n	800b65a <_scanf_float+0x192>
 800b6b8:	b97d      	cbnz	r5, 800b6da <_scanf_float+0x212>
 800b6ba:	f1b9 0f00 	cmp.w	r9, #0
 800b6be:	f47f af38 	bne.w	800b532 <_scanf_float+0x6a>
 800b6c2:	6822      	ldr	r2, [r4, #0]
 800b6c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b6c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b6cc:	f040 8108 	bne.w	800b8e0 <_scanf_float+0x418>
 800b6d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b6d4:	6022      	str	r2, [r4, #0]
 800b6d6:	2501      	movs	r5, #1
 800b6d8:	e7bf      	b.n	800b65a <_scanf_float+0x192>
 800b6da:	2d03      	cmp	r5, #3
 800b6dc:	d0e2      	beq.n	800b6a4 <_scanf_float+0x1dc>
 800b6de:	2d05      	cmp	r5, #5
 800b6e0:	e7de      	b.n	800b6a0 <_scanf_float+0x1d8>
 800b6e2:	2d02      	cmp	r5, #2
 800b6e4:	f47f af22 	bne.w	800b52c <_scanf_float+0x64>
 800b6e8:	2503      	movs	r5, #3
 800b6ea:	e7b6      	b.n	800b65a <_scanf_float+0x192>
 800b6ec:	2d06      	cmp	r5, #6
 800b6ee:	f47f af1d 	bne.w	800b52c <_scanf_float+0x64>
 800b6f2:	2507      	movs	r5, #7
 800b6f4:	e7b1      	b.n	800b65a <_scanf_float+0x192>
 800b6f6:	6822      	ldr	r2, [r4, #0]
 800b6f8:	0591      	lsls	r1, r2, #22
 800b6fa:	f57f af17 	bpl.w	800b52c <_scanf_float+0x64>
 800b6fe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b702:	6022      	str	r2, [r4, #0]
 800b704:	f8cd 9008 	str.w	r9, [sp, #8]
 800b708:	e7a7      	b.n	800b65a <_scanf_float+0x192>
 800b70a:	6822      	ldr	r2, [r4, #0]
 800b70c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b710:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b714:	d006      	beq.n	800b724 <_scanf_float+0x25c>
 800b716:	0550      	lsls	r0, r2, #21
 800b718:	f57f af08 	bpl.w	800b52c <_scanf_float+0x64>
 800b71c:	f1b9 0f00 	cmp.w	r9, #0
 800b720:	f000 80de 	beq.w	800b8e0 <_scanf_float+0x418>
 800b724:	0591      	lsls	r1, r2, #22
 800b726:	bf58      	it	pl
 800b728:	9902      	ldrpl	r1, [sp, #8]
 800b72a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b72e:	bf58      	it	pl
 800b730:	eba9 0101 	subpl.w	r1, r9, r1
 800b734:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b738:	bf58      	it	pl
 800b73a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b73e:	6022      	str	r2, [r4, #0]
 800b740:	f04f 0900 	mov.w	r9, #0
 800b744:	e789      	b.n	800b65a <_scanf_float+0x192>
 800b746:	f04f 0a03 	mov.w	sl, #3
 800b74a:	e786      	b.n	800b65a <_scanf_float+0x192>
 800b74c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b750:	4639      	mov	r1, r7
 800b752:	4640      	mov	r0, r8
 800b754:	4798      	blx	r3
 800b756:	2800      	cmp	r0, #0
 800b758:	f43f aedb 	beq.w	800b512 <_scanf_float+0x4a>
 800b75c:	e6e6      	b.n	800b52c <_scanf_float+0x64>
 800b75e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b762:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b766:	463a      	mov	r2, r7
 800b768:	4640      	mov	r0, r8
 800b76a:	4798      	blx	r3
 800b76c:	6923      	ldr	r3, [r4, #16]
 800b76e:	3b01      	subs	r3, #1
 800b770:	6123      	str	r3, [r4, #16]
 800b772:	e6e8      	b.n	800b546 <_scanf_float+0x7e>
 800b774:	1e6b      	subs	r3, r5, #1
 800b776:	2b06      	cmp	r3, #6
 800b778:	d824      	bhi.n	800b7c4 <_scanf_float+0x2fc>
 800b77a:	2d02      	cmp	r5, #2
 800b77c:	d836      	bhi.n	800b7ec <_scanf_float+0x324>
 800b77e:	9b01      	ldr	r3, [sp, #4]
 800b780:	429e      	cmp	r6, r3
 800b782:	f67f aee4 	bls.w	800b54e <_scanf_float+0x86>
 800b786:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b78a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b78e:	463a      	mov	r2, r7
 800b790:	4640      	mov	r0, r8
 800b792:	4798      	blx	r3
 800b794:	6923      	ldr	r3, [r4, #16]
 800b796:	3b01      	subs	r3, #1
 800b798:	6123      	str	r3, [r4, #16]
 800b79a:	e7f0      	b.n	800b77e <_scanf_float+0x2b6>
 800b79c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b7a4:	463a      	mov	r2, r7
 800b7a6:	4640      	mov	r0, r8
 800b7a8:	4798      	blx	r3
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	6123      	str	r3, [r4, #16]
 800b7b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7b4:	fa5f fa8a 	uxtb.w	sl, sl
 800b7b8:	f1ba 0f02 	cmp.w	sl, #2
 800b7bc:	d1ee      	bne.n	800b79c <_scanf_float+0x2d4>
 800b7be:	3d03      	subs	r5, #3
 800b7c0:	b2ed      	uxtb	r5, r5
 800b7c2:	1b76      	subs	r6, r6, r5
 800b7c4:	6823      	ldr	r3, [r4, #0]
 800b7c6:	05da      	lsls	r2, r3, #23
 800b7c8:	d530      	bpl.n	800b82c <_scanf_float+0x364>
 800b7ca:	055b      	lsls	r3, r3, #21
 800b7cc:	d511      	bpl.n	800b7f2 <_scanf_float+0x32a>
 800b7ce:	9b01      	ldr	r3, [sp, #4]
 800b7d0:	429e      	cmp	r6, r3
 800b7d2:	f67f aebc 	bls.w	800b54e <_scanf_float+0x86>
 800b7d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7de:	463a      	mov	r2, r7
 800b7e0:	4640      	mov	r0, r8
 800b7e2:	4798      	blx	r3
 800b7e4:	6923      	ldr	r3, [r4, #16]
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	6123      	str	r3, [r4, #16]
 800b7ea:	e7f0      	b.n	800b7ce <_scanf_float+0x306>
 800b7ec:	46aa      	mov	sl, r5
 800b7ee:	46b3      	mov	fp, r6
 800b7f0:	e7de      	b.n	800b7b0 <_scanf_float+0x2e8>
 800b7f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b7f6:	6923      	ldr	r3, [r4, #16]
 800b7f8:	2965      	cmp	r1, #101	@ 0x65
 800b7fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7fe:	f106 35ff 	add.w	r5, r6, #4294967295
 800b802:	6123      	str	r3, [r4, #16]
 800b804:	d00c      	beq.n	800b820 <_scanf_float+0x358>
 800b806:	2945      	cmp	r1, #69	@ 0x45
 800b808:	d00a      	beq.n	800b820 <_scanf_float+0x358>
 800b80a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b80e:	463a      	mov	r2, r7
 800b810:	4640      	mov	r0, r8
 800b812:	4798      	blx	r3
 800b814:	6923      	ldr	r3, [r4, #16]
 800b816:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	1eb5      	subs	r5, r6, #2
 800b81e:	6123      	str	r3, [r4, #16]
 800b820:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b824:	463a      	mov	r2, r7
 800b826:	4640      	mov	r0, r8
 800b828:	4798      	blx	r3
 800b82a:	462e      	mov	r6, r5
 800b82c:	6822      	ldr	r2, [r4, #0]
 800b82e:	f012 0210 	ands.w	r2, r2, #16
 800b832:	d001      	beq.n	800b838 <_scanf_float+0x370>
 800b834:	2000      	movs	r0, #0
 800b836:	e68b      	b.n	800b550 <_scanf_float+0x88>
 800b838:	7032      	strb	r2, [r6, #0]
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b844:	d11c      	bne.n	800b880 <_scanf_float+0x3b8>
 800b846:	9b02      	ldr	r3, [sp, #8]
 800b848:	454b      	cmp	r3, r9
 800b84a:	eba3 0209 	sub.w	r2, r3, r9
 800b84e:	d123      	bne.n	800b898 <_scanf_float+0x3d0>
 800b850:	9901      	ldr	r1, [sp, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	4640      	mov	r0, r8
 800b856:	f002 fc5b 	bl	800e110 <_strtod_r>
 800b85a:	9b03      	ldr	r3, [sp, #12]
 800b85c:	6821      	ldr	r1, [r4, #0]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f011 0f02 	tst.w	r1, #2
 800b864:	ec57 6b10 	vmov	r6, r7, d0
 800b868:	f103 0204 	add.w	r2, r3, #4
 800b86c:	d01f      	beq.n	800b8ae <_scanf_float+0x3e6>
 800b86e:	9903      	ldr	r1, [sp, #12]
 800b870:	600a      	str	r2, [r1, #0]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	e9c3 6700 	strd	r6, r7, [r3]
 800b878:	68e3      	ldr	r3, [r4, #12]
 800b87a:	3301      	adds	r3, #1
 800b87c:	60e3      	str	r3, [r4, #12]
 800b87e:	e7d9      	b.n	800b834 <_scanf_float+0x36c>
 800b880:	9b04      	ldr	r3, [sp, #16]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d0e4      	beq.n	800b850 <_scanf_float+0x388>
 800b886:	9905      	ldr	r1, [sp, #20]
 800b888:	230a      	movs	r3, #10
 800b88a:	3101      	adds	r1, #1
 800b88c:	4640      	mov	r0, r8
 800b88e:	f002 fcbf 	bl	800e210 <_strtol_r>
 800b892:	9b04      	ldr	r3, [sp, #16]
 800b894:	9e05      	ldr	r6, [sp, #20]
 800b896:	1ac2      	subs	r2, r0, r3
 800b898:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b89c:	429e      	cmp	r6, r3
 800b89e:	bf28      	it	cs
 800b8a0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b8a4:	4910      	ldr	r1, [pc, #64]	@ (800b8e8 <_scanf_float+0x420>)
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f000 f8e4 	bl	800ba74 <siprintf>
 800b8ac:	e7d0      	b.n	800b850 <_scanf_float+0x388>
 800b8ae:	f011 0f04 	tst.w	r1, #4
 800b8b2:	9903      	ldr	r1, [sp, #12]
 800b8b4:	600a      	str	r2, [r1, #0]
 800b8b6:	d1dc      	bne.n	800b872 <_scanf_float+0x3aa>
 800b8b8:	681d      	ldr	r5, [r3, #0]
 800b8ba:	4632      	mov	r2, r6
 800b8bc:	463b      	mov	r3, r7
 800b8be:	4630      	mov	r0, r6
 800b8c0:	4639      	mov	r1, r7
 800b8c2:	f7f5 f93b 	bl	8000b3c <__aeabi_dcmpun>
 800b8c6:	b128      	cbz	r0, 800b8d4 <_scanf_float+0x40c>
 800b8c8:	4808      	ldr	r0, [pc, #32]	@ (800b8ec <_scanf_float+0x424>)
 800b8ca:	f000 fa1b 	bl	800bd04 <nanf>
 800b8ce:	ed85 0a00 	vstr	s0, [r5]
 800b8d2:	e7d1      	b.n	800b878 <_scanf_float+0x3b0>
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	4639      	mov	r1, r7
 800b8d8:	f7f5 f98e 	bl	8000bf8 <__aeabi_d2f>
 800b8dc:	6028      	str	r0, [r5, #0]
 800b8de:	e7cb      	b.n	800b878 <_scanf_float+0x3b0>
 800b8e0:	f04f 0900 	mov.w	r9, #0
 800b8e4:	e629      	b.n	800b53a <_scanf_float+0x72>
 800b8e6:	bf00      	nop
 800b8e8:	0800f824 	.word	0x0800f824
 800b8ec:	0800fbbd 	.word	0x0800fbbd

0800b8f0 <std>:
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	b510      	push	{r4, lr}
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	e9c0 3300 	strd	r3, r3, [r0]
 800b8fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8fe:	6083      	str	r3, [r0, #8]
 800b900:	8181      	strh	r1, [r0, #12]
 800b902:	6643      	str	r3, [r0, #100]	@ 0x64
 800b904:	81c2      	strh	r2, [r0, #14]
 800b906:	6183      	str	r3, [r0, #24]
 800b908:	4619      	mov	r1, r3
 800b90a:	2208      	movs	r2, #8
 800b90c:	305c      	adds	r0, #92	@ 0x5c
 800b90e:	f000 f914 	bl	800bb3a <memset>
 800b912:	4b0d      	ldr	r3, [pc, #52]	@ (800b948 <std+0x58>)
 800b914:	6263      	str	r3, [r4, #36]	@ 0x24
 800b916:	4b0d      	ldr	r3, [pc, #52]	@ (800b94c <std+0x5c>)
 800b918:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b91a:	4b0d      	ldr	r3, [pc, #52]	@ (800b950 <std+0x60>)
 800b91c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b91e:	4b0d      	ldr	r3, [pc, #52]	@ (800b954 <std+0x64>)
 800b920:	6323      	str	r3, [r4, #48]	@ 0x30
 800b922:	4b0d      	ldr	r3, [pc, #52]	@ (800b958 <std+0x68>)
 800b924:	6224      	str	r4, [r4, #32]
 800b926:	429c      	cmp	r4, r3
 800b928:	d006      	beq.n	800b938 <std+0x48>
 800b92a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b92e:	4294      	cmp	r4, r2
 800b930:	d002      	beq.n	800b938 <std+0x48>
 800b932:	33d0      	adds	r3, #208	@ 0xd0
 800b934:	429c      	cmp	r4, r3
 800b936:	d105      	bne.n	800b944 <std+0x54>
 800b938:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b940:	f000 b9ce 	b.w	800bce0 <__retarget_lock_init_recursive>
 800b944:	bd10      	pop	{r4, pc}
 800b946:	bf00      	nop
 800b948:	0800bab5 	.word	0x0800bab5
 800b94c:	0800bad7 	.word	0x0800bad7
 800b950:	0800bb0f 	.word	0x0800bb0f
 800b954:	0800bb33 	.word	0x0800bb33
 800b958:	200050fc 	.word	0x200050fc

0800b95c <stdio_exit_handler>:
 800b95c:	4a02      	ldr	r2, [pc, #8]	@ (800b968 <stdio_exit_handler+0xc>)
 800b95e:	4903      	ldr	r1, [pc, #12]	@ (800b96c <stdio_exit_handler+0x10>)
 800b960:	4803      	ldr	r0, [pc, #12]	@ (800b970 <stdio_exit_handler+0x14>)
 800b962:	f000 b869 	b.w	800ba38 <_fwalk_sglue>
 800b966:	bf00      	nop
 800b968:	20000014 	.word	0x20000014
 800b96c:	0800e5cd 	.word	0x0800e5cd
 800b970:	20000024 	.word	0x20000024

0800b974 <cleanup_stdio>:
 800b974:	6841      	ldr	r1, [r0, #4]
 800b976:	4b0c      	ldr	r3, [pc, #48]	@ (800b9a8 <cleanup_stdio+0x34>)
 800b978:	4299      	cmp	r1, r3
 800b97a:	b510      	push	{r4, lr}
 800b97c:	4604      	mov	r4, r0
 800b97e:	d001      	beq.n	800b984 <cleanup_stdio+0x10>
 800b980:	f002 fe24 	bl	800e5cc <_fflush_r>
 800b984:	68a1      	ldr	r1, [r4, #8]
 800b986:	4b09      	ldr	r3, [pc, #36]	@ (800b9ac <cleanup_stdio+0x38>)
 800b988:	4299      	cmp	r1, r3
 800b98a:	d002      	beq.n	800b992 <cleanup_stdio+0x1e>
 800b98c:	4620      	mov	r0, r4
 800b98e:	f002 fe1d 	bl	800e5cc <_fflush_r>
 800b992:	68e1      	ldr	r1, [r4, #12]
 800b994:	4b06      	ldr	r3, [pc, #24]	@ (800b9b0 <cleanup_stdio+0x3c>)
 800b996:	4299      	cmp	r1, r3
 800b998:	d004      	beq.n	800b9a4 <cleanup_stdio+0x30>
 800b99a:	4620      	mov	r0, r4
 800b99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9a0:	f002 be14 	b.w	800e5cc <_fflush_r>
 800b9a4:	bd10      	pop	{r4, pc}
 800b9a6:	bf00      	nop
 800b9a8:	200050fc 	.word	0x200050fc
 800b9ac:	20005164 	.word	0x20005164
 800b9b0:	200051cc 	.word	0x200051cc

0800b9b4 <global_stdio_init.part.0>:
 800b9b4:	b510      	push	{r4, lr}
 800b9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b9e4 <global_stdio_init.part.0+0x30>)
 800b9b8:	4c0b      	ldr	r4, [pc, #44]	@ (800b9e8 <global_stdio_init.part.0+0x34>)
 800b9ba:	4a0c      	ldr	r2, [pc, #48]	@ (800b9ec <global_stdio_init.part.0+0x38>)
 800b9bc:	601a      	str	r2, [r3, #0]
 800b9be:	4620      	mov	r0, r4
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2104      	movs	r1, #4
 800b9c4:	f7ff ff94 	bl	800b8f0 <std>
 800b9c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	2109      	movs	r1, #9
 800b9d0:	f7ff ff8e 	bl	800b8f0 <std>
 800b9d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b9d8:	2202      	movs	r2, #2
 800b9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9de:	2112      	movs	r1, #18
 800b9e0:	f7ff bf86 	b.w	800b8f0 <std>
 800b9e4:	20005234 	.word	0x20005234
 800b9e8:	200050fc 	.word	0x200050fc
 800b9ec:	0800b95d 	.word	0x0800b95d

0800b9f0 <__sfp_lock_acquire>:
 800b9f0:	4801      	ldr	r0, [pc, #4]	@ (800b9f8 <__sfp_lock_acquire+0x8>)
 800b9f2:	f000 b976 	b.w	800bce2 <__retarget_lock_acquire_recursive>
 800b9f6:	bf00      	nop
 800b9f8:	2000523d 	.word	0x2000523d

0800b9fc <__sfp_lock_release>:
 800b9fc:	4801      	ldr	r0, [pc, #4]	@ (800ba04 <__sfp_lock_release+0x8>)
 800b9fe:	f000 b971 	b.w	800bce4 <__retarget_lock_release_recursive>
 800ba02:	bf00      	nop
 800ba04:	2000523d 	.word	0x2000523d

0800ba08 <__sinit>:
 800ba08:	b510      	push	{r4, lr}
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	f7ff fff0 	bl	800b9f0 <__sfp_lock_acquire>
 800ba10:	6a23      	ldr	r3, [r4, #32]
 800ba12:	b11b      	cbz	r3, 800ba1c <__sinit+0x14>
 800ba14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba18:	f7ff bff0 	b.w	800b9fc <__sfp_lock_release>
 800ba1c:	4b04      	ldr	r3, [pc, #16]	@ (800ba30 <__sinit+0x28>)
 800ba1e:	6223      	str	r3, [r4, #32]
 800ba20:	4b04      	ldr	r3, [pc, #16]	@ (800ba34 <__sinit+0x2c>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1f5      	bne.n	800ba14 <__sinit+0xc>
 800ba28:	f7ff ffc4 	bl	800b9b4 <global_stdio_init.part.0>
 800ba2c:	e7f2      	b.n	800ba14 <__sinit+0xc>
 800ba2e:	bf00      	nop
 800ba30:	0800b975 	.word	0x0800b975
 800ba34:	20005234 	.word	0x20005234

0800ba38 <_fwalk_sglue>:
 800ba38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba3c:	4607      	mov	r7, r0
 800ba3e:	4688      	mov	r8, r1
 800ba40:	4614      	mov	r4, r2
 800ba42:	2600      	movs	r6, #0
 800ba44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba48:	f1b9 0901 	subs.w	r9, r9, #1
 800ba4c:	d505      	bpl.n	800ba5a <_fwalk_sglue+0x22>
 800ba4e:	6824      	ldr	r4, [r4, #0]
 800ba50:	2c00      	cmp	r4, #0
 800ba52:	d1f7      	bne.n	800ba44 <_fwalk_sglue+0xc>
 800ba54:	4630      	mov	r0, r6
 800ba56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba5a:	89ab      	ldrh	r3, [r5, #12]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d907      	bls.n	800ba70 <_fwalk_sglue+0x38>
 800ba60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba64:	3301      	adds	r3, #1
 800ba66:	d003      	beq.n	800ba70 <_fwalk_sglue+0x38>
 800ba68:	4629      	mov	r1, r5
 800ba6a:	4638      	mov	r0, r7
 800ba6c:	47c0      	blx	r8
 800ba6e:	4306      	orrs	r6, r0
 800ba70:	3568      	adds	r5, #104	@ 0x68
 800ba72:	e7e9      	b.n	800ba48 <_fwalk_sglue+0x10>

0800ba74 <siprintf>:
 800ba74:	b40e      	push	{r1, r2, r3}
 800ba76:	b500      	push	{lr}
 800ba78:	b09c      	sub	sp, #112	@ 0x70
 800ba7a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ba7c:	9002      	str	r0, [sp, #8]
 800ba7e:	9006      	str	r0, [sp, #24]
 800ba80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ba84:	4809      	ldr	r0, [pc, #36]	@ (800baac <siprintf+0x38>)
 800ba86:	9107      	str	r1, [sp, #28]
 800ba88:	9104      	str	r1, [sp, #16]
 800ba8a:	4909      	ldr	r1, [pc, #36]	@ (800bab0 <siprintf+0x3c>)
 800ba8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba90:	9105      	str	r1, [sp, #20]
 800ba92:	6800      	ldr	r0, [r0, #0]
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	a902      	add	r1, sp, #8
 800ba98:	f002 fc18 	bl	800e2cc <_svfiprintf_r>
 800ba9c:	9b02      	ldr	r3, [sp, #8]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	701a      	strb	r2, [r3, #0]
 800baa2:	b01c      	add	sp, #112	@ 0x70
 800baa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800baa8:	b003      	add	sp, #12
 800baaa:	4770      	bx	lr
 800baac:	20000020 	.word	0x20000020
 800bab0:	ffff0208 	.word	0xffff0208

0800bab4 <__sread>:
 800bab4:	b510      	push	{r4, lr}
 800bab6:	460c      	mov	r4, r1
 800bab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800babc:	f000 f8c2 	bl	800bc44 <_read_r>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	bfab      	itete	ge
 800bac4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bac6:	89a3      	ldrhlt	r3, [r4, #12]
 800bac8:	181b      	addge	r3, r3, r0
 800baca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bace:	bfac      	ite	ge
 800bad0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bad2:	81a3      	strhlt	r3, [r4, #12]
 800bad4:	bd10      	pop	{r4, pc}

0800bad6 <__swrite>:
 800bad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bada:	461f      	mov	r7, r3
 800badc:	898b      	ldrh	r3, [r1, #12]
 800bade:	05db      	lsls	r3, r3, #23
 800bae0:	4605      	mov	r5, r0
 800bae2:	460c      	mov	r4, r1
 800bae4:	4616      	mov	r6, r2
 800bae6:	d505      	bpl.n	800baf4 <__swrite+0x1e>
 800bae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baec:	2302      	movs	r3, #2
 800baee:	2200      	movs	r2, #0
 800baf0:	f000 f896 	bl	800bc20 <_lseek_r>
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bafa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bafe:	81a3      	strh	r3, [r4, #12]
 800bb00:	4632      	mov	r2, r6
 800bb02:	463b      	mov	r3, r7
 800bb04:	4628      	mov	r0, r5
 800bb06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0a:	f000 b8ad 	b.w	800bc68 <_write_r>

0800bb0e <__sseek>:
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	460c      	mov	r4, r1
 800bb12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb16:	f000 f883 	bl	800bc20 <_lseek_r>
 800bb1a:	1c43      	adds	r3, r0, #1
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	bf15      	itete	ne
 800bb20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb2a:	81a3      	strheq	r3, [r4, #12]
 800bb2c:	bf18      	it	ne
 800bb2e:	81a3      	strhne	r3, [r4, #12]
 800bb30:	bd10      	pop	{r4, pc}

0800bb32 <__sclose>:
 800bb32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb36:	f000 b80d 	b.w	800bb54 <_close_r>

0800bb3a <memset>:
 800bb3a:	4402      	add	r2, r0
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d100      	bne.n	800bb44 <memset+0xa>
 800bb42:	4770      	bx	lr
 800bb44:	f803 1b01 	strb.w	r1, [r3], #1
 800bb48:	e7f9      	b.n	800bb3e <memset+0x4>
	...

0800bb4c <_localeconv_r>:
 800bb4c:	4800      	ldr	r0, [pc, #0]	@ (800bb50 <_localeconv_r+0x4>)
 800bb4e:	4770      	bx	lr
 800bb50:	20000160 	.word	0x20000160

0800bb54 <_close_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	4d06      	ldr	r5, [pc, #24]	@ (800bb70 <_close_r+0x1c>)
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4604      	mov	r4, r0
 800bb5c:	4608      	mov	r0, r1
 800bb5e:	602b      	str	r3, [r5, #0]
 800bb60:	f7f8 f930 	bl	8003dc4 <_close>
 800bb64:	1c43      	adds	r3, r0, #1
 800bb66:	d102      	bne.n	800bb6e <_close_r+0x1a>
 800bb68:	682b      	ldr	r3, [r5, #0]
 800bb6a:	b103      	cbz	r3, 800bb6e <_close_r+0x1a>
 800bb6c:	6023      	str	r3, [r4, #0]
 800bb6e:	bd38      	pop	{r3, r4, r5, pc}
 800bb70:	20005238 	.word	0x20005238

0800bb74 <_reclaim_reent>:
 800bb74:	4b29      	ldr	r3, [pc, #164]	@ (800bc1c <_reclaim_reent+0xa8>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4283      	cmp	r3, r0
 800bb7a:	b570      	push	{r4, r5, r6, lr}
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	d04b      	beq.n	800bc18 <_reclaim_reent+0xa4>
 800bb80:	69c3      	ldr	r3, [r0, #28]
 800bb82:	b1ab      	cbz	r3, 800bbb0 <_reclaim_reent+0x3c>
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	b16b      	cbz	r3, 800bba4 <_reclaim_reent+0x30>
 800bb88:	2500      	movs	r5, #0
 800bb8a:	69e3      	ldr	r3, [r4, #28]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	5959      	ldr	r1, [r3, r5]
 800bb90:	2900      	cmp	r1, #0
 800bb92:	d13b      	bne.n	800bc0c <_reclaim_reent+0x98>
 800bb94:	3504      	adds	r5, #4
 800bb96:	2d80      	cmp	r5, #128	@ 0x80
 800bb98:	d1f7      	bne.n	800bb8a <_reclaim_reent+0x16>
 800bb9a:	69e3      	ldr	r3, [r4, #28]
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	68d9      	ldr	r1, [r3, #12]
 800bba0:	f000 ff02 	bl	800c9a8 <_free_r>
 800bba4:	69e3      	ldr	r3, [r4, #28]
 800bba6:	6819      	ldr	r1, [r3, #0]
 800bba8:	b111      	cbz	r1, 800bbb0 <_reclaim_reent+0x3c>
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 fefc 	bl	800c9a8 <_free_r>
 800bbb0:	6961      	ldr	r1, [r4, #20]
 800bbb2:	b111      	cbz	r1, 800bbba <_reclaim_reent+0x46>
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f000 fef7 	bl	800c9a8 <_free_r>
 800bbba:	69e1      	ldr	r1, [r4, #28]
 800bbbc:	b111      	cbz	r1, 800bbc4 <_reclaim_reent+0x50>
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f000 fef2 	bl	800c9a8 <_free_r>
 800bbc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bbc6:	b111      	cbz	r1, 800bbce <_reclaim_reent+0x5a>
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f000 feed 	bl	800c9a8 <_free_r>
 800bbce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbd0:	b111      	cbz	r1, 800bbd8 <_reclaim_reent+0x64>
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 fee8 	bl	800c9a8 <_free_r>
 800bbd8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bbda:	b111      	cbz	r1, 800bbe2 <_reclaim_reent+0x6e>
 800bbdc:	4620      	mov	r0, r4
 800bbde:	f000 fee3 	bl	800c9a8 <_free_r>
 800bbe2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bbe4:	b111      	cbz	r1, 800bbec <_reclaim_reent+0x78>
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f000 fede 	bl	800c9a8 <_free_r>
 800bbec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bbee:	b111      	cbz	r1, 800bbf6 <_reclaim_reent+0x82>
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 fed9 	bl	800c9a8 <_free_r>
 800bbf6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bbf8:	b111      	cbz	r1, 800bc00 <_reclaim_reent+0x8c>
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f000 fed4 	bl	800c9a8 <_free_r>
 800bc00:	6a23      	ldr	r3, [r4, #32]
 800bc02:	b14b      	cbz	r3, 800bc18 <_reclaim_reent+0xa4>
 800bc04:	4620      	mov	r0, r4
 800bc06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc0a:	4718      	bx	r3
 800bc0c:	680e      	ldr	r6, [r1, #0]
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f000 feca 	bl	800c9a8 <_free_r>
 800bc14:	4631      	mov	r1, r6
 800bc16:	e7bb      	b.n	800bb90 <_reclaim_reent+0x1c>
 800bc18:	bd70      	pop	{r4, r5, r6, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20000020 	.word	0x20000020

0800bc20 <_lseek_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d07      	ldr	r5, [pc, #28]	@ (800bc40 <_lseek_r+0x20>)
 800bc24:	4604      	mov	r4, r0
 800bc26:	4608      	mov	r0, r1
 800bc28:	4611      	mov	r1, r2
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	602a      	str	r2, [r5, #0]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	f7f8 f8ef 	bl	8003e12 <_lseek>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_lseek_r+0x1e>
 800bc38:	682b      	ldr	r3, [r5, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_lseek_r+0x1e>
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	20005238 	.word	0x20005238

0800bc44 <_read_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d07      	ldr	r5, [pc, #28]	@ (800bc64 <_read_r+0x20>)
 800bc48:	4604      	mov	r4, r0
 800bc4a:	4608      	mov	r0, r1
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	2200      	movs	r2, #0
 800bc50:	602a      	str	r2, [r5, #0]
 800bc52:	461a      	mov	r2, r3
 800bc54:	f7f8 f87d 	bl	8003d52 <_read>
 800bc58:	1c43      	adds	r3, r0, #1
 800bc5a:	d102      	bne.n	800bc62 <_read_r+0x1e>
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	b103      	cbz	r3, 800bc62 <_read_r+0x1e>
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	bd38      	pop	{r3, r4, r5, pc}
 800bc64:	20005238 	.word	0x20005238

0800bc68 <_write_r>:
 800bc68:	b538      	push	{r3, r4, r5, lr}
 800bc6a:	4d07      	ldr	r5, [pc, #28]	@ (800bc88 <_write_r+0x20>)
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	4608      	mov	r0, r1
 800bc70:	4611      	mov	r1, r2
 800bc72:	2200      	movs	r2, #0
 800bc74:	602a      	str	r2, [r5, #0]
 800bc76:	461a      	mov	r2, r3
 800bc78:	f7f8 f888 	bl	8003d8c <_write>
 800bc7c:	1c43      	adds	r3, r0, #1
 800bc7e:	d102      	bne.n	800bc86 <_write_r+0x1e>
 800bc80:	682b      	ldr	r3, [r5, #0]
 800bc82:	b103      	cbz	r3, 800bc86 <_write_r+0x1e>
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	bd38      	pop	{r3, r4, r5, pc}
 800bc88:	20005238 	.word	0x20005238

0800bc8c <__errno>:
 800bc8c:	4b01      	ldr	r3, [pc, #4]	@ (800bc94 <__errno+0x8>)
 800bc8e:	6818      	ldr	r0, [r3, #0]
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	20000020 	.word	0x20000020

0800bc98 <__libc_init_array>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	4d0d      	ldr	r5, [pc, #52]	@ (800bcd0 <__libc_init_array+0x38>)
 800bc9c:	4c0d      	ldr	r4, [pc, #52]	@ (800bcd4 <__libc_init_array+0x3c>)
 800bc9e:	1b64      	subs	r4, r4, r5
 800bca0:	10a4      	asrs	r4, r4, #2
 800bca2:	2600      	movs	r6, #0
 800bca4:	42a6      	cmp	r6, r4
 800bca6:	d109      	bne.n	800bcbc <__libc_init_array+0x24>
 800bca8:	4d0b      	ldr	r5, [pc, #44]	@ (800bcd8 <__libc_init_array+0x40>)
 800bcaa:	4c0c      	ldr	r4, [pc, #48]	@ (800bcdc <__libc_init_array+0x44>)
 800bcac:	f003 fb72 	bl	800f394 <_init>
 800bcb0:	1b64      	subs	r4, r4, r5
 800bcb2:	10a4      	asrs	r4, r4, #2
 800bcb4:	2600      	movs	r6, #0
 800bcb6:	42a6      	cmp	r6, r4
 800bcb8:	d105      	bne.n	800bcc6 <__libc_init_array+0x2e>
 800bcba:	bd70      	pop	{r4, r5, r6, pc}
 800bcbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcc0:	4798      	blx	r3
 800bcc2:	3601      	adds	r6, #1
 800bcc4:	e7ee      	b.n	800bca4 <__libc_init_array+0xc>
 800bcc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcca:	4798      	blx	r3
 800bccc:	3601      	adds	r6, #1
 800bcce:	e7f2      	b.n	800bcb6 <__libc_init_array+0x1e>
 800bcd0:	0800fc28 	.word	0x0800fc28
 800bcd4:	0800fc28 	.word	0x0800fc28
 800bcd8:	0800fc28 	.word	0x0800fc28
 800bcdc:	0800fc2c 	.word	0x0800fc2c

0800bce0 <__retarget_lock_init_recursive>:
 800bce0:	4770      	bx	lr

0800bce2 <__retarget_lock_acquire_recursive>:
 800bce2:	4770      	bx	lr

0800bce4 <__retarget_lock_release_recursive>:
 800bce4:	4770      	bx	lr

0800bce6 <memcpy>:
 800bce6:	440a      	add	r2, r1
 800bce8:	4291      	cmp	r1, r2
 800bcea:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcee:	d100      	bne.n	800bcf2 <memcpy+0xc>
 800bcf0:	4770      	bx	lr
 800bcf2:	b510      	push	{r4, lr}
 800bcf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcfc:	4291      	cmp	r1, r2
 800bcfe:	d1f9      	bne.n	800bcf4 <memcpy+0xe>
 800bd00:	bd10      	pop	{r4, pc}
	...

0800bd04 <nanf>:
 800bd04:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bd0c <nanf+0x8>
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	7fc00000 	.word	0x7fc00000

0800bd10 <quorem>:
 800bd10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd14:	6903      	ldr	r3, [r0, #16]
 800bd16:	690c      	ldr	r4, [r1, #16]
 800bd18:	42a3      	cmp	r3, r4
 800bd1a:	4607      	mov	r7, r0
 800bd1c:	db7e      	blt.n	800be1c <quorem+0x10c>
 800bd1e:	3c01      	subs	r4, #1
 800bd20:	f101 0814 	add.w	r8, r1, #20
 800bd24:	00a3      	lsls	r3, r4, #2
 800bd26:	f100 0514 	add.w	r5, r0, #20
 800bd2a:	9300      	str	r3, [sp, #0]
 800bd2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd30:	9301      	str	r3, [sp, #4]
 800bd32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd42:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd46:	d32e      	bcc.n	800bda6 <quorem+0x96>
 800bd48:	f04f 0a00 	mov.w	sl, #0
 800bd4c:	46c4      	mov	ip, r8
 800bd4e:	46ae      	mov	lr, r5
 800bd50:	46d3      	mov	fp, sl
 800bd52:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd56:	b298      	uxth	r0, r3
 800bd58:	fb06 a000 	mla	r0, r6, r0, sl
 800bd5c:	0c02      	lsrs	r2, r0, #16
 800bd5e:	0c1b      	lsrs	r3, r3, #16
 800bd60:	fb06 2303 	mla	r3, r6, r3, r2
 800bd64:	f8de 2000 	ldr.w	r2, [lr]
 800bd68:	b280      	uxth	r0, r0
 800bd6a:	b292      	uxth	r2, r2
 800bd6c:	1a12      	subs	r2, r2, r0
 800bd6e:	445a      	add	r2, fp
 800bd70:	f8de 0000 	ldr.w	r0, [lr]
 800bd74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bd82:	b292      	uxth	r2, r2
 800bd84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bd88:	45e1      	cmp	r9, ip
 800bd8a:	f84e 2b04 	str.w	r2, [lr], #4
 800bd8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bd92:	d2de      	bcs.n	800bd52 <quorem+0x42>
 800bd94:	9b00      	ldr	r3, [sp, #0]
 800bd96:	58eb      	ldr	r3, [r5, r3]
 800bd98:	b92b      	cbnz	r3, 800bda6 <quorem+0x96>
 800bd9a:	9b01      	ldr	r3, [sp, #4]
 800bd9c:	3b04      	subs	r3, #4
 800bd9e:	429d      	cmp	r5, r3
 800bda0:	461a      	mov	r2, r3
 800bda2:	d32f      	bcc.n	800be04 <quorem+0xf4>
 800bda4:	613c      	str	r4, [r7, #16]
 800bda6:	4638      	mov	r0, r7
 800bda8:	f001 f9c2 	bl	800d130 <__mcmp>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	db25      	blt.n	800bdfc <quorem+0xec>
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	2000      	movs	r0, #0
 800bdb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800bdb8:	f8d1 c000 	ldr.w	ip, [r1]
 800bdbc:	fa1f fe82 	uxth.w	lr, r2
 800bdc0:	fa1f f38c 	uxth.w	r3, ip
 800bdc4:	eba3 030e 	sub.w	r3, r3, lr
 800bdc8:	4403      	add	r3, r0
 800bdca:	0c12      	lsrs	r2, r2, #16
 800bdcc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bdd0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdda:	45c1      	cmp	r9, r8
 800bddc:	f841 3b04 	str.w	r3, [r1], #4
 800bde0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bde4:	d2e6      	bcs.n	800bdb4 <quorem+0xa4>
 800bde6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdee:	b922      	cbnz	r2, 800bdfa <quorem+0xea>
 800bdf0:	3b04      	subs	r3, #4
 800bdf2:	429d      	cmp	r5, r3
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	d30b      	bcc.n	800be10 <quorem+0x100>
 800bdf8:	613c      	str	r4, [r7, #16]
 800bdfa:	3601      	adds	r6, #1
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	b003      	add	sp, #12
 800be00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be04:	6812      	ldr	r2, [r2, #0]
 800be06:	3b04      	subs	r3, #4
 800be08:	2a00      	cmp	r2, #0
 800be0a:	d1cb      	bne.n	800bda4 <quorem+0x94>
 800be0c:	3c01      	subs	r4, #1
 800be0e:	e7c6      	b.n	800bd9e <quorem+0x8e>
 800be10:	6812      	ldr	r2, [r2, #0]
 800be12:	3b04      	subs	r3, #4
 800be14:	2a00      	cmp	r2, #0
 800be16:	d1ef      	bne.n	800bdf8 <quorem+0xe8>
 800be18:	3c01      	subs	r4, #1
 800be1a:	e7ea      	b.n	800bdf2 <quorem+0xe2>
 800be1c:	2000      	movs	r0, #0
 800be1e:	e7ee      	b.n	800bdfe <quorem+0xee>

0800be20 <_dtoa_r>:
 800be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be24:	69c7      	ldr	r7, [r0, #28]
 800be26:	b099      	sub	sp, #100	@ 0x64
 800be28:	ed8d 0b02 	vstr	d0, [sp, #8]
 800be2c:	ec55 4b10 	vmov	r4, r5, d0
 800be30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800be32:	9109      	str	r1, [sp, #36]	@ 0x24
 800be34:	4683      	mov	fp, r0
 800be36:	920e      	str	r2, [sp, #56]	@ 0x38
 800be38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be3a:	b97f      	cbnz	r7, 800be5c <_dtoa_r+0x3c>
 800be3c:	2010      	movs	r0, #16
 800be3e:	f000 fdfd 	bl	800ca3c <malloc>
 800be42:	4602      	mov	r2, r0
 800be44:	f8cb 001c 	str.w	r0, [fp, #28]
 800be48:	b920      	cbnz	r0, 800be54 <_dtoa_r+0x34>
 800be4a:	4ba7      	ldr	r3, [pc, #668]	@ (800c0e8 <_dtoa_r+0x2c8>)
 800be4c:	21ef      	movs	r1, #239	@ 0xef
 800be4e:	48a7      	ldr	r0, [pc, #668]	@ (800c0ec <_dtoa_r+0x2cc>)
 800be50:	f002 fc2a 	bl	800e6a8 <__assert_func>
 800be54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800be58:	6007      	str	r7, [r0, #0]
 800be5a:	60c7      	str	r7, [r0, #12]
 800be5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be60:	6819      	ldr	r1, [r3, #0]
 800be62:	b159      	cbz	r1, 800be7c <_dtoa_r+0x5c>
 800be64:	685a      	ldr	r2, [r3, #4]
 800be66:	604a      	str	r2, [r1, #4]
 800be68:	2301      	movs	r3, #1
 800be6a:	4093      	lsls	r3, r2
 800be6c:	608b      	str	r3, [r1, #8]
 800be6e:	4658      	mov	r0, fp
 800be70:	f000 feda 	bl	800cc28 <_Bfree>
 800be74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]
 800be7c:	1e2b      	subs	r3, r5, #0
 800be7e:	bfb9      	ittee	lt
 800be80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800be84:	9303      	strlt	r3, [sp, #12]
 800be86:	2300      	movge	r3, #0
 800be88:	6033      	strge	r3, [r6, #0]
 800be8a:	9f03      	ldr	r7, [sp, #12]
 800be8c:	4b98      	ldr	r3, [pc, #608]	@ (800c0f0 <_dtoa_r+0x2d0>)
 800be8e:	bfbc      	itt	lt
 800be90:	2201      	movlt	r2, #1
 800be92:	6032      	strlt	r2, [r6, #0]
 800be94:	43bb      	bics	r3, r7
 800be96:	d112      	bne.n	800bebe <_dtoa_r+0x9e>
 800be98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800be9e:	6013      	str	r3, [r2, #0]
 800bea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bea4:	4323      	orrs	r3, r4
 800bea6:	f000 854d 	beq.w	800c944 <_dtoa_r+0xb24>
 800beaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800beac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c104 <_dtoa_r+0x2e4>
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 854f 	beq.w	800c954 <_dtoa_r+0xb34>
 800beb6:	f10a 0303 	add.w	r3, sl, #3
 800beba:	f000 bd49 	b.w	800c950 <_dtoa_r+0xb30>
 800bebe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bec2:	2200      	movs	r2, #0
 800bec4:	ec51 0b17 	vmov	r0, r1, d7
 800bec8:	2300      	movs	r3, #0
 800beca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bece:	f7f4 fe03 	bl	8000ad8 <__aeabi_dcmpeq>
 800bed2:	4680      	mov	r8, r0
 800bed4:	b158      	cbz	r0, 800beee <_dtoa_r+0xce>
 800bed6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bed8:	2301      	movs	r3, #1
 800beda:	6013      	str	r3, [r2, #0]
 800bedc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bede:	b113      	cbz	r3, 800bee6 <_dtoa_r+0xc6>
 800bee0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bee2:	4b84      	ldr	r3, [pc, #528]	@ (800c0f4 <_dtoa_r+0x2d4>)
 800bee4:	6013      	str	r3, [r2, #0]
 800bee6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c108 <_dtoa_r+0x2e8>
 800beea:	f000 bd33 	b.w	800c954 <_dtoa_r+0xb34>
 800beee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bef2:	aa16      	add	r2, sp, #88	@ 0x58
 800bef4:	a917      	add	r1, sp, #92	@ 0x5c
 800bef6:	4658      	mov	r0, fp
 800bef8:	f001 fa3a 	bl	800d370 <__d2b>
 800befc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bf00:	4681      	mov	r9, r0
 800bf02:	2e00      	cmp	r6, #0
 800bf04:	d077      	beq.n	800bff6 <_dtoa_r+0x1d6>
 800bf06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bf0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bf20:	4619      	mov	r1, r3
 800bf22:	2200      	movs	r2, #0
 800bf24:	4b74      	ldr	r3, [pc, #464]	@ (800c0f8 <_dtoa_r+0x2d8>)
 800bf26:	f7f4 f9b7 	bl	8000298 <__aeabi_dsub>
 800bf2a:	a369      	add	r3, pc, #420	@ (adr r3, 800c0d0 <_dtoa_r+0x2b0>)
 800bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf30:	f7f4 fb6a 	bl	8000608 <__aeabi_dmul>
 800bf34:	a368      	add	r3, pc, #416	@ (adr r3, 800c0d8 <_dtoa_r+0x2b8>)
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	f7f4 f9af 	bl	800029c <__adddf3>
 800bf3e:	4604      	mov	r4, r0
 800bf40:	4630      	mov	r0, r6
 800bf42:	460d      	mov	r5, r1
 800bf44:	f7f4 faf6 	bl	8000534 <__aeabi_i2d>
 800bf48:	a365      	add	r3, pc, #404	@ (adr r3, 800c0e0 <_dtoa_r+0x2c0>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f7f4 fb5b 	bl	8000608 <__aeabi_dmul>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4620      	mov	r0, r4
 800bf58:	4629      	mov	r1, r5
 800bf5a:	f7f4 f99f 	bl	800029c <__adddf3>
 800bf5e:	4604      	mov	r4, r0
 800bf60:	460d      	mov	r5, r1
 800bf62:	f7f4 fe01 	bl	8000b68 <__aeabi_d2iz>
 800bf66:	2200      	movs	r2, #0
 800bf68:	4607      	mov	r7, r0
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	4629      	mov	r1, r5
 800bf70:	f7f4 fdbc 	bl	8000aec <__aeabi_dcmplt>
 800bf74:	b140      	cbz	r0, 800bf88 <_dtoa_r+0x168>
 800bf76:	4638      	mov	r0, r7
 800bf78:	f7f4 fadc 	bl	8000534 <__aeabi_i2d>
 800bf7c:	4622      	mov	r2, r4
 800bf7e:	462b      	mov	r3, r5
 800bf80:	f7f4 fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf84:	b900      	cbnz	r0, 800bf88 <_dtoa_r+0x168>
 800bf86:	3f01      	subs	r7, #1
 800bf88:	2f16      	cmp	r7, #22
 800bf8a:	d851      	bhi.n	800c030 <_dtoa_r+0x210>
 800bf8c:	4b5b      	ldr	r3, [pc, #364]	@ (800c0fc <_dtoa_r+0x2dc>)
 800bf8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf9a:	f7f4 fda7 	bl	8000aec <__aeabi_dcmplt>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d048      	beq.n	800c034 <_dtoa_r+0x214>
 800bfa2:	3f01      	subs	r7, #1
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	9312      	str	r3, [sp, #72]	@ 0x48
 800bfa8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bfaa:	1b9b      	subs	r3, r3, r6
 800bfac:	1e5a      	subs	r2, r3, #1
 800bfae:	bf44      	itt	mi
 800bfb0:	f1c3 0801 	rsbmi	r8, r3, #1
 800bfb4:	2300      	movmi	r3, #0
 800bfb6:	9208      	str	r2, [sp, #32]
 800bfb8:	bf54      	ite	pl
 800bfba:	f04f 0800 	movpl.w	r8, #0
 800bfbe:	9308      	strmi	r3, [sp, #32]
 800bfc0:	2f00      	cmp	r7, #0
 800bfc2:	db39      	blt.n	800c038 <_dtoa_r+0x218>
 800bfc4:	9b08      	ldr	r3, [sp, #32]
 800bfc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bfc8:	443b      	add	r3, r7
 800bfca:	9308      	str	r3, [sp, #32]
 800bfcc:	2300      	movs	r3, #0
 800bfce:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfd2:	2b09      	cmp	r3, #9
 800bfd4:	d864      	bhi.n	800c0a0 <_dtoa_r+0x280>
 800bfd6:	2b05      	cmp	r3, #5
 800bfd8:	bfc4      	itt	gt
 800bfda:	3b04      	subgt	r3, #4
 800bfdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe0:	f1a3 0302 	sub.w	r3, r3, #2
 800bfe4:	bfcc      	ite	gt
 800bfe6:	2400      	movgt	r4, #0
 800bfe8:	2401      	movle	r4, #1
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	d863      	bhi.n	800c0b6 <_dtoa_r+0x296>
 800bfee:	e8df f003 	tbb	[pc, r3]
 800bff2:	372a      	.short	0x372a
 800bff4:	5535      	.short	0x5535
 800bff6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bffa:	441e      	add	r6, r3
 800bffc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c000:	2b20      	cmp	r3, #32
 800c002:	bfc1      	itttt	gt
 800c004:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c008:	409f      	lslgt	r7, r3
 800c00a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c00e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c012:	bfd6      	itet	le
 800c014:	f1c3 0320 	rsble	r3, r3, #32
 800c018:	ea47 0003 	orrgt.w	r0, r7, r3
 800c01c:	fa04 f003 	lslle.w	r0, r4, r3
 800c020:	f7f4 fa78 	bl	8000514 <__aeabi_ui2d>
 800c024:	2201      	movs	r2, #1
 800c026:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c02a:	3e01      	subs	r6, #1
 800c02c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c02e:	e777      	b.n	800bf20 <_dtoa_r+0x100>
 800c030:	2301      	movs	r3, #1
 800c032:	e7b8      	b.n	800bfa6 <_dtoa_r+0x186>
 800c034:	9012      	str	r0, [sp, #72]	@ 0x48
 800c036:	e7b7      	b.n	800bfa8 <_dtoa_r+0x188>
 800c038:	427b      	negs	r3, r7
 800c03a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c03c:	2300      	movs	r3, #0
 800c03e:	eba8 0807 	sub.w	r8, r8, r7
 800c042:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c044:	e7c4      	b.n	800bfd0 <_dtoa_r+0x1b0>
 800c046:	2300      	movs	r3, #0
 800c048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c04a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	dc35      	bgt.n	800c0bc <_dtoa_r+0x29c>
 800c050:	2301      	movs	r3, #1
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	9307      	str	r3, [sp, #28]
 800c056:	461a      	mov	r2, r3
 800c058:	920e      	str	r2, [sp, #56]	@ 0x38
 800c05a:	e00b      	b.n	800c074 <_dtoa_r+0x254>
 800c05c:	2301      	movs	r3, #1
 800c05e:	e7f3      	b.n	800c048 <_dtoa_r+0x228>
 800c060:	2300      	movs	r3, #0
 800c062:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c066:	18fb      	adds	r3, r7, r3
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	3301      	adds	r3, #1
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	9307      	str	r3, [sp, #28]
 800c070:	bfb8      	it	lt
 800c072:	2301      	movlt	r3, #1
 800c074:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c078:	2100      	movs	r1, #0
 800c07a:	2204      	movs	r2, #4
 800c07c:	f102 0514 	add.w	r5, r2, #20
 800c080:	429d      	cmp	r5, r3
 800c082:	d91f      	bls.n	800c0c4 <_dtoa_r+0x2a4>
 800c084:	6041      	str	r1, [r0, #4]
 800c086:	4658      	mov	r0, fp
 800c088:	f000 fd8e 	bl	800cba8 <_Balloc>
 800c08c:	4682      	mov	sl, r0
 800c08e:	2800      	cmp	r0, #0
 800c090:	d13c      	bne.n	800c10c <_dtoa_r+0x2ec>
 800c092:	4b1b      	ldr	r3, [pc, #108]	@ (800c100 <_dtoa_r+0x2e0>)
 800c094:	4602      	mov	r2, r0
 800c096:	f240 11af 	movw	r1, #431	@ 0x1af
 800c09a:	e6d8      	b.n	800be4e <_dtoa_r+0x2e>
 800c09c:	2301      	movs	r3, #1
 800c09e:	e7e0      	b.n	800c062 <_dtoa_r+0x242>
 800c0a0:	2401      	movs	r4, #1
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	9307      	str	r3, [sp, #28]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	2312      	movs	r3, #18
 800c0b4:	e7d0      	b.n	800c058 <_dtoa_r+0x238>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0ba:	e7f5      	b.n	800c0a8 <_dtoa_r+0x288>
 800c0bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	9307      	str	r3, [sp, #28]
 800c0c2:	e7d7      	b.n	800c074 <_dtoa_r+0x254>
 800c0c4:	3101      	adds	r1, #1
 800c0c6:	0052      	lsls	r2, r2, #1
 800c0c8:	e7d8      	b.n	800c07c <_dtoa_r+0x25c>
 800c0ca:	bf00      	nop
 800c0cc:	f3af 8000 	nop.w
 800c0d0:	636f4361 	.word	0x636f4361
 800c0d4:	3fd287a7 	.word	0x3fd287a7
 800c0d8:	8b60c8b3 	.word	0x8b60c8b3
 800c0dc:	3fc68a28 	.word	0x3fc68a28
 800c0e0:	509f79fb 	.word	0x509f79fb
 800c0e4:	3fd34413 	.word	0x3fd34413
 800c0e8:	0800f836 	.word	0x0800f836
 800c0ec:	0800f84d 	.word	0x0800f84d
 800c0f0:	7ff00000 	.word	0x7ff00000
 800c0f4:	0800f801 	.word	0x0800f801
 800c0f8:	3ff80000 	.word	0x3ff80000
 800c0fc:	0800f948 	.word	0x0800f948
 800c100:	0800f8a5 	.word	0x0800f8a5
 800c104:	0800f832 	.word	0x0800f832
 800c108:	0800f800 	.word	0x0800f800
 800c10c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c110:	6018      	str	r0, [r3, #0]
 800c112:	9b07      	ldr	r3, [sp, #28]
 800c114:	2b0e      	cmp	r3, #14
 800c116:	f200 80a4 	bhi.w	800c262 <_dtoa_r+0x442>
 800c11a:	2c00      	cmp	r4, #0
 800c11c:	f000 80a1 	beq.w	800c262 <_dtoa_r+0x442>
 800c120:	2f00      	cmp	r7, #0
 800c122:	dd33      	ble.n	800c18c <_dtoa_r+0x36c>
 800c124:	4bad      	ldr	r3, [pc, #692]	@ (800c3dc <_dtoa_r+0x5bc>)
 800c126:	f007 020f 	and.w	r2, r7, #15
 800c12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c12e:	ed93 7b00 	vldr	d7, [r3]
 800c132:	05f8      	lsls	r0, r7, #23
 800c134:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c138:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c13c:	d516      	bpl.n	800c16c <_dtoa_r+0x34c>
 800c13e:	4ba8      	ldr	r3, [pc, #672]	@ (800c3e0 <_dtoa_r+0x5c0>)
 800c140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c148:	f7f4 fb88 	bl	800085c <__aeabi_ddiv>
 800c14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c150:	f004 040f 	and.w	r4, r4, #15
 800c154:	2603      	movs	r6, #3
 800c156:	4da2      	ldr	r5, [pc, #648]	@ (800c3e0 <_dtoa_r+0x5c0>)
 800c158:	b954      	cbnz	r4, 800c170 <_dtoa_r+0x350>
 800c15a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c15e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c162:	f7f4 fb7b 	bl	800085c <__aeabi_ddiv>
 800c166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c16a:	e028      	b.n	800c1be <_dtoa_r+0x39e>
 800c16c:	2602      	movs	r6, #2
 800c16e:	e7f2      	b.n	800c156 <_dtoa_r+0x336>
 800c170:	07e1      	lsls	r1, r4, #31
 800c172:	d508      	bpl.n	800c186 <_dtoa_r+0x366>
 800c174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c178:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c17c:	f7f4 fa44 	bl	8000608 <__aeabi_dmul>
 800c180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c184:	3601      	adds	r6, #1
 800c186:	1064      	asrs	r4, r4, #1
 800c188:	3508      	adds	r5, #8
 800c18a:	e7e5      	b.n	800c158 <_dtoa_r+0x338>
 800c18c:	f000 80d2 	beq.w	800c334 <_dtoa_r+0x514>
 800c190:	427c      	negs	r4, r7
 800c192:	4b92      	ldr	r3, [pc, #584]	@ (800c3dc <_dtoa_r+0x5bc>)
 800c194:	4d92      	ldr	r5, [pc, #584]	@ (800c3e0 <_dtoa_r+0x5c0>)
 800c196:	f004 020f 	and.w	r2, r4, #15
 800c19a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1a6:	f7f4 fa2f 	bl	8000608 <__aeabi_dmul>
 800c1aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1ae:	1124      	asrs	r4, r4, #4
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	2602      	movs	r6, #2
 800c1b4:	2c00      	cmp	r4, #0
 800c1b6:	f040 80b2 	bne.w	800c31e <_dtoa_r+0x4fe>
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1d3      	bne.n	800c166 <_dtoa_r+0x346>
 800c1be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c1c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f000 80b7 	beq.w	800c338 <_dtoa_r+0x518>
 800c1ca:	4b86      	ldr	r3, [pc, #536]	@ (800c3e4 <_dtoa_r+0x5c4>)
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	f7f4 fc8b 	bl	8000aec <__aeabi_dcmplt>
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	f000 80ae 	beq.w	800c338 <_dtoa_r+0x518>
 800c1dc:	9b07      	ldr	r3, [sp, #28]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f000 80aa 	beq.w	800c338 <_dtoa_r+0x518>
 800c1e4:	9b00      	ldr	r3, [sp, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	dd37      	ble.n	800c25a <_dtoa_r+0x43a>
 800c1ea:	1e7b      	subs	r3, r7, #1
 800c1ec:	9304      	str	r3, [sp, #16]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	4b7d      	ldr	r3, [pc, #500]	@ (800c3e8 <_dtoa_r+0x5c8>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	f7f4 fa07 	bl	8000608 <__aeabi_dmul>
 800c1fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1fe:	9c00      	ldr	r4, [sp, #0]
 800c200:	3601      	adds	r6, #1
 800c202:	4630      	mov	r0, r6
 800c204:	f7f4 f996 	bl	8000534 <__aeabi_i2d>
 800c208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c20c:	f7f4 f9fc 	bl	8000608 <__aeabi_dmul>
 800c210:	4b76      	ldr	r3, [pc, #472]	@ (800c3ec <_dtoa_r+0x5cc>)
 800c212:	2200      	movs	r2, #0
 800c214:	f7f4 f842 	bl	800029c <__adddf3>
 800c218:	4605      	mov	r5, r0
 800c21a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c21e:	2c00      	cmp	r4, #0
 800c220:	f040 808d 	bne.w	800c33e <_dtoa_r+0x51e>
 800c224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c228:	4b71      	ldr	r3, [pc, #452]	@ (800c3f0 <_dtoa_r+0x5d0>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	f7f4 f834 	bl	8000298 <__aeabi_dsub>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c238:	462a      	mov	r2, r5
 800c23a:	4633      	mov	r3, r6
 800c23c:	f7f4 fc74 	bl	8000b28 <__aeabi_dcmpgt>
 800c240:	2800      	cmp	r0, #0
 800c242:	f040 828b 	bne.w	800c75c <_dtoa_r+0x93c>
 800c246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c24a:	462a      	mov	r2, r5
 800c24c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c250:	f7f4 fc4c 	bl	8000aec <__aeabi_dcmplt>
 800c254:	2800      	cmp	r0, #0
 800c256:	f040 8128 	bne.w	800c4aa <_dtoa_r+0x68a>
 800c25a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c25e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c264:	2b00      	cmp	r3, #0
 800c266:	f2c0 815a 	blt.w	800c51e <_dtoa_r+0x6fe>
 800c26a:	2f0e      	cmp	r7, #14
 800c26c:	f300 8157 	bgt.w	800c51e <_dtoa_r+0x6fe>
 800c270:	4b5a      	ldr	r3, [pc, #360]	@ (800c3dc <_dtoa_r+0x5bc>)
 800c272:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c276:	ed93 7b00 	vldr	d7, [r3]
 800c27a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	ed8d 7b00 	vstr	d7, [sp]
 800c282:	da03      	bge.n	800c28c <_dtoa_r+0x46c>
 800c284:	9b07      	ldr	r3, [sp, #28]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f340 8101 	ble.w	800c48e <_dtoa_r+0x66e>
 800c28c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c290:	4656      	mov	r6, sl
 800c292:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c296:	4620      	mov	r0, r4
 800c298:	4629      	mov	r1, r5
 800c29a:	f7f4 fadf 	bl	800085c <__aeabi_ddiv>
 800c29e:	f7f4 fc63 	bl	8000b68 <__aeabi_d2iz>
 800c2a2:	4680      	mov	r8, r0
 800c2a4:	f7f4 f946 	bl	8000534 <__aeabi_i2d>
 800c2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2ac:	f7f4 f9ac 	bl	8000608 <__aeabi_dmul>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c2bc:	f7f3 ffec 	bl	8000298 <__aeabi_dsub>
 800c2c0:	f806 4b01 	strb.w	r4, [r6], #1
 800c2c4:	9d07      	ldr	r5, [sp, #28]
 800c2c6:	eba6 040a 	sub.w	r4, r6, sl
 800c2ca:	42a5      	cmp	r5, r4
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	f040 8117 	bne.w	800c502 <_dtoa_r+0x6e2>
 800c2d4:	f7f3 ffe2 	bl	800029c <__adddf3>
 800c2d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2dc:	4604      	mov	r4, r0
 800c2de:	460d      	mov	r5, r1
 800c2e0:	f7f4 fc22 	bl	8000b28 <__aeabi_dcmpgt>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	f040 80f9 	bne.w	800c4dc <_dtoa_r+0x6bc>
 800c2ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	f7f4 fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2f6:	b118      	cbz	r0, 800c300 <_dtoa_r+0x4e0>
 800c2f8:	f018 0f01 	tst.w	r8, #1
 800c2fc:	f040 80ee 	bne.w	800c4dc <_dtoa_r+0x6bc>
 800c300:	4649      	mov	r1, r9
 800c302:	4658      	mov	r0, fp
 800c304:	f000 fc90 	bl	800cc28 <_Bfree>
 800c308:	2300      	movs	r3, #0
 800c30a:	7033      	strb	r3, [r6, #0]
 800c30c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c30e:	3701      	adds	r7, #1
 800c310:	601f      	str	r7, [r3, #0]
 800c312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c314:	2b00      	cmp	r3, #0
 800c316:	f000 831d 	beq.w	800c954 <_dtoa_r+0xb34>
 800c31a:	601e      	str	r6, [r3, #0]
 800c31c:	e31a      	b.n	800c954 <_dtoa_r+0xb34>
 800c31e:	07e2      	lsls	r2, r4, #31
 800c320:	d505      	bpl.n	800c32e <_dtoa_r+0x50e>
 800c322:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c326:	f7f4 f96f 	bl	8000608 <__aeabi_dmul>
 800c32a:	3601      	adds	r6, #1
 800c32c:	2301      	movs	r3, #1
 800c32e:	1064      	asrs	r4, r4, #1
 800c330:	3508      	adds	r5, #8
 800c332:	e73f      	b.n	800c1b4 <_dtoa_r+0x394>
 800c334:	2602      	movs	r6, #2
 800c336:	e742      	b.n	800c1be <_dtoa_r+0x39e>
 800c338:	9c07      	ldr	r4, [sp, #28]
 800c33a:	9704      	str	r7, [sp, #16]
 800c33c:	e761      	b.n	800c202 <_dtoa_r+0x3e2>
 800c33e:	4b27      	ldr	r3, [pc, #156]	@ (800c3dc <_dtoa_r+0x5bc>)
 800c340:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c342:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c346:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c34a:	4454      	add	r4, sl
 800c34c:	2900      	cmp	r1, #0
 800c34e:	d053      	beq.n	800c3f8 <_dtoa_r+0x5d8>
 800c350:	4928      	ldr	r1, [pc, #160]	@ (800c3f4 <_dtoa_r+0x5d4>)
 800c352:	2000      	movs	r0, #0
 800c354:	f7f4 fa82 	bl	800085c <__aeabi_ddiv>
 800c358:	4633      	mov	r3, r6
 800c35a:	462a      	mov	r2, r5
 800c35c:	f7f3 ff9c 	bl	8000298 <__aeabi_dsub>
 800c360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c364:	4656      	mov	r6, sl
 800c366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c36a:	f7f4 fbfd 	bl	8000b68 <__aeabi_d2iz>
 800c36e:	4605      	mov	r5, r0
 800c370:	f7f4 f8e0 	bl	8000534 <__aeabi_i2d>
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c37c:	f7f3 ff8c 	bl	8000298 <__aeabi_dsub>
 800c380:	3530      	adds	r5, #48	@ 0x30
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c38a:	f806 5b01 	strb.w	r5, [r6], #1
 800c38e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c392:	f7f4 fbab 	bl	8000aec <__aeabi_dcmplt>
 800c396:	2800      	cmp	r0, #0
 800c398:	d171      	bne.n	800c47e <_dtoa_r+0x65e>
 800c39a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c39e:	4911      	ldr	r1, [pc, #68]	@ (800c3e4 <_dtoa_r+0x5c4>)
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	f7f3 ff79 	bl	8000298 <__aeabi_dsub>
 800c3a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c3aa:	f7f4 fb9f 	bl	8000aec <__aeabi_dcmplt>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	f040 8095 	bne.w	800c4de <_dtoa_r+0x6be>
 800c3b4:	42a6      	cmp	r6, r4
 800c3b6:	f43f af50 	beq.w	800c25a <_dtoa_r+0x43a>
 800c3ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c3be:	4b0a      	ldr	r3, [pc, #40]	@ (800c3e8 <_dtoa_r+0x5c8>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f7f4 f921 	bl	8000608 <__aeabi_dmul>
 800c3c6:	4b08      	ldr	r3, [pc, #32]	@ (800c3e8 <_dtoa_r+0x5c8>)
 800c3c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3d2:	f7f4 f919 	bl	8000608 <__aeabi_dmul>
 800c3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3da:	e7c4      	b.n	800c366 <_dtoa_r+0x546>
 800c3dc:	0800f948 	.word	0x0800f948
 800c3e0:	0800f920 	.word	0x0800f920
 800c3e4:	3ff00000 	.word	0x3ff00000
 800c3e8:	40240000 	.word	0x40240000
 800c3ec:	401c0000 	.word	0x401c0000
 800c3f0:	40140000 	.word	0x40140000
 800c3f4:	3fe00000 	.word	0x3fe00000
 800c3f8:	4631      	mov	r1, r6
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	f7f4 f904 	bl	8000608 <__aeabi_dmul>
 800c400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c404:	9415      	str	r4, [sp, #84]	@ 0x54
 800c406:	4656      	mov	r6, sl
 800c408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c40c:	f7f4 fbac 	bl	8000b68 <__aeabi_d2iz>
 800c410:	4605      	mov	r5, r0
 800c412:	f7f4 f88f 	bl	8000534 <__aeabi_i2d>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c41e:	f7f3 ff3b 	bl	8000298 <__aeabi_dsub>
 800c422:	3530      	adds	r5, #48	@ 0x30
 800c424:	f806 5b01 	strb.w	r5, [r6], #1
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	42a6      	cmp	r6, r4
 800c42e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c432:	f04f 0200 	mov.w	r2, #0
 800c436:	d124      	bne.n	800c482 <_dtoa_r+0x662>
 800c438:	4bac      	ldr	r3, [pc, #688]	@ (800c6ec <_dtoa_r+0x8cc>)
 800c43a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c43e:	f7f3 ff2d 	bl	800029c <__adddf3>
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c44a:	f7f4 fb6d 	bl	8000b28 <__aeabi_dcmpgt>
 800c44e:	2800      	cmp	r0, #0
 800c450:	d145      	bne.n	800c4de <_dtoa_r+0x6be>
 800c452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c456:	49a5      	ldr	r1, [pc, #660]	@ (800c6ec <_dtoa_r+0x8cc>)
 800c458:	2000      	movs	r0, #0
 800c45a:	f7f3 ff1d 	bl	8000298 <__aeabi_dsub>
 800c45e:	4602      	mov	r2, r0
 800c460:	460b      	mov	r3, r1
 800c462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c466:	f7f4 fb41 	bl	8000aec <__aeabi_dcmplt>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	f43f aef5 	beq.w	800c25a <_dtoa_r+0x43a>
 800c470:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c472:	1e73      	subs	r3, r6, #1
 800c474:	9315      	str	r3, [sp, #84]	@ 0x54
 800c476:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c47a:	2b30      	cmp	r3, #48	@ 0x30
 800c47c:	d0f8      	beq.n	800c470 <_dtoa_r+0x650>
 800c47e:	9f04      	ldr	r7, [sp, #16]
 800c480:	e73e      	b.n	800c300 <_dtoa_r+0x4e0>
 800c482:	4b9b      	ldr	r3, [pc, #620]	@ (800c6f0 <_dtoa_r+0x8d0>)
 800c484:	f7f4 f8c0 	bl	8000608 <__aeabi_dmul>
 800c488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c48c:	e7bc      	b.n	800c408 <_dtoa_r+0x5e8>
 800c48e:	d10c      	bne.n	800c4aa <_dtoa_r+0x68a>
 800c490:	4b98      	ldr	r3, [pc, #608]	@ (800c6f4 <_dtoa_r+0x8d4>)
 800c492:	2200      	movs	r2, #0
 800c494:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c498:	f7f4 f8b6 	bl	8000608 <__aeabi_dmul>
 800c49c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4a0:	f7f4 fb38 	bl	8000b14 <__aeabi_dcmpge>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	f000 8157 	beq.w	800c758 <_dtoa_r+0x938>
 800c4aa:	2400      	movs	r4, #0
 800c4ac:	4625      	mov	r5, r4
 800c4ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4b0:	43db      	mvns	r3, r3
 800c4b2:	9304      	str	r3, [sp, #16]
 800c4b4:	4656      	mov	r6, sl
 800c4b6:	2700      	movs	r7, #0
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	4658      	mov	r0, fp
 800c4bc:	f000 fbb4 	bl	800cc28 <_Bfree>
 800c4c0:	2d00      	cmp	r5, #0
 800c4c2:	d0dc      	beq.n	800c47e <_dtoa_r+0x65e>
 800c4c4:	b12f      	cbz	r7, 800c4d2 <_dtoa_r+0x6b2>
 800c4c6:	42af      	cmp	r7, r5
 800c4c8:	d003      	beq.n	800c4d2 <_dtoa_r+0x6b2>
 800c4ca:	4639      	mov	r1, r7
 800c4cc:	4658      	mov	r0, fp
 800c4ce:	f000 fbab 	bl	800cc28 <_Bfree>
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	4658      	mov	r0, fp
 800c4d6:	f000 fba7 	bl	800cc28 <_Bfree>
 800c4da:	e7d0      	b.n	800c47e <_dtoa_r+0x65e>
 800c4dc:	9704      	str	r7, [sp, #16]
 800c4de:	4633      	mov	r3, r6
 800c4e0:	461e      	mov	r6, r3
 800c4e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4e6:	2a39      	cmp	r2, #57	@ 0x39
 800c4e8:	d107      	bne.n	800c4fa <_dtoa_r+0x6da>
 800c4ea:	459a      	cmp	sl, r3
 800c4ec:	d1f8      	bne.n	800c4e0 <_dtoa_r+0x6c0>
 800c4ee:	9a04      	ldr	r2, [sp, #16]
 800c4f0:	3201      	adds	r2, #1
 800c4f2:	9204      	str	r2, [sp, #16]
 800c4f4:	2230      	movs	r2, #48	@ 0x30
 800c4f6:	f88a 2000 	strb.w	r2, [sl]
 800c4fa:	781a      	ldrb	r2, [r3, #0]
 800c4fc:	3201      	adds	r2, #1
 800c4fe:	701a      	strb	r2, [r3, #0]
 800c500:	e7bd      	b.n	800c47e <_dtoa_r+0x65e>
 800c502:	4b7b      	ldr	r3, [pc, #492]	@ (800c6f0 <_dtoa_r+0x8d0>)
 800c504:	2200      	movs	r2, #0
 800c506:	f7f4 f87f 	bl	8000608 <__aeabi_dmul>
 800c50a:	2200      	movs	r2, #0
 800c50c:	2300      	movs	r3, #0
 800c50e:	4604      	mov	r4, r0
 800c510:	460d      	mov	r5, r1
 800c512:	f7f4 fae1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c516:	2800      	cmp	r0, #0
 800c518:	f43f aebb 	beq.w	800c292 <_dtoa_r+0x472>
 800c51c:	e6f0      	b.n	800c300 <_dtoa_r+0x4e0>
 800c51e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c520:	2a00      	cmp	r2, #0
 800c522:	f000 80db 	beq.w	800c6dc <_dtoa_r+0x8bc>
 800c526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c528:	2a01      	cmp	r2, #1
 800c52a:	f300 80bf 	bgt.w	800c6ac <_dtoa_r+0x88c>
 800c52e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c530:	2a00      	cmp	r2, #0
 800c532:	f000 80b7 	beq.w	800c6a4 <_dtoa_r+0x884>
 800c536:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c53a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c53c:	4646      	mov	r6, r8
 800c53e:	9a08      	ldr	r2, [sp, #32]
 800c540:	2101      	movs	r1, #1
 800c542:	441a      	add	r2, r3
 800c544:	4658      	mov	r0, fp
 800c546:	4498      	add	r8, r3
 800c548:	9208      	str	r2, [sp, #32]
 800c54a:	f000 fc6b 	bl	800ce24 <__i2b>
 800c54e:	4605      	mov	r5, r0
 800c550:	b15e      	cbz	r6, 800c56a <_dtoa_r+0x74a>
 800c552:	9b08      	ldr	r3, [sp, #32]
 800c554:	2b00      	cmp	r3, #0
 800c556:	dd08      	ble.n	800c56a <_dtoa_r+0x74a>
 800c558:	42b3      	cmp	r3, r6
 800c55a:	9a08      	ldr	r2, [sp, #32]
 800c55c:	bfa8      	it	ge
 800c55e:	4633      	movge	r3, r6
 800c560:	eba8 0803 	sub.w	r8, r8, r3
 800c564:	1af6      	subs	r6, r6, r3
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	9308      	str	r3, [sp, #32]
 800c56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c56c:	b1f3      	cbz	r3, 800c5ac <_dtoa_r+0x78c>
 800c56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c570:	2b00      	cmp	r3, #0
 800c572:	f000 80b7 	beq.w	800c6e4 <_dtoa_r+0x8c4>
 800c576:	b18c      	cbz	r4, 800c59c <_dtoa_r+0x77c>
 800c578:	4629      	mov	r1, r5
 800c57a:	4622      	mov	r2, r4
 800c57c:	4658      	mov	r0, fp
 800c57e:	f000 fd11 	bl	800cfa4 <__pow5mult>
 800c582:	464a      	mov	r2, r9
 800c584:	4601      	mov	r1, r0
 800c586:	4605      	mov	r5, r0
 800c588:	4658      	mov	r0, fp
 800c58a:	f000 fc61 	bl	800ce50 <__multiply>
 800c58e:	4649      	mov	r1, r9
 800c590:	9004      	str	r0, [sp, #16]
 800c592:	4658      	mov	r0, fp
 800c594:	f000 fb48 	bl	800cc28 <_Bfree>
 800c598:	9b04      	ldr	r3, [sp, #16]
 800c59a:	4699      	mov	r9, r3
 800c59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c59e:	1b1a      	subs	r2, r3, r4
 800c5a0:	d004      	beq.n	800c5ac <_dtoa_r+0x78c>
 800c5a2:	4649      	mov	r1, r9
 800c5a4:	4658      	mov	r0, fp
 800c5a6:	f000 fcfd 	bl	800cfa4 <__pow5mult>
 800c5aa:	4681      	mov	r9, r0
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	4658      	mov	r0, fp
 800c5b0:	f000 fc38 	bl	800ce24 <__i2b>
 800c5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f000 81cf 	beq.w	800c95c <_dtoa_r+0xb3c>
 800c5be:	461a      	mov	r2, r3
 800c5c0:	4601      	mov	r1, r0
 800c5c2:	4658      	mov	r0, fp
 800c5c4:	f000 fcee 	bl	800cfa4 <__pow5mult>
 800c5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	f300 8095 	bgt.w	800c6fc <_dtoa_r+0x8dc>
 800c5d2:	9b02      	ldr	r3, [sp, #8]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	f040 8087 	bne.w	800c6e8 <_dtoa_r+0x8c8>
 800c5da:	9b03      	ldr	r3, [sp, #12]
 800c5dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f040 8089 	bne.w	800c6f8 <_dtoa_r+0x8d8>
 800c5e6:	9b03      	ldr	r3, [sp, #12]
 800c5e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c5ec:	0d1b      	lsrs	r3, r3, #20
 800c5ee:	051b      	lsls	r3, r3, #20
 800c5f0:	b12b      	cbz	r3, 800c5fe <_dtoa_r+0x7de>
 800c5f2:	9b08      	ldr	r3, [sp, #32]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	9308      	str	r3, [sp, #32]
 800c5f8:	f108 0801 	add.w	r8, r8, #1
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c602:	2b00      	cmp	r3, #0
 800c604:	f000 81b0 	beq.w	800c968 <_dtoa_r+0xb48>
 800c608:	6923      	ldr	r3, [r4, #16]
 800c60a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c60e:	6918      	ldr	r0, [r3, #16]
 800c610:	f000 fbbc 	bl	800cd8c <__hi0bits>
 800c614:	f1c0 0020 	rsb	r0, r0, #32
 800c618:	9b08      	ldr	r3, [sp, #32]
 800c61a:	4418      	add	r0, r3
 800c61c:	f010 001f 	ands.w	r0, r0, #31
 800c620:	d077      	beq.n	800c712 <_dtoa_r+0x8f2>
 800c622:	f1c0 0320 	rsb	r3, r0, #32
 800c626:	2b04      	cmp	r3, #4
 800c628:	dd6b      	ble.n	800c702 <_dtoa_r+0x8e2>
 800c62a:	9b08      	ldr	r3, [sp, #32]
 800c62c:	f1c0 001c 	rsb	r0, r0, #28
 800c630:	4403      	add	r3, r0
 800c632:	4480      	add	r8, r0
 800c634:	4406      	add	r6, r0
 800c636:	9308      	str	r3, [sp, #32]
 800c638:	f1b8 0f00 	cmp.w	r8, #0
 800c63c:	dd05      	ble.n	800c64a <_dtoa_r+0x82a>
 800c63e:	4649      	mov	r1, r9
 800c640:	4642      	mov	r2, r8
 800c642:	4658      	mov	r0, fp
 800c644:	f000 fd08 	bl	800d058 <__lshift>
 800c648:	4681      	mov	r9, r0
 800c64a:	9b08      	ldr	r3, [sp, #32]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	dd05      	ble.n	800c65c <_dtoa_r+0x83c>
 800c650:	4621      	mov	r1, r4
 800c652:	461a      	mov	r2, r3
 800c654:	4658      	mov	r0, fp
 800c656:	f000 fcff 	bl	800d058 <__lshift>
 800c65a:	4604      	mov	r4, r0
 800c65c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d059      	beq.n	800c716 <_dtoa_r+0x8f6>
 800c662:	4621      	mov	r1, r4
 800c664:	4648      	mov	r0, r9
 800c666:	f000 fd63 	bl	800d130 <__mcmp>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	da53      	bge.n	800c716 <_dtoa_r+0x8f6>
 800c66e:	1e7b      	subs	r3, r7, #1
 800c670:	9304      	str	r3, [sp, #16]
 800c672:	4649      	mov	r1, r9
 800c674:	2300      	movs	r3, #0
 800c676:	220a      	movs	r2, #10
 800c678:	4658      	mov	r0, fp
 800c67a:	f000 faf7 	bl	800cc6c <__multadd>
 800c67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c680:	4681      	mov	r9, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	f000 8172 	beq.w	800c96c <_dtoa_r+0xb4c>
 800c688:	2300      	movs	r3, #0
 800c68a:	4629      	mov	r1, r5
 800c68c:	220a      	movs	r2, #10
 800c68e:	4658      	mov	r0, fp
 800c690:	f000 faec 	bl	800cc6c <__multadd>
 800c694:	9b00      	ldr	r3, [sp, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	4605      	mov	r5, r0
 800c69a:	dc67      	bgt.n	800c76c <_dtoa_r+0x94c>
 800c69c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	dc41      	bgt.n	800c726 <_dtoa_r+0x906>
 800c6a2:	e063      	b.n	800c76c <_dtoa_r+0x94c>
 800c6a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c6a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c6aa:	e746      	b.n	800c53a <_dtoa_r+0x71a>
 800c6ac:	9b07      	ldr	r3, [sp, #28]
 800c6ae:	1e5c      	subs	r4, r3, #1
 800c6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6b2:	42a3      	cmp	r3, r4
 800c6b4:	bfbf      	itttt	lt
 800c6b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c6b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c6ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c6bc:	1ae3      	sublt	r3, r4, r3
 800c6be:	bfb4      	ite	lt
 800c6c0:	18d2      	addlt	r2, r2, r3
 800c6c2:	1b1c      	subge	r4, r3, r4
 800c6c4:	9b07      	ldr	r3, [sp, #28]
 800c6c6:	bfbc      	itt	lt
 800c6c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c6ca:	2400      	movlt	r4, #0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	bfb5      	itete	lt
 800c6d0:	eba8 0603 	sublt.w	r6, r8, r3
 800c6d4:	9b07      	ldrge	r3, [sp, #28]
 800c6d6:	2300      	movlt	r3, #0
 800c6d8:	4646      	movge	r6, r8
 800c6da:	e730      	b.n	800c53e <_dtoa_r+0x71e>
 800c6dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c6de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c6e0:	4646      	mov	r6, r8
 800c6e2:	e735      	b.n	800c550 <_dtoa_r+0x730>
 800c6e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6e6:	e75c      	b.n	800c5a2 <_dtoa_r+0x782>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	e788      	b.n	800c5fe <_dtoa_r+0x7de>
 800c6ec:	3fe00000 	.word	0x3fe00000
 800c6f0:	40240000 	.word	0x40240000
 800c6f4:	40140000 	.word	0x40140000
 800c6f8:	9b02      	ldr	r3, [sp, #8]
 800c6fa:	e780      	b.n	800c5fe <_dtoa_r+0x7de>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c700:	e782      	b.n	800c608 <_dtoa_r+0x7e8>
 800c702:	d099      	beq.n	800c638 <_dtoa_r+0x818>
 800c704:	9a08      	ldr	r2, [sp, #32]
 800c706:	331c      	adds	r3, #28
 800c708:	441a      	add	r2, r3
 800c70a:	4498      	add	r8, r3
 800c70c:	441e      	add	r6, r3
 800c70e:	9208      	str	r2, [sp, #32]
 800c710:	e792      	b.n	800c638 <_dtoa_r+0x818>
 800c712:	4603      	mov	r3, r0
 800c714:	e7f6      	b.n	800c704 <_dtoa_r+0x8e4>
 800c716:	9b07      	ldr	r3, [sp, #28]
 800c718:	9704      	str	r7, [sp, #16]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	dc20      	bgt.n	800c760 <_dtoa_r+0x940>
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c722:	2b02      	cmp	r3, #2
 800c724:	dd1e      	ble.n	800c764 <_dtoa_r+0x944>
 800c726:	9b00      	ldr	r3, [sp, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f47f aec0 	bne.w	800c4ae <_dtoa_r+0x68e>
 800c72e:	4621      	mov	r1, r4
 800c730:	2205      	movs	r2, #5
 800c732:	4658      	mov	r0, fp
 800c734:	f000 fa9a 	bl	800cc6c <__multadd>
 800c738:	4601      	mov	r1, r0
 800c73a:	4604      	mov	r4, r0
 800c73c:	4648      	mov	r0, r9
 800c73e:	f000 fcf7 	bl	800d130 <__mcmp>
 800c742:	2800      	cmp	r0, #0
 800c744:	f77f aeb3 	ble.w	800c4ae <_dtoa_r+0x68e>
 800c748:	4656      	mov	r6, sl
 800c74a:	2331      	movs	r3, #49	@ 0x31
 800c74c:	f806 3b01 	strb.w	r3, [r6], #1
 800c750:	9b04      	ldr	r3, [sp, #16]
 800c752:	3301      	adds	r3, #1
 800c754:	9304      	str	r3, [sp, #16]
 800c756:	e6ae      	b.n	800c4b6 <_dtoa_r+0x696>
 800c758:	9c07      	ldr	r4, [sp, #28]
 800c75a:	9704      	str	r7, [sp, #16]
 800c75c:	4625      	mov	r5, r4
 800c75e:	e7f3      	b.n	800c748 <_dtoa_r+0x928>
 800c760:	9b07      	ldr	r3, [sp, #28]
 800c762:	9300      	str	r3, [sp, #0]
 800c764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c766:	2b00      	cmp	r3, #0
 800c768:	f000 8104 	beq.w	800c974 <_dtoa_r+0xb54>
 800c76c:	2e00      	cmp	r6, #0
 800c76e:	dd05      	ble.n	800c77c <_dtoa_r+0x95c>
 800c770:	4629      	mov	r1, r5
 800c772:	4632      	mov	r2, r6
 800c774:	4658      	mov	r0, fp
 800c776:	f000 fc6f 	bl	800d058 <__lshift>
 800c77a:	4605      	mov	r5, r0
 800c77c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d05a      	beq.n	800c838 <_dtoa_r+0xa18>
 800c782:	6869      	ldr	r1, [r5, #4]
 800c784:	4658      	mov	r0, fp
 800c786:	f000 fa0f 	bl	800cba8 <_Balloc>
 800c78a:	4606      	mov	r6, r0
 800c78c:	b928      	cbnz	r0, 800c79a <_dtoa_r+0x97a>
 800c78e:	4b84      	ldr	r3, [pc, #528]	@ (800c9a0 <_dtoa_r+0xb80>)
 800c790:	4602      	mov	r2, r0
 800c792:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c796:	f7ff bb5a 	b.w	800be4e <_dtoa_r+0x2e>
 800c79a:	692a      	ldr	r2, [r5, #16]
 800c79c:	3202      	adds	r2, #2
 800c79e:	0092      	lsls	r2, r2, #2
 800c7a0:	f105 010c 	add.w	r1, r5, #12
 800c7a4:	300c      	adds	r0, #12
 800c7a6:	f7ff fa9e 	bl	800bce6 <memcpy>
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	4631      	mov	r1, r6
 800c7ae:	4658      	mov	r0, fp
 800c7b0:	f000 fc52 	bl	800d058 <__lshift>
 800c7b4:	f10a 0301 	add.w	r3, sl, #1
 800c7b8:	9307      	str	r3, [sp, #28]
 800c7ba:	9b00      	ldr	r3, [sp, #0]
 800c7bc:	4453      	add	r3, sl
 800c7be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7c0:	9b02      	ldr	r3, [sp, #8]
 800c7c2:	f003 0301 	and.w	r3, r3, #1
 800c7c6:	462f      	mov	r7, r5
 800c7c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7ca:	4605      	mov	r5, r0
 800c7cc:	9b07      	ldr	r3, [sp, #28]
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	4648      	mov	r0, r9
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	f7ff fa9b 	bl	800bd10 <quorem>
 800c7da:	4639      	mov	r1, r7
 800c7dc:	9002      	str	r0, [sp, #8]
 800c7de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c7e2:	4648      	mov	r0, r9
 800c7e4:	f000 fca4 	bl	800d130 <__mcmp>
 800c7e8:	462a      	mov	r2, r5
 800c7ea:	9008      	str	r0, [sp, #32]
 800c7ec:	4621      	mov	r1, r4
 800c7ee:	4658      	mov	r0, fp
 800c7f0:	f000 fcba 	bl	800d168 <__mdiff>
 800c7f4:	68c2      	ldr	r2, [r0, #12]
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	bb02      	cbnz	r2, 800c83c <_dtoa_r+0xa1c>
 800c7fa:	4601      	mov	r1, r0
 800c7fc:	4648      	mov	r0, r9
 800c7fe:	f000 fc97 	bl	800d130 <__mcmp>
 800c802:	4602      	mov	r2, r0
 800c804:	4631      	mov	r1, r6
 800c806:	4658      	mov	r0, fp
 800c808:	920e      	str	r2, [sp, #56]	@ 0x38
 800c80a:	f000 fa0d 	bl	800cc28 <_Bfree>
 800c80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c812:	9e07      	ldr	r6, [sp, #28]
 800c814:	ea43 0102 	orr.w	r1, r3, r2
 800c818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c81a:	4319      	orrs	r1, r3
 800c81c:	d110      	bne.n	800c840 <_dtoa_r+0xa20>
 800c81e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c822:	d029      	beq.n	800c878 <_dtoa_r+0xa58>
 800c824:	9b08      	ldr	r3, [sp, #32]
 800c826:	2b00      	cmp	r3, #0
 800c828:	dd02      	ble.n	800c830 <_dtoa_r+0xa10>
 800c82a:	9b02      	ldr	r3, [sp, #8]
 800c82c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c830:	9b00      	ldr	r3, [sp, #0]
 800c832:	f883 8000 	strb.w	r8, [r3]
 800c836:	e63f      	b.n	800c4b8 <_dtoa_r+0x698>
 800c838:	4628      	mov	r0, r5
 800c83a:	e7bb      	b.n	800c7b4 <_dtoa_r+0x994>
 800c83c:	2201      	movs	r2, #1
 800c83e:	e7e1      	b.n	800c804 <_dtoa_r+0x9e4>
 800c840:	9b08      	ldr	r3, [sp, #32]
 800c842:	2b00      	cmp	r3, #0
 800c844:	db04      	blt.n	800c850 <_dtoa_r+0xa30>
 800c846:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c848:	430b      	orrs	r3, r1
 800c84a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c84c:	430b      	orrs	r3, r1
 800c84e:	d120      	bne.n	800c892 <_dtoa_r+0xa72>
 800c850:	2a00      	cmp	r2, #0
 800c852:	dded      	ble.n	800c830 <_dtoa_r+0xa10>
 800c854:	4649      	mov	r1, r9
 800c856:	2201      	movs	r2, #1
 800c858:	4658      	mov	r0, fp
 800c85a:	f000 fbfd 	bl	800d058 <__lshift>
 800c85e:	4621      	mov	r1, r4
 800c860:	4681      	mov	r9, r0
 800c862:	f000 fc65 	bl	800d130 <__mcmp>
 800c866:	2800      	cmp	r0, #0
 800c868:	dc03      	bgt.n	800c872 <_dtoa_r+0xa52>
 800c86a:	d1e1      	bne.n	800c830 <_dtoa_r+0xa10>
 800c86c:	f018 0f01 	tst.w	r8, #1
 800c870:	d0de      	beq.n	800c830 <_dtoa_r+0xa10>
 800c872:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c876:	d1d8      	bne.n	800c82a <_dtoa_r+0xa0a>
 800c878:	9a00      	ldr	r2, [sp, #0]
 800c87a:	2339      	movs	r3, #57	@ 0x39
 800c87c:	7013      	strb	r3, [r2, #0]
 800c87e:	4633      	mov	r3, r6
 800c880:	461e      	mov	r6, r3
 800c882:	3b01      	subs	r3, #1
 800c884:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c888:	2a39      	cmp	r2, #57	@ 0x39
 800c88a:	d052      	beq.n	800c932 <_dtoa_r+0xb12>
 800c88c:	3201      	adds	r2, #1
 800c88e:	701a      	strb	r2, [r3, #0]
 800c890:	e612      	b.n	800c4b8 <_dtoa_r+0x698>
 800c892:	2a00      	cmp	r2, #0
 800c894:	dd07      	ble.n	800c8a6 <_dtoa_r+0xa86>
 800c896:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c89a:	d0ed      	beq.n	800c878 <_dtoa_r+0xa58>
 800c89c:	9a00      	ldr	r2, [sp, #0]
 800c89e:	f108 0301 	add.w	r3, r8, #1
 800c8a2:	7013      	strb	r3, [r2, #0]
 800c8a4:	e608      	b.n	800c4b8 <_dtoa_r+0x698>
 800c8a6:	9b07      	ldr	r3, [sp, #28]
 800c8a8:	9a07      	ldr	r2, [sp, #28]
 800c8aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c8ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d028      	beq.n	800c906 <_dtoa_r+0xae6>
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	220a      	movs	r2, #10
 800c8ba:	4658      	mov	r0, fp
 800c8bc:	f000 f9d6 	bl	800cc6c <__multadd>
 800c8c0:	42af      	cmp	r7, r5
 800c8c2:	4681      	mov	r9, r0
 800c8c4:	f04f 0300 	mov.w	r3, #0
 800c8c8:	f04f 020a 	mov.w	r2, #10
 800c8cc:	4639      	mov	r1, r7
 800c8ce:	4658      	mov	r0, fp
 800c8d0:	d107      	bne.n	800c8e2 <_dtoa_r+0xac2>
 800c8d2:	f000 f9cb 	bl	800cc6c <__multadd>
 800c8d6:	4607      	mov	r7, r0
 800c8d8:	4605      	mov	r5, r0
 800c8da:	9b07      	ldr	r3, [sp, #28]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	9307      	str	r3, [sp, #28]
 800c8e0:	e774      	b.n	800c7cc <_dtoa_r+0x9ac>
 800c8e2:	f000 f9c3 	bl	800cc6c <__multadd>
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	4607      	mov	r7, r0
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	220a      	movs	r2, #10
 800c8ee:	4658      	mov	r0, fp
 800c8f0:	f000 f9bc 	bl	800cc6c <__multadd>
 800c8f4:	4605      	mov	r5, r0
 800c8f6:	e7f0      	b.n	800c8da <_dtoa_r+0xaba>
 800c8f8:	9b00      	ldr	r3, [sp, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	bfcc      	ite	gt
 800c8fe:	461e      	movgt	r6, r3
 800c900:	2601      	movle	r6, #1
 800c902:	4456      	add	r6, sl
 800c904:	2700      	movs	r7, #0
 800c906:	4649      	mov	r1, r9
 800c908:	2201      	movs	r2, #1
 800c90a:	4658      	mov	r0, fp
 800c90c:	f000 fba4 	bl	800d058 <__lshift>
 800c910:	4621      	mov	r1, r4
 800c912:	4681      	mov	r9, r0
 800c914:	f000 fc0c 	bl	800d130 <__mcmp>
 800c918:	2800      	cmp	r0, #0
 800c91a:	dcb0      	bgt.n	800c87e <_dtoa_r+0xa5e>
 800c91c:	d102      	bne.n	800c924 <_dtoa_r+0xb04>
 800c91e:	f018 0f01 	tst.w	r8, #1
 800c922:	d1ac      	bne.n	800c87e <_dtoa_r+0xa5e>
 800c924:	4633      	mov	r3, r6
 800c926:	461e      	mov	r6, r3
 800c928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c92c:	2a30      	cmp	r2, #48	@ 0x30
 800c92e:	d0fa      	beq.n	800c926 <_dtoa_r+0xb06>
 800c930:	e5c2      	b.n	800c4b8 <_dtoa_r+0x698>
 800c932:	459a      	cmp	sl, r3
 800c934:	d1a4      	bne.n	800c880 <_dtoa_r+0xa60>
 800c936:	9b04      	ldr	r3, [sp, #16]
 800c938:	3301      	adds	r3, #1
 800c93a:	9304      	str	r3, [sp, #16]
 800c93c:	2331      	movs	r3, #49	@ 0x31
 800c93e:	f88a 3000 	strb.w	r3, [sl]
 800c942:	e5b9      	b.n	800c4b8 <_dtoa_r+0x698>
 800c944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c946:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c9a4 <_dtoa_r+0xb84>
 800c94a:	b11b      	cbz	r3, 800c954 <_dtoa_r+0xb34>
 800c94c:	f10a 0308 	add.w	r3, sl, #8
 800c950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c952:	6013      	str	r3, [r2, #0]
 800c954:	4650      	mov	r0, sl
 800c956:	b019      	add	sp, #100	@ 0x64
 800c958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c95e:	2b01      	cmp	r3, #1
 800c960:	f77f ae37 	ble.w	800c5d2 <_dtoa_r+0x7b2>
 800c964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c966:	930a      	str	r3, [sp, #40]	@ 0x28
 800c968:	2001      	movs	r0, #1
 800c96a:	e655      	b.n	800c618 <_dtoa_r+0x7f8>
 800c96c:	9b00      	ldr	r3, [sp, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f77f aed6 	ble.w	800c720 <_dtoa_r+0x900>
 800c974:	4656      	mov	r6, sl
 800c976:	4621      	mov	r1, r4
 800c978:	4648      	mov	r0, r9
 800c97a:	f7ff f9c9 	bl	800bd10 <quorem>
 800c97e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c982:	f806 8b01 	strb.w	r8, [r6], #1
 800c986:	9b00      	ldr	r3, [sp, #0]
 800c988:	eba6 020a 	sub.w	r2, r6, sl
 800c98c:	4293      	cmp	r3, r2
 800c98e:	ddb3      	ble.n	800c8f8 <_dtoa_r+0xad8>
 800c990:	4649      	mov	r1, r9
 800c992:	2300      	movs	r3, #0
 800c994:	220a      	movs	r2, #10
 800c996:	4658      	mov	r0, fp
 800c998:	f000 f968 	bl	800cc6c <__multadd>
 800c99c:	4681      	mov	r9, r0
 800c99e:	e7ea      	b.n	800c976 <_dtoa_r+0xb56>
 800c9a0:	0800f8a5 	.word	0x0800f8a5
 800c9a4:	0800f829 	.word	0x0800f829

0800c9a8 <_free_r>:
 800c9a8:	b538      	push	{r3, r4, r5, lr}
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	2900      	cmp	r1, #0
 800c9ae:	d041      	beq.n	800ca34 <_free_r+0x8c>
 800c9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b4:	1f0c      	subs	r4, r1, #4
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	bfb8      	it	lt
 800c9ba:	18e4      	addlt	r4, r4, r3
 800c9bc:	f000 f8e8 	bl	800cb90 <__malloc_lock>
 800c9c0:	4a1d      	ldr	r2, [pc, #116]	@ (800ca38 <_free_r+0x90>)
 800c9c2:	6813      	ldr	r3, [r2, #0]
 800c9c4:	b933      	cbnz	r3, 800c9d4 <_free_r+0x2c>
 800c9c6:	6063      	str	r3, [r4, #4]
 800c9c8:	6014      	str	r4, [r2, #0]
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9d0:	f000 b8e4 	b.w	800cb9c <__malloc_unlock>
 800c9d4:	42a3      	cmp	r3, r4
 800c9d6:	d908      	bls.n	800c9ea <_free_r+0x42>
 800c9d8:	6820      	ldr	r0, [r4, #0]
 800c9da:	1821      	adds	r1, r4, r0
 800c9dc:	428b      	cmp	r3, r1
 800c9de:	bf01      	itttt	eq
 800c9e0:	6819      	ldreq	r1, [r3, #0]
 800c9e2:	685b      	ldreq	r3, [r3, #4]
 800c9e4:	1809      	addeq	r1, r1, r0
 800c9e6:	6021      	streq	r1, [r4, #0]
 800c9e8:	e7ed      	b.n	800c9c6 <_free_r+0x1e>
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	b10b      	cbz	r3, 800c9f4 <_free_r+0x4c>
 800c9f0:	42a3      	cmp	r3, r4
 800c9f2:	d9fa      	bls.n	800c9ea <_free_r+0x42>
 800c9f4:	6811      	ldr	r1, [r2, #0]
 800c9f6:	1850      	adds	r0, r2, r1
 800c9f8:	42a0      	cmp	r0, r4
 800c9fa:	d10b      	bne.n	800ca14 <_free_r+0x6c>
 800c9fc:	6820      	ldr	r0, [r4, #0]
 800c9fe:	4401      	add	r1, r0
 800ca00:	1850      	adds	r0, r2, r1
 800ca02:	4283      	cmp	r3, r0
 800ca04:	6011      	str	r1, [r2, #0]
 800ca06:	d1e0      	bne.n	800c9ca <_free_r+0x22>
 800ca08:	6818      	ldr	r0, [r3, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	6053      	str	r3, [r2, #4]
 800ca0e:	4408      	add	r0, r1
 800ca10:	6010      	str	r0, [r2, #0]
 800ca12:	e7da      	b.n	800c9ca <_free_r+0x22>
 800ca14:	d902      	bls.n	800ca1c <_free_r+0x74>
 800ca16:	230c      	movs	r3, #12
 800ca18:	602b      	str	r3, [r5, #0]
 800ca1a:	e7d6      	b.n	800c9ca <_free_r+0x22>
 800ca1c:	6820      	ldr	r0, [r4, #0]
 800ca1e:	1821      	adds	r1, r4, r0
 800ca20:	428b      	cmp	r3, r1
 800ca22:	bf04      	itt	eq
 800ca24:	6819      	ldreq	r1, [r3, #0]
 800ca26:	685b      	ldreq	r3, [r3, #4]
 800ca28:	6063      	str	r3, [r4, #4]
 800ca2a:	bf04      	itt	eq
 800ca2c:	1809      	addeq	r1, r1, r0
 800ca2e:	6021      	streq	r1, [r4, #0]
 800ca30:	6054      	str	r4, [r2, #4]
 800ca32:	e7ca      	b.n	800c9ca <_free_r+0x22>
 800ca34:	bd38      	pop	{r3, r4, r5, pc}
 800ca36:	bf00      	nop
 800ca38:	20005244 	.word	0x20005244

0800ca3c <malloc>:
 800ca3c:	4b02      	ldr	r3, [pc, #8]	@ (800ca48 <malloc+0xc>)
 800ca3e:	4601      	mov	r1, r0
 800ca40:	6818      	ldr	r0, [r3, #0]
 800ca42:	f000 b825 	b.w	800ca90 <_malloc_r>
 800ca46:	bf00      	nop
 800ca48:	20000020 	.word	0x20000020

0800ca4c <sbrk_aligned>:
 800ca4c:	b570      	push	{r4, r5, r6, lr}
 800ca4e:	4e0f      	ldr	r6, [pc, #60]	@ (800ca8c <sbrk_aligned+0x40>)
 800ca50:	460c      	mov	r4, r1
 800ca52:	6831      	ldr	r1, [r6, #0]
 800ca54:	4605      	mov	r5, r0
 800ca56:	b911      	cbnz	r1, 800ca5e <sbrk_aligned+0x12>
 800ca58:	f001 fe0c 	bl	800e674 <_sbrk_r>
 800ca5c:	6030      	str	r0, [r6, #0]
 800ca5e:	4621      	mov	r1, r4
 800ca60:	4628      	mov	r0, r5
 800ca62:	f001 fe07 	bl	800e674 <_sbrk_r>
 800ca66:	1c43      	adds	r3, r0, #1
 800ca68:	d103      	bne.n	800ca72 <sbrk_aligned+0x26>
 800ca6a:	f04f 34ff 	mov.w	r4, #4294967295
 800ca6e:	4620      	mov	r0, r4
 800ca70:	bd70      	pop	{r4, r5, r6, pc}
 800ca72:	1cc4      	adds	r4, r0, #3
 800ca74:	f024 0403 	bic.w	r4, r4, #3
 800ca78:	42a0      	cmp	r0, r4
 800ca7a:	d0f8      	beq.n	800ca6e <sbrk_aligned+0x22>
 800ca7c:	1a21      	subs	r1, r4, r0
 800ca7e:	4628      	mov	r0, r5
 800ca80:	f001 fdf8 	bl	800e674 <_sbrk_r>
 800ca84:	3001      	adds	r0, #1
 800ca86:	d1f2      	bne.n	800ca6e <sbrk_aligned+0x22>
 800ca88:	e7ef      	b.n	800ca6a <sbrk_aligned+0x1e>
 800ca8a:	bf00      	nop
 800ca8c:	20005240 	.word	0x20005240

0800ca90 <_malloc_r>:
 800ca90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca94:	1ccd      	adds	r5, r1, #3
 800ca96:	f025 0503 	bic.w	r5, r5, #3
 800ca9a:	3508      	adds	r5, #8
 800ca9c:	2d0c      	cmp	r5, #12
 800ca9e:	bf38      	it	cc
 800caa0:	250c      	movcc	r5, #12
 800caa2:	2d00      	cmp	r5, #0
 800caa4:	4606      	mov	r6, r0
 800caa6:	db01      	blt.n	800caac <_malloc_r+0x1c>
 800caa8:	42a9      	cmp	r1, r5
 800caaa:	d904      	bls.n	800cab6 <_malloc_r+0x26>
 800caac:	230c      	movs	r3, #12
 800caae:	6033      	str	r3, [r6, #0]
 800cab0:	2000      	movs	r0, #0
 800cab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb8c <_malloc_r+0xfc>
 800caba:	f000 f869 	bl	800cb90 <__malloc_lock>
 800cabe:	f8d8 3000 	ldr.w	r3, [r8]
 800cac2:	461c      	mov	r4, r3
 800cac4:	bb44      	cbnz	r4, 800cb18 <_malloc_r+0x88>
 800cac6:	4629      	mov	r1, r5
 800cac8:	4630      	mov	r0, r6
 800caca:	f7ff ffbf 	bl	800ca4c <sbrk_aligned>
 800cace:	1c43      	adds	r3, r0, #1
 800cad0:	4604      	mov	r4, r0
 800cad2:	d158      	bne.n	800cb86 <_malloc_r+0xf6>
 800cad4:	f8d8 4000 	ldr.w	r4, [r8]
 800cad8:	4627      	mov	r7, r4
 800cada:	2f00      	cmp	r7, #0
 800cadc:	d143      	bne.n	800cb66 <_malloc_r+0xd6>
 800cade:	2c00      	cmp	r4, #0
 800cae0:	d04b      	beq.n	800cb7a <_malloc_r+0xea>
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	4639      	mov	r1, r7
 800cae6:	4630      	mov	r0, r6
 800cae8:	eb04 0903 	add.w	r9, r4, r3
 800caec:	f001 fdc2 	bl	800e674 <_sbrk_r>
 800caf0:	4581      	cmp	r9, r0
 800caf2:	d142      	bne.n	800cb7a <_malloc_r+0xea>
 800caf4:	6821      	ldr	r1, [r4, #0]
 800caf6:	1a6d      	subs	r5, r5, r1
 800caf8:	4629      	mov	r1, r5
 800cafa:	4630      	mov	r0, r6
 800cafc:	f7ff ffa6 	bl	800ca4c <sbrk_aligned>
 800cb00:	3001      	adds	r0, #1
 800cb02:	d03a      	beq.n	800cb7a <_malloc_r+0xea>
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	442b      	add	r3, r5
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb0e:	685a      	ldr	r2, [r3, #4]
 800cb10:	bb62      	cbnz	r2, 800cb6c <_malloc_r+0xdc>
 800cb12:	f8c8 7000 	str.w	r7, [r8]
 800cb16:	e00f      	b.n	800cb38 <_malloc_r+0xa8>
 800cb18:	6822      	ldr	r2, [r4, #0]
 800cb1a:	1b52      	subs	r2, r2, r5
 800cb1c:	d420      	bmi.n	800cb60 <_malloc_r+0xd0>
 800cb1e:	2a0b      	cmp	r2, #11
 800cb20:	d917      	bls.n	800cb52 <_malloc_r+0xc2>
 800cb22:	1961      	adds	r1, r4, r5
 800cb24:	42a3      	cmp	r3, r4
 800cb26:	6025      	str	r5, [r4, #0]
 800cb28:	bf18      	it	ne
 800cb2a:	6059      	strne	r1, [r3, #4]
 800cb2c:	6863      	ldr	r3, [r4, #4]
 800cb2e:	bf08      	it	eq
 800cb30:	f8c8 1000 	streq.w	r1, [r8]
 800cb34:	5162      	str	r2, [r4, r5]
 800cb36:	604b      	str	r3, [r1, #4]
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f000 f82f 	bl	800cb9c <__malloc_unlock>
 800cb3e:	f104 000b 	add.w	r0, r4, #11
 800cb42:	1d23      	adds	r3, r4, #4
 800cb44:	f020 0007 	bic.w	r0, r0, #7
 800cb48:	1ac2      	subs	r2, r0, r3
 800cb4a:	bf1c      	itt	ne
 800cb4c:	1a1b      	subne	r3, r3, r0
 800cb4e:	50a3      	strne	r3, [r4, r2]
 800cb50:	e7af      	b.n	800cab2 <_malloc_r+0x22>
 800cb52:	6862      	ldr	r2, [r4, #4]
 800cb54:	42a3      	cmp	r3, r4
 800cb56:	bf0c      	ite	eq
 800cb58:	f8c8 2000 	streq.w	r2, [r8]
 800cb5c:	605a      	strne	r2, [r3, #4]
 800cb5e:	e7eb      	b.n	800cb38 <_malloc_r+0xa8>
 800cb60:	4623      	mov	r3, r4
 800cb62:	6864      	ldr	r4, [r4, #4]
 800cb64:	e7ae      	b.n	800cac4 <_malloc_r+0x34>
 800cb66:	463c      	mov	r4, r7
 800cb68:	687f      	ldr	r7, [r7, #4]
 800cb6a:	e7b6      	b.n	800cada <_malloc_r+0x4a>
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	42a3      	cmp	r3, r4
 800cb72:	d1fb      	bne.n	800cb6c <_malloc_r+0xdc>
 800cb74:	2300      	movs	r3, #0
 800cb76:	6053      	str	r3, [r2, #4]
 800cb78:	e7de      	b.n	800cb38 <_malloc_r+0xa8>
 800cb7a:	230c      	movs	r3, #12
 800cb7c:	6033      	str	r3, [r6, #0]
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f000 f80c 	bl	800cb9c <__malloc_unlock>
 800cb84:	e794      	b.n	800cab0 <_malloc_r+0x20>
 800cb86:	6005      	str	r5, [r0, #0]
 800cb88:	e7d6      	b.n	800cb38 <_malloc_r+0xa8>
 800cb8a:	bf00      	nop
 800cb8c:	20005244 	.word	0x20005244

0800cb90 <__malloc_lock>:
 800cb90:	4801      	ldr	r0, [pc, #4]	@ (800cb98 <__malloc_lock+0x8>)
 800cb92:	f7ff b8a6 	b.w	800bce2 <__retarget_lock_acquire_recursive>
 800cb96:	bf00      	nop
 800cb98:	2000523c 	.word	0x2000523c

0800cb9c <__malloc_unlock>:
 800cb9c:	4801      	ldr	r0, [pc, #4]	@ (800cba4 <__malloc_unlock+0x8>)
 800cb9e:	f7ff b8a1 	b.w	800bce4 <__retarget_lock_release_recursive>
 800cba2:	bf00      	nop
 800cba4:	2000523c 	.word	0x2000523c

0800cba8 <_Balloc>:
 800cba8:	b570      	push	{r4, r5, r6, lr}
 800cbaa:	69c6      	ldr	r6, [r0, #28]
 800cbac:	4604      	mov	r4, r0
 800cbae:	460d      	mov	r5, r1
 800cbb0:	b976      	cbnz	r6, 800cbd0 <_Balloc+0x28>
 800cbb2:	2010      	movs	r0, #16
 800cbb4:	f7ff ff42 	bl	800ca3c <malloc>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	61e0      	str	r0, [r4, #28]
 800cbbc:	b920      	cbnz	r0, 800cbc8 <_Balloc+0x20>
 800cbbe:	4b18      	ldr	r3, [pc, #96]	@ (800cc20 <_Balloc+0x78>)
 800cbc0:	4818      	ldr	r0, [pc, #96]	@ (800cc24 <_Balloc+0x7c>)
 800cbc2:	216b      	movs	r1, #107	@ 0x6b
 800cbc4:	f001 fd70 	bl	800e6a8 <__assert_func>
 800cbc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbcc:	6006      	str	r6, [r0, #0]
 800cbce:	60c6      	str	r6, [r0, #12]
 800cbd0:	69e6      	ldr	r6, [r4, #28]
 800cbd2:	68f3      	ldr	r3, [r6, #12]
 800cbd4:	b183      	cbz	r3, 800cbf8 <_Balloc+0x50>
 800cbd6:	69e3      	ldr	r3, [r4, #28]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbde:	b9b8      	cbnz	r0, 800cc10 <_Balloc+0x68>
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	fa01 f605 	lsl.w	r6, r1, r5
 800cbe6:	1d72      	adds	r2, r6, #5
 800cbe8:	0092      	lsls	r2, r2, #2
 800cbea:	4620      	mov	r0, r4
 800cbec:	f001 fd7a 	bl	800e6e4 <_calloc_r>
 800cbf0:	b160      	cbz	r0, 800cc0c <_Balloc+0x64>
 800cbf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbf6:	e00e      	b.n	800cc16 <_Balloc+0x6e>
 800cbf8:	2221      	movs	r2, #33	@ 0x21
 800cbfa:	2104      	movs	r1, #4
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	f001 fd71 	bl	800e6e4 <_calloc_r>
 800cc02:	69e3      	ldr	r3, [r4, #28]
 800cc04:	60f0      	str	r0, [r6, #12]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d1e4      	bne.n	800cbd6 <_Balloc+0x2e>
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	bd70      	pop	{r4, r5, r6, pc}
 800cc10:	6802      	ldr	r2, [r0, #0]
 800cc12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc16:	2300      	movs	r3, #0
 800cc18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc1c:	e7f7      	b.n	800cc0e <_Balloc+0x66>
 800cc1e:	bf00      	nop
 800cc20:	0800f836 	.word	0x0800f836
 800cc24:	0800f8b6 	.word	0x0800f8b6

0800cc28 <_Bfree>:
 800cc28:	b570      	push	{r4, r5, r6, lr}
 800cc2a:	69c6      	ldr	r6, [r0, #28]
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	460c      	mov	r4, r1
 800cc30:	b976      	cbnz	r6, 800cc50 <_Bfree+0x28>
 800cc32:	2010      	movs	r0, #16
 800cc34:	f7ff ff02 	bl	800ca3c <malloc>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	61e8      	str	r0, [r5, #28]
 800cc3c:	b920      	cbnz	r0, 800cc48 <_Bfree+0x20>
 800cc3e:	4b09      	ldr	r3, [pc, #36]	@ (800cc64 <_Bfree+0x3c>)
 800cc40:	4809      	ldr	r0, [pc, #36]	@ (800cc68 <_Bfree+0x40>)
 800cc42:	218f      	movs	r1, #143	@ 0x8f
 800cc44:	f001 fd30 	bl	800e6a8 <__assert_func>
 800cc48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc4c:	6006      	str	r6, [r0, #0]
 800cc4e:	60c6      	str	r6, [r0, #12]
 800cc50:	b13c      	cbz	r4, 800cc62 <_Bfree+0x3a>
 800cc52:	69eb      	ldr	r3, [r5, #28]
 800cc54:	6862      	ldr	r2, [r4, #4]
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc5c:	6021      	str	r1, [r4, #0]
 800cc5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc62:	bd70      	pop	{r4, r5, r6, pc}
 800cc64:	0800f836 	.word	0x0800f836
 800cc68:	0800f8b6 	.word	0x0800f8b6

0800cc6c <__multadd>:
 800cc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc70:	690d      	ldr	r5, [r1, #16]
 800cc72:	4607      	mov	r7, r0
 800cc74:	460c      	mov	r4, r1
 800cc76:	461e      	mov	r6, r3
 800cc78:	f101 0c14 	add.w	ip, r1, #20
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	f8dc 3000 	ldr.w	r3, [ip]
 800cc82:	b299      	uxth	r1, r3
 800cc84:	fb02 6101 	mla	r1, r2, r1, r6
 800cc88:	0c1e      	lsrs	r6, r3, #16
 800cc8a:	0c0b      	lsrs	r3, r1, #16
 800cc8c:	fb02 3306 	mla	r3, r2, r6, r3
 800cc90:	b289      	uxth	r1, r1
 800cc92:	3001      	adds	r0, #1
 800cc94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc98:	4285      	cmp	r5, r0
 800cc9a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cca2:	dcec      	bgt.n	800cc7e <__multadd+0x12>
 800cca4:	b30e      	cbz	r6, 800ccea <__multadd+0x7e>
 800cca6:	68a3      	ldr	r3, [r4, #8]
 800cca8:	42ab      	cmp	r3, r5
 800ccaa:	dc19      	bgt.n	800cce0 <__multadd+0x74>
 800ccac:	6861      	ldr	r1, [r4, #4]
 800ccae:	4638      	mov	r0, r7
 800ccb0:	3101      	adds	r1, #1
 800ccb2:	f7ff ff79 	bl	800cba8 <_Balloc>
 800ccb6:	4680      	mov	r8, r0
 800ccb8:	b928      	cbnz	r0, 800ccc6 <__multadd+0x5a>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf0 <__multadd+0x84>)
 800ccbe:	480d      	ldr	r0, [pc, #52]	@ (800ccf4 <__multadd+0x88>)
 800ccc0:	21ba      	movs	r1, #186	@ 0xba
 800ccc2:	f001 fcf1 	bl	800e6a8 <__assert_func>
 800ccc6:	6922      	ldr	r2, [r4, #16]
 800ccc8:	3202      	adds	r2, #2
 800ccca:	f104 010c 	add.w	r1, r4, #12
 800ccce:	0092      	lsls	r2, r2, #2
 800ccd0:	300c      	adds	r0, #12
 800ccd2:	f7ff f808 	bl	800bce6 <memcpy>
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	4638      	mov	r0, r7
 800ccda:	f7ff ffa5 	bl	800cc28 <_Bfree>
 800ccde:	4644      	mov	r4, r8
 800cce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cce4:	3501      	adds	r5, #1
 800cce6:	615e      	str	r6, [r3, #20]
 800cce8:	6125      	str	r5, [r4, #16]
 800ccea:	4620      	mov	r0, r4
 800ccec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf0:	0800f8a5 	.word	0x0800f8a5
 800ccf4:	0800f8b6 	.word	0x0800f8b6

0800ccf8 <__s2b>:
 800ccf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	4615      	mov	r5, r2
 800cd00:	461f      	mov	r7, r3
 800cd02:	2209      	movs	r2, #9
 800cd04:	3308      	adds	r3, #8
 800cd06:	4606      	mov	r6, r0
 800cd08:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	2201      	movs	r2, #1
 800cd10:	429a      	cmp	r2, r3
 800cd12:	db09      	blt.n	800cd28 <__s2b+0x30>
 800cd14:	4630      	mov	r0, r6
 800cd16:	f7ff ff47 	bl	800cba8 <_Balloc>
 800cd1a:	b940      	cbnz	r0, 800cd2e <__s2b+0x36>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	4b19      	ldr	r3, [pc, #100]	@ (800cd84 <__s2b+0x8c>)
 800cd20:	4819      	ldr	r0, [pc, #100]	@ (800cd88 <__s2b+0x90>)
 800cd22:	21d3      	movs	r1, #211	@ 0xd3
 800cd24:	f001 fcc0 	bl	800e6a8 <__assert_func>
 800cd28:	0052      	lsls	r2, r2, #1
 800cd2a:	3101      	adds	r1, #1
 800cd2c:	e7f0      	b.n	800cd10 <__s2b+0x18>
 800cd2e:	9b08      	ldr	r3, [sp, #32]
 800cd30:	6143      	str	r3, [r0, #20]
 800cd32:	2d09      	cmp	r5, #9
 800cd34:	f04f 0301 	mov.w	r3, #1
 800cd38:	6103      	str	r3, [r0, #16]
 800cd3a:	dd16      	ble.n	800cd6a <__s2b+0x72>
 800cd3c:	f104 0909 	add.w	r9, r4, #9
 800cd40:	46c8      	mov	r8, r9
 800cd42:	442c      	add	r4, r5
 800cd44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cd48:	4601      	mov	r1, r0
 800cd4a:	3b30      	subs	r3, #48	@ 0x30
 800cd4c:	220a      	movs	r2, #10
 800cd4e:	4630      	mov	r0, r6
 800cd50:	f7ff ff8c 	bl	800cc6c <__multadd>
 800cd54:	45a0      	cmp	r8, r4
 800cd56:	d1f5      	bne.n	800cd44 <__s2b+0x4c>
 800cd58:	f1a5 0408 	sub.w	r4, r5, #8
 800cd5c:	444c      	add	r4, r9
 800cd5e:	1b2d      	subs	r5, r5, r4
 800cd60:	1963      	adds	r3, r4, r5
 800cd62:	42bb      	cmp	r3, r7
 800cd64:	db04      	blt.n	800cd70 <__s2b+0x78>
 800cd66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd6a:	340a      	adds	r4, #10
 800cd6c:	2509      	movs	r5, #9
 800cd6e:	e7f6      	b.n	800cd5e <__s2b+0x66>
 800cd70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd74:	4601      	mov	r1, r0
 800cd76:	3b30      	subs	r3, #48	@ 0x30
 800cd78:	220a      	movs	r2, #10
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	f7ff ff76 	bl	800cc6c <__multadd>
 800cd80:	e7ee      	b.n	800cd60 <__s2b+0x68>
 800cd82:	bf00      	nop
 800cd84:	0800f8a5 	.word	0x0800f8a5
 800cd88:	0800f8b6 	.word	0x0800f8b6

0800cd8c <__hi0bits>:
 800cd8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd90:	4603      	mov	r3, r0
 800cd92:	bf36      	itet	cc
 800cd94:	0403      	lslcc	r3, r0, #16
 800cd96:	2000      	movcs	r0, #0
 800cd98:	2010      	movcc	r0, #16
 800cd9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd9e:	bf3c      	itt	cc
 800cda0:	021b      	lslcc	r3, r3, #8
 800cda2:	3008      	addcc	r0, #8
 800cda4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cda8:	bf3c      	itt	cc
 800cdaa:	011b      	lslcc	r3, r3, #4
 800cdac:	3004      	addcc	r0, #4
 800cdae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdb2:	bf3c      	itt	cc
 800cdb4:	009b      	lslcc	r3, r3, #2
 800cdb6:	3002      	addcc	r0, #2
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	db05      	blt.n	800cdc8 <__hi0bits+0x3c>
 800cdbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cdc0:	f100 0001 	add.w	r0, r0, #1
 800cdc4:	bf08      	it	eq
 800cdc6:	2020      	moveq	r0, #32
 800cdc8:	4770      	bx	lr

0800cdca <__lo0bits>:
 800cdca:	6803      	ldr	r3, [r0, #0]
 800cdcc:	4602      	mov	r2, r0
 800cdce:	f013 0007 	ands.w	r0, r3, #7
 800cdd2:	d00b      	beq.n	800cdec <__lo0bits+0x22>
 800cdd4:	07d9      	lsls	r1, r3, #31
 800cdd6:	d421      	bmi.n	800ce1c <__lo0bits+0x52>
 800cdd8:	0798      	lsls	r0, r3, #30
 800cdda:	bf49      	itett	mi
 800cddc:	085b      	lsrmi	r3, r3, #1
 800cdde:	089b      	lsrpl	r3, r3, #2
 800cde0:	2001      	movmi	r0, #1
 800cde2:	6013      	strmi	r3, [r2, #0]
 800cde4:	bf5c      	itt	pl
 800cde6:	6013      	strpl	r3, [r2, #0]
 800cde8:	2002      	movpl	r0, #2
 800cdea:	4770      	bx	lr
 800cdec:	b299      	uxth	r1, r3
 800cdee:	b909      	cbnz	r1, 800cdf4 <__lo0bits+0x2a>
 800cdf0:	0c1b      	lsrs	r3, r3, #16
 800cdf2:	2010      	movs	r0, #16
 800cdf4:	b2d9      	uxtb	r1, r3
 800cdf6:	b909      	cbnz	r1, 800cdfc <__lo0bits+0x32>
 800cdf8:	3008      	adds	r0, #8
 800cdfa:	0a1b      	lsrs	r3, r3, #8
 800cdfc:	0719      	lsls	r1, r3, #28
 800cdfe:	bf04      	itt	eq
 800ce00:	091b      	lsreq	r3, r3, #4
 800ce02:	3004      	addeq	r0, #4
 800ce04:	0799      	lsls	r1, r3, #30
 800ce06:	bf04      	itt	eq
 800ce08:	089b      	lsreq	r3, r3, #2
 800ce0a:	3002      	addeq	r0, #2
 800ce0c:	07d9      	lsls	r1, r3, #31
 800ce0e:	d403      	bmi.n	800ce18 <__lo0bits+0x4e>
 800ce10:	085b      	lsrs	r3, r3, #1
 800ce12:	f100 0001 	add.w	r0, r0, #1
 800ce16:	d003      	beq.n	800ce20 <__lo0bits+0x56>
 800ce18:	6013      	str	r3, [r2, #0]
 800ce1a:	4770      	bx	lr
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	4770      	bx	lr
 800ce20:	2020      	movs	r0, #32
 800ce22:	4770      	bx	lr

0800ce24 <__i2b>:
 800ce24:	b510      	push	{r4, lr}
 800ce26:	460c      	mov	r4, r1
 800ce28:	2101      	movs	r1, #1
 800ce2a:	f7ff febd 	bl	800cba8 <_Balloc>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	b928      	cbnz	r0, 800ce3e <__i2b+0x1a>
 800ce32:	4b05      	ldr	r3, [pc, #20]	@ (800ce48 <__i2b+0x24>)
 800ce34:	4805      	ldr	r0, [pc, #20]	@ (800ce4c <__i2b+0x28>)
 800ce36:	f240 1145 	movw	r1, #325	@ 0x145
 800ce3a:	f001 fc35 	bl	800e6a8 <__assert_func>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	6144      	str	r4, [r0, #20]
 800ce42:	6103      	str	r3, [r0, #16]
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	bf00      	nop
 800ce48:	0800f8a5 	.word	0x0800f8a5
 800ce4c:	0800f8b6 	.word	0x0800f8b6

0800ce50 <__multiply>:
 800ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	4614      	mov	r4, r2
 800ce56:	690a      	ldr	r2, [r1, #16]
 800ce58:	6923      	ldr	r3, [r4, #16]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	bfa8      	it	ge
 800ce5e:	4623      	movge	r3, r4
 800ce60:	460f      	mov	r7, r1
 800ce62:	bfa4      	itt	ge
 800ce64:	460c      	movge	r4, r1
 800ce66:	461f      	movge	r7, r3
 800ce68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ce6c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ce70:	68a3      	ldr	r3, [r4, #8]
 800ce72:	6861      	ldr	r1, [r4, #4]
 800ce74:	eb0a 0609 	add.w	r6, sl, r9
 800ce78:	42b3      	cmp	r3, r6
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	bfb8      	it	lt
 800ce7e:	3101      	addlt	r1, #1
 800ce80:	f7ff fe92 	bl	800cba8 <_Balloc>
 800ce84:	b930      	cbnz	r0, 800ce94 <__multiply+0x44>
 800ce86:	4602      	mov	r2, r0
 800ce88:	4b44      	ldr	r3, [pc, #272]	@ (800cf9c <__multiply+0x14c>)
 800ce8a:	4845      	ldr	r0, [pc, #276]	@ (800cfa0 <__multiply+0x150>)
 800ce8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce90:	f001 fc0a 	bl	800e6a8 <__assert_func>
 800ce94:	f100 0514 	add.w	r5, r0, #20
 800ce98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce9c:	462b      	mov	r3, r5
 800ce9e:	2200      	movs	r2, #0
 800cea0:	4543      	cmp	r3, r8
 800cea2:	d321      	bcc.n	800cee8 <__multiply+0x98>
 800cea4:	f107 0114 	add.w	r1, r7, #20
 800cea8:	f104 0214 	add.w	r2, r4, #20
 800ceac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ceb0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ceb4:	9302      	str	r3, [sp, #8]
 800ceb6:	1b13      	subs	r3, r2, r4
 800ceb8:	3b15      	subs	r3, #21
 800ceba:	f023 0303 	bic.w	r3, r3, #3
 800cebe:	3304      	adds	r3, #4
 800cec0:	f104 0715 	add.w	r7, r4, #21
 800cec4:	42ba      	cmp	r2, r7
 800cec6:	bf38      	it	cc
 800cec8:	2304      	movcc	r3, #4
 800ceca:	9301      	str	r3, [sp, #4]
 800cecc:	9b02      	ldr	r3, [sp, #8]
 800cece:	9103      	str	r1, [sp, #12]
 800ced0:	428b      	cmp	r3, r1
 800ced2:	d80c      	bhi.n	800ceee <__multiply+0x9e>
 800ced4:	2e00      	cmp	r6, #0
 800ced6:	dd03      	ble.n	800cee0 <__multiply+0x90>
 800ced8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d05b      	beq.n	800cf98 <__multiply+0x148>
 800cee0:	6106      	str	r6, [r0, #16]
 800cee2:	b005      	add	sp, #20
 800cee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee8:	f843 2b04 	str.w	r2, [r3], #4
 800ceec:	e7d8      	b.n	800cea0 <__multiply+0x50>
 800ceee:	f8b1 a000 	ldrh.w	sl, [r1]
 800cef2:	f1ba 0f00 	cmp.w	sl, #0
 800cef6:	d024      	beq.n	800cf42 <__multiply+0xf2>
 800cef8:	f104 0e14 	add.w	lr, r4, #20
 800cefc:	46a9      	mov	r9, r5
 800cefe:	f04f 0c00 	mov.w	ip, #0
 800cf02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf06:	f8d9 3000 	ldr.w	r3, [r9]
 800cf0a:	fa1f fb87 	uxth.w	fp, r7
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	fb0a 330b 	mla	r3, sl, fp, r3
 800cf14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cf18:	f8d9 7000 	ldr.w	r7, [r9]
 800cf1c:	4463      	add	r3, ip
 800cf1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf22:	fb0a c70b 	mla	r7, sl, fp, ip
 800cf26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf30:	4572      	cmp	r2, lr
 800cf32:	f849 3b04 	str.w	r3, [r9], #4
 800cf36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf3a:	d8e2      	bhi.n	800cf02 <__multiply+0xb2>
 800cf3c:	9b01      	ldr	r3, [sp, #4]
 800cf3e:	f845 c003 	str.w	ip, [r5, r3]
 800cf42:	9b03      	ldr	r3, [sp, #12]
 800cf44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf48:	3104      	adds	r1, #4
 800cf4a:	f1b9 0f00 	cmp.w	r9, #0
 800cf4e:	d021      	beq.n	800cf94 <__multiply+0x144>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	f104 0c14 	add.w	ip, r4, #20
 800cf56:	46ae      	mov	lr, r5
 800cf58:	f04f 0a00 	mov.w	sl, #0
 800cf5c:	f8bc b000 	ldrh.w	fp, [ip]
 800cf60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cf64:	fb09 770b 	mla	r7, r9, fp, r7
 800cf68:	4457      	add	r7, sl
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf70:	f84e 3b04 	str.w	r3, [lr], #4
 800cf74:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf7c:	f8be 3000 	ldrh.w	r3, [lr]
 800cf80:	fb09 330a 	mla	r3, r9, sl, r3
 800cf84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cf88:	4562      	cmp	r2, ip
 800cf8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf8e:	d8e5      	bhi.n	800cf5c <__multiply+0x10c>
 800cf90:	9f01      	ldr	r7, [sp, #4]
 800cf92:	51eb      	str	r3, [r5, r7]
 800cf94:	3504      	adds	r5, #4
 800cf96:	e799      	b.n	800cecc <__multiply+0x7c>
 800cf98:	3e01      	subs	r6, #1
 800cf9a:	e79b      	b.n	800ced4 <__multiply+0x84>
 800cf9c:	0800f8a5 	.word	0x0800f8a5
 800cfa0:	0800f8b6 	.word	0x0800f8b6

0800cfa4 <__pow5mult>:
 800cfa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfa8:	4615      	mov	r5, r2
 800cfaa:	f012 0203 	ands.w	r2, r2, #3
 800cfae:	4607      	mov	r7, r0
 800cfb0:	460e      	mov	r6, r1
 800cfb2:	d007      	beq.n	800cfc4 <__pow5mult+0x20>
 800cfb4:	4c25      	ldr	r4, [pc, #148]	@ (800d04c <__pow5mult+0xa8>)
 800cfb6:	3a01      	subs	r2, #1
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfbe:	f7ff fe55 	bl	800cc6c <__multadd>
 800cfc2:	4606      	mov	r6, r0
 800cfc4:	10ad      	asrs	r5, r5, #2
 800cfc6:	d03d      	beq.n	800d044 <__pow5mult+0xa0>
 800cfc8:	69fc      	ldr	r4, [r7, #28]
 800cfca:	b97c      	cbnz	r4, 800cfec <__pow5mult+0x48>
 800cfcc:	2010      	movs	r0, #16
 800cfce:	f7ff fd35 	bl	800ca3c <malloc>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	61f8      	str	r0, [r7, #28]
 800cfd6:	b928      	cbnz	r0, 800cfe4 <__pow5mult+0x40>
 800cfd8:	4b1d      	ldr	r3, [pc, #116]	@ (800d050 <__pow5mult+0xac>)
 800cfda:	481e      	ldr	r0, [pc, #120]	@ (800d054 <__pow5mult+0xb0>)
 800cfdc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cfe0:	f001 fb62 	bl	800e6a8 <__assert_func>
 800cfe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfe8:	6004      	str	r4, [r0, #0]
 800cfea:	60c4      	str	r4, [r0, #12]
 800cfec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cff4:	b94c      	cbnz	r4, 800d00a <__pow5mult+0x66>
 800cff6:	f240 2171 	movw	r1, #625	@ 0x271
 800cffa:	4638      	mov	r0, r7
 800cffc:	f7ff ff12 	bl	800ce24 <__i2b>
 800d000:	2300      	movs	r3, #0
 800d002:	f8c8 0008 	str.w	r0, [r8, #8]
 800d006:	4604      	mov	r4, r0
 800d008:	6003      	str	r3, [r0, #0]
 800d00a:	f04f 0900 	mov.w	r9, #0
 800d00e:	07eb      	lsls	r3, r5, #31
 800d010:	d50a      	bpl.n	800d028 <__pow5mult+0x84>
 800d012:	4631      	mov	r1, r6
 800d014:	4622      	mov	r2, r4
 800d016:	4638      	mov	r0, r7
 800d018:	f7ff ff1a 	bl	800ce50 <__multiply>
 800d01c:	4631      	mov	r1, r6
 800d01e:	4680      	mov	r8, r0
 800d020:	4638      	mov	r0, r7
 800d022:	f7ff fe01 	bl	800cc28 <_Bfree>
 800d026:	4646      	mov	r6, r8
 800d028:	106d      	asrs	r5, r5, #1
 800d02a:	d00b      	beq.n	800d044 <__pow5mult+0xa0>
 800d02c:	6820      	ldr	r0, [r4, #0]
 800d02e:	b938      	cbnz	r0, 800d040 <__pow5mult+0x9c>
 800d030:	4622      	mov	r2, r4
 800d032:	4621      	mov	r1, r4
 800d034:	4638      	mov	r0, r7
 800d036:	f7ff ff0b 	bl	800ce50 <__multiply>
 800d03a:	6020      	str	r0, [r4, #0]
 800d03c:	f8c0 9000 	str.w	r9, [r0]
 800d040:	4604      	mov	r4, r0
 800d042:	e7e4      	b.n	800d00e <__pow5mult+0x6a>
 800d044:	4630      	mov	r0, r6
 800d046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d04a:	bf00      	nop
 800d04c:	0800f910 	.word	0x0800f910
 800d050:	0800f836 	.word	0x0800f836
 800d054:	0800f8b6 	.word	0x0800f8b6

0800d058 <__lshift>:
 800d058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d05c:	460c      	mov	r4, r1
 800d05e:	6849      	ldr	r1, [r1, #4]
 800d060:	6923      	ldr	r3, [r4, #16]
 800d062:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d066:	68a3      	ldr	r3, [r4, #8]
 800d068:	4607      	mov	r7, r0
 800d06a:	4691      	mov	r9, r2
 800d06c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d070:	f108 0601 	add.w	r6, r8, #1
 800d074:	42b3      	cmp	r3, r6
 800d076:	db0b      	blt.n	800d090 <__lshift+0x38>
 800d078:	4638      	mov	r0, r7
 800d07a:	f7ff fd95 	bl	800cba8 <_Balloc>
 800d07e:	4605      	mov	r5, r0
 800d080:	b948      	cbnz	r0, 800d096 <__lshift+0x3e>
 800d082:	4602      	mov	r2, r0
 800d084:	4b28      	ldr	r3, [pc, #160]	@ (800d128 <__lshift+0xd0>)
 800d086:	4829      	ldr	r0, [pc, #164]	@ (800d12c <__lshift+0xd4>)
 800d088:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d08c:	f001 fb0c 	bl	800e6a8 <__assert_func>
 800d090:	3101      	adds	r1, #1
 800d092:	005b      	lsls	r3, r3, #1
 800d094:	e7ee      	b.n	800d074 <__lshift+0x1c>
 800d096:	2300      	movs	r3, #0
 800d098:	f100 0114 	add.w	r1, r0, #20
 800d09c:	f100 0210 	add.w	r2, r0, #16
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	4553      	cmp	r3, sl
 800d0a4:	db33      	blt.n	800d10e <__lshift+0xb6>
 800d0a6:	6920      	ldr	r0, [r4, #16]
 800d0a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0ac:	f104 0314 	add.w	r3, r4, #20
 800d0b0:	f019 091f 	ands.w	r9, r9, #31
 800d0b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0bc:	d02b      	beq.n	800d116 <__lshift+0xbe>
 800d0be:	f1c9 0e20 	rsb	lr, r9, #32
 800d0c2:	468a      	mov	sl, r1
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	6818      	ldr	r0, [r3, #0]
 800d0c8:	fa00 f009 	lsl.w	r0, r0, r9
 800d0cc:	4310      	orrs	r0, r2
 800d0ce:	f84a 0b04 	str.w	r0, [sl], #4
 800d0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0d6:	459c      	cmp	ip, r3
 800d0d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d0dc:	d8f3      	bhi.n	800d0c6 <__lshift+0x6e>
 800d0de:	ebac 0304 	sub.w	r3, ip, r4
 800d0e2:	3b15      	subs	r3, #21
 800d0e4:	f023 0303 	bic.w	r3, r3, #3
 800d0e8:	3304      	adds	r3, #4
 800d0ea:	f104 0015 	add.w	r0, r4, #21
 800d0ee:	4584      	cmp	ip, r0
 800d0f0:	bf38      	it	cc
 800d0f2:	2304      	movcc	r3, #4
 800d0f4:	50ca      	str	r2, [r1, r3]
 800d0f6:	b10a      	cbz	r2, 800d0fc <__lshift+0xa4>
 800d0f8:	f108 0602 	add.w	r6, r8, #2
 800d0fc:	3e01      	subs	r6, #1
 800d0fe:	4638      	mov	r0, r7
 800d100:	612e      	str	r6, [r5, #16]
 800d102:	4621      	mov	r1, r4
 800d104:	f7ff fd90 	bl	800cc28 <_Bfree>
 800d108:	4628      	mov	r0, r5
 800d10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d10e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d112:	3301      	adds	r3, #1
 800d114:	e7c5      	b.n	800d0a2 <__lshift+0x4a>
 800d116:	3904      	subs	r1, #4
 800d118:	f853 2b04 	ldr.w	r2, [r3], #4
 800d11c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d120:	459c      	cmp	ip, r3
 800d122:	d8f9      	bhi.n	800d118 <__lshift+0xc0>
 800d124:	e7ea      	b.n	800d0fc <__lshift+0xa4>
 800d126:	bf00      	nop
 800d128:	0800f8a5 	.word	0x0800f8a5
 800d12c:	0800f8b6 	.word	0x0800f8b6

0800d130 <__mcmp>:
 800d130:	690a      	ldr	r2, [r1, #16]
 800d132:	4603      	mov	r3, r0
 800d134:	6900      	ldr	r0, [r0, #16]
 800d136:	1a80      	subs	r0, r0, r2
 800d138:	b530      	push	{r4, r5, lr}
 800d13a:	d10e      	bne.n	800d15a <__mcmp+0x2a>
 800d13c:	3314      	adds	r3, #20
 800d13e:	3114      	adds	r1, #20
 800d140:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d144:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d148:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d14c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d150:	4295      	cmp	r5, r2
 800d152:	d003      	beq.n	800d15c <__mcmp+0x2c>
 800d154:	d205      	bcs.n	800d162 <__mcmp+0x32>
 800d156:	f04f 30ff 	mov.w	r0, #4294967295
 800d15a:	bd30      	pop	{r4, r5, pc}
 800d15c:	42a3      	cmp	r3, r4
 800d15e:	d3f3      	bcc.n	800d148 <__mcmp+0x18>
 800d160:	e7fb      	b.n	800d15a <__mcmp+0x2a>
 800d162:	2001      	movs	r0, #1
 800d164:	e7f9      	b.n	800d15a <__mcmp+0x2a>
	...

0800d168 <__mdiff>:
 800d168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16c:	4689      	mov	r9, r1
 800d16e:	4606      	mov	r6, r0
 800d170:	4611      	mov	r1, r2
 800d172:	4648      	mov	r0, r9
 800d174:	4614      	mov	r4, r2
 800d176:	f7ff ffdb 	bl	800d130 <__mcmp>
 800d17a:	1e05      	subs	r5, r0, #0
 800d17c:	d112      	bne.n	800d1a4 <__mdiff+0x3c>
 800d17e:	4629      	mov	r1, r5
 800d180:	4630      	mov	r0, r6
 800d182:	f7ff fd11 	bl	800cba8 <_Balloc>
 800d186:	4602      	mov	r2, r0
 800d188:	b928      	cbnz	r0, 800d196 <__mdiff+0x2e>
 800d18a:	4b3f      	ldr	r3, [pc, #252]	@ (800d288 <__mdiff+0x120>)
 800d18c:	f240 2137 	movw	r1, #567	@ 0x237
 800d190:	483e      	ldr	r0, [pc, #248]	@ (800d28c <__mdiff+0x124>)
 800d192:	f001 fa89 	bl	800e6a8 <__assert_func>
 800d196:	2301      	movs	r3, #1
 800d198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d19c:	4610      	mov	r0, r2
 800d19e:	b003      	add	sp, #12
 800d1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a4:	bfbc      	itt	lt
 800d1a6:	464b      	movlt	r3, r9
 800d1a8:	46a1      	movlt	r9, r4
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d1b0:	bfba      	itte	lt
 800d1b2:	461c      	movlt	r4, r3
 800d1b4:	2501      	movlt	r5, #1
 800d1b6:	2500      	movge	r5, #0
 800d1b8:	f7ff fcf6 	bl	800cba8 <_Balloc>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	b918      	cbnz	r0, 800d1c8 <__mdiff+0x60>
 800d1c0:	4b31      	ldr	r3, [pc, #196]	@ (800d288 <__mdiff+0x120>)
 800d1c2:	f240 2145 	movw	r1, #581	@ 0x245
 800d1c6:	e7e3      	b.n	800d190 <__mdiff+0x28>
 800d1c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d1cc:	6926      	ldr	r6, [r4, #16]
 800d1ce:	60c5      	str	r5, [r0, #12]
 800d1d0:	f109 0310 	add.w	r3, r9, #16
 800d1d4:	f109 0514 	add.w	r5, r9, #20
 800d1d8:	f104 0e14 	add.w	lr, r4, #20
 800d1dc:	f100 0b14 	add.w	fp, r0, #20
 800d1e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d1e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d1e8:	9301      	str	r3, [sp, #4]
 800d1ea:	46d9      	mov	r9, fp
 800d1ec:	f04f 0c00 	mov.w	ip, #0
 800d1f0:	9b01      	ldr	r3, [sp, #4]
 800d1f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d1f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d1fa:	9301      	str	r3, [sp, #4]
 800d1fc:	fa1f f38a 	uxth.w	r3, sl
 800d200:	4619      	mov	r1, r3
 800d202:	b283      	uxth	r3, r0
 800d204:	1acb      	subs	r3, r1, r3
 800d206:	0c00      	lsrs	r0, r0, #16
 800d208:	4463      	add	r3, ip
 800d20a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d20e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d212:	b29b      	uxth	r3, r3
 800d214:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d218:	4576      	cmp	r6, lr
 800d21a:	f849 3b04 	str.w	r3, [r9], #4
 800d21e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d222:	d8e5      	bhi.n	800d1f0 <__mdiff+0x88>
 800d224:	1b33      	subs	r3, r6, r4
 800d226:	3b15      	subs	r3, #21
 800d228:	f023 0303 	bic.w	r3, r3, #3
 800d22c:	3415      	adds	r4, #21
 800d22e:	3304      	adds	r3, #4
 800d230:	42a6      	cmp	r6, r4
 800d232:	bf38      	it	cc
 800d234:	2304      	movcc	r3, #4
 800d236:	441d      	add	r5, r3
 800d238:	445b      	add	r3, fp
 800d23a:	461e      	mov	r6, r3
 800d23c:	462c      	mov	r4, r5
 800d23e:	4544      	cmp	r4, r8
 800d240:	d30e      	bcc.n	800d260 <__mdiff+0xf8>
 800d242:	f108 0103 	add.w	r1, r8, #3
 800d246:	1b49      	subs	r1, r1, r5
 800d248:	f021 0103 	bic.w	r1, r1, #3
 800d24c:	3d03      	subs	r5, #3
 800d24e:	45a8      	cmp	r8, r5
 800d250:	bf38      	it	cc
 800d252:	2100      	movcc	r1, #0
 800d254:	440b      	add	r3, r1
 800d256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d25a:	b191      	cbz	r1, 800d282 <__mdiff+0x11a>
 800d25c:	6117      	str	r7, [r2, #16]
 800d25e:	e79d      	b.n	800d19c <__mdiff+0x34>
 800d260:	f854 1b04 	ldr.w	r1, [r4], #4
 800d264:	46e6      	mov	lr, ip
 800d266:	0c08      	lsrs	r0, r1, #16
 800d268:	fa1c fc81 	uxtah	ip, ip, r1
 800d26c:	4471      	add	r1, lr
 800d26e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d272:	b289      	uxth	r1, r1
 800d274:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d278:	f846 1b04 	str.w	r1, [r6], #4
 800d27c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d280:	e7dd      	b.n	800d23e <__mdiff+0xd6>
 800d282:	3f01      	subs	r7, #1
 800d284:	e7e7      	b.n	800d256 <__mdiff+0xee>
 800d286:	bf00      	nop
 800d288:	0800f8a5 	.word	0x0800f8a5
 800d28c:	0800f8b6 	.word	0x0800f8b6

0800d290 <__ulp>:
 800d290:	b082      	sub	sp, #8
 800d292:	ed8d 0b00 	vstr	d0, [sp]
 800d296:	9a01      	ldr	r2, [sp, #4]
 800d298:	4b0f      	ldr	r3, [pc, #60]	@ (800d2d8 <__ulp+0x48>)
 800d29a:	4013      	ands	r3, r2
 800d29c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	dc08      	bgt.n	800d2b6 <__ulp+0x26>
 800d2a4:	425b      	negs	r3, r3
 800d2a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d2aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d2ae:	da04      	bge.n	800d2ba <__ulp+0x2a>
 800d2b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d2b4:	4113      	asrs	r3, r2
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	e008      	b.n	800d2cc <__ulp+0x3c>
 800d2ba:	f1a2 0314 	sub.w	r3, r2, #20
 800d2be:	2b1e      	cmp	r3, #30
 800d2c0:	bfda      	itte	le
 800d2c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d2c6:	40da      	lsrle	r2, r3
 800d2c8:	2201      	movgt	r2, #1
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	ec41 0b10 	vmov	d0, r0, r1
 800d2d4:	b002      	add	sp, #8
 800d2d6:	4770      	bx	lr
 800d2d8:	7ff00000 	.word	0x7ff00000

0800d2dc <__b2d>:
 800d2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e0:	6906      	ldr	r6, [r0, #16]
 800d2e2:	f100 0814 	add.w	r8, r0, #20
 800d2e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d2ea:	1f37      	subs	r7, r6, #4
 800d2ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	f7ff fd4b 	bl	800cd8c <__hi0bits>
 800d2f6:	f1c0 0320 	rsb	r3, r0, #32
 800d2fa:	280a      	cmp	r0, #10
 800d2fc:	600b      	str	r3, [r1, #0]
 800d2fe:	491b      	ldr	r1, [pc, #108]	@ (800d36c <__b2d+0x90>)
 800d300:	dc15      	bgt.n	800d32e <__b2d+0x52>
 800d302:	f1c0 0c0b 	rsb	ip, r0, #11
 800d306:	fa22 f30c 	lsr.w	r3, r2, ip
 800d30a:	45b8      	cmp	r8, r7
 800d30c:	ea43 0501 	orr.w	r5, r3, r1
 800d310:	bf34      	ite	cc
 800d312:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d316:	2300      	movcs	r3, #0
 800d318:	3015      	adds	r0, #21
 800d31a:	fa02 f000 	lsl.w	r0, r2, r0
 800d31e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d322:	4303      	orrs	r3, r0
 800d324:	461c      	mov	r4, r3
 800d326:	ec45 4b10 	vmov	d0, r4, r5
 800d32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d32e:	45b8      	cmp	r8, r7
 800d330:	bf3a      	itte	cc
 800d332:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d336:	f1a6 0708 	subcc.w	r7, r6, #8
 800d33a:	2300      	movcs	r3, #0
 800d33c:	380b      	subs	r0, #11
 800d33e:	d012      	beq.n	800d366 <__b2d+0x8a>
 800d340:	f1c0 0120 	rsb	r1, r0, #32
 800d344:	fa23 f401 	lsr.w	r4, r3, r1
 800d348:	4082      	lsls	r2, r0
 800d34a:	4322      	orrs	r2, r4
 800d34c:	4547      	cmp	r7, r8
 800d34e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d352:	bf8c      	ite	hi
 800d354:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d358:	2200      	movls	r2, #0
 800d35a:	4083      	lsls	r3, r0
 800d35c:	40ca      	lsrs	r2, r1
 800d35e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d362:	4313      	orrs	r3, r2
 800d364:	e7de      	b.n	800d324 <__b2d+0x48>
 800d366:	ea42 0501 	orr.w	r5, r2, r1
 800d36a:	e7db      	b.n	800d324 <__b2d+0x48>
 800d36c:	3ff00000 	.word	0x3ff00000

0800d370 <__d2b>:
 800d370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d374:	460f      	mov	r7, r1
 800d376:	2101      	movs	r1, #1
 800d378:	ec59 8b10 	vmov	r8, r9, d0
 800d37c:	4616      	mov	r6, r2
 800d37e:	f7ff fc13 	bl	800cba8 <_Balloc>
 800d382:	4604      	mov	r4, r0
 800d384:	b930      	cbnz	r0, 800d394 <__d2b+0x24>
 800d386:	4602      	mov	r2, r0
 800d388:	4b23      	ldr	r3, [pc, #140]	@ (800d418 <__d2b+0xa8>)
 800d38a:	4824      	ldr	r0, [pc, #144]	@ (800d41c <__d2b+0xac>)
 800d38c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d390:	f001 f98a 	bl	800e6a8 <__assert_func>
 800d394:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d39c:	b10d      	cbz	r5, 800d3a2 <__d2b+0x32>
 800d39e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d3a2:	9301      	str	r3, [sp, #4]
 800d3a4:	f1b8 0300 	subs.w	r3, r8, #0
 800d3a8:	d023      	beq.n	800d3f2 <__d2b+0x82>
 800d3aa:	4668      	mov	r0, sp
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	f7ff fd0c 	bl	800cdca <__lo0bits>
 800d3b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d3b6:	b1d0      	cbz	r0, 800d3ee <__d2b+0x7e>
 800d3b8:	f1c0 0320 	rsb	r3, r0, #32
 800d3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d3c0:	430b      	orrs	r3, r1
 800d3c2:	40c2      	lsrs	r2, r0
 800d3c4:	6163      	str	r3, [r4, #20]
 800d3c6:	9201      	str	r2, [sp, #4]
 800d3c8:	9b01      	ldr	r3, [sp, #4]
 800d3ca:	61a3      	str	r3, [r4, #24]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	bf0c      	ite	eq
 800d3d0:	2201      	moveq	r2, #1
 800d3d2:	2202      	movne	r2, #2
 800d3d4:	6122      	str	r2, [r4, #16]
 800d3d6:	b1a5      	cbz	r5, 800d402 <__d2b+0x92>
 800d3d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d3dc:	4405      	add	r5, r0
 800d3de:	603d      	str	r5, [r7, #0]
 800d3e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d3e4:	6030      	str	r0, [r6, #0]
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	b003      	add	sp, #12
 800d3ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3ee:	6161      	str	r1, [r4, #20]
 800d3f0:	e7ea      	b.n	800d3c8 <__d2b+0x58>
 800d3f2:	a801      	add	r0, sp, #4
 800d3f4:	f7ff fce9 	bl	800cdca <__lo0bits>
 800d3f8:	9b01      	ldr	r3, [sp, #4]
 800d3fa:	6163      	str	r3, [r4, #20]
 800d3fc:	3020      	adds	r0, #32
 800d3fe:	2201      	movs	r2, #1
 800d400:	e7e8      	b.n	800d3d4 <__d2b+0x64>
 800d402:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d406:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d40a:	6038      	str	r0, [r7, #0]
 800d40c:	6918      	ldr	r0, [r3, #16]
 800d40e:	f7ff fcbd 	bl	800cd8c <__hi0bits>
 800d412:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d416:	e7e5      	b.n	800d3e4 <__d2b+0x74>
 800d418:	0800f8a5 	.word	0x0800f8a5
 800d41c:	0800f8b6 	.word	0x0800f8b6

0800d420 <__ratio>:
 800d420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d424:	b085      	sub	sp, #20
 800d426:	e9cd 1000 	strd	r1, r0, [sp]
 800d42a:	a902      	add	r1, sp, #8
 800d42c:	f7ff ff56 	bl	800d2dc <__b2d>
 800d430:	9800      	ldr	r0, [sp, #0]
 800d432:	a903      	add	r1, sp, #12
 800d434:	ec55 4b10 	vmov	r4, r5, d0
 800d438:	f7ff ff50 	bl	800d2dc <__b2d>
 800d43c:	9b01      	ldr	r3, [sp, #4]
 800d43e:	6919      	ldr	r1, [r3, #16]
 800d440:	9b00      	ldr	r3, [sp, #0]
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	1ac9      	subs	r1, r1, r3
 800d446:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d44a:	1a9b      	subs	r3, r3, r2
 800d44c:	ec5b ab10 	vmov	sl, fp, d0
 800d450:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d454:	2b00      	cmp	r3, #0
 800d456:	bfce      	itee	gt
 800d458:	462a      	movgt	r2, r5
 800d45a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d45e:	465a      	movle	r2, fp
 800d460:	462f      	mov	r7, r5
 800d462:	46d9      	mov	r9, fp
 800d464:	bfcc      	ite	gt
 800d466:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d46a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d46e:	464b      	mov	r3, r9
 800d470:	4652      	mov	r2, sl
 800d472:	4620      	mov	r0, r4
 800d474:	4639      	mov	r1, r7
 800d476:	f7f3 f9f1 	bl	800085c <__aeabi_ddiv>
 800d47a:	ec41 0b10 	vmov	d0, r0, r1
 800d47e:	b005      	add	sp, #20
 800d480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d484 <__copybits>:
 800d484:	3901      	subs	r1, #1
 800d486:	b570      	push	{r4, r5, r6, lr}
 800d488:	1149      	asrs	r1, r1, #5
 800d48a:	6914      	ldr	r4, [r2, #16]
 800d48c:	3101      	adds	r1, #1
 800d48e:	f102 0314 	add.w	r3, r2, #20
 800d492:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d496:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d49a:	1f05      	subs	r5, r0, #4
 800d49c:	42a3      	cmp	r3, r4
 800d49e:	d30c      	bcc.n	800d4ba <__copybits+0x36>
 800d4a0:	1aa3      	subs	r3, r4, r2
 800d4a2:	3b11      	subs	r3, #17
 800d4a4:	f023 0303 	bic.w	r3, r3, #3
 800d4a8:	3211      	adds	r2, #17
 800d4aa:	42a2      	cmp	r2, r4
 800d4ac:	bf88      	it	hi
 800d4ae:	2300      	movhi	r3, #0
 800d4b0:	4418      	add	r0, r3
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	4288      	cmp	r0, r1
 800d4b6:	d305      	bcc.n	800d4c4 <__copybits+0x40>
 800d4b8:	bd70      	pop	{r4, r5, r6, pc}
 800d4ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800d4be:	f845 6f04 	str.w	r6, [r5, #4]!
 800d4c2:	e7eb      	b.n	800d49c <__copybits+0x18>
 800d4c4:	f840 3b04 	str.w	r3, [r0], #4
 800d4c8:	e7f4      	b.n	800d4b4 <__copybits+0x30>

0800d4ca <__any_on>:
 800d4ca:	f100 0214 	add.w	r2, r0, #20
 800d4ce:	6900      	ldr	r0, [r0, #16]
 800d4d0:	114b      	asrs	r3, r1, #5
 800d4d2:	4298      	cmp	r0, r3
 800d4d4:	b510      	push	{r4, lr}
 800d4d6:	db11      	blt.n	800d4fc <__any_on+0x32>
 800d4d8:	dd0a      	ble.n	800d4f0 <__any_on+0x26>
 800d4da:	f011 011f 	ands.w	r1, r1, #31
 800d4de:	d007      	beq.n	800d4f0 <__any_on+0x26>
 800d4e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d4e4:	fa24 f001 	lsr.w	r0, r4, r1
 800d4e8:	fa00 f101 	lsl.w	r1, r0, r1
 800d4ec:	428c      	cmp	r4, r1
 800d4ee:	d10b      	bne.n	800d508 <__any_on+0x3e>
 800d4f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d803      	bhi.n	800d500 <__any_on+0x36>
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	bd10      	pop	{r4, pc}
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	e7f7      	b.n	800d4f0 <__any_on+0x26>
 800d500:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d504:	2900      	cmp	r1, #0
 800d506:	d0f5      	beq.n	800d4f4 <__any_on+0x2a>
 800d508:	2001      	movs	r0, #1
 800d50a:	e7f6      	b.n	800d4fa <__any_on+0x30>

0800d50c <sulp>:
 800d50c:	b570      	push	{r4, r5, r6, lr}
 800d50e:	4604      	mov	r4, r0
 800d510:	460d      	mov	r5, r1
 800d512:	ec45 4b10 	vmov	d0, r4, r5
 800d516:	4616      	mov	r6, r2
 800d518:	f7ff feba 	bl	800d290 <__ulp>
 800d51c:	ec51 0b10 	vmov	r0, r1, d0
 800d520:	b17e      	cbz	r6, 800d542 <sulp+0x36>
 800d522:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d526:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	dd09      	ble.n	800d542 <sulp+0x36>
 800d52e:	051b      	lsls	r3, r3, #20
 800d530:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d534:	2400      	movs	r4, #0
 800d536:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d53a:	4622      	mov	r2, r4
 800d53c:	462b      	mov	r3, r5
 800d53e:	f7f3 f863 	bl	8000608 <__aeabi_dmul>
 800d542:	ec41 0b10 	vmov	d0, r0, r1
 800d546:	bd70      	pop	{r4, r5, r6, pc}

0800d548 <_strtod_l>:
 800d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	b09f      	sub	sp, #124	@ 0x7c
 800d54e:	460c      	mov	r4, r1
 800d550:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d552:	2200      	movs	r2, #0
 800d554:	921a      	str	r2, [sp, #104]	@ 0x68
 800d556:	9005      	str	r0, [sp, #20]
 800d558:	f04f 0a00 	mov.w	sl, #0
 800d55c:	f04f 0b00 	mov.w	fp, #0
 800d560:	460a      	mov	r2, r1
 800d562:	9219      	str	r2, [sp, #100]	@ 0x64
 800d564:	7811      	ldrb	r1, [r2, #0]
 800d566:	292b      	cmp	r1, #43	@ 0x2b
 800d568:	d04a      	beq.n	800d600 <_strtod_l+0xb8>
 800d56a:	d838      	bhi.n	800d5de <_strtod_l+0x96>
 800d56c:	290d      	cmp	r1, #13
 800d56e:	d832      	bhi.n	800d5d6 <_strtod_l+0x8e>
 800d570:	2908      	cmp	r1, #8
 800d572:	d832      	bhi.n	800d5da <_strtod_l+0x92>
 800d574:	2900      	cmp	r1, #0
 800d576:	d03b      	beq.n	800d5f0 <_strtod_l+0xa8>
 800d578:	2200      	movs	r2, #0
 800d57a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d57c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d57e:	782a      	ldrb	r2, [r5, #0]
 800d580:	2a30      	cmp	r2, #48	@ 0x30
 800d582:	f040 80b3 	bne.w	800d6ec <_strtod_l+0x1a4>
 800d586:	786a      	ldrb	r2, [r5, #1]
 800d588:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d58c:	2a58      	cmp	r2, #88	@ 0x58
 800d58e:	d16e      	bne.n	800d66e <_strtod_l+0x126>
 800d590:	9302      	str	r3, [sp, #8]
 800d592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d594:	9301      	str	r3, [sp, #4]
 800d596:	ab1a      	add	r3, sp, #104	@ 0x68
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	4a8e      	ldr	r2, [pc, #568]	@ (800d7d4 <_strtod_l+0x28c>)
 800d59c:	9805      	ldr	r0, [sp, #20]
 800d59e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d5a0:	a919      	add	r1, sp, #100	@ 0x64
 800d5a2:	f001 f91b 	bl	800e7dc <__gethex>
 800d5a6:	f010 060f 	ands.w	r6, r0, #15
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	d005      	beq.n	800d5ba <_strtod_l+0x72>
 800d5ae:	2e06      	cmp	r6, #6
 800d5b0:	d128      	bne.n	800d604 <_strtod_l+0xbc>
 800d5b2:	3501      	adds	r5, #1
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	9519      	str	r5, [sp, #100]	@ 0x64
 800d5b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f040 858e 	bne.w	800e0de <_strtod_l+0xb96>
 800d5c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5c4:	b1cb      	cbz	r3, 800d5fa <_strtod_l+0xb2>
 800d5c6:	4652      	mov	r2, sl
 800d5c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d5cc:	ec43 2b10 	vmov	d0, r2, r3
 800d5d0:	b01f      	add	sp, #124	@ 0x7c
 800d5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d6:	2920      	cmp	r1, #32
 800d5d8:	d1ce      	bne.n	800d578 <_strtod_l+0x30>
 800d5da:	3201      	adds	r2, #1
 800d5dc:	e7c1      	b.n	800d562 <_strtod_l+0x1a>
 800d5de:	292d      	cmp	r1, #45	@ 0x2d
 800d5e0:	d1ca      	bne.n	800d578 <_strtod_l+0x30>
 800d5e2:	2101      	movs	r1, #1
 800d5e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d5e6:	1c51      	adds	r1, r2, #1
 800d5e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d5ea:	7852      	ldrb	r2, [r2, #1]
 800d5ec:	2a00      	cmp	r2, #0
 800d5ee:	d1c5      	bne.n	800d57c <_strtod_l+0x34>
 800d5f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d5f2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f040 8570 	bne.w	800e0da <_strtod_l+0xb92>
 800d5fa:	4652      	mov	r2, sl
 800d5fc:	465b      	mov	r3, fp
 800d5fe:	e7e5      	b.n	800d5cc <_strtod_l+0x84>
 800d600:	2100      	movs	r1, #0
 800d602:	e7ef      	b.n	800d5e4 <_strtod_l+0x9c>
 800d604:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d606:	b13a      	cbz	r2, 800d618 <_strtod_l+0xd0>
 800d608:	2135      	movs	r1, #53	@ 0x35
 800d60a:	a81c      	add	r0, sp, #112	@ 0x70
 800d60c:	f7ff ff3a 	bl	800d484 <__copybits>
 800d610:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d612:	9805      	ldr	r0, [sp, #20]
 800d614:	f7ff fb08 	bl	800cc28 <_Bfree>
 800d618:	3e01      	subs	r6, #1
 800d61a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d61c:	2e04      	cmp	r6, #4
 800d61e:	d806      	bhi.n	800d62e <_strtod_l+0xe6>
 800d620:	e8df f006 	tbb	[pc, r6]
 800d624:	201d0314 	.word	0x201d0314
 800d628:	14          	.byte	0x14
 800d629:	00          	.byte	0x00
 800d62a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d62e:	05e1      	lsls	r1, r4, #23
 800d630:	bf48      	it	mi
 800d632:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d636:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d63a:	0d1b      	lsrs	r3, r3, #20
 800d63c:	051b      	lsls	r3, r3, #20
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d1bb      	bne.n	800d5ba <_strtod_l+0x72>
 800d642:	f7fe fb23 	bl	800bc8c <__errno>
 800d646:	2322      	movs	r3, #34	@ 0x22
 800d648:	6003      	str	r3, [r0, #0]
 800d64a:	e7b6      	b.n	800d5ba <_strtod_l+0x72>
 800d64c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d650:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d654:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d658:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d65c:	e7e7      	b.n	800d62e <_strtod_l+0xe6>
 800d65e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d7dc <_strtod_l+0x294>
 800d662:	e7e4      	b.n	800d62e <_strtod_l+0xe6>
 800d664:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d668:	f04f 3aff 	mov.w	sl, #4294967295
 800d66c:	e7df      	b.n	800d62e <_strtod_l+0xe6>
 800d66e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d670:	1c5a      	adds	r2, r3, #1
 800d672:	9219      	str	r2, [sp, #100]	@ 0x64
 800d674:	785b      	ldrb	r3, [r3, #1]
 800d676:	2b30      	cmp	r3, #48	@ 0x30
 800d678:	d0f9      	beq.n	800d66e <_strtod_l+0x126>
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d09d      	beq.n	800d5ba <_strtod_l+0x72>
 800d67e:	2301      	movs	r3, #1
 800d680:	9309      	str	r3, [sp, #36]	@ 0x24
 800d682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d684:	930c      	str	r3, [sp, #48]	@ 0x30
 800d686:	2300      	movs	r3, #0
 800d688:	9308      	str	r3, [sp, #32]
 800d68a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d68c:	461f      	mov	r7, r3
 800d68e:	220a      	movs	r2, #10
 800d690:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d692:	7805      	ldrb	r5, [r0, #0]
 800d694:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d698:	b2d9      	uxtb	r1, r3
 800d69a:	2909      	cmp	r1, #9
 800d69c:	d928      	bls.n	800d6f0 <_strtod_l+0x1a8>
 800d69e:	494e      	ldr	r1, [pc, #312]	@ (800d7d8 <_strtod_l+0x290>)
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	f000 ffd5 	bl	800e650 <strncmp>
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d032      	beq.n	800d710 <_strtod_l+0x1c8>
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	462a      	mov	r2, r5
 800d6ae:	4681      	mov	r9, r0
 800d6b0:	463d      	mov	r5, r7
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2a65      	cmp	r2, #101	@ 0x65
 800d6b6:	d001      	beq.n	800d6bc <_strtod_l+0x174>
 800d6b8:	2a45      	cmp	r2, #69	@ 0x45
 800d6ba:	d114      	bne.n	800d6e6 <_strtod_l+0x19e>
 800d6bc:	b91d      	cbnz	r5, 800d6c6 <_strtod_l+0x17e>
 800d6be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6c0:	4302      	orrs	r2, r0
 800d6c2:	d095      	beq.n	800d5f0 <_strtod_l+0xa8>
 800d6c4:	2500      	movs	r5, #0
 800d6c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d6c8:	1c62      	adds	r2, r4, #1
 800d6ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6cc:	7862      	ldrb	r2, [r4, #1]
 800d6ce:	2a2b      	cmp	r2, #43	@ 0x2b
 800d6d0:	d077      	beq.n	800d7c2 <_strtod_l+0x27a>
 800d6d2:	2a2d      	cmp	r2, #45	@ 0x2d
 800d6d4:	d07b      	beq.n	800d7ce <_strtod_l+0x286>
 800d6d6:	f04f 0c00 	mov.w	ip, #0
 800d6da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d6de:	2909      	cmp	r1, #9
 800d6e0:	f240 8082 	bls.w	800d7e8 <_strtod_l+0x2a0>
 800d6e4:	9419      	str	r4, [sp, #100]	@ 0x64
 800d6e6:	f04f 0800 	mov.w	r8, #0
 800d6ea:	e0a2      	b.n	800d832 <_strtod_l+0x2ea>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	e7c7      	b.n	800d680 <_strtod_l+0x138>
 800d6f0:	2f08      	cmp	r7, #8
 800d6f2:	bfd5      	itete	le
 800d6f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d6f6:	9908      	ldrgt	r1, [sp, #32]
 800d6f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d6fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d700:	f100 0001 	add.w	r0, r0, #1
 800d704:	bfd4      	ite	le
 800d706:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d708:	9308      	strgt	r3, [sp, #32]
 800d70a:	3701      	adds	r7, #1
 800d70c:	9019      	str	r0, [sp, #100]	@ 0x64
 800d70e:	e7bf      	b.n	800d690 <_strtod_l+0x148>
 800d710:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d712:	1c5a      	adds	r2, r3, #1
 800d714:	9219      	str	r2, [sp, #100]	@ 0x64
 800d716:	785a      	ldrb	r2, [r3, #1]
 800d718:	b37f      	cbz	r7, 800d77a <_strtod_l+0x232>
 800d71a:	4681      	mov	r9, r0
 800d71c:	463d      	mov	r5, r7
 800d71e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d722:	2b09      	cmp	r3, #9
 800d724:	d912      	bls.n	800d74c <_strtod_l+0x204>
 800d726:	2301      	movs	r3, #1
 800d728:	e7c4      	b.n	800d6b4 <_strtod_l+0x16c>
 800d72a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d72c:	1c5a      	adds	r2, r3, #1
 800d72e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d730:	785a      	ldrb	r2, [r3, #1]
 800d732:	3001      	adds	r0, #1
 800d734:	2a30      	cmp	r2, #48	@ 0x30
 800d736:	d0f8      	beq.n	800d72a <_strtod_l+0x1e2>
 800d738:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d73c:	2b08      	cmp	r3, #8
 800d73e:	f200 84d3 	bhi.w	800e0e8 <_strtod_l+0xba0>
 800d742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d744:	930c      	str	r3, [sp, #48]	@ 0x30
 800d746:	4681      	mov	r9, r0
 800d748:	2000      	movs	r0, #0
 800d74a:	4605      	mov	r5, r0
 800d74c:	3a30      	subs	r2, #48	@ 0x30
 800d74e:	f100 0301 	add.w	r3, r0, #1
 800d752:	d02a      	beq.n	800d7aa <_strtod_l+0x262>
 800d754:	4499      	add	r9, r3
 800d756:	eb00 0c05 	add.w	ip, r0, r5
 800d75a:	462b      	mov	r3, r5
 800d75c:	210a      	movs	r1, #10
 800d75e:	4563      	cmp	r3, ip
 800d760:	d10d      	bne.n	800d77e <_strtod_l+0x236>
 800d762:	1c69      	adds	r1, r5, #1
 800d764:	4401      	add	r1, r0
 800d766:	4428      	add	r0, r5
 800d768:	2808      	cmp	r0, #8
 800d76a:	dc16      	bgt.n	800d79a <_strtod_l+0x252>
 800d76c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d76e:	230a      	movs	r3, #10
 800d770:	fb03 2300 	mla	r3, r3, r0, r2
 800d774:	930a      	str	r3, [sp, #40]	@ 0x28
 800d776:	2300      	movs	r3, #0
 800d778:	e018      	b.n	800d7ac <_strtod_l+0x264>
 800d77a:	4638      	mov	r0, r7
 800d77c:	e7da      	b.n	800d734 <_strtod_l+0x1ec>
 800d77e:	2b08      	cmp	r3, #8
 800d780:	f103 0301 	add.w	r3, r3, #1
 800d784:	dc03      	bgt.n	800d78e <_strtod_l+0x246>
 800d786:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d788:	434e      	muls	r6, r1
 800d78a:	960a      	str	r6, [sp, #40]	@ 0x28
 800d78c:	e7e7      	b.n	800d75e <_strtod_l+0x216>
 800d78e:	2b10      	cmp	r3, #16
 800d790:	bfde      	ittt	le
 800d792:	9e08      	ldrle	r6, [sp, #32]
 800d794:	434e      	mulle	r6, r1
 800d796:	9608      	strle	r6, [sp, #32]
 800d798:	e7e1      	b.n	800d75e <_strtod_l+0x216>
 800d79a:	280f      	cmp	r0, #15
 800d79c:	dceb      	bgt.n	800d776 <_strtod_l+0x22e>
 800d79e:	9808      	ldr	r0, [sp, #32]
 800d7a0:	230a      	movs	r3, #10
 800d7a2:	fb03 2300 	mla	r3, r3, r0, r2
 800d7a6:	9308      	str	r3, [sp, #32]
 800d7a8:	e7e5      	b.n	800d776 <_strtod_l+0x22e>
 800d7aa:	4629      	mov	r1, r5
 800d7ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d7ae:	1c50      	adds	r0, r2, #1
 800d7b0:	9019      	str	r0, [sp, #100]	@ 0x64
 800d7b2:	7852      	ldrb	r2, [r2, #1]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	460d      	mov	r5, r1
 800d7b8:	e7b1      	b.n	800d71e <_strtod_l+0x1d6>
 800d7ba:	f04f 0900 	mov.w	r9, #0
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e77d      	b.n	800d6be <_strtod_l+0x176>
 800d7c2:	f04f 0c00 	mov.w	ip, #0
 800d7c6:	1ca2      	adds	r2, r4, #2
 800d7c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7ca:	78a2      	ldrb	r2, [r4, #2]
 800d7cc:	e785      	b.n	800d6da <_strtod_l+0x192>
 800d7ce:	f04f 0c01 	mov.w	ip, #1
 800d7d2:	e7f8      	b.n	800d7c6 <_strtod_l+0x27e>
 800d7d4:	0800fa28 	.word	0x0800fa28
 800d7d8:	0800fa10 	.word	0x0800fa10
 800d7dc:	7ff00000 	.word	0x7ff00000
 800d7e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d7e2:	1c51      	adds	r1, r2, #1
 800d7e4:	9119      	str	r1, [sp, #100]	@ 0x64
 800d7e6:	7852      	ldrb	r2, [r2, #1]
 800d7e8:	2a30      	cmp	r2, #48	@ 0x30
 800d7ea:	d0f9      	beq.n	800d7e0 <_strtod_l+0x298>
 800d7ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d7f0:	2908      	cmp	r1, #8
 800d7f2:	f63f af78 	bhi.w	800d6e6 <_strtod_l+0x19e>
 800d7f6:	3a30      	subs	r2, #48	@ 0x30
 800d7f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d7fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d7fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d7fe:	f04f 080a 	mov.w	r8, #10
 800d802:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d804:	1c56      	adds	r6, r2, #1
 800d806:	9619      	str	r6, [sp, #100]	@ 0x64
 800d808:	7852      	ldrb	r2, [r2, #1]
 800d80a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d80e:	f1be 0f09 	cmp.w	lr, #9
 800d812:	d939      	bls.n	800d888 <_strtod_l+0x340>
 800d814:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d816:	1a76      	subs	r6, r6, r1
 800d818:	2e08      	cmp	r6, #8
 800d81a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d81e:	dc03      	bgt.n	800d828 <_strtod_l+0x2e0>
 800d820:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d822:	4588      	cmp	r8, r1
 800d824:	bfa8      	it	ge
 800d826:	4688      	movge	r8, r1
 800d828:	f1bc 0f00 	cmp.w	ip, #0
 800d82c:	d001      	beq.n	800d832 <_strtod_l+0x2ea>
 800d82e:	f1c8 0800 	rsb	r8, r8, #0
 800d832:	2d00      	cmp	r5, #0
 800d834:	d14e      	bne.n	800d8d4 <_strtod_l+0x38c>
 800d836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d838:	4308      	orrs	r0, r1
 800d83a:	f47f aebe 	bne.w	800d5ba <_strtod_l+0x72>
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f47f aed6 	bne.w	800d5f0 <_strtod_l+0xa8>
 800d844:	2a69      	cmp	r2, #105	@ 0x69
 800d846:	d028      	beq.n	800d89a <_strtod_l+0x352>
 800d848:	dc25      	bgt.n	800d896 <_strtod_l+0x34e>
 800d84a:	2a49      	cmp	r2, #73	@ 0x49
 800d84c:	d025      	beq.n	800d89a <_strtod_l+0x352>
 800d84e:	2a4e      	cmp	r2, #78	@ 0x4e
 800d850:	f47f aece 	bne.w	800d5f0 <_strtod_l+0xa8>
 800d854:	499b      	ldr	r1, [pc, #620]	@ (800dac4 <_strtod_l+0x57c>)
 800d856:	a819      	add	r0, sp, #100	@ 0x64
 800d858:	f001 f9e2 	bl	800ec20 <__match>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	f43f aec7 	beq.w	800d5f0 <_strtod_l+0xa8>
 800d862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b28      	cmp	r3, #40	@ 0x28
 800d868:	d12e      	bne.n	800d8c8 <_strtod_l+0x380>
 800d86a:	4997      	ldr	r1, [pc, #604]	@ (800dac8 <_strtod_l+0x580>)
 800d86c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d86e:	a819      	add	r0, sp, #100	@ 0x64
 800d870:	f001 f9ea 	bl	800ec48 <__hexnan>
 800d874:	2805      	cmp	r0, #5
 800d876:	d127      	bne.n	800d8c8 <_strtod_l+0x380>
 800d878:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d87a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d87e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d882:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d886:	e698      	b.n	800d5ba <_strtod_l+0x72>
 800d888:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d88a:	fb08 2101 	mla	r1, r8, r1, r2
 800d88e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d892:	920e      	str	r2, [sp, #56]	@ 0x38
 800d894:	e7b5      	b.n	800d802 <_strtod_l+0x2ba>
 800d896:	2a6e      	cmp	r2, #110	@ 0x6e
 800d898:	e7da      	b.n	800d850 <_strtod_l+0x308>
 800d89a:	498c      	ldr	r1, [pc, #560]	@ (800dacc <_strtod_l+0x584>)
 800d89c:	a819      	add	r0, sp, #100	@ 0x64
 800d89e:	f001 f9bf 	bl	800ec20 <__match>
 800d8a2:	2800      	cmp	r0, #0
 800d8a4:	f43f aea4 	beq.w	800d5f0 <_strtod_l+0xa8>
 800d8a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8aa:	4989      	ldr	r1, [pc, #548]	@ (800dad0 <_strtod_l+0x588>)
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	a819      	add	r0, sp, #100	@ 0x64
 800d8b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d8b2:	f001 f9b5 	bl	800ec20 <__match>
 800d8b6:	b910      	cbnz	r0, 800d8be <_strtod_l+0x376>
 800d8b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800d8be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800dae0 <_strtod_l+0x598>
 800d8c2:	f04f 0a00 	mov.w	sl, #0
 800d8c6:	e678      	b.n	800d5ba <_strtod_l+0x72>
 800d8c8:	4882      	ldr	r0, [pc, #520]	@ (800dad4 <_strtod_l+0x58c>)
 800d8ca:	f000 fee5 	bl	800e698 <nan>
 800d8ce:	ec5b ab10 	vmov	sl, fp, d0
 800d8d2:	e672      	b.n	800d5ba <_strtod_l+0x72>
 800d8d4:	eba8 0309 	sub.w	r3, r8, r9
 800d8d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d8da:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8dc:	2f00      	cmp	r7, #0
 800d8de:	bf08      	it	eq
 800d8e0:	462f      	moveq	r7, r5
 800d8e2:	2d10      	cmp	r5, #16
 800d8e4:	462c      	mov	r4, r5
 800d8e6:	bfa8      	it	ge
 800d8e8:	2410      	movge	r4, #16
 800d8ea:	f7f2 fe13 	bl	8000514 <__aeabi_ui2d>
 800d8ee:	2d09      	cmp	r5, #9
 800d8f0:	4682      	mov	sl, r0
 800d8f2:	468b      	mov	fp, r1
 800d8f4:	dc13      	bgt.n	800d91e <_strtod_l+0x3d6>
 800d8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f43f ae5e 	beq.w	800d5ba <_strtod_l+0x72>
 800d8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d900:	dd78      	ble.n	800d9f4 <_strtod_l+0x4ac>
 800d902:	2b16      	cmp	r3, #22
 800d904:	dc5f      	bgt.n	800d9c6 <_strtod_l+0x47e>
 800d906:	4974      	ldr	r1, [pc, #464]	@ (800dad8 <_strtod_l+0x590>)
 800d908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d90c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d910:	4652      	mov	r2, sl
 800d912:	465b      	mov	r3, fp
 800d914:	f7f2 fe78 	bl	8000608 <__aeabi_dmul>
 800d918:	4682      	mov	sl, r0
 800d91a:	468b      	mov	fp, r1
 800d91c:	e64d      	b.n	800d5ba <_strtod_l+0x72>
 800d91e:	4b6e      	ldr	r3, [pc, #440]	@ (800dad8 <_strtod_l+0x590>)
 800d920:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d924:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d928:	f7f2 fe6e 	bl	8000608 <__aeabi_dmul>
 800d92c:	4682      	mov	sl, r0
 800d92e:	9808      	ldr	r0, [sp, #32]
 800d930:	468b      	mov	fp, r1
 800d932:	f7f2 fdef 	bl	8000514 <__aeabi_ui2d>
 800d936:	4602      	mov	r2, r0
 800d938:	460b      	mov	r3, r1
 800d93a:	4650      	mov	r0, sl
 800d93c:	4659      	mov	r1, fp
 800d93e:	f7f2 fcad 	bl	800029c <__adddf3>
 800d942:	2d0f      	cmp	r5, #15
 800d944:	4682      	mov	sl, r0
 800d946:	468b      	mov	fp, r1
 800d948:	ddd5      	ble.n	800d8f6 <_strtod_l+0x3ae>
 800d94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d94c:	1b2c      	subs	r4, r5, r4
 800d94e:	441c      	add	r4, r3
 800d950:	2c00      	cmp	r4, #0
 800d952:	f340 8096 	ble.w	800da82 <_strtod_l+0x53a>
 800d956:	f014 030f 	ands.w	r3, r4, #15
 800d95a:	d00a      	beq.n	800d972 <_strtod_l+0x42a>
 800d95c:	495e      	ldr	r1, [pc, #376]	@ (800dad8 <_strtod_l+0x590>)
 800d95e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d962:	4652      	mov	r2, sl
 800d964:	465b      	mov	r3, fp
 800d966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d96a:	f7f2 fe4d 	bl	8000608 <__aeabi_dmul>
 800d96e:	4682      	mov	sl, r0
 800d970:	468b      	mov	fp, r1
 800d972:	f034 040f 	bics.w	r4, r4, #15
 800d976:	d073      	beq.n	800da60 <_strtod_l+0x518>
 800d978:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d97c:	dd48      	ble.n	800da10 <_strtod_l+0x4c8>
 800d97e:	2400      	movs	r4, #0
 800d980:	46a0      	mov	r8, r4
 800d982:	940a      	str	r4, [sp, #40]	@ 0x28
 800d984:	46a1      	mov	r9, r4
 800d986:	9a05      	ldr	r2, [sp, #20]
 800d988:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dae0 <_strtod_l+0x598>
 800d98c:	2322      	movs	r3, #34	@ 0x22
 800d98e:	6013      	str	r3, [r2, #0]
 800d990:	f04f 0a00 	mov.w	sl, #0
 800d994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d996:	2b00      	cmp	r3, #0
 800d998:	f43f ae0f 	beq.w	800d5ba <_strtod_l+0x72>
 800d99c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d99e:	9805      	ldr	r0, [sp, #20]
 800d9a0:	f7ff f942 	bl	800cc28 <_Bfree>
 800d9a4:	9805      	ldr	r0, [sp, #20]
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	f7ff f93e 	bl	800cc28 <_Bfree>
 800d9ac:	9805      	ldr	r0, [sp, #20]
 800d9ae:	4641      	mov	r1, r8
 800d9b0:	f7ff f93a 	bl	800cc28 <_Bfree>
 800d9b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d9b6:	9805      	ldr	r0, [sp, #20]
 800d9b8:	f7ff f936 	bl	800cc28 <_Bfree>
 800d9bc:	9805      	ldr	r0, [sp, #20]
 800d9be:	4621      	mov	r1, r4
 800d9c0:	f7ff f932 	bl	800cc28 <_Bfree>
 800d9c4:	e5f9      	b.n	800d5ba <_strtod_l+0x72>
 800d9c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	dbbc      	blt.n	800d94a <_strtod_l+0x402>
 800d9d0:	4c41      	ldr	r4, [pc, #260]	@ (800dad8 <_strtod_l+0x590>)
 800d9d2:	f1c5 050f 	rsb	r5, r5, #15
 800d9d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d9da:	4652      	mov	r2, sl
 800d9dc:	465b      	mov	r3, fp
 800d9de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9e2:	f7f2 fe11 	bl	8000608 <__aeabi_dmul>
 800d9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9e8:	1b5d      	subs	r5, r3, r5
 800d9ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d9ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d9f2:	e78f      	b.n	800d914 <_strtod_l+0x3cc>
 800d9f4:	3316      	adds	r3, #22
 800d9f6:	dba8      	blt.n	800d94a <_strtod_l+0x402>
 800d9f8:	4b37      	ldr	r3, [pc, #220]	@ (800dad8 <_strtod_l+0x590>)
 800d9fa:	eba9 0808 	sub.w	r8, r9, r8
 800d9fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800da02:	e9d8 2300 	ldrd	r2, r3, [r8]
 800da06:	4650      	mov	r0, sl
 800da08:	4659      	mov	r1, fp
 800da0a:	f7f2 ff27 	bl	800085c <__aeabi_ddiv>
 800da0e:	e783      	b.n	800d918 <_strtod_l+0x3d0>
 800da10:	4b32      	ldr	r3, [pc, #200]	@ (800dadc <_strtod_l+0x594>)
 800da12:	9308      	str	r3, [sp, #32]
 800da14:	2300      	movs	r3, #0
 800da16:	1124      	asrs	r4, r4, #4
 800da18:	4650      	mov	r0, sl
 800da1a:	4659      	mov	r1, fp
 800da1c:	461e      	mov	r6, r3
 800da1e:	2c01      	cmp	r4, #1
 800da20:	dc21      	bgt.n	800da66 <_strtod_l+0x51e>
 800da22:	b10b      	cbz	r3, 800da28 <_strtod_l+0x4e0>
 800da24:	4682      	mov	sl, r0
 800da26:	468b      	mov	fp, r1
 800da28:	492c      	ldr	r1, [pc, #176]	@ (800dadc <_strtod_l+0x594>)
 800da2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800da2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800da32:	4652      	mov	r2, sl
 800da34:	465b      	mov	r3, fp
 800da36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da3a:	f7f2 fde5 	bl	8000608 <__aeabi_dmul>
 800da3e:	4b28      	ldr	r3, [pc, #160]	@ (800dae0 <_strtod_l+0x598>)
 800da40:	460a      	mov	r2, r1
 800da42:	400b      	ands	r3, r1
 800da44:	4927      	ldr	r1, [pc, #156]	@ (800dae4 <_strtod_l+0x59c>)
 800da46:	428b      	cmp	r3, r1
 800da48:	4682      	mov	sl, r0
 800da4a:	d898      	bhi.n	800d97e <_strtod_l+0x436>
 800da4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800da50:	428b      	cmp	r3, r1
 800da52:	bf86      	itte	hi
 800da54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800dae8 <_strtod_l+0x5a0>
 800da58:	f04f 3aff 	movhi.w	sl, #4294967295
 800da5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800da60:	2300      	movs	r3, #0
 800da62:	9308      	str	r3, [sp, #32]
 800da64:	e07a      	b.n	800db5c <_strtod_l+0x614>
 800da66:	07e2      	lsls	r2, r4, #31
 800da68:	d505      	bpl.n	800da76 <_strtod_l+0x52e>
 800da6a:	9b08      	ldr	r3, [sp, #32]
 800da6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da70:	f7f2 fdca 	bl	8000608 <__aeabi_dmul>
 800da74:	2301      	movs	r3, #1
 800da76:	9a08      	ldr	r2, [sp, #32]
 800da78:	3208      	adds	r2, #8
 800da7a:	3601      	adds	r6, #1
 800da7c:	1064      	asrs	r4, r4, #1
 800da7e:	9208      	str	r2, [sp, #32]
 800da80:	e7cd      	b.n	800da1e <_strtod_l+0x4d6>
 800da82:	d0ed      	beq.n	800da60 <_strtod_l+0x518>
 800da84:	4264      	negs	r4, r4
 800da86:	f014 020f 	ands.w	r2, r4, #15
 800da8a:	d00a      	beq.n	800daa2 <_strtod_l+0x55a>
 800da8c:	4b12      	ldr	r3, [pc, #72]	@ (800dad8 <_strtod_l+0x590>)
 800da8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da92:	4650      	mov	r0, sl
 800da94:	4659      	mov	r1, fp
 800da96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9a:	f7f2 fedf 	bl	800085c <__aeabi_ddiv>
 800da9e:	4682      	mov	sl, r0
 800daa0:	468b      	mov	fp, r1
 800daa2:	1124      	asrs	r4, r4, #4
 800daa4:	d0dc      	beq.n	800da60 <_strtod_l+0x518>
 800daa6:	2c1f      	cmp	r4, #31
 800daa8:	dd20      	ble.n	800daec <_strtod_l+0x5a4>
 800daaa:	2400      	movs	r4, #0
 800daac:	46a0      	mov	r8, r4
 800daae:	940a      	str	r4, [sp, #40]	@ 0x28
 800dab0:	46a1      	mov	r9, r4
 800dab2:	9a05      	ldr	r2, [sp, #20]
 800dab4:	2322      	movs	r3, #34	@ 0x22
 800dab6:	f04f 0a00 	mov.w	sl, #0
 800daba:	f04f 0b00 	mov.w	fp, #0
 800dabe:	6013      	str	r3, [r2, #0]
 800dac0:	e768      	b.n	800d994 <_strtod_l+0x44c>
 800dac2:	bf00      	nop
 800dac4:	0800f7fd 	.word	0x0800f7fd
 800dac8:	0800fa14 	.word	0x0800fa14
 800dacc:	0800f7f5 	.word	0x0800f7f5
 800dad0:	0800f82c 	.word	0x0800f82c
 800dad4:	0800fbbd 	.word	0x0800fbbd
 800dad8:	0800f948 	.word	0x0800f948
 800dadc:	0800f920 	.word	0x0800f920
 800dae0:	7ff00000 	.word	0x7ff00000
 800dae4:	7ca00000 	.word	0x7ca00000
 800dae8:	7fefffff 	.word	0x7fefffff
 800daec:	f014 0310 	ands.w	r3, r4, #16
 800daf0:	bf18      	it	ne
 800daf2:	236a      	movne	r3, #106	@ 0x6a
 800daf4:	4ea9      	ldr	r6, [pc, #676]	@ (800dd9c <_strtod_l+0x854>)
 800daf6:	9308      	str	r3, [sp, #32]
 800daf8:	4650      	mov	r0, sl
 800dafa:	4659      	mov	r1, fp
 800dafc:	2300      	movs	r3, #0
 800dafe:	07e2      	lsls	r2, r4, #31
 800db00:	d504      	bpl.n	800db0c <_strtod_l+0x5c4>
 800db02:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db06:	f7f2 fd7f 	bl	8000608 <__aeabi_dmul>
 800db0a:	2301      	movs	r3, #1
 800db0c:	1064      	asrs	r4, r4, #1
 800db0e:	f106 0608 	add.w	r6, r6, #8
 800db12:	d1f4      	bne.n	800dafe <_strtod_l+0x5b6>
 800db14:	b10b      	cbz	r3, 800db1a <_strtod_l+0x5d2>
 800db16:	4682      	mov	sl, r0
 800db18:	468b      	mov	fp, r1
 800db1a:	9b08      	ldr	r3, [sp, #32]
 800db1c:	b1b3      	cbz	r3, 800db4c <_strtod_l+0x604>
 800db1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800db22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800db26:	2b00      	cmp	r3, #0
 800db28:	4659      	mov	r1, fp
 800db2a:	dd0f      	ble.n	800db4c <_strtod_l+0x604>
 800db2c:	2b1f      	cmp	r3, #31
 800db2e:	dd55      	ble.n	800dbdc <_strtod_l+0x694>
 800db30:	2b34      	cmp	r3, #52	@ 0x34
 800db32:	bfde      	ittt	le
 800db34:	f04f 33ff 	movle.w	r3, #4294967295
 800db38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800db3c:	4093      	lslle	r3, r2
 800db3e:	f04f 0a00 	mov.w	sl, #0
 800db42:	bfcc      	ite	gt
 800db44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800db48:	ea03 0b01 	andle.w	fp, r3, r1
 800db4c:	2200      	movs	r2, #0
 800db4e:	2300      	movs	r3, #0
 800db50:	4650      	mov	r0, sl
 800db52:	4659      	mov	r1, fp
 800db54:	f7f2 ffc0 	bl	8000ad8 <__aeabi_dcmpeq>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d1a6      	bne.n	800daaa <_strtod_l+0x562>
 800db5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800db62:	9805      	ldr	r0, [sp, #20]
 800db64:	462b      	mov	r3, r5
 800db66:	463a      	mov	r2, r7
 800db68:	f7ff f8c6 	bl	800ccf8 <__s2b>
 800db6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800db6e:	2800      	cmp	r0, #0
 800db70:	f43f af05 	beq.w	800d97e <_strtod_l+0x436>
 800db74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db76:	2a00      	cmp	r2, #0
 800db78:	eba9 0308 	sub.w	r3, r9, r8
 800db7c:	bfa8      	it	ge
 800db7e:	2300      	movge	r3, #0
 800db80:	9312      	str	r3, [sp, #72]	@ 0x48
 800db82:	2400      	movs	r4, #0
 800db84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800db88:	9316      	str	r3, [sp, #88]	@ 0x58
 800db8a:	46a0      	mov	r8, r4
 800db8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db8e:	9805      	ldr	r0, [sp, #20]
 800db90:	6859      	ldr	r1, [r3, #4]
 800db92:	f7ff f809 	bl	800cba8 <_Balloc>
 800db96:	4681      	mov	r9, r0
 800db98:	2800      	cmp	r0, #0
 800db9a:	f43f aef4 	beq.w	800d986 <_strtod_l+0x43e>
 800db9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dba0:	691a      	ldr	r2, [r3, #16]
 800dba2:	3202      	adds	r2, #2
 800dba4:	f103 010c 	add.w	r1, r3, #12
 800dba8:	0092      	lsls	r2, r2, #2
 800dbaa:	300c      	adds	r0, #12
 800dbac:	f7fe f89b 	bl	800bce6 <memcpy>
 800dbb0:	ec4b ab10 	vmov	d0, sl, fp
 800dbb4:	9805      	ldr	r0, [sp, #20]
 800dbb6:	aa1c      	add	r2, sp, #112	@ 0x70
 800dbb8:	a91b      	add	r1, sp, #108	@ 0x6c
 800dbba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dbbe:	f7ff fbd7 	bl	800d370 <__d2b>
 800dbc2:	901a      	str	r0, [sp, #104]	@ 0x68
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	f43f aede 	beq.w	800d986 <_strtod_l+0x43e>
 800dbca:	9805      	ldr	r0, [sp, #20]
 800dbcc:	2101      	movs	r1, #1
 800dbce:	f7ff f929 	bl	800ce24 <__i2b>
 800dbd2:	4680      	mov	r8, r0
 800dbd4:	b948      	cbnz	r0, 800dbea <_strtod_l+0x6a2>
 800dbd6:	f04f 0800 	mov.w	r8, #0
 800dbda:	e6d4      	b.n	800d986 <_strtod_l+0x43e>
 800dbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800dbe0:	fa02 f303 	lsl.w	r3, r2, r3
 800dbe4:	ea03 0a0a 	and.w	sl, r3, sl
 800dbe8:	e7b0      	b.n	800db4c <_strtod_l+0x604>
 800dbea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dbec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dbee:	2d00      	cmp	r5, #0
 800dbf0:	bfab      	itete	ge
 800dbf2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dbf4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dbf6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dbf8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dbfa:	bfac      	ite	ge
 800dbfc:	18ef      	addge	r7, r5, r3
 800dbfe:	1b5e      	sublt	r6, r3, r5
 800dc00:	9b08      	ldr	r3, [sp, #32]
 800dc02:	1aed      	subs	r5, r5, r3
 800dc04:	4415      	add	r5, r2
 800dc06:	4b66      	ldr	r3, [pc, #408]	@ (800dda0 <_strtod_l+0x858>)
 800dc08:	3d01      	subs	r5, #1
 800dc0a:	429d      	cmp	r5, r3
 800dc0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dc10:	da50      	bge.n	800dcb4 <_strtod_l+0x76c>
 800dc12:	1b5b      	subs	r3, r3, r5
 800dc14:	2b1f      	cmp	r3, #31
 800dc16:	eba2 0203 	sub.w	r2, r2, r3
 800dc1a:	f04f 0101 	mov.w	r1, #1
 800dc1e:	dc3d      	bgt.n	800dc9c <_strtod_l+0x754>
 800dc20:	fa01 f303 	lsl.w	r3, r1, r3
 800dc24:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc26:	2300      	movs	r3, #0
 800dc28:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc2a:	18bd      	adds	r5, r7, r2
 800dc2c:	9b08      	ldr	r3, [sp, #32]
 800dc2e:	42af      	cmp	r7, r5
 800dc30:	4416      	add	r6, r2
 800dc32:	441e      	add	r6, r3
 800dc34:	463b      	mov	r3, r7
 800dc36:	bfa8      	it	ge
 800dc38:	462b      	movge	r3, r5
 800dc3a:	42b3      	cmp	r3, r6
 800dc3c:	bfa8      	it	ge
 800dc3e:	4633      	movge	r3, r6
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	bfc2      	ittt	gt
 800dc44:	1aed      	subgt	r5, r5, r3
 800dc46:	1af6      	subgt	r6, r6, r3
 800dc48:	1aff      	subgt	r7, r7, r3
 800dc4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	dd16      	ble.n	800dc7e <_strtod_l+0x736>
 800dc50:	4641      	mov	r1, r8
 800dc52:	9805      	ldr	r0, [sp, #20]
 800dc54:	461a      	mov	r2, r3
 800dc56:	f7ff f9a5 	bl	800cfa4 <__pow5mult>
 800dc5a:	4680      	mov	r8, r0
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d0ba      	beq.n	800dbd6 <_strtod_l+0x68e>
 800dc60:	4601      	mov	r1, r0
 800dc62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dc64:	9805      	ldr	r0, [sp, #20]
 800dc66:	f7ff f8f3 	bl	800ce50 <__multiply>
 800dc6a:	900e      	str	r0, [sp, #56]	@ 0x38
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	f43f ae8a 	beq.w	800d986 <_strtod_l+0x43e>
 800dc72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc74:	9805      	ldr	r0, [sp, #20]
 800dc76:	f7fe ffd7 	bl	800cc28 <_Bfree>
 800dc7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc7e:	2d00      	cmp	r5, #0
 800dc80:	dc1d      	bgt.n	800dcbe <_strtod_l+0x776>
 800dc82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	dd23      	ble.n	800dcd0 <_strtod_l+0x788>
 800dc88:	4649      	mov	r1, r9
 800dc8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dc8c:	9805      	ldr	r0, [sp, #20]
 800dc8e:	f7ff f989 	bl	800cfa4 <__pow5mult>
 800dc92:	4681      	mov	r9, r0
 800dc94:	b9e0      	cbnz	r0, 800dcd0 <_strtod_l+0x788>
 800dc96:	f04f 0900 	mov.w	r9, #0
 800dc9a:	e674      	b.n	800d986 <_strtod_l+0x43e>
 800dc9c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dca0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dca4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dca8:	35e2      	adds	r5, #226	@ 0xe2
 800dcaa:	fa01 f305 	lsl.w	r3, r1, r5
 800dcae:	9310      	str	r3, [sp, #64]	@ 0x40
 800dcb0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dcb2:	e7ba      	b.n	800dc2a <_strtod_l+0x6e2>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800dcb8:	2301      	movs	r3, #1
 800dcba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dcbc:	e7b5      	b.n	800dc2a <_strtod_l+0x6e2>
 800dcbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dcc0:	9805      	ldr	r0, [sp, #20]
 800dcc2:	462a      	mov	r2, r5
 800dcc4:	f7ff f9c8 	bl	800d058 <__lshift>
 800dcc8:	901a      	str	r0, [sp, #104]	@ 0x68
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d1d9      	bne.n	800dc82 <_strtod_l+0x73a>
 800dcce:	e65a      	b.n	800d986 <_strtod_l+0x43e>
 800dcd0:	2e00      	cmp	r6, #0
 800dcd2:	dd07      	ble.n	800dce4 <_strtod_l+0x79c>
 800dcd4:	4649      	mov	r1, r9
 800dcd6:	9805      	ldr	r0, [sp, #20]
 800dcd8:	4632      	mov	r2, r6
 800dcda:	f7ff f9bd 	bl	800d058 <__lshift>
 800dcde:	4681      	mov	r9, r0
 800dce0:	2800      	cmp	r0, #0
 800dce2:	d0d8      	beq.n	800dc96 <_strtod_l+0x74e>
 800dce4:	2f00      	cmp	r7, #0
 800dce6:	dd08      	ble.n	800dcfa <_strtod_l+0x7b2>
 800dce8:	4641      	mov	r1, r8
 800dcea:	9805      	ldr	r0, [sp, #20]
 800dcec:	463a      	mov	r2, r7
 800dcee:	f7ff f9b3 	bl	800d058 <__lshift>
 800dcf2:	4680      	mov	r8, r0
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	f43f ae46 	beq.w	800d986 <_strtod_l+0x43e>
 800dcfa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dcfc:	9805      	ldr	r0, [sp, #20]
 800dcfe:	464a      	mov	r2, r9
 800dd00:	f7ff fa32 	bl	800d168 <__mdiff>
 800dd04:	4604      	mov	r4, r0
 800dd06:	2800      	cmp	r0, #0
 800dd08:	f43f ae3d 	beq.w	800d986 <_strtod_l+0x43e>
 800dd0c:	68c3      	ldr	r3, [r0, #12]
 800dd0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dd10:	2300      	movs	r3, #0
 800dd12:	60c3      	str	r3, [r0, #12]
 800dd14:	4641      	mov	r1, r8
 800dd16:	f7ff fa0b 	bl	800d130 <__mcmp>
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	da46      	bge.n	800ddac <_strtod_l+0x864>
 800dd1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd20:	ea53 030a 	orrs.w	r3, r3, sl
 800dd24:	d16c      	bne.n	800de00 <_strtod_l+0x8b8>
 800dd26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d168      	bne.n	800de00 <_strtod_l+0x8b8>
 800dd2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dd32:	0d1b      	lsrs	r3, r3, #20
 800dd34:	051b      	lsls	r3, r3, #20
 800dd36:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dd3a:	d961      	bls.n	800de00 <_strtod_l+0x8b8>
 800dd3c:	6963      	ldr	r3, [r4, #20]
 800dd3e:	b913      	cbnz	r3, 800dd46 <_strtod_l+0x7fe>
 800dd40:	6923      	ldr	r3, [r4, #16]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	dd5c      	ble.n	800de00 <_strtod_l+0x8b8>
 800dd46:	4621      	mov	r1, r4
 800dd48:	2201      	movs	r2, #1
 800dd4a:	9805      	ldr	r0, [sp, #20]
 800dd4c:	f7ff f984 	bl	800d058 <__lshift>
 800dd50:	4641      	mov	r1, r8
 800dd52:	4604      	mov	r4, r0
 800dd54:	f7ff f9ec 	bl	800d130 <__mcmp>
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	dd51      	ble.n	800de00 <_strtod_l+0x8b8>
 800dd5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dd60:	9a08      	ldr	r2, [sp, #32]
 800dd62:	0d1b      	lsrs	r3, r3, #20
 800dd64:	051b      	lsls	r3, r3, #20
 800dd66:	2a00      	cmp	r2, #0
 800dd68:	d06b      	beq.n	800de42 <_strtod_l+0x8fa>
 800dd6a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dd6e:	d868      	bhi.n	800de42 <_strtod_l+0x8fa>
 800dd70:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dd74:	f67f ae9d 	bls.w	800dab2 <_strtod_l+0x56a>
 800dd78:	4b0a      	ldr	r3, [pc, #40]	@ (800dda4 <_strtod_l+0x85c>)
 800dd7a:	4650      	mov	r0, sl
 800dd7c:	4659      	mov	r1, fp
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f7f2 fc42 	bl	8000608 <__aeabi_dmul>
 800dd84:	4b08      	ldr	r3, [pc, #32]	@ (800dda8 <_strtod_l+0x860>)
 800dd86:	400b      	ands	r3, r1
 800dd88:	4682      	mov	sl, r0
 800dd8a:	468b      	mov	fp, r1
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f47f ae05 	bne.w	800d99c <_strtod_l+0x454>
 800dd92:	9a05      	ldr	r2, [sp, #20]
 800dd94:	2322      	movs	r3, #34	@ 0x22
 800dd96:	6013      	str	r3, [r2, #0]
 800dd98:	e600      	b.n	800d99c <_strtod_l+0x454>
 800dd9a:	bf00      	nop
 800dd9c:	0800fa40 	.word	0x0800fa40
 800dda0:	fffffc02 	.word	0xfffffc02
 800dda4:	39500000 	.word	0x39500000
 800dda8:	7ff00000 	.word	0x7ff00000
 800ddac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ddb0:	d165      	bne.n	800de7e <_strtod_l+0x936>
 800ddb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ddb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddb8:	b35a      	cbz	r2, 800de12 <_strtod_l+0x8ca>
 800ddba:	4a9f      	ldr	r2, [pc, #636]	@ (800e038 <_strtod_l+0xaf0>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d12b      	bne.n	800de18 <_strtod_l+0x8d0>
 800ddc0:	9b08      	ldr	r3, [sp, #32]
 800ddc2:	4651      	mov	r1, sl
 800ddc4:	b303      	cbz	r3, 800de08 <_strtod_l+0x8c0>
 800ddc6:	4b9d      	ldr	r3, [pc, #628]	@ (800e03c <_strtod_l+0xaf4>)
 800ddc8:	465a      	mov	r2, fp
 800ddca:	4013      	ands	r3, r2
 800ddcc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ddd0:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd4:	d81b      	bhi.n	800de0e <_strtod_l+0x8c6>
 800ddd6:	0d1b      	lsrs	r3, r3, #20
 800ddd8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dddc:	fa02 f303 	lsl.w	r3, r2, r3
 800dde0:	4299      	cmp	r1, r3
 800dde2:	d119      	bne.n	800de18 <_strtod_l+0x8d0>
 800dde4:	4b96      	ldr	r3, [pc, #600]	@ (800e040 <_strtod_l+0xaf8>)
 800dde6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d102      	bne.n	800ddf2 <_strtod_l+0x8aa>
 800ddec:	3101      	adds	r1, #1
 800ddee:	f43f adca 	beq.w	800d986 <_strtod_l+0x43e>
 800ddf2:	4b92      	ldr	r3, [pc, #584]	@ (800e03c <_strtod_l+0xaf4>)
 800ddf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddf6:	401a      	ands	r2, r3
 800ddf8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ddfc:	f04f 0a00 	mov.w	sl, #0
 800de00:	9b08      	ldr	r3, [sp, #32]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d1b8      	bne.n	800dd78 <_strtod_l+0x830>
 800de06:	e5c9      	b.n	800d99c <_strtod_l+0x454>
 800de08:	f04f 33ff 	mov.w	r3, #4294967295
 800de0c:	e7e8      	b.n	800dde0 <_strtod_l+0x898>
 800de0e:	4613      	mov	r3, r2
 800de10:	e7e6      	b.n	800dde0 <_strtod_l+0x898>
 800de12:	ea53 030a 	orrs.w	r3, r3, sl
 800de16:	d0a1      	beq.n	800dd5c <_strtod_l+0x814>
 800de18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800de1a:	b1db      	cbz	r3, 800de54 <_strtod_l+0x90c>
 800de1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de1e:	4213      	tst	r3, r2
 800de20:	d0ee      	beq.n	800de00 <_strtod_l+0x8b8>
 800de22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de24:	9a08      	ldr	r2, [sp, #32]
 800de26:	4650      	mov	r0, sl
 800de28:	4659      	mov	r1, fp
 800de2a:	b1bb      	cbz	r3, 800de5c <_strtod_l+0x914>
 800de2c:	f7ff fb6e 	bl	800d50c <sulp>
 800de30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de34:	ec53 2b10 	vmov	r2, r3, d0
 800de38:	f7f2 fa30 	bl	800029c <__adddf3>
 800de3c:	4682      	mov	sl, r0
 800de3e:	468b      	mov	fp, r1
 800de40:	e7de      	b.n	800de00 <_strtod_l+0x8b8>
 800de42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800de46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800de4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800de4e:	f04f 3aff 	mov.w	sl, #4294967295
 800de52:	e7d5      	b.n	800de00 <_strtod_l+0x8b8>
 800de54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de56:	ea13 0f0a 	tst.w	r3, sl
 800de5a:	e7e1      	b.n	800de20 <_strtod_l+0x8d8>
 800de5c:	f7ff fb56 	bl	800d50c <sulp>
 800de60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de64:	ec53 2b10 	vmov	r2, r3, d0
 800de68:	f7f2 fa16 	bl	8000298 <__aeabi_dsub>
 800de6c:	2200      	movs	r2, #0
 800de6e:	2300      	movs	r3, #0
 800de70:	4682      	mov	sl, r0
 800de72:	468b      	mov	fp, r1
 800de74:	f7f2 fe30 	bl	8000ad8 <__aeabi_dcmpeq>
 800de78:	2800      	cmp	r0, #0
 800de7a:	d0c1      	beq.n	800de00 <_strtod_l+0x8b8>
 800de7c:	e619      	b.n	800dab2 <_strtod_l+0x56a>
 800de7e:	4641      	mov	r1, r8
 800de80:	4620      	mov	r0, r4
 800de82:	f7ff facd 	bl	800d420 <__ratio>
 800de86:	ec57 6b10 	vmov	r6, r7, d0
 800de8a:	2200      	movs	r2, #0
 800de8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800de90:	4630      	mov	r0, r6
 800de92:	4639      	mov	r1, r7
 800de94:	f7f2 fe34 	bl	8000b00 <__aeabi_dcmple>
 800de98:	2800      	cmp	r0, #0
 800de9a:	d06f      	beq.n	800df7c <_strtod_l+0xa34>
 800de9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d17a      	bne.n	800df98 <_strtod_l+0xa50>
 800dea2:	f1ba 0f00 	cmp.w	sl, #0
 800dea6:	d158      	bne.n	800df5a <_strtod_l+0xa12>
 800dea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800deaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d15a      	bne.n	800df68 <_strtod_l+0xa20>
 800deb2:	4b64      	ldr	r3, [pc, #400]	@ (800e044 <_strtod_l+0xafc>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	4630      	mov	r0, r6
 800deb8:	4639      	mov	r1, r7
 800deba:	f7f2 fe17 	bl	8000aec <__aeabi_dcmplt>
 800debe:	2800      	cmp	r0, #0
 800dec0:	d159      	bne.n	800df76 <_strtod_l+0xa2e>
 800dec2:	4630      	mov	r0, r6
 800dec4:	4639      	mov	r1, r7
 800dec6:	4b60      	ldr	r3, [pc, #384]	@ (800e048 <_strtod_l+0xb00>)
 800dec8:	2200      	movs	r2, #0
 800deca:	f7f2 fb9d 	bl	8000608 <__aeabi_dmul>
 800dece:	4606      	mov	r6, r0
 800ded0:	460f      	mov	r7, r1
 800ded2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ded6:	9606      	str	r6, [sp, #24]
 800ded8:	9307      	str	r3, [sp, #28]
 800deda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dede:	4d57      	ldr	r5, [pc, #348]	@ (800e03c <_strtod_l+0xaf4>)
 800dee0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dee6:	401d      	ands	r5, r3
 800dee8:	4b58      	ldr	r3, [pc, #352]	@ (800e04c <_strtod_l+0xb04>)
 800deea:	429d      	cmp	r5, r3
 800deec:	f040 80b2 	bne.w	800e054 <_strtod_l+0xb0c>
 800def0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800def2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800def6:	ec4b ab10 	vmov	d0, sl, fp
 800defa:	f7ff f9c9 	bl	800d290 <__ulp>
 800defe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df02:	ec51 0b10 	vmov	r0, r1, d0
 800df06:	f7f2 fb7f 	bl	8000608 <__aeabi_dmul>
 800df0a:	4652      	mov	r2, sl
 800df0c:	465b      	mov	r3, fp
 800df0e:	f7f2 f9c5 	bl	800029c <__adddf3>
 800df12:	460b      	mov	r3, r1
 800df14:	4949      	ldr	r1, [pc, #292]	@ (800e03c <_strtod_l+0xaf4>)
 800df16:	4a4e      	ldr	r2, [pc, #312]	@ (800e050 <_strtod_l+0xb08>)
 800df18:	4019      	ands	r1, r3
 800df1a:	4291      	cmp	r1, r2
 800df1c:	4682      	mov	sl, r0
 800df1e:	d942      	bls.n	800dfa6 <_strtod_l+0xa5e>
 800df20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800df22:	4b47      	ldr	r3, [pc, #284]	@ (800e040 <_strtod_l+0xaf8>)
 800df24:	429a      	cmp	r2, r3
 800df26:	d103      	bne.n	800df30 <_strtod_l+0x9e8>
 800df28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df2a:	3301      	adds	r3, #1
 800df2c:	f43f ad2b 	beq.w	800d986 <_strtod_l+0x43e>
 800df30:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e040 <_strtod_l+0xaf8>
 800df34:	f04f 3aff 	mov.w	sl, #4294967295
 800df38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df3a:	9805      	ldr	r0, [sp, #20]
 800df3c:	f7fe fe74 	bl	800cc28 <_Bfree>
 800df40:	9805      	ldr	r0, [sp, #20]
 800df42:	4649      	mov	r1, r9
 800df44:	f7fe fe70 	bl	800cc28 <_Bfree>
 800df48:	9805      	ldr	r0, [sp, #20]
 800df4a:	4641      	mov	r1, r8
 800df4c:	f7fe fe6c 	bl	800cc28 <_Bfree>
 800df50:	9805      	ldr	r0, [sp, #20]
 800df52:	4621      	mov	r1, r4
 800df54:	f7fe fe68 	bl	800cc28 <_Bfree>
 800df58:	e618      	b.n	800db8c <_strtod_l+0x644>
 800df5a:	f1ba 0f01 	cmp.w	sl, #1
 800df5e:	d103      	bne.n	800df68 <_strtod_l+0xa20>
 800df60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df62:	2b00      	cmp	r3, #0
 800df64:	f43f ada5 	beq.w	800dab2 <_strtod_l+0x56a>
 800df68:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e018 <_strtod_l+0xad0>
 800df6c:	4f35      	ldr	r7, [pc, #212]	@ (800e044 <_strtod_l+0xafc>)
 800df6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800df72:	2600      	movs	r6, #0
 800df74:	e7b1      	b.n	800deda <_strtod_l+0x992>
 800df76:	4f34      	ldr	r7, [pc, #208]	@ (800e048 <_strtod_l+0xb00>)
 800df78:	2600      	movs	r6, #0
 800df7a:	e7aa      	b.n	800ded2 <_strtod_l+0x98a>
 800df7c:	4b32      	ldr	r3, [pc, #200]	@ (800e048 <_strtod_l+0xb00>)
 800df7e:	4630      	mov	r0, r6
 800df80:	4639      	mov	r1, r7
 800df82:	2200      	movs	r2, #0
 800df84:	f7f2 fb40 	bl	8000608 <__aeabi_dmul>
 800df88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df8a:	4606      	mov	r6, r0
 800df8c:	460f      	mov	r7, r1
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d09f      	beq.n	800ded2 <_strtod_l+0x98a>
 800df92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800df96:	e7a0      	b.n	800deda <_strtod_l+0x992>
 800df98:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e020 <_strtod_l+0xad8>
 800df9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dfa0:	ec57 6b17 	vmov	r6, r7, d7
 800dfa4:	e799      	b.n	800deda <_strtod_l+0x992>
 800dfa6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dfaa:	9b08      	ldr	r3, [sp, #32]
 800dfac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1c1      	bne.n	800df38 <_strtod_l+0x9f0>
 800dfb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dfb8:	0d1b      	lsrs	r3, r3, #20
 800dfba:	051b      	lsls	r3, r3, #20
 800dfbc:	429d      	cmp	r5, r3
 800dfbe:	d1bb      	bne.n	800df38 <_strtod_l+0x9f0>
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	4639      	mov	r1, r7
 800dfc4:	f7f2 fe80 	bl	8000cc8 <__aeabi_d2lz>
 800dfc8:	f7f2 faf0 	bl	80005ac <__aeabi_l2d>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	460b      	mov	r3, r1
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	4639      	mov	r1, r7
 800dfd4:	f7f2 f960 	bl	8000298 <__aeabi_dsub>
 800dfd8:	460b      	mov	r3, r1
 800dfda:	4602      	mov	r2, r0
 800dfdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dfe0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dfe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfe6:	ea46 060a 	orr.w	r6, r6, sl
 800dfea:	431e      	orrs	r6, r3
 800dfec:	d06f      	beq.n	800e0ce <_strtod_l+0xb86>
 800dfee:	a30e      	add	r3, pc, #56	@ (adr r3, 800e028 <_strtod_l+0xae0>)
 800dff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff4:	f7f2 fd7a 	bl	8000aec <__aeabi_dcmplt>
 800dff8:	2800      	cmp	r0, #0
 800dffa:	f47f accf 	bne.w	800d99c <_strtod_l+0x454>
 800dffe:	a30c      	add	r3, pc, #48	@ (adr r3, 800e030 <_strtod_l+0xae8>)
 800e000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e008:	f7f2 fd8e 	bl	8000b28 <__aeabi_dcmpgt>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d093      	beq.n	800df38 <_strtod_l+0x9f0>
 800e010:	e4c4      	b.n	800d99c <_strtod_l+0x454>
 800e012:	bf00      	nop
 800e014:	f3af 8000 	nop.w
 800e018:	00000000 	.word	0x00000000
 800e01c:	bff00000 	.word	0xbff00000
 800e020:	00000000 	.word	0x00000000
 800e024:	3ff00000 	.word	0x3ff00000
 800e028:	94a03595 	.word	0x94a03595
 800e02c:	3fdfffff 	.word	0x3fdfffff
 800e030:	35afe535 	.word	0x35afe535
 800e034:	3fe00000 	.word	0x3fe00000
 800e038:	000fffff 	.word	0x000fffff
 800e03c:	7ff00000 	.word	0x7ff00000
 800e040:	7fefffff 	.word	0x7fefffff
 800e044:	3ff00000 	.word	0x3ff00000
 800e048:	3fe00000 	.word	0x3fe00000
 800e04c:	7fe00000 	.word	0x7fe00000
 800e050:	7c9fffff 	.word	0x7c9fffff
 800e054:	9b08      	ldr	r3, [sp, #32]
 800e056:	b323      	cbz	r3, 800e0a2 <_strtod_l+0xb5a>
 800e058:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e05c:	d821      	bhi.n	800e0a2 <_strtod_l+0xb5a>
 800e05e:	a328      	add	r3, pc, #160	@ (adr r3, 800e100 <_strtod_l+0xbb8>)
 800e060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e064:	4630      	mov	r0, r6
 800e066:	4639      	mov	r1, r7
 800e068:	f7f2 fd4a 	bl	8000b00 <__aeabi_dcmple>
 800e06c:	b1a0      	cbz	r0, 800e098 <_strtod_l+0xb50>
 800e06e:	4639      	mov	r1, r7
 800e070:	4630      	mov	r0, r6
 800e072:	f7f2 fda1 	bl	8000bb8 <__aeabi_d2uiz>
 800e076:	2801      	cmp	r0, #1
 800e078:	bf38      	it	cc
 800e07a:	2001      	movcc	r0, #1
 800e07c:	f7f2 fa4a 	bl	8000514 <__aeabi_ui2d>
 800e080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e082:	4606      	mov	r6, r0
 800e084:	460f      	mov	r7, r1
 800e086:	b9fb      	cbnz	r3, 800e0c8 <_strtod_l+0xb80>
 800e088:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e08c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e08e:	9315      	str	r3, [sp, #84]	@ 0x54
 800e090:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e094:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e098:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e09a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e09e:	1b5b      	subs	r3, r3, r5
 800e0a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e0a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e0a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e0aa:	f7ff f8f1 	bl	800d290 <__ulp>
 800e0ae:	4650      	mov	r0, sl
 800e0b0:	ec53 2b10 	vmov	r2, r3, d0
 800e0b4:	4659      	mov	r1, fp
 800e0b6:	f7f2 faa7 	bl	8000608 <__aeabi_dmul>
 800e0ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e0be:	f7f2 f8ed 	bl	800029c <__adddf3>
 800e0c2:	4682      	mov	sl, r0
 800e0c4:	468b      	mov	fp, r1
 800e0c6:	e770      	b.n	800dfaa <_strtod_l+0xa62>
 800e0c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e0cc:	e7e0      	b.n	800e090 <_strtod_l+0xb48>
 800e0ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800e108 <_strtod_l+0xbc0>)
 800e0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d4:	f7f2 fd0a 	bl	8000aec <__aeabi_dcmplt>
 800e0d8:	e798      	b.n	800e00c <_strtod_l+0xac4>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e0e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0e2:	6013      	str	r3, [r2, #0]
 800e0e4:	f7ff ba6d 	b.w	800d5c2 <_strtod_l+0x7a>
 800e0e8:	2a65      	cmp	r2, #101	@ 0x65
 800e0ea:	f43f ab66 	beq.w	800d7ba <_strtod_l+0x272>
 800e0ee:	2a45      	cmp	r2, #69	@ 0x45
 800e0f0:	f43f ab63 	beq.w	800d7ba <_strtod_l+0x272>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	f7ff bb9e 	b.w	800d836 <_strtod_l+0x2ee>
 800e0fa:	bf00      	nop
 800e0fc:	f3af 8000 	nop.w
 800e100:	ffc00000 	.word	0xffc00000
 800e104:	41dfffff 	.word	0x41dfffff
 800e108:	94a03595 	.word	0x94a03595
 800e10c:	3fcfffff 	.word	0x3fcfffff

0800e110 <_strtod_r>:
 800e110:	4b01      	ldr	r3, [pc, #4]	@ (800e118 <_strtod_r+0x8>)
 800e112:	f7ff ba19 	b.w	800d548 <_strtod_l>
 800e116:	bf00      	nop
 800e118:	20000070 	.word	0x20000070

0800e11c <_strtol_l.constprop.0>:
 800e11c:	2b24      	cmp	r3, #36	@ 0x24
 800e11e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e122:	4686      	mov	lr, r0
 800e124:	4690      	mov	r8, r2
 800e126:	d801      	bhi.n	800e12c <_strtol_l.constprop.0+0x10>
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d106      	bne.n	800e13a <_strtol_l.constprop.0+0x1e>
 800e12c:	f7fd fdae 	bl	800bc8c <__errno>
 800e130:	2316      	movs	r3, #22
 800e132:	6003      	str	r3, [r0, #0]
 800e134:	2000      	movs	r0, #0
 800e136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e13a:	4834      	ldr	r0, [pc, #208]	@ (800e20c <_strtol_l.constprop.0+0xf0>)
 800e13c:	460d      	mov	r5, r1
 800e13e:	462a      	mov	r2, r5
 800e140:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e144:	5d06      	ldrb	r6, [r0, r4]
 800e146:	f016 0608 	ands.w	r6, r6, #8
 800e14a:	d1f8      	bne.n	800e13e <_strtol_l.constprop.0+0x22>
 800e14c:	2c2d      	cmp	r4, #45	@ 0x2d
 800e14e:	d12d      	bne.n	800e1ac <_strtol_l.constprop.0+0x90>
 800e150:	782c      	ldrb	r4, [r5, #0]
 800e152:	2601      	movs	r6, #1
 800e154:	1c95      	adds	r5, r2, #2
 800e156:	f033 0210 	bics.w	r2, r3, #16
 800e15a:	d109      	bne.n	800e170 <_strtol_l.constprop.0+0x54>
 800e15c:	2c30      	cmp	r4, #48	@ 0x30
 800e15e:	d12a      	bne.n	800e1b6 <_strtol_l.constprop.0+0x9a>
 800e160:	782a      	ldrb	r2, [r5, #0]
 800e162:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e166:	2a58      	cmp	r2, #88	@ 0x58
 800e168:	d125      	bne.n	800e1b6 <_strtol_l.constprop.0+0x9a>
 800e16a:	786c      	ldrb	r4, [r5, #1]
 800e16c:	2310      	movs	r3, #16
 800e16e:	3502      	adds	r5, #2
 800e170:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e174:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e178:	2200      	movs	r2, #0
 800e17a:	fbbc f9f3 	udiv	r9, ip, r3
 800e17e:	4610      	mov	r0, r2
 800e180:	fb03 ca19 	mls	sl, r3, r9, ip
 800e184:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e188:	2f09      	cmp	r7, #9
 800e18a:	d81b      	bhi.n	800e1c4 <_strtol_l.constprop.0+0xa8>
 800e18c:	463c      	mov	r4, r7
 800e18e:	42a3      	cmp	r3, r4
 800e190:	dd27      	ble.n	800e1e2 <_strtol_l.constprop.0+0xc6>
 800e192:	1c57      	adds	r7, r2, #1
 800e194:	d007      	beq.n	800e1a6 <_strtol_l.constprop.0+0x8a>
 800e196:	4581      	cmp	r9, r0
 800e198:	d320      	bcc.n	800e1dc <_strtol_l.constprop.0+0xc0>
 800e19a:	d101      	bne.n	800e1a0 <_strtol_l.constprop.0+0x84>
 800e19c:	45a2      	cmp	sl, r4
 800e19e:	db1d      	blt.n	800e1dc <_strtol_l.constprop.0+0xc0>
 800e1a0:	fb00 4003 	mla	r0, r0, r3, r4
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1aa:	e7eb      	b.n	800e184 <_strtol_l.constprop.0+0x68>
 800e1ac:	2c2b      	cmp	r4, #43	@ 0x2b
 800e1ae:	bf04      	itt	eq
 800e1b0:	782c      	ldrbeq	r4, [r5, #0]
 800e1b2:	1c95      	addeq	r5, r2, #2
 800e1b4:	e7cf      	b.n	800e156 <_strtol_l.constprop.0+0x3a>
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1da      	bne.n	800e170 <_strtol_l.constprop.0+0x54>
 800e1ba:	2c30      	cmp	r4, #48	@ 0x30
 800e1bc:	bf0c      	ite	eq
 800e1be:	2308      	moveq	r3, #8
 800e1c0:	230a      	movne	r3, #10
 800e1c2:	e7d5      	b.n	800e170 <_strtol_l.constprop.0+0x54>
 800e1c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e1c8:	2f19      	cmp	r7, #25
 800e1ca:	d801      	bhi.n	800e1d0 <_strtol_l.constprop.0+0xb4>
 800e1cc:	3c37      	subs	r4, #55	@ 0x37
 800e1ce:	e7de      	b.n	800e18e <_strtol_l.constprop.0+0x72>
 800e1d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e1d4:	2f19      	cmp	r7, #25
 800e1d6:	d804      	bhi.n	800e1e2 <_strtol_l.constprop.0+0xc6>
 800e1d8:	3c57      	subs	r4, #87	@ 0x57
 800e1da:	e7d8      	b.n	800e18e <_strtol_l.constprop.0+0x72>
 800e1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e0:	e7e1      	b.n	800e1a6 <_strtol_l.constprop.0+0x8a>
 800e1e2:	1c53      	adds	r3, r2, #1
 800e1e4:	d108      	bne.n	800e1f8 <_strtol_l.constprop.0+0xdc>
 800e1e6:	2322      	movs	r3, #34	@ 0x22
 800e1e8:	f8ce 3000 	str.w	r3, [lr]
 800e1ec:	4660      	mov	r0, ip
 800e1ee:	f1b8 0f00 	cmp.w	r8, #0
 800e1f2:	d0a0      	beq.n	800e136 <_strtol_l.constprop.0+0x1a>
 800e1f4:	1e69      	subs	r1, r5, #1
 800e1f6:	e006      	b.n	800e206 <_strtol_l.constprop.0+0xea>
 800e1f8:	b106      	cbz	r6, 800e1fc <_strtol_l.constprop.0+0xe0>
 800e1fa:	4240      	negs	r0, r0
 800e1fc:	f1b8 0f00 	cmp.w	r8, #0
 800e200:	d099      	beq.n	800e136 <_strtol_l.constprop.0+0x1a>
 800e202:	2a00      	cmp	r2, #0
 800e204:	d1f6      	bne.n	800e1f4 <_strtol_l.constprop.0+0xd8>
 800e206:	f8c8 1000 	str.w	r1, [r8]
 800e20a:	e794      	b.n	800e136 <_strtol_l.constprop.0+0x1a>
 800e20c:	0800fa69 	.word	0x0800fa69

0800e210 <_strtol_r>:
 800e210:	f7ff bf84 	b.w	800e11c <_strtol_l.constprop.0>

0800e214 <__ssputs_r>:
 800e214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e218:	688e      	ldr	r6, [r1, #8]
 800e21a:	461f      	mov	r7, r3
 800e21c:	42be      	cmp	r6, r7
 800e21e:	680b      	ldr	r3, [r1, #0]
 800e220:	4682      	mov	sl, r0
 800e222:	460c      	mov	r4, r1
 800e224:	4690      	mov	r8, r2
 800e226:	d82d      	bhi.n	800e284 <__ssputs_r+0x70>
 800e228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e22c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e230:	d026      	beq.n	800e280 <__ssputs_r+0x6c>
 800e232:	6965      	ldr	r5, [r4, #20]
 800e234:	6909      	ldr	r1, [r1, #16]
 800e236:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e23a:	eba3 0901 	sub.w	r9, r3, r1
 800e23e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e242:	1c7b      	adds	r3, r7, #1
 800e244:	444b      	add	r3, r9
 800e246:	106d      	asrs	r5, r5, #1
 800e248:	429d      	cmp	r5, r3
 800e24a:	bf38      	it	cc
 800e24c:	461d      	movcc	r5, r3
 800e24e:	0553      	lsls	r3, r2, #21
 800e250:	d527      	bpl.n	800e2a2 <__ssputs_r+0x8e>
 800e252:	4629      	mov	r1, r5
 800e254:	f7fe fc1c 	bl	800ca90 <_malloc_r>
 800e258:	4606      	mov	r6, r0
 800e25a:	b360      	cbz	r0, 800e2b6 <__ssputs_r+0xa2>
 800e25c:	6921      	ldr	r1, [r4, #16]
 800e25e:	464a      	mov	r2, r9
 800e260:	f7fd fd41 	bl	800bce6 <memcpy>
 800e264:	89a3      	ldrh	r3, [r4, #12]
 800e266:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e26e:	81a3      	strh	r3, [r4, #12]
 800e270:	6126      	str	r6, [r4, #16]
 800e272:	6165      	str	r5, [r4, #20]
 800e274:	444e      	add	r6, r9
 800e276:	eba5 0509 	sub.w	r5, r5, r9
 800e27a:	6026      	str	r6, [r4, #0]
 800e27c:	60a5      	str	r5, [r4, #8]
 800e27e:	463e      	mov	r6, r7
 800e280:	42be      	cmp	r6, r7
 800e282:	d900      	bls.n	800e286 <__ssputs_r+0x72>
 800e284:	463e      	mov	r6, r7
 800e286:	6820      	ldr	r0, [r4, #0]
 800e288:	4632      	mov	r2, r6
 800e28a:	4641      	mov	r1, r8
 800e28c:	f000 f9c6 	bl	800e61c <memmove>
 800e290:	68a3      	ldr	r3, [r4, #8]
 800e292:	1b9b      	subs	r3, r3, r6
 800e294:	60a3      	str	r3, [r4, #8]
 800e296:	6823      	ldr	r3, [r4, #0]
 800e298:	4433      	add	r3, r6
 800e29a:	6023      	str	r3, [r4, #0]
 800e29c:	2000      	movs	r0, #0
 800e29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2a2:	462a      	mov	r2, r5
 800e2a4:	f000 fd7d 	bl	800eda2 <_realloc_r>
 800e2a8:	4606      	mov	r6, r0
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	d1e0      	bne.n	800e270 <__ssputs_r+0x5c>
 800e2ae:	6921      	ldr	r1, [r4, #16]
 800e2b0:	4650      	mov	r0, sl
 800e2b2:	f7fe fb79 	bl	800c9a8 <_free_r>
 800e2b6:	230c      	movs	r3, #12
 800e2b8:	f8ca 3000 	str.w	r3, [sl]
 800e2bc:	89a3      	ldrh	r3, [r4, #12]
 800e2be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2c2:	81a3      	strh	r3, [r4, #12]
 800e2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c8:	e7e9      	b.n	800e29e <__ssputs_r+0x8a>
	...

0800e2cc <_svfiprintf_r>:
 800e2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d0:	4698      	mov	r8, r3
 800e2d2:	898b      	ldrh	r3, [r1, #12]
 800e2d4:	061b      	lsls	r3, r3, #24
 800e2d6:	b09d      	sub	sp, #116	@ 0x74
 800e2d8:	4607      	mov	r7, r0
 800e2da:	460d      	mov	r5, r1
 800e2dc:	4614      	mov	r4, r2
 800e2de:	d510      	bpl.n	800e302 <_svfiprintf_r+0x36>
 800e2e0:	690b      	ldr	r3, [r1, #16]
 800e2e2:	b973      	cbnz	r3, 800e302 <_svfiprintf_r+0x36>
 800e2e4:	2140      	movs	r1, #64	@ 0x40
 800e2e6:	f7fe fbd3 	bl	800ca90 <_malloc_r>
 800e2ea:	6028      	str	r0, [r5, #0]
 800e2ec:	6128      	str	r0, [r5, #16]
 800e2ee:	b930      	cbnz	r0, 800e2fe <_svfiprintf_r+0x32>
 800e2f0:	230c      	movs	r3, #12
 800e2f2:	603b      	str	r3, [r7, #0]
 800e2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f8:	b01d      	add	sp, #116	@ 0x74
 800e2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2fe:	2340      	movs	r3, #64	@ 0x40
 800e300:	616b      	str	r3, [r5, #20]
 800e302:	2300      	movs	r3, #0
 800e304:	9309      	str	r3, [sp, #36]	@ 0x24
 800e306:	2320      	movs	r3, #32
 800e308:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e30c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e310:	2330      	movs	r3, #48	@ 0x30
 800e312:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e4b0 <_svfiprintf_r+0x1e4>
 800e316:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e31a:	f04f 0901 	mov.w	r9, #1
 800e31e:	4623      	mov	r3, r4
 800e320:	469a      	mov	sl, r3
 800e322:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e326:	b10a      	cbz	r2, 800e32c <_svfiprintf_r+0x60>
 800e328:	2a25      	cmp	r2, #37	@ 0x25
 800e32a:	d1f9      	bne.n	800e320 <_svfiprintf_r+0x54>
 800e32c:	ebba 0b04 	subs.w	fp, sl, r4
 800e330:	d00b      	beq.n	800e34a <_svfiprintf_r+0x7e>
 800e332:	465b      	mov	r3, fp
 800e334:	4622      	mov	r2, r4
 800e336:	4629      	mov	r1, r5
 800e338:	4638      	mov	r0, r7
 800e33a:	f7ff ff6b 	bl	800e214 <__ssputs_r>
 800e33e:	3001      	adds	r0, #1
 800e340:	f000 80a7 	beq.w	800e492 <_svfiprintf_r+0x1c6>
 800e344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e346:	445a      	add	r2, fp
 800e348:	9209      	str	r2, [sp, #36]	@ 0x24
 800e34a:	f89a 3000 	ldrb.w	r3, [sl]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	f000 809f 	beq.w	800e492 <_svfiprintf_r+0x1c6>
 800e354:	2300      	movs	r3, #0
 800e356:	f04f 32ff 	mov.w	r2, #4294967295
 800e35a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e35e:	f10a 0a01 	add.w	sl, sl, #1
 800e362:	9304      	str	r3, [sp, #16]
 800e364:	9307      	str	r3, [sp, #28]
 800e366:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e36a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e36c:	4654      	mov	r4, sl
 800e36e:	2205      	movs	r2, #5
 800e370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e374:	484e      	ldr	r0, [pc, #312]	@ (800e4b0 <_svfiprintf_r+0x1e4>)
 800e376:	f7f1 ff33 	bl	80001e0 <memchr>
 800e37a:	9a04      	ldr	r2, [sp, #16]
 800e37c:	b9d8      	cbnz	r0, 800e3b6 <_svfiprintf_r+0xea>
 800e37e:	06d0      	lsls	r0, r2, #27
 800e380:	bf44      	itt	mi
 800e382:	2320      	movmi	r3, #32
 800e384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e388:	0711      	lsls	r1, r2, #28
 800e38a:	bf44      	itt	mi
 800e38c:	232b      	movmi	r3, #43	@ 0x2b
 800e38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e392:	f89a 3000 	ldrb.w	r3, [sl]
 800e396:	2b2a      	cmp	r3, #42	@ 0x2a
 800e398:	d015      	beq.n	800e3c6 <_svfiprintf_r+0xfa>
 800e39a:	9a07      	ldr	r2, [sp, #28]
 800e39c:	4654      	mov	r4, sl
 800e39e:	2000      	movs	r0, #0
 800e3a0:	f04f 0c0a 	mov.w	ip, #10
 800e3a4:	4621      	mov	r1, r4
 800e3a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3aa:	3b30      	subs	r3, #48	@ 0x30
 800e3ac:	2b09      	cmp	r3, #9
 800e3ae:	d94b      	bls.n	800e448 <_svfiprintf_r+0x17c>
 800e3b0:	b1b0      	cbz	r0, 800e3e0 <_svfiprintf_r+0x114>
 800e3b2:	9207      	str	r2, [sp, #28]
 800e3b4:	e014      	b.n	800e3e0 <_svfiprintf_r+0x114>
 800e3b6:	eba0 0308 	sub.w	r3, r0, r8
 800e3ba:	fa09 f303 	lsl.w	r3, r9, r3
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	9304      	str	r3, [sp, #16]
 800e3c2:	46a2      	mov	sl, r4
 800e3c4:	e7d2      	b.n	800e36c <_svfiprintf_r+0xa0>
 800e3c6:	9b03      	ldr	r3, [sp, #12]
 800e3c8:	1d19      	adds	r1, r3, #4
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	9103      	str	r1, [sp, #12]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	bfbb      	ittet	lt
 800e3d2:	425b      	neglt	r3, r3
 800e3d4:	f042 0202 	orrlt.w	r2, r2, #2
 800e3d8:	9307      	strge	r3, [sp, #28]
 800e3da:	9307      	strlt	r3, [sp, #28]
 800e3dc:	bfb8      	it	lt
 800e3de:	9204      	strlt	r2, [sp, #16]
 800e3e0:	7823      	ldrb	r3, [r4, #0]
 800e3e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3e4:	d10a      	bne.n	800e3fc <_svfiprintf_r+0x130>
 800e3e6:	7863      	ldrb	r3, [r4, #1]
 800e3e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3ea:	d132      	bne.n	800e452 <_svfiprintf_r+0x186>
 800e3ec:	9b03      	ldr	r3, [sp, #12]
 800e3ee:	1d1a      	adds	r2, r3, #4
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	9203      	str	r2, [sp, #12]
 800e3f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e3f8:	3402      	adds	r4, #2
 800e3fa:	9305      	str	r3, [sp, #20]
 800e3fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e4c0 <_svfiprintf_r+0x1f4>
 800e400:	7821      	ldrb	r1, [r4, #0]
 800e402:	2203      	movs	r2, #3
 800e404:	4650      	mov	r0, sl
 800e406:	f7f1 feeb 	bl	80001e0 <memchr>
 800e40a:	b138      	cbz	r0, 800e41c <_svfiprintf_r+0x150>
 800e40c:	9b04      	ldr	r3, [sp, #16]
 800e40e:	eba0 000a 	sub.w	r0, r0, sl
 800e412:	2240      	movs	r2, #64	@ 0x40
 800e414:	4082      	lsls	r2, r0
 800e416:	4313      	orrs	r3, r2
 800e418:	3401      	adds	r4, #1
 800e41a:	9304      	str	r3, [sp, #16]
 800e41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e420:	4824      	ldr	r0, [pc, #144]	@ (800e4b4 <_svfiprintf_r+0x1e8>)
 800e422:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e426:	2206      	movs	r2, #6
 800e428:	f7f1 feda 	bl	80001e0 <memchr>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d036      	beq.n	800e49e <_svfiprintf_r+0x1d2>
 800e430:	4b21      	ldr	r3, [pc, #132]	@ (800e4b8 <_svfiprintf_r+0x1ec>)
 800e432:	bb1b      	cbnz	r3, 800e47c <_svfiprintf_r+0x1b0>
 800e434:	9b03      	ldr	r3, [sp, #12]
 800e436:	3307      	adds	r3, #7
 800e438:	f023 0307 	bic.w	r3, r3, #7
 800e43c:	3308      	adds	r3, #8
 800e43e:	9303      	str	r3, [sp, #12]
 800e440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e442:	4433      	add	r3, r6
 800e444:	9309      	str	r3, [sp, #36]	@ 0x24
 800e446:	e76a      	b.n	800e31e <_svfiprintf_r+0x52>
 800e448:	fb0c 3202 	mla	r2, ip, r2, r3
 800e44c:	460c      	mov	r4, r1
 800e44e:	2001      	movs	r0, #1
 800e450:	e7a8      	b.n	800e3a4 <_svfiprintf_r+0xd8>
 800e452:	2300      	movs	r3, #0
 800e454:	3401      	adds	r4, #1
 800e456:	9305      	str	r3, [sp, #20]
 800e458:	4619      	mov	r1, r3
 800e45a:	f04f 0c0a 	mov.w	ip, #10
 800e45e:	4620      	mov	r0, r4
 800e460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e464:	3a30      	subs	r2, #48	@ 0x30
 800e466:	2a09      	cmp	r2, #9
 800e468:	d903      	bls.n	800e472 <_svfiprintf_r+0x1a6>
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d0c6      	beq.n	800e3fc <_svfiprintf_r+0x130>
 800e46e:	9105      	str	r1, [sp, #20]
 800e470:	e7c4      	b.n	800e3fc <_svfiprintf_r+0x130>
 800e472:	fb0c 2101 	mla	r1, ip, r1, r2
 800e476:	4604      	mov	r4, r0
 800e478:	2301      	movs	r3, #1
 800e47a:	e7f0      	b.n	800e45e <_svfiprintf_r+0x192>
 800e47c:	ab03      	add	r3, sp, #12
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	462a      	mov	r2, r5
 800e482:	4b0e      	ldr	r3, [pc, #56]	@ (800e4bc <_svfiprintf_r+0x1f0>)
 800e484:	a904      	add	r1, sp, #16
 800e486:	4638      	mov	r0, r7
 800e488:	f7fc fc66 	bl	800ad58 <_printf_float>
 800e48c:	1c42      	adds	r2, r0, #1
 800e48e:	4606      	mov	r6, r0
 800e490:	d1d6      	bne.n	800e440 <_svfiprintf_r+0x174>
 800e492:	89ab      	ldrh	r3, [r5, #12]
 800e494:	065b      	lsls	r3, r3, #25
 800e496:	f53f af2d 	bmi.w	800e2f4 <_svfiprintf_r+0x28>
 800e49a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e49c:	e72c      	b.n	800e2f8 <_svfiprintf_r+0x2c>
 800e49e:	ab03      	add	r3, sp, #12
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	462a      	mov	r2, r5
 800e4a4:	4b05      	ldr	r3, [pc, #20]	@ (800e4bc <_svfiprintf_r+0x1f0>)
 800e4a6:	a904      	add	r1, sp, #16
 800e4a8:	4638      	mov	r0, r7
 800e4aa:	f7fc feed 	bl	800b288 <_printf_i>
 800e4ae:	e7ed      	b.n	800e48c <_svfiprintf_r+0x1c0>
 800e4b0:	0800fb69 	.word	0x0800fb69
 800e4b4:	0800fb73 	.word	0x0800fb73
 800e4b8:	0800ad59 	.word	0x0800ad59
 800e4bc:	0800e215 	.word	0x0800e215
 800e4c0:	0800fb6f 	.word	0x0800fb6f

0800e4c4 <__sflush_r>:
 800e4c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4cc:	0716      	lsls	r6, r2, #28
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	460c      	mov	r4, r1
 800e4d2:	d454      	bmi.n	800e57e <__sflush_r+0xba>
 800e4d4:	684b      	ldr	r3, [r1, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	dc02      	bgt.n	800e4e0 <__sflush_r+0x1c>
 800e4da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	dd48      	ble.n	800e572 <__sflush_r+0xae>
 800e4e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4e2:	2e00      	cmp	r6, #0
 800e4e4:	d045      	beq.n	800e572 <__sflush_r+0xae>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e4ec:	682f      	ldr	r7, [r5, #0]
 800e4ee:	6a21      	ldr	r1, [r4, #32]
 800e4f0:	602b      	str	r3, [r5, #0]
 800e4f2:	d030      	beq.n	800e556 <__sflush_r+0x92>
 800e4f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e4f6:	89a3      	ldrh	r3, [r4, #12]
 800e4f8:	0759      	lsls	r1, r3, #29
 800e4fa:	d505      	bpl.n	800e508 <__sflush_r+0x44>
 800e4fc:	6863      	ldr	r3, [r4, #4]
 800e4fe:	1ad2      	subs	r2, r2, r3
 800e500:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e502:	b10b      	cbz	r3, 800e508 <__sflush_r+0x44>
 800e504:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e506:	1ad2      	subs	r2, r2, r3
 800e508:	2300      	movs	r3, #0
 800e50a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e50c:	6a21      	ldr	r1, [r4, #32]
 800e50e:	4628      	mov	r0, r5
 800e510:	47b0      	blx	r6
 800e512:	1c43      	adds	r3, r0, #1
 800e514:	89a3      	ldrh	r3, [r4, #12]
 800e516:	d106      	bne.n	800e526 <__sflush_r+0x62>
 800e518:	6829      	ldr	r1, [r5, #0]
 800e51a:	291d      	cmp	r1, #29
 800e51c:	d82b      	bhi.n	800e576 <__sflush_r+0xb2>
 800e51e:	4a2a      	ldr	r2, [pc, #168]	@ (800e5c8 <__sflush_r+0x104>)
 800e520:	410a      	asrs	r2, r1
 800e522:	07d6      	lsls	r6, r2, #31
 800e524:	d427      	bmi.n	800e576 <__sflush_r+0xb2>
 800e526:	2200      	movs	r2, #0
 800e528:	6062      	str	r2, [r4, #4]
 800e52a:	04d9      	lsls	r1, r3, #19
 800e52c:	6922      	ldr	r2, [r4, #16]
 800e52e:	6022      	str	r2, [r4, #0]
 800e530:	d504      	bpl.n	800e53c <__sflush_r+0x78>
 800e532:	1c42      	adds	r2, r0, #1
 800e534:	d101      	bne.n	800e53a <__sflush_r+0x76>
 800e536:	682b      	ldr	r3, [r5, #0]
 800e538:	b903      	cbnz	r3, 800e53c <__sflush_r+0x78>
 800e53a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e53c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e53e:	602f      	str	r7, [r5, #0]
 800e540:	b1b9      	cbz	r1, 800e572 <__sflush_r+0xae>
 800e542:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e546:	4299      	cmp	r1, r3
 800e548:	d002      	beq.n	800e550 <__sflush_r+0x8c>
 800e54a:	4628      	mov	r0, r5
 800e54c:	f7fe fa2c 	bl	800c9a8 <_free_r>
 800e550:	2300      	movs	r3, #0
 800e552:	6363      	str	r3, [r4, #52]	@ 0x34
 800e554:	e00d      	b.n	800e572 <__sflush_r+0xae>
 800e556:	2301      	movs	r3, #1
 800e558:	4628      	mov	r0, r5
 800e55a:	47b0      	blx	r6
 800e55c:	4602      	mov	r2, r0
 800e55e:	1c50      	adds	r0, r2, #1
 800e560:	d1c9      	bne.n	800e4f6 <__sflush_r+0x32>
 800e562:	682b      	ldr	r3, [r5, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d0c6      	beq.n	800e4f6 <__sflush_r+0x32>
 800e568:	2b1d      	cmp	r3, #29
 800e56a:	d001      	beq.n	800e570 <__sflush_r+0xac>
 800e56c:	2b16      	cmp	r3, #22
 800e56e:	d11e      	bne.n	800e5ae <__sflush_r+0xea>
 800e570:	602f      	str	r7, [r5, #0]
 800e572:	2000      	movs	r0, #0
 800e574:	e022      	b.n	800e5bc <__sflush_r+0xf8>
 800e576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e57a:	b21b      	sxth	r3, r3
 800e57c:	e01b      	b.n	800e5b6 <__sflush_r+0xf2>
 800e57e:	690f      	ldr	r7, [r1, #16]
 800e580:	2f00      	cmp	r7, #0
 800e582:	d0f6      	beq.n	800e572 <__sflush_r+0xae>
 800e584:	0793      	lsls	r3, r2, #30
 800e586:	680e      	ldr	r6, [r1, #0]
 800e588:	bf08      	it	eq
 800e58a:	694b      	ldreq	r3, [r1, #20]
 800e58c:	600f      	str	r7, [r1, #0]
 800e58e:	bf18      	it	ne
 800e590:	2300      	movne	r3, #0
 800e592:	eba6 0807 	sub.w	r8, r6, r7
 800e596:	608b      	str	r3, [r1, #8]
 800e598:	f1b8 0f00 	cmp.w	r8, #0
 800e59c:	dde9      	ble.n	800e572 <__sflush_r+0xae>
 800e59e:	6a21      	ldr	r1, [r4, #32]
 800e5a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e5a2:	4643      	mov	r3, r8
 800e5a4:	463a      	mov	r2, r7
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	47b0      	blx	r6
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	dc08      	bgt.n	800e5c0 <__sflush_r+0xfc>
 800e5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5b6:	81a3      	strh	r3, [r4, #12]
 800e5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5c0:	4407      	add	r7, r0
 800e5c2:	eba8 0800 	sub.w	r8, r8, r0
 800e5c6:	e7e7      	b.n	800e598 <__sflush_r+0xd4>
 800e5c8:	dfbffffe 	.word	0xdfbffffe

0800e5cc <_fflush_r>:
 800e5cc:	b538      	push	{r3, r4, r5, lr}
 800e5ce:	690b      	ldr	r3, [r1, #16]
 800e5d0:	4605      	mov	r5, r0
 800e5d2:	460c      	mov	r4, r1
 800e5d4:	b913      	cbnz	r3, 800e5dc <_fflush_r+0x10>
 800e5d6:	2500      	movs	r5, #0
 800e5d8:	4628      	mov	r0, r5
 800e5da:	bd38      	pop	{r3, r4, r5, pc}
 800e5dc:	b118      	cbz	r0, 800e5e6 <_fflush_r+0x1a>
 800e5de:	6a03      	ldr	r3, [r0, #32]
 800e5e0:	b90b      	cbnz	r3, 800e5e6 <_fflush_r+0x1a>
 800e5e2:	f7fd fa11 	bl	800ba08 <__sinit>
 800e5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d0f3      	beq.n	800e5d6 <_fflush_r+0xa>
 800e5ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e5f0:	07d0      	lsls	r0, r2, #31
 800e5f2:	d404      	bmi.n	800e5fe <_fflush_r+0x32>
 800e5f4:	0599      	lsls	r1, r3, #22
 800e5f6:	d402      	bmi.n	800e5fe <_fflush_r+0x32>
 800e5f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5fa:	f7fd fb72 	bl	800bce2 <__retarget_lock_acquire_recursive>
 800e5fe:	4628      	mov	r0, r5
 800e600:	4621      	mov	r1, r4
 800e602:	f7ff ff5f 	bl	800e4c4 <__sflush_r>
 800e606:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e608:	07da      	lsls	r2, r3, #31
 800e60a:	4605      	mov	r5, r0
 800e60c:	d4e4      	bmi.n	800e5d8 <_fflush_r+0xc>
 800e60e:	89a3      	ldrh	r3, [r4, #12]
 800e610:	059b      	lsls	r3, r3, #22
 800e612:	d4e1      	bmi.n	800e5d8 <_fflush_r+0xc>
 800e614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e616:	f7fd fb65 	bl	800bce4 <__retarget_lock_release_recursive>
 800e61a:	e7dd      	b.n	800e5d8 <_fflush_r+0xc>

0800e61c <memmove>:
 800e61c:	4288      	cmp	r0, r1
 800e61e:	b510      	push	{r4, lr}
 800e620:	eb01 0402 	add.w	r4, r1, r2
 800e624:	d902      	bls.n	800e62c <memmove+0x10>
 800e626:	4284      	cmp	r4, r0
 800e628:	4623      	mov	r3, r4
 800e62a:	d807      	bhi.n	800e63c <memmove+0x20>
 800e62c:	1e43      	subs	r3, r0, #1
 800e62e:	42a1      	cmp	r1, r4
 800e630:	d008      	beq.n	800e644 <memmove+0x28>
 800e632:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e63a:	e7f8      	b.n	800e62e <memmove+0x12>
 800e63c:	4402      	add	r2, r0
 800e63e:	4601      	mov	r1, r0
 800e640:	428a      	cmp	r2, r1
 800e642:	d100      	bne.n	800e646 <memmove+0x2a>
 800e644:	bd10      	pop	{r4, pc}
 800e646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e64a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e64e:	e7f7      	b.n	800e640 <memmove+0x24>

0800e650 <strncmp>:
 800e650:	b510      	push	{r4, lr}
 800e652:	b16a      	cbz	r2, 800e670 <strncmp+0x20>
 800e654:	3901      	subs	r1, #1
 800e656:	1884      	adds	r4, r0, r2
 800e658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e65c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e660:	429a      	cmp	r2, r3
 800e662:	d103      	bne.n	800e66c <strncmp+0x1c>
 800e664:	42a0      	cmp	r0, r4
 800e666:	d001      	beq.n	800e66c <strncmp+0x1c>
 800e668:	2a00      	cmp	r2, #0
 800e66a:	d1f5      	bne.n	800e658 <strncmp+0x8>
 800e66c:	1ad0      	subs	r0, r2, r3
 800e66e:	bd10      	pop	{r4, pc}
 800e670:	4610      	mov	r0, r2
 800e672:	e7fc      	b.n	800e66e <strncmp+0x1e>

0800e674 <_sbrk_r>:
 800e674:	b538      	push	{r3, r4, r5, lr}
 800e676:	4d06      	ldr	r5, [pc, #24]	@ (800e690 <_sbrk_r+0x1c>)
 800e678:	2300      	movs	r3, #0
 800e67a:	4604      	mov	r4, r0
 800e67c:	4608      	mov	r0, r1
 800e67e:	602b      	str	r3, [r5, #0]
 800e680:	f7f5 fbd4 	bl	8003e2c <_sbrk>
 800e684:	1c43      	adds	r3, r0, #1
 800e686:	d102      	bne.n	800e68e <_sbrk_r+0x1a>
 800e688:	682b      	ldr	r3, [r5, #0]
 800e68a:	b103      	cbz	r3, 800e68e <_sbrk_r+0x1a>
 800e68c:	6023      	str	r3, [r4, #0]
 800e68e:	bd38      	pop	{r3, r4, r5, pc}
 800e690:	20005238 	.word	0x20005238
 800e694:	00000000 	.word	0x00000000

0800e698 <nan>:
 800e698:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e6a0 <nan+0x8>
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop
 800e6a0:	00000000 	.word	0x00000000
 800e6a4:	7ff80000 	.word	0x7ff80000

0800e6a8 <__assert_func>:
 800e6a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6aa:	4614      	mov	r4, r2
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	4b09      	ldr	r3, [pc, #36]	@ (800e6d4 <__assert_func+0x2c>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4605      	mov	r5, r0
 800e6b4:	68d8      	ldr	r0, [r3, #12]
 800e6b6:	b954      	cbnz	r4, 800e6ce <__assert_func+0x26>
 800e6b8:	4b07      	ldr	r3, [pc, #28]	@ (800e6d8 <__assert_func+0x30>)
 800e6ba:	461c      	mov	r4, r3
 800e6bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6c0:	9100      	str	r1, [sp, #0]
 800e6c2:	462b      	mov	r3, r5
 800e6c4:	4905      	ldr	r1, [pc, #20]	@ (800e6dc <__assert_func+0x34>)
 800e6c6:	f000 fba7 	bl	800ee18 <fiprintf>
 800e6ca:	f000 fbb7 	bl	800ee3c <abort>
 800e6ce:	4b04      	ldr	r3, [pc, #16]	@ (800e6e0 <__assert_func+0x38>)
 800e6d0:	e7f4      	b.n	800e6bc <__assert_func+0x14>
 800e6d2:	bf00      	nop
 800e6d4:	20000020 	.word	0x20000020
 800e6d8:	0800fbbd 	.word	0x0800fbbd
 800e6dc:	0800fb8f 	.word	0x0800fb8f
 800e6e0:	0800fb82 	.word	0x0800fb82

0800e6e4 <_calloc_r>:
 800e6e4:	b570      	push	{r4, r5, r6, lr}
 800e6e6:	fba1 5402 	umull	r5, r4, r1, r2
 800e6ea:	b93c      	cbnz	r4, 800e6fc <_calloc_r+0x18>
 800e6ec:	4629      	mov	r1, r5
 800e6ee:	f7fe f9cf 	bl	800ca90 <_malloc_r>
 800e6f2:	4606      	mov	r6, r0
 800e6f4:	b928      	cbnz	r0, 800e702 <_calloc_r+0x1e>
 800e6f6:	2600      	movs	r6, #0
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	bd70      	pop	{r4, r5, r6, pc}
 800e6fc:	220c      	movs	r2, #12
 800e6fe:	6002      	str	r2, [r0, #0]
 800e700:	e7f9      	b.n	800e6f6 <_calloc_r+0x12>
 800e702:	462a      	mov	r2, r5
 800e704:	4621      	mov	r1, r4
 800e706:	f7fd fa18 	bl	800bb3a <memset>
 800e70a:	e7f5      	b.n	800e6f8 <_calloc_r+0x14>

0800e70c <rshift>:
 800e70c:	6903      	ldr	r3, [r0, #16]
 800e70e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e716:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e71a:	f100 0414 	add.w	r4, r0, #20
 800e71e:	dd45      	ble.n	800e7ac <rshift+0xa0>
 800e720:	f011 011f 	ands.w	r1, r1, #31
 800e724:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e728:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e72c:	d10c      	bne.n	800e748 <rshift+0x3c>
 800e72e:	f100 0710 	add.w	r7, r0, #16
 800e732:	4629      	mov	r1, r5
 800e734:	42b1      	cmp	r1, r6
 800e736:	d334      	bcc.n	800e7a2 <rshift+0x96>
 800e738:	1a9b      	subs	r3, r3, r2
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	1eea      	subs	r2, r5, #3
 800e73e:	4296      	cmp	r6, r2
 800e740:	bf38      	it	cc
 800e742:	2300      	movcc	r3, #0
 800e744:	4423      	add	r3, r4
 800e746:	e015      	b.n	800e774 <rshift+0x68>
 800e748:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e74c:	f1c1 0820 	rsb	r8, r1, #32
 800e750:	40cf      	lsrs	r7, r1
 800e752:	f105 0e04 	add.w	lr, r5, #4
 800e756:	46a1      	mov	r9, r4
 800e758:	4576      	cmp	r6, lr
 800e75a:	46f4      	mov	ip, lr
 800e75c:	d815      	bhi.n	800e78a <rshift+0x7e>
 800e75e:	1a9a      	subs	r2, r3, r2
 800e760:	0092      	lsls	r2, r2, #2
 800e762:	3a04      	subs	r2, #4
 800e764:	3501      	adds	r5, #1
 800e766:	42ae      	cmp	r6, r5
 800e768:	bf38      	it	cc
 800e76a:	2200      	movcc	r2, #0
 800e76c:	18a3      	adds	r3, r4, r2
 800e76e:	50a7      	str	r7, [r4, r2]
 800e770:	b107      	cbz	r7, 800e774 <rshift+0x68>
 800e772:	3304      	adds	r3, #4
 800e774:	1b1a      	subs	r2, r3, r4
 800e776:	42a3      	cmp	r3, r4
 800e778:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e77c:	bf08      	it	eq
 800e77e:	2300      	moveq	r3, #0
 800e780:	6102      	str	r2, [r0, #16]
 800e782:	bf08      	it	eq
 800e784:	6143      	streq	r3, [r0, #20]
 800e786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e78a:	f8dc c000 	ldr.w	ip, [ip]
 800e78e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e792:	ea4c 0707 	orr.w	r7, ip, r7
 800e796:	f849 7b04 	str.w	r7, [r9], #4
 800e79a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e79e:	40cf      	lsrs	r7, r1
 800e7a0:	e7da      	b.n	800e758 <rshift+0x4c>
 800e7a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e7a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e7aa:	e7c3      	b.n	800e734 <rshift+0x28>
 800e7ac:	4623      	mov	r3, r4
 800e7ae:	e7e1      	b.n	800e774 <rshift+0x68>

0800e7b0 <__hexdig_fun>:
 800e7b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e7b4:	2b09      	cmp	r3, #9
 800e7b6:	d802      	bhi.n	800e7be <__hexdig_fun+0xe>
 800e7b8:	3820      	subs	r0, #32
 800e7ba:	b2c0      	uxtb	r0, r0
 800e7bc:	4770      	bx	lr
 800e7be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e7c2:	2b05      	cmp	r3, #5
 800e7c4:	d801      	bhi.n	800e7ca <__hexdig_fun+0x1a>
 800e7c6:	3847      	subs	r0, #71	@ 0x47
 800e7c8:	e7f7      	b.n	800e7ba <__hexdig_fun+0xa>
 800e7ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e7ce:	2b05      	cmp	r3, #5
 800e7d0:	d801      	bhi.n	800e7d6 <__hexdig_fun+0x26>
 800e7d2:	3827      	subs	r0, #39	@ 0x27
 800e7d4:	e7f1      	b.n	800e7ba <__hexdig_fun+0xa>
 800e7d6:	2000      	movs	r0, #0
 800e7d8:	4770      	bx	lr
	...

0800e7dc <__gethex>:
 800e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e0:	b085      	sub	sp, #20
 800e7e2:	468a      	mov	sl, r1
 800e7e4:	9302      	str	r3, [sp, #8]
 800e7e6:	680b      	ldr	r3, [r1, #0]
 800e7e8:	9001      	str	r0, [sp, #4]
 800e7ea:	4690      	mov	r8, r2
 800e7ec:	1c9c      	adds	r4, r3, #2
 800e7ee:	46a1      	mov	r9, r4
 800e7f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e7f4:	2830      	cmp	r0, #48	@ 0x30
 800e7f6:	d0fa      	beq.n	800e7ee <__gethex+0x12>
 800e7f8:	eba9 0303 	sub.w	r3, r9, r3
 800e7fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800e800:	f7ff ffd6 	bl	800e7b0 <__hexdig_fun>
 800e804:	4605      	mov	r5, r0
 800e806:	2800      	cmp	r0, #0
 800e808:	d168      	bne.n	800e8dc <__gethex+0x100>
 800e80a:	49a0      	ldr	r1, [pc, #640]	@ (800ea8c <__gethex+0x2b0>)
 800e80c:	2201      	movs	r2, #1
 800e80e:	4648      	mov	r0, r9
 800e810:	f7ff ff1e 	bl	800e650 <strncmp>
 800e814:	4607      	mov	r7, r0
 800e816:	2800      	cmp	r0, #0
 800e818:	d167      	bne.n	800e8ea <__gethex+0x10e>
 800e81a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e81e:	4626      	mov	r6, r4
 800e820:	f7ff ffc6 	bl	800e7b0 <__hexdig_fun>
 800e824:	2800      	cmp	r0, #0
 800e826:	d062      	beq.n	800e8ee <__gethex+0x112>
 800e828:	4623      	mov	r3, r4
 800e82a:	7818      	ldrb	r0, [r3, #0]
 800e82c:	2830      	cmp	r0, #48	@ 0x30
 800e82e:	4699      	mov	r9, r3
 800e830:	f103 0301 	add.w	r3, r3, #1
 800e834:	d0f9      	beq.n	800e82a <__gethex+0x4e>
 800e836:	f7ff ffbb 	bl	800e7b0 <__hexdig_fun>
 800e83a:	fab0 f580 	clz	r5, r0
 800e83e:	096d      	lsrs	r5, r5, #5
 800e840:	f04f 0b01 	mov.w	fp, #1
 800e844:	464a      	mov	r2, r9
 800e846:	4616      	mov	r6, r2
 800e848:	3201      	adds	r2, #1
 800e84a:	7830      	ldrb	r0, [r6, #0]
 800e84c:	f7ff ffb0 	bl	800e7b0 <__hexdig_fun>
 800e850:	2800      	cmp	r0, #0
 800e852:	d1f8      	bne.n	800e846 <__gethex+0x6a>
 800e854:	498d      	ldr	r1, [pc, #564]	@ (800ea8c <__gethex+0x2b0>)
 800e856:	2201      	movs	r2, #1
 800e858:	4630      	mov	r0, r6
 800e85a:	f7ff fef9 	bl	800e650 <strncmp>
 800e85e:	2800      	cmp	r0, #0
 800e860:	d13f      	bne.n	800e8e2 <__gethex+0x106>
 800e862:	b944      	cbnz	r4, 800e876 <__gethex+0x9a>
 800e864:	1c74      	adds	r4, r6, #1
 800e866:	4622      	mov	r2, r4
 800e868:	4616      	mov	r6, r2
 800e86a:	3201      	adds	r2, #1
 800e86c:	7830      	ldrb	r0, [r6, #0]
 800e86e:	f7ff ff9f 	bl	800e7b0 <__hexdig_fun>
 800e872:	2800      	cmp	r0, #0
 800e874:	d1f8      	bne.n	800e868 <__gethex+0x8c>
 800e876:	1ba4      	subs	r4, r4, r6
 800e878:	00a7      	lsls	r7, r4, #2
 800e87a:	7833      	ldrb	r3, [r6, #0]
 800e87c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e880:	2b50      	cmp	r3, #80	@ 0x50
 800e882:	d13e      	bne.n	800e902 <__gethex+0x126>
 800e884:	7873      	ldrb	r3, [r6, #1]
 800e886:	2b2b      	cmp	r3, #43	@ 0x2b
 800e888:	d033      	beq.n	800e8f2 <__gethex+0x116>
 800e88a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e88c:	d034      	beq.n	800e8f8 <__gethex+0x11c>
 800e88e:	1c71      	adds	r1, r6, #1
 800e890:	2400      	movs	r4, #0
 800e892:	7808      	ldrb	r0, [r1, #0]
 800e894:	f7ff ff8c 	bl	800e7b0 <__hexdig_fun>
 800e898:	1e43      	subs	r3, r0, #1
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	2b18      	cmp	r3, #24
 800e89e:	d830      	bhi.n	800e902 <__gethex+0x126>
 800e8a0:	f1a0 0210 	sub.w	r2, r0, #16
 800e8a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e8a8:	f7ff ff82 	bl	800e7b0 <__hexdig_fun>
 800e8ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800e8b0:	fa5f fc8c 	uxtb.w	ip, ip
 800e8b4:	f1bc 0f18 	cmp.w	ip, #24
 800e8b8:	f04f 030a 	mov.w	r3, #10
 800e8bc:	d91e      	bls.n	800e8fc <__gethex+0x120>
 800e8be:	b104      	cbz	r4, 800e8c2 <__gethex+0xe6>
 800e8c0:	4252      	negs	r2, r2
 800e8c2:	4417      	add	r7, r2
 800e8c4:	f8ca 1000 	str.w	r1, [sl]
 800e8c8:	b1ed      	cbz	r5, 800e906 <__gethex+0x12a>
 800e8ca:	f1bb 0f00 	cmp.w	fp, #0
 800e8ce:	bf0c      	ite	eq
 800e8d0:	2506      	moveq	r5, #6
 800e8d2:	2500      	movne	r5, #0
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	b005      	add	sp, #20
 800e8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8dc:	2500      	movs	r5, #0
 800e8de:	462c      	mov	r4, r5
 800e8e0:	e7b0      	b.n	800e844 <__gethex+0x68>
 800e8e2:	2c00      	cmp	r4, #0
 800e8e4:	d1c7      	bne.n	800e876 <__gethex+0x9a>
 800e8e6:	4627      	mov	r7, r4
 800e8e8:	e7c7      	b.n	800e87a <__gethex+0x9e>
 800e8ea:	464e      	mov	r6, r9
 800e8ec:	462f      	mov	r7, r5
 800e8ee:	2501      	movs	r5, #1
 800e8f0:	e7c3      	b.n	800e87a <__gethex+0x9e>
 800e8f2:	2400      	movs	r4, #0
 800e8f4:	1cb1      	adds	r1, r6, #2
 800e8f6:	e7cc      	b.n	800e892 <__gethex+0xb6>
 800e8f8:	2401      	movs	r4, #1
 800e8fa:	e7fb      	b.n	800e8f4 <__gethex+0x118>
 800e8fc:	fb03 0002 	mla	r0, r3, r2, r0
 800e900:	e7ce      	b.n	800e8a0 <__gethex+0xc4>
 800e902:	4631      	mov	r1, r6
 800e904:	e7de      	b.n	800e8c4 <__gethex+0xe8>
 800e906:	eba6 0309 	sub.w	r3, r6, r9
 800e90a:	3b01      	subs	r3, #1
 800e90c:	4629      	mov	r1, r5
 800e90e:	2b07      	cmp	r3, #7
 800e910:	dc0a      	bgt.n	800e928 <__gethex+0x14c>
 800e912:	9801      	ldr	r0, [sp, #4]
 800e914:	f7fe f948 	bl	800cba8 <_Balloc>
 800e918:	4604      	mov	r4, r0
 800e91a:	b940      	cbnz	r0, 800e92e <__gethex+0x152>
 800e91c:	4b5c      	ldr	r3, [pc, #368]	@ (800ea90 <__gethex+0x2b4>)
 800e91e:	4602      	mov	r2, r0
 800e920:	21e4      	movs	r1, #228	@ 0xe4
 800e922:	485c      	ldr	r0, [pc, #368]	@ (800ea94 <__gethex+0x2b8>)
 800e924:	f7ff fec0 	bl	800e6a8 <__assert_func>
 800e928:	3101      	adds	r1, #1
 800e92a:	105b      	asrs	r3, r3, #1
 800e92c:	e7ef      	b.n	800e90e <__gethex+0x132>
 800e92e:	f100 0a14 	add.w	sl, r0, #20
 800e932:	2300      	movs	r3, #0
 800e934:	4655      	mov	r5, sl
 800e936:	469b      	mov	fp, r3
 800e938:	45b1      	cmp	r9, r6
 800e93a:	d337      	bcc.n	800e9ac <__gethex+0x1d0>
 800e93c:	f845 bb04 	str.w	fp, [r5], #4
 800e940:	eba5 050a 	sub.w	r5, r5, sl
 800e944:	10ad      	asrs	r5, r5, #2
 800e946:	6125      	str	r5, [r4, #16]
 800e948:	4658      	mov	r0, fp
 800e94a:	f7fe fa1f 	bl	800cd8c <__hi0bits>
 800e94e:	016d      	lsls	r5, r5, #5
 800e950:	f8d8 6000 	ldr.w	r6, [r8]
 800e954:	1a2d      	subs	r5, r5, r0
 800e956:	42b5      	cmp	r5, r6
 800e958:	dd54      	ble.n	800ea04 <__gethex+0x228>
 800e95a:	1bad      	subs	r5, r5, r6
 800e95c:	4629      	mov	r1, r5
 800e95e:	4620      	mov	r0, r4
 800e960:	f7fe fdb3 	bl	800d4ca <__any_on>
 800e964:	4681      	mov	r9, r0
 800e966:	b178      	cbz	r0, 800e988 <__gethex+0x1ac>
 800e968:	1e6b      	subs	r3, r5, #1
 800e96a:	1159      	asrs	r1, r3, #5
 800e96c:	f003 021f 	and.w	r2, r3, #31
 800e970:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e974:	f04f 0901 	mov.w	r9, #1
 800e978:	fa09 f202 	lsl.w	r2, r9, r2
 800e97c:	420a      	tst	r2, r1
 800e97e:	d003      	beq.n	800e988 <__gethex+0x1ac>
 800e980:	454b      	cmp	r3, r9
 800e982:	dc36      	bgt.n	800e9f2 <__gethex+0x216>
 800e984:	f04f 0902 	mov.w	r9, #2
 800e988:	4629      	mov	r1, r5
 800e98a:	4620      	mov	r0, r4
 800e98c:	f7ff febe 	bl	800e70c <rshift>
 800e990:	442f      	add	r7, r5
 800e992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e996:	42bb      	cmp	r3, r7
 800e998:	da42      	bge.n	800ea20 <__gethex+0x244>
 800e99a:	9801      	ldr	r0, [sp, #4]
 800e99c:	4621      	mov	r1, r4
 800e99e:	f7fe f943 	bl	800cc28 <_Bfree>
 800e9a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	6013      	str	r3, [r2, #0]
 800e9a8:	25a3      	movs	r5, #163	@ 0xa3
 800e9aa:	e793      	b.n	800e8d4 <__gethex+0xf8>
 800e9ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e9b0:	2a2e      	cmp	r2, #46	@ 0x2e
 800e9b2:	d012      	beq.n	800e9da <__gethex+0x1fe>
 800e9b4:	2b20      	cmp	r3, #32
 800e9b6:	d104      	bne.n	800e9c2 <__gethex+0x1e6>
 800e9b8:	f845 bb04 	str.w	fp, [r5], #4
 800e9bc:	f04f 0b00 	mov.w	fp, #0
 800e9c0:	465b      	mov	r3, fp
 800e9c2:	7830      	ldrb	r0, [r6, #0]
 800e9c4:	9303      	str	r3, [sp, #12]
 800e9c6:	f7ff fef3 	bl	800e7b0 <__hexdig_fun>
 800e9ca:	9b03      	ldr	r3, [sp, #12]
 800e9cc:	f000 000f 	and.w	r0, r0, #15
 800e9d0:	4098      	lsls	r0, r3
 800e9d2:	ea4b 0b00 	orr.w	fp, fp, r0
 800e9d6:	3304      	adds	r3, #4
 800e9d8:	e7ae      	b.n	800e938 <__gethex+0x15c>
 800e9da:	45b1      	cmp	r9, r6
 800e9dc:	d8ea      	bhi.n	800e9b4 <__gethex+0x1d8>
 800e9de:	492b      	ldr	r1, [pc, #172]	@ (800ea8c <__gethex+0x2b0>)
 800e9e0:	9303      	str	r3, [sp, #12]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	f7ff fe33 	bl	800e650 <strncmp>
 800e9ea:	9b03      	ldr	r3, [sp, #12]
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d1e1      	bne.n	800e9b4 <__gethex+0x1d8>
 800e9f0:	e7a2      	b.n	800e938 <__gethex+0x15c>
 800e9f2:	1ea9      	subs	r1, r5, #2
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	f7fe fd68 	bl	800d4ca <__any_on>
 800e9fa:	2800      	cmp	r0, #0
 800e9fc:	d0c2      	beq.n	800e984 <__gethex+0x1a8>
 800e9fe:	f04f 0903 	mov.w	r9, #3
 800ea02:	e7c1      	b.n	800e988 <__gethex+0x1ac>
 800ea04:	da09      	bge.n	800ea1a <__gethex+0x23e>
 800ea06:	1b75      	subs	r5, r6, r5
 800ea08:	4621      	mov	r1, r4
 800ea0a:	9801      	ldr	r0, [sp, #4]
 800ea0c:	462a      	mov	r2, r5
 800ea0e:	f7fe fb23 	bl	800d058 <__lshift>
 800ea12:	1b7f      	subs	r7, r7, r5
 800ea14:	4604      	mov	r4, r0
 800ea16:	f100 0a14 	add.w	sl, r0, #20
 800ea1a:	f04f 0900 	mov.w	r9, #0
 800ea1e:	e7b8      	b.n	800e992 <__gethex+0x1b6>
 800ea20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ea24:	42bd      	cmp	r5, r7
 800ea26:	dd6f      	ble.n	800eb08 <__gethex+0x32c>
 800ea28:	1bed      	subs	r5, r5, r7
 800ea2a:	42ae      	cmp	r6, r5
 800ea2c:	dc34      	bgt.n	800ea98 <__gethex+0x2bc>
 800ea2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	d022      	beq.n	800ea7c <__gethex+0x2a0>
 800ea36:	2b03      	cmp	r3, #3
 800ea38:	d024      	beq.n	800ea84 <__gethex+0x2a8>
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d115      	bne.n	800ea6a <__gethex+0x28e>
 800ea3e:	42ae      	cmp	r6, r5
 800ea40:	d113      	bne.n	800ea6a <__gethex+0x28e>
 800ea42:	2e01      	cmp	r6, #1
 800ea44:	d10b      	bne.n	800ea5e <__gethex+0x282>
 800ea46:	9a02      	ldr	r2, [sp, #8]
 800ea48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ea4c:	6013      	str	r3, [r2, #0]
 800ea4e:	2301      	movs	r3, #1
 800ea50:	6123      	str	r3, [r4, #16]
 800ea52:	f8ca 3000 	str.w	r3, [sl]
 800ea56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea58:	2562      	movs	r5, #98	@ 0x62
 800ea5a:	601c      	str	r4, [r3, #0]
 800ea5c:	e73a      	b.n	800e8d4 <__gethex+0xf8>
 800ea5e:	1e71      	subs	r1, r6, #1
 800ea60:	4620      	mov	r0, r4
 800ea62:	f7fe fd32 	bl	800d4ca <__any_on>
 800ea66:	2800      	cmp	r0, #0
 800ea68:	d1ed      	bne.n	800ea46 <__gethex+0x26a>
 800ea6a:	9801      	ldr	r0, [sp, #4]
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	f7fe f8db 	bl	800cc28 <_Bfree>
 800ea72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea74:	2300      	movs	r3, #0
 800ea76:	6013      	str	r3, [r2, #0]
 800ea78:	2550      	movs	r5, #80	@ 0x50
 800ea7a:	e72b      	b.n	800e8d4 <__gethex+0xf8>
 800ea7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d1f3      	bne.n	800ea6a <__gethex+0x28e>
 800ea82:	e7e0      	b.n	800ea46 <__gethex+0x26a>
 800ea84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1dd      	bne.n	800ea46 <__gethex+0x26a>
 800ea8a:	e7ee      	b.n	800ea6a <__gethex+0x28e>
 800ea8c:	0800fa10 	.word	0x0800fa10
 800ea90:	0800f8a5 	.word	0x0800f8a5
 800ea94:	0800fbbe 	.word	0x0800fbbe
 800ea98:	1e6f      	subs	r7, r5, #1
 800ea9a:	f1b9 0f00 	cmp.w	r9, #0
 800ea9e:	d130      	bne.n	800eb02 <__gethex+0x326>
 800eaa0:	b127      	cbz	r7, 800eaac <__gethex+0x2d0>
 800eaa2:	4639      	mov	r1, r7
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f7fe fd10 	bl	800d4ca <__any_on>
 800eaaa:	4681      	mov	r9, r0
 800eaac:	117a      	asrs	r2, r7, #5
 800eaae:	2301      	movs	r3, #1
 800eab0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800eab4:	f007 071f 	and.w	r7, r7, #31
 800eab8:	40bb      	lsls	r3, r7
 800eaba:	4213      	tst	r3, r2
 800eabc:	4629      	mov	r1, r5
 800eabe:	4620      	mov	r0, r4
 800eac0:	bf18      	it	ne
 800eac2:	f049 0902 	orrne.w	r9, r9, #2
 800eac6:	f7ff fe21 	bl	800e70c <rshift>
 800eaca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800eace:	1b76      	subs	r6, r6, r5
 800ead0:	2502      	movs	r5, #2
 800ead2:	f1b9 0f00 	cmp.w	r9, #0
 800ead6:	d047      	beq.n	800eb68 <__gethex+0x38c>
 800ead8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eadc:	2b02      	cmp	r3, #2
 800eade:	d015      	beq.n	800eb0c <__gethex+0x330>
 800eae0:	2b03      	cmp	r3, #3
 800eae2:	d017      	beq.n	800eb14 <__gethex+0x338>
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d109      	bne.n	800eafc <__gethex+0x320>
 800eae8:	f019 0f02 	tst.w	r9, #2
 800eaec:	d006      	beq.n	800eafc <__gethex+0x320>
 800eaee:	f8da 3000 	ldr.w	r3, [sl]
 800eaf2:	ea49 0903 	orr.w	r9, r9, r3
 800eaf6:	f019 0f01 	tst.w	r9, #1
 800eafa:	d10e      	bne.n	800eb1a <__gethex+0x33e>
 800eafc:	f045 0510 	orr.w	r5, r5, #16
 800eb00:	e032      	b.n	800eb68 <__gethex+0x38c>
 800eb02:	f04f 0901 	mov.w	r9, #1
 800eb06:	e7d1      	b.n	800eaac <__gethex+0x2d0>
 800eb08:	2501      	movs	r5, #1
 800eb0a:	e7e2      	b.n	800ead2 <__gethex+0x2f6>
 800eb0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb0e:	f1c3 0301 	rsb	r3, r3, #1
 800eb12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d0f0      	beq.n	800eafc <__gethex+0x320>
 800eb1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eb1e:	f104 0314 	add.w	r3, r4, #20
 800eb22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eb26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eb2a:	f04f 0c00 	mov.w	ip, #0
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eb38:	d01b      	beq.n	800eb72 <__gethex+0x396>
 800eb3a:	3201      	adds	r2, #1
 800eb3c:	6002      	str	r2, [r0, #0]
 800eb3e:	2d02      	cmp	r5, #2
 800eb40:	f104 0314 	add.w	r3, r4, #20
 800eb44:	d13c      	bne.n	800ebc0 <__gethex+0x3e4>
 800eb46:	f8d8 2000 	ldr.w	r2, [r8]
 800eb4a:	3a01      	subs	r2, #1
 800eb4c:	42b2      	cmp	r2, r6
 800eb4e:	d109      	bne.n	800eb64 <__gethex+0x388>
 800eb50:	1171      	asrs	r1, r6, #5
 800eb52:	2201      	movs	r2, #1
 800eb54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb58:	f006 061f 	and.w	r6, r6, #31
 800eb5c:	fa02 f606 	lsl.w	r6, r2, r6
 800eb60:	421e      	tst	r6, r3
 800eb62:	d13a      	bne.n	800ebda <__gethex+0x3fe>
 800eb64:	f045 0520 	orr.w	r5, r5, #32
 800eb68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb6a:	601c      	str	r4, [r3, #0]
 800eb6c:	9b02      	ldr	r3, [sp, #8]
 800eb6e:	601f      	str	r7, [r3, #0]
 800eb70:	e6b0      	b.n	800e8d4 <__gethex+0xf8>
 800eb72:	4299      	cmp	r1, r3
 800eb74:	f843 cc04 	str.w	ip, [r3, #-4]
 800eb78:	d8d9      	bhi.n	800eb2e <__gethex+0x352>
 800eb7a:	68a3      	ldr	r3, [r4, #8]
 800eb7c:	459b      	cmp	fp, r3
 800eb7e:	db17      	blt.n	800ebb0 <__gethex+0x3d4>
 800eb80:	6861      	ldr	r1, [r4, #4]
 800eb82:	9801      	ldr	r0, [sp, #4]
 800eb84:	3101      	adds	r1, #1
 800eb86:	f7fe f80f 	bl	800cba8 <_Balloc>
 800eb8a:	4681      	mov	r9, r0
 800eb8c:	b918      	cbnz	r0, 800eb96 <__gethex+0x3ba>
 800eb8e:	4b1a      	ldr	r3, [pc, #104]	@ (800ebf8 <__gethex+0x41c>)
 800eb90:	4602      	mov	r2, r0
 800eb92:	2184      	movs	r1, #132	@ 0x84
 800eb94:	e6c5      	b.n	800e922 <__gethex+0x146>
 800eb96:	6922      	ldr	r2, [r4, #16]
 800eb98:	3202      	adds	r2, #2
 800eb9a:	f104 010c 	add.w	r1, r4, #12
 800eb9e:	0092      	lsls	r2, r2, #2
 800eba0:	300c      	adds	r0, #12
 800eba2:	f7fd f8a0 	bl	800bce6 <memcpy>
 800eba6:	4621      	mov	r1, r4
 800eba8:	9801      	ldr	r0, [sp, #4]
 800ebaa:	f7fe f83d 	bl	800cc28 <_Bfree>
 800ebae:	464c      	mov	r4, r9
 800ebb0:	6923      	ldr	r3, [r4, #16]
 800ebb2:	1c5a      	adds	r2, r3, #1
 800ebb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ebb8:	6122      	str	r2, [r4, #16]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	615a      	str	r2, [r3, #20]
 800ebbe:	e7be      	b.n	800eb3e <__gethex+0x362>
 800ebc0:	6922      	ldr	r2, [r4, #16]
 800ebc2:	455a      	cmp	r2, fp
 800ebc4:	dd0b      	ble.n	800ebde <__gethex+0x402>
 800ebc6:	2101      	movs	r1, #1
 800ebc8:	4620      	mov	r0, r4
 800ebca:	f7ff fd9f 	bl	800e70c <rshift>
 800ebce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebd2:	3701      	adds	r7, #1
 800ebd4:	42bb      	cmp	r3, r7
 800ebd6:	f6ff aee0 	blt.w	800e99a <__gethex+0x1be>
 800ebda:	2501      	movs	r5, #1
 800ebdc:	e7c2      	b.n	800eb64 <__gethex+0x388>
 800ebde:	f016 061f 	ands.w	r6, r6, #31
 800ebe2:	d0fa      	beq.n	800ebda <__gethex+0x3fe>
 800ebe4:	4453      	add	r3, sl
 800ebe6:	f1c6 0620 	rsb	r6, r6, #32
 800ebea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ebee:	f7fe f8cd 	bl	800cd8c <__hi0bits>
 800ebf2:	42b0      	cmp	r0, r6
 800ebf4:	dbe7      	blt.n	800ebc6 <__gethex+0x3ea>
 800ebf6:	e7f0      	b.n	800ebda <__gethex+0x3fe>
 800ebf8:	0800f8a5 	.word	0x0800f8a5

0800ebfc <L_shift>:
 800ebfc:	f1c2 0208 	rsb	r2, r2, #8
 800ec00:	0092      	lsls	r2, r2, #2
 800ec02:	b570      	push	{r4, r5, r6, lr}
 800ec04:	f1c2 0620 	rsb	r6, r2, #32
 800ec08:	6843      	ldr	r3, [r0, #4]
 800ec0a:	6804      	ldr	r4, [r0, #0]
 800ec0c:	fa03 f506 	lsl.w	r5, r3, r6
 800ec10:	432c      	orrs	r4, r5
 800ec12:	40d3      	lsrs	r3, r2
 800ec14:	6004      	str	r4, [r0, #0]
 800ec16:	f840 3f04 	str.w	r3, [r0, #4]!
 800ec1a:	4288      	cmp	r0, r1
 800ec1c:	d3f4      	bcc.n	800ec08 <L_shift+0xc>
 800ec1e:	bd70      	pop	{r4, r5, r6, pc}

0800ec20 <__match>:
 800ec20:	b530      	push	{r4, r5, lr}
 800ec22:	6803      	ldr	r3, [r0, #0]
 800ec24:	3301      	adds	r3, #1
 800ec26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec2a:	b914      	cbnz	r4, 800ec32 <__match+0x12>
 800ec2c:	6003      	str	r3, [r0, #0]
 800ec2e:	2001      	movs	r0, #1
 800ec30:	bd30      	pop	{r4, r5, pc}
 800ec32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ec3a:	2d19      	cmp	r5, #25
 800ec3c:	bf98      	it	ls
 800ec3e:	3220      	addls	r2, #32
 800ec40:	42a2      	cmp	r2, r4
 800ec42:	d0f0      	beq.n	800ec26 <__match+0x6>
 800ec44:	2000      	movs	r0, #0
 800ec46:	e7f3      	b.n	800ec30 <__match+0x10>

0800ec48 <__hexnan>:
 800ec48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec4c:	680b      	ldr	r3, [r1, #0]
 800ec4e:	6801      	ldr	r1, [r0, #0]
 800ec50:	115e      	asrs	r6, r3, #5
 800ec52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ec56:	f013 031f 	ands.w	r3, r3, #31
 800ec5a:	b087      	sub	sp, #28
 800ec5c:	bf18      	it	ne
 800ec5e:	3604      	addne	r6, #4
 800ec60:	2500      	movs	r5, #0
 800ec62:	1f37      	subs	r7, r6, #4
 800ec64:	4682      	mov	sl, r0
 800ec66:	4690      	mov	r8, r2
 800ec68:	9301      	str	r3, [sp, #4]
 800ec6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ec6e:	46b9      	mov	r9, r7
 800ec70:	463c      	mov	r4, r7
 800ec72:	9502      	str	r5, [sp, #8]
 800ec74:	46ab      	mov	fp, r5
 800ec76:	784a      	ldrb	r2, [r1, #1]
 800ec78:	1c4b      	adds	r3, r1, #1
 800ec7a:	9303      	str	r3, [sp, #12]
 800ec7c:	b342      	cbz	r2, 800ecd0 <__hexnan+0x88>
 800ec7e:	4610      	mov	r0, r2
 800ec80:	9105      	str	r1, [sp, #20]
 800ec82:	9204      	str	r2, [sp, #16]
 800ec84:	f7ff fd94 	bl	800e7b0 <__hexdig_fun>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d151      	bne.n	800ed30 <__hexnan+0xe8>
 800ec8c:	9a04      	ldr	r2, [sp, #16]
 800ec8e:	9905      	ldr	r1, [sp, #20]
 800ec90:	2a20      	cmp	r2, #32
 800ec92:	d818      	bhi.n	800ecc6 <__hexnan+0x7e>
 800ec94:	9b02      	ldr	r3, [sp, #8]
 800ec96:	459b      	cmp	fp, r3
 800ec98:	dd13      	ble.n	800ecc2 <__hexnan+0x7a>
 800ec9a:	454c      	cmp	r4, r9
 800ec9c:	d206      	bcs.n	800ecac <__hexnan+0x64>
 800ec9e:	2d07      	cmp	r5, #7
 800eca0:	dc04      	bgt.n	800ecac <__hexnan+0x64>
 800eca2:	462a      	mov	r2, r5
 800eca4:	4649      	mov	r1, r9
 800eca6:	4620      	mov	r0, r4
 800eca8:	f7ff ffa8 	bl	800ebfc <L_shift>
 800ecac:	4544      	cmp	r4, r8
 800ecae:	d952      	bls.n	800ed56 <__hexnan+0x10e>
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	f1a4 0904 	sub.w	r9, r4, #4
 800ecb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ecba:	f8cd b008 	str.w	fp, [sp, #8]
 800ecbe:	464c      	mov	r4, r9
 800ecc0:	461d      	mov	r5, r3
 800ecc2:	9903      	ldr	r1, [sp, #12]
 800ecc4:	e7d7      	b.n	800ec76 <__hexnan+0x2e>
 800ecc6:	2a29      	cmp	r2, #41	@ 0x29
 800ecc8:	d157      	bne.n	800ed7a <__hexnan+0x132>
 800ecca:	3102      	adds	r1, #2
 800eccc:	f8ca 1000 	str.w	r1, [sl]
 800ecd0:	f1bb 0f00 	cmp.w	fp, #0
 800ecd4:	d051      	beq.n	800ed7a <__hexnan+0x132>
 800ecd6:	454c      	cmp	r4, r9
 800ecd8:	d206      	bcs.n	800ece8 <__hexnan+0xa0>
 800ecda:	2d07      	cmp	r5, #7
 800ecdc:	dc04      	bgt.n	800ece8 <__hexnan+0xa0>
 800ecde:	462a      	mov	r2, r5
 800ece0:	4649      	mov	r1, r9
 800ece2:	4620      	mov	r0, r4
 800ece4:	f7ff ff8a 	bl	800ebfc <L_shift>
 800ece8:	4544      	cmp	r4, r8
 800ecea:	d936      	bls.n	800ed5a <__hexnan+0x112>
 800ecec:	f1a8 0204 	sub.w	r2, r8, #4
 800ecf0:	4623      	mov	r3, r4
 800ecf2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ecf6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ecfa:	429f      	cmp	r7, r3
 800ecfc:	d2f9      	bcs.n	800ecf2 <__hexnan+0xaa>
 800ecfe:	1b3b      	subs	r3, r7, r4
 800ed00:	f023 0303 	bic.w	r3, r3, #3
 800ed04:	3304      	adds	r3, #4
 800ed06:	3401      	adds	r4, #1
 800ed08:	3e03      	subs	r6, #3
 800ed0a:	42b4      	cmp	r4, r6
 800ed0c:	bf88      	it	hi
 800ed0e:	2304      	movhi	r3, #4
 800ed10:	4443      	add	r3, r8
 800ed12:	2200      	movs	r2, #0
 800ed14:	f843 2b04 	str.w	r2, [r3], #4
 800ed18:	429f      	cmp	r7, r3
 800ed1a:	d2fb      	bcs.n	800ed14 <__hexnan+0xcc>
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	b91b      	cbnz	r3, 800ed28 <__hexnan+0xe0>
 800ed20:	4547      	cmp	r7, r8
 800ed22:	d128      	bne.n	800ed76 <__hexnan+0x12e>
 800ed24:	2301      	movs	r3, #1
 800ed26:	603b      	str	r3, [r7, #0]
 800ed28:	2005      	movs	r0, #5
 800ed2a:	b007      	add	sp, #28
 800ed2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed30:	3501      	adds	r5, #1
 800ed32:	2d08      	cmp	r5, #8
 800ed34:	f10b 0b01 	add.w	fp, fp, #1
 800ed38:	dd06      	ble.n	800ed48 <__hexnan+0x100>
 800ed3a:	4544      	cmp	r4, r8
 800ed3c:	d9c1      	bls.n	800ecc2 <__hexnan+0x7a>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed44:	2501      	movs	r5, #1
 800ed46:	3c04      	subs	r4, #4
 800ed48:	6822      	ldr	r2, [r4, #0]
 800ed4a:	f000 000f 	and.w	r0, r0, #15
 800ed4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ed52:	6020      	str	r0, [r4, #0]
 800ed54:	e7b5      	b.n	800ecc2 <__hexnan+0x7a>
 800ed56:	2508      	movs	r5, #8
 800ed58:	e7b3      	b.n	800ecc2 <__hexnan+0x7a>
 800ed5a:	9b01      	ldr	r3, [sp, #4]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d0dd      	beq.n	800ed1c <__hexnan+0xd4>
 800ed60:	f1c3 0320 	rsb	r3, r3, #32
 800ed64:	f04f 32ff 	mov.w	r2, #4294967295
 800ed68:	40da      	lsrs	r2, r3
 800ed6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ed6e:	4013      	ands	r3, r2
 800ed70:	f846 3c04 	str.w	r3, [r6, #-4]
 800ed74:	e7d2      	b.n	800ed1c <__hexnan+0xd4>
 800ed76:	3f04      	subs	r7, #4
 800ed78:	e7d0      	b.n	800ed1c <__hexnan+0xd4>
 800ed7a:	2004      	movs	r0, #4
 800ed7c:	e7d5      	b.n	800ed2a <__hexnan+0xe2>

0800ed7e <__ascii_mbtowc>:
 800ed7e:	b082      	sub	sp, #8
 800ed80:	b901      	cbnz	r1, 800ed84 <__ascii_mbtowc+0x6>
 800ed82:	a901      	add	r1, sp, #4
 800ed84:	b142      	cbz	r2, 800ed98 <__ascii_mbtowc+0x1a>
 800ed86:	b14b      	cbz	r3, 800ed9c <__ascii_mbtowc+0x1e>
 800ed88:	7813      	ldrb	r3, [r2, #0]
 800ed8a:	600b      	str	r3, [r1, #0]
 800ed8c:	7812      	ldrb	r2, [r2, #0]
 800ed8e:	1e10      	subs	r0, r2, #0
 800ed90:	bf18      	it	ne
 800ed92:	2001      	movne	r0, #1
 800ed94:	b002      	add	sp, #8
 800ed96:	4770      	bx	lr
 800ed98:	4610      	mov	r0, r2
 800ed9a:	e7fb      	b.n	800ed94 <__ascii_mbtowc+0x16>
 800ed9c:	f06f 0001 	mvn.w	r0, #1
 800eda0:	e7f8      	b.n	800ed94 <__ascii_mbtowc+0x16>

0800eda2 <_realloc_r>:
 800eda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eda6:	4680      	mov	r8, r0
 800eda8:	4615      	mov	r5, r2
 800edaa:	460c      	mov	r4, r1
 800edac:	b921      	cbnz	r1, 800edb8 <_realloc_r+0x16>
 800edae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edb2:	4611      	mov	r1, r2
 800edb4:	f7fd be6c 	b.w	800ca90 <_malloc_r>
 800edb8:	b92a      	cbnz	r2, 800edc6 <_realloc_r+0x24>
 800edba:	f7fd fdf5 	bl	800c9a8 <_free_r>
 800edbe:	2400      	movs	r4, #0
 800edc0:	4620      	mov	r0, r4
 800edc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc6:	f000 f840 	bl	800ee4a <_malloc_usable_size_r>
 800edca:	4285      	cmp	r5, r0
 800edcc:	4606      	mov	r6, r0
 800edce:	d802      	bhi.n	800edd6 <_realloc_r+0x34>
 800edd0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800edd4:	d8f4      	bhi.n	800edc0 <_realloc_r+0x1e>
 800edd6:	4629      	mov	r1, r5
 800edd8:	4640      	mov	r0, r8
 800edda:	f7fd fe59 	bl	800ca90 <_malloc_r>
 800edde:	4607      	mov	r7, r0
 800ede0:	2800      	cmp	r0, #0
 800ede2:	d0ec      	beq.n	800edbe <_realloc_r+0x1c>
 800ede4:	42b5      	cmp	r5, r6
 800ede6:	462a      	mov	r2, r5
 800ede8:	4621      	mov	r1, r4
 800edea:	bf28      	it	cs
 800edec:	4632      	movcs	r2, r6
 800edee:	f7fc ff7a 	bl	800bce6 <memcpy>
 800edf2:	4621      	mov	r1, r4
 800edf4:	4640      	mov	r0, r8
 800edf6:	f7fd fdd7 	bl	800c9a8 <_free_r>
 800edfa:	463c      	mov	r4, r7
 800edfc:	e7e0      	b.n	800edc0 <_realloc_r+0x1e>

0800edfe <__ascii_wctomb>:
 800edfe:	4603      	mov	r3, r0
 800ee00:	4608      	mov	r0, r1
 800ee02:	b141      	cbz	r1, 800ee16 <__ascii_wctomb+0x18>
 800ee04:	2aff      	cmp	r2, #255	@ 0xff
 800ee06:	d904      	bls.n	800ee12 <__ascii_wctomb+0x14>
 800ee08:	228a      	movs	r2, #138	@ 0x8a
 800ee0a:	601a      	str	r2, [r3, #0]
 800ee0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee10:	4770      	bx	lr
 800ee12:	700a      	strb	r2, [r1, #0]
 800ee14:	2001      	movs	r0, #1
 800ee16:	4770      	bx	lr

0800ee18 <fiprintf>:
 800ee18:	b40e      	push	{r1, r2, r3}
 800ee1a:	b503      	push	{r0, r1, lr}
 800ee1c:	4601      	mov	r1, r0
 800ee1e:	ab03      	add	r3, sp, #12
 800ee20:	4805      	ldr	r0, [pc, #20]	@ (800ee38 <fiprintf+0x20>)
 800ee22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee26:	6800      	ldr	r0, [r0, #0]
 800ee28:	9301      	str	r3, [sp, #4]
 800ee2a:	f000 f83f 	bl	800eeac <_vfiprintf_r>
 800ee2e:	b002      	add	sp, #8
 800ee30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee34:	b003      	add	sp, #12
 800ee36:	4770      	bx	lr
 800ee38:	20000020 	.word	0x20000020

0800ee3c <abort>:
 800ee3c:	b508      	push	{r3, lr}
 800ee3e:	2006      	movs	r0, #6
 800ee40:	f000 fa08 	bl	800f254 <raise>
 800ee44:	2001      	movs	r0, #1
 800ee46:	f7f4 ff79 	bl	8003d3c <_exit>

0800ee4a <_malloc_usable_size_r>:
 800ee4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee4e:	1f18      	subs	r0, r3, #4
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	bfbc      	itt	lt
 800ee54:	580b      	ldrlt	r3, [r1, r0]
 800ee56:	18c0      	addlt	r0, r0, r3
 800ee58:	4770      	bx	lr

0800ee5a <__sfputc_r>:
 800ee5a:	6893      	ldr	r3, [r2, #8]
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	b410      	push	{r4}
 800ee62:	6093      	str	r3, [r2, #8]
 800ee64:	da08      	bge.n	800ee78 <__sfputc_r+0x1e>
 800ee66:	6994      	ldr	r4, [r2, #24]
 800ee68:	42a3      	cmp	r3, r4
 800ee6a:	db01      	blt.n	800ee70 <__sfputc_r+0x16>
 800ee6c:	290a      	cmp	r1, #10
 800ee6e:	d103      	bne.n	800ee78 <__sfputc_r+0x1e>
 800ee70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee74:	f000 b932 	b.w	800f0dc <__swbuf_r>
 800ee78:	6813      	ldr	r3, [r2, #0]
 800ee7a:	1c58      	adds	r0, r3, #1
 800ee7c:	6010      	str	r0, [r2, #0]
 800ee7e:	7019      	strb	r1, [r3, #0]
 800ee80:	4608      	mov	r0, r1
 800ee82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <__sfputs_r>:
 800ee88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee8a:	4606      	mov	r6, r0
 800ee8c:	460f      	mov	r7, r1
 800ee8e:	4614      	mov	r4, r2
 800ee90:	18d5      	adds	r5, r2, r3
 800ee92:	42ac      	cmp	r4, r5
 800ee94:	d101      	bne.n	800ee9a <__sfputs_r+0x12>
 800ee96:	2000      	movs	r0, #0
 800ee98:	e007      	b.n	800eeaa <__sfputs_r+0x22>
 800ee9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee9e:	463a      	mov	r2, r7
 800eea0:	4630      	mov	r0, r6
 800eea2:	f7ff ffda 	bl	800ee5a <__sfputc_r>
 800eea6:	1c43      	adds	r3, r0, #1
 800eea8:	d1f3      	bne.n	800ee92 <__sfputs_r+0xa>
 800eeaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eeac <_vfiprintf_r>:
 800eeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb0:	460d      	mov	r5, r1
 800eeb2:	b09d      	sub	sp, #116	@ 0x74
 800eeb4:	4614      	mov	r4, r2
 800eeb6:	4698      	mov	r8, r3
 800eeb8:	4606      	mov	r6, r0
 800eeba:	b118      	cbz	r0, 800eec4 <_vfiprintf_r+0x18>
 800eebc:	6a03      	ldr	r3, [r0, #32]
 800eebe:	b90b      	cbnz	r3, 800eec4 <_vfiprintf_r+0x18>
 800eec0:	f7fc fda2 	bl	800ba08 <__sinit>
 800eec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eec6:	07d9      	lsls	r1, r3, #31
 800eec8:	d405      	bmi.n	800eed6 <_vfiprintf_r+0x2a>
 800eeca:	89ab      	ldrh	r3, [r5, #12]
 800eecc:	059a      	lsls	r2, r3, #22
 800eece:	d402      	bmi.n	800eed6 <_vfiprintf_r+0x2a>
 800eed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eed2:	f7fc ff06 	bl	800bce2 <__retarget_lock_acquire_recursive>
 800eed6:	89ab      	ldrh	r3, [r5, #12]
 800eed8:	071b      	lsls	r3, r3, #28
 800eeda:	d501      	bpl.n	800eee0 <_vfiprintf_r+0x34>
 800eedc:	692b      	ldr	r3, [r5, #16]
 800eede:	b99b      	cbnz	r3, 800ef08 <_vfiprintf_r+0x5c>
 800eee0:	4629      	mov	r1, r5
 800eee2:	4630      	mov	r0, r6
 800eee4:	f000 f938 	bl	800f158 <__swsetup_r>
 800eee8:	b170      	cbz	r0, 800ef08 <_vfiprintf_r+0x5c>
 800eeea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eeec:	07dc      	lsls	r4, r3, #31
 800eeee:	d504      	bpl.n	800eefa <_vfiprintf_r+0x4e>
 800eef0:	f04f 30ff 	mov.w	r0, #4294967295
 800eef4:	b01d      	add	sp, #116	@ 0x74
 800eef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eefa:	89ab      	ldrh	r3, [r5, #12]
 800eefc:	0598      	lsls	r0, r3, #22
 800eefe:	d4f7      	bmi.n	800eef0 <_vfiprintf_r+0x44>
 800ef00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef02:	f7fc feef 	bl	800bce4 <__retarget_lock_release_recursive>
 800ef06:	e7f3      	b.n	800eef0 <_vfiprintf_r+0x44>
 800ef08:	2300      	movs	r3, #0
 800ef0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef0c:	2320      	movs	r3, #32
 800ef0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef12:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef16:	2330      	movs	r3, #48	@ 0x30
 800ef18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f0c8 <_vfiprintf_r+0x21c>
 800ef1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef20:	f04f 0901 	mov.w	r9, #1
 800ef24:	4623      	mov	r3, r4
 800ef26:	469a      	mov	sl, r3
 800ef28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef2c:	b10a      	cbz	r2, 800ef32 <_vfiprintf_r+0x86>
 800ef2e:	2a25      	cmp	r2, #37	@ 0x25
 800ef30:	d1f9      	bne.n	800ef26 <_vfiprintf_r+0x7a>
 800ef32:	ebba 0b04 	subs.w	fp, sl, r4
 800ef36:	d00b      	beq.n	800ef50 <_vfiprintf_r+0xa4>
 800ef38:	465b      	mov	r3, fp
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	4630      	mov	r0, r6
 800ef40:	f7ff ffa2 	bl	800ee88 <__sfputs_r>
 800ef44:	3001      	adds	r0, #1
 800ef46:	f000 80a7 	beq.w	800f098 <_vfiprintf_r+0x1ec>
 800ef4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef4c:	445a      	add	r2, fp
 800ef4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef50:	f89a 3000 	ldrb.w	r3, [sl]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	f000 809f 	beq.w	800f098 <_vfiprintf_r+0x1ec>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef64:	f10a 0a01 	add.w	sl, sl, #1
 800ef68:	9304      	str	r3, [sp, #16]
 800ef6a:	9307      	str	r3, [sp, #28]
 800ef6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef70:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef72:	4654      	mov	r4, sl
 800ef74:	2205      	movs	r2, #5
 800ef76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef7a:	4853      	ldr	r0, [pc, #332]	@ (800f0c8 <_vfiprintf_r+0x21c>)
 800ef7c:	f7f1 f930 	bl	80001e0 <memchr>
 800ef80:	9a04      	ldr	r2, [sp, #16]
 800ef82:	b9d8      	cbnz	r0, 800efbc <_vfiprintf_r+0x110>
 800ef84:	06d1      	lsls	r1, r2, #27
 800ef86:	bf44      	itt	mi
 800ef88:	2320      	movmi	r3, #32
 800ef8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef8e:	0713      	lsls	r3, r2, #28
 800ef90:	bf44      	itt	mi
 800ef92:	232b      	movmi	r3, #43	@ 0x2b
 800ef94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef98:	f89a 3000 	ldrb.w	r3, [sl]
 800ef9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef9e:	d015      	beq.n	800efcc <_vfiprintf_r+0x120>
 800efa0:	9a07      	ldr	r2, [sp, #28]
 800efa2:	4654      	mov	r4, sl
 800efa4:	2000      	movs	r0, #0
 800efa6:	f04f 0c0a 	mov.w	ip, #10
 800efaa:	4621      	mov	r1, r4
 800efac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efb0:	3b30      	subs	r3, #48	@ 0x30
 800efb2:	2b09      	cmp	r3, #9
 800efb4:	d94b      	bls.n	800f04e <_vfiprintf_r+0x1a2>
 800efb6:	b1b0      	cbz	r0, 800efe6 <_vfiprintf_r+0x13a>
 800efb8:	9207      	str	r2, [sp, #28]
 800efba:	e014      	b.n	800efe6 <_vfiprintf_r+0x13a>
 800efbc:	eba0 0308 	sub.w	r3, r0, r8
 800efc0:	fa09 f303 	lsl.w	r3, r9, r3
 800efc4:	4313      	orrs	r3, r2
 800efc6:	9304      	str	r3, [sp, #16]
 800efc8:	46a2      	mov	sl, r4
 800efca:	e7d2      	b.n	800ef72 <_vfiprintf_r+0xc6>
 800efcc:	9b03      	ldr	r3, [sp, #12]
 800efce:	1d19      	adds	r1, r3, #4
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	9103      	str	r1, [sp, #12]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	bfbb      	ittet	lt
 800efd8:	425b      	neglt	r3, r3
 800efda:	f042 0202 	orrlt.w	r2, r2, #2
 800efde:	9307      	strge	r3, [sp, #28]
 800efe0:	9307      	strlt	r3, [sp, #28]
 800efe2:	bfb8      	it	lt
 800efe4:	9204      	strlt	r2, [sp, #16]
 800efe6:	7823      	ldrb	r3, [r4, #0]
 800efe8:	2b2e      	cmp	r3, #46	@ 0x2e
 800efea:	d10a      	bne.n	800f002 <_vfiprintf_r+0x156>
 800efec:	7863      	ldrb	r3, [r4, #1]
 800efee:	2b2a      	cmp	r3, #42	@ 0x2a
 800eff0:	d132      	bne.n	800f058 <_vfiprintf_r+0x1ac>
 800eff2:	9b03      	ldr	r3, [sp, #12]
 800eff4:	1d1a      	adds	r2, r3, #4
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	9203      	str	r2, [sp, #12]
 800effa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800effe:	3402      	adds	r4, #2
 800f000:	9305      	str	r3, [sp, #20]
 800f002:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f0d8 <_vfiprintf_r+0x22c>
 800f006:	7821      	ldrb	r1, [r4, #0]
 800f008:	2203      	movs	r2, #3
 800f00a:	4650      	mov	r0, sl
 800f00c:	f7f1 f8e8 	bl	80001e0 <memchr>
 800f010:	b138      	cbz	r0, 800f022 <_vfiprintf_r+0x176>
 800f012:	9b04      	ldr	r3, [sp, #16]
 800f014:	eba0 000a 	sub.w	r0, r0, sl
 800f018:	2240      	movs	r2, #64	@ 0x40
 800f01a:	4082      	lsls	r2, r0
 800f01c:	4313      	orrs	r3, r2
 800f01e:	3401      	adds	r4, #1
 800f020:	9304      	str	r3, [sp, #16]
 800f022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f026:	4829      	ldr	r0, [pc, #164]	@ (800f0cc <_vfiprintf_r+0x220>)
 800f028:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f02c:	2206      	movs	r2, #6
 800f02e:	f7f1 f8d7 	bl	80001e0 <memchr>
 800f032:	2800      	cmp	r0, #0
 800f034:	d03f      	beq.n	800f0b6 <_vfiprintf_r+0x20a>
 800f036:	4b26      	ldr	r3, [pc, #152]	@ (800f0d0 <_vfiprintf_r+0x224>)
 800f038:	bb1b      	cbnz	r3, 800f082 <_vfiprintf_r+0x1d6>
 800f03a:	9b03      	ldr	r3, [sp, #12]
 800f03c:	3307      	adds	r3, #7
 800f03e:	f023 0307 	bic.w	r3, r3, #7
 800f042:	3308      	adds	r3, #8
 800f044:	9303      	str	r3, [sp, #12]
 800f046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f048:	443b      	add	r3, r7
 800f04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f04c:	e76a      	b.n	800ef24 <_vfiprintf_r+0x78>
 800f04e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f052:	460c      	mov	r4, r1
 800f054:	2001      	movs	r0, #1
 800f056:	e7a8      	b.n	800efaa <_vfiprintf_r+0xfe>
 800f058:	2300      	movs	r3, #0
 800f05a:	3401      	adds	r4, #1
 800f05c:	9305      	str	r3, [sp, #20]
 800f05e:	4619      	mov	r1, r3
 800f060:	f04f 0c0a 	mov.w	ip, #10
 800f064:	4620      	mov	r0, r4
 800f066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f06a:	3a30      	subs	r2, #48	@ 0x30
 800f06c:	2a09      	cmp	r2, #9
 800f06e:	d903      	bls.n	800f078 <_vfiprintf_r+0x1cc>
 800f070:	2b00      	cmp	r3, #0
 800f072:	d0c6      	beq.n	800f002 <_vfiprintf_r+0x156>
 800f074:	9105      	str	r1, [sp, #20]
 800f076:	e7c4      	b.n	800f002 <_vfiprintf_r+0x156>
 800f078:	fb0c 2101 	mla	r1, ip, r1, r2
 800f07c:	4604      	mov	r4, r0
 800f07e:	2301      	movs	r3, #1
 800f080:	e7f0      	b.n	800f064 <_vfiprintf_r+0x1b8>
 800f082:	ab03      	add	r3, sp, #12
 800f084:	9300      	str	r3, [sp, #0]
 800f086:	462a      	mov	r2, r5
 800f088:	4b12      	ldr	r3, [pc, #72]	@ (800f0d4 <_vfiprintf_r+0x228>)
 800f08a:	a904      	add	r1, sp, #16
 800f08c:	4630      	mov	r0, r6
 800f08e:	f7fb fe63 	bl	800ad58 <_printf_float>
 800f092:	4607      	mov	r7, r0
 800f094:	1c78      	adds	r0, r7, #1
 800f096:	d1d6      	bne.n	800f046 <_vfiprintf_r+0x19a>
 800f098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f09a:	07d9      	lsls	r1, r3, #31
 800f09c:	d405      	bmi.n	800f0aa <_vfiprintf_r+0x1fe>
 800f09e:	89ab      	ldrh	r3, [r5, #12]
 800f0a0:	059a      	lsls	r2, r3, #22
 800f0a2:	d402      	bmi.n	800f0aa <_vfiprintf_r+0x1fe>
 800f0a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0a6:	f7fc fe1d 	bl	800bce4 <__retarget_lock_release_recursive>
 800f0aa:	89ab      	ldrh	r3, [r5, #12]
 800f0ac:	065b      	lsls	r3, r3, #25
 800f0ae:	f53f af1f 	bmi.w	800eef0 <_vfiprintf_r+0x44>
 800f0b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0b4:	e71e      	b.n	800eef4 <_vfiprintf_r+0x48>
 800f0b6:	ab03      	add	r3, sp, #12
 800f0b8:	9300      	str	r3, [sp, #0]
 800f0ba:	462a      	mov	r2, r5
 800f0bc:	4b05      	ldr	r3, [pc, #20]	@ (800f0d4 <_vfiprintf_r+0x228>)
 800f0be:	a904      	add	r1, sp, #16
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	f7fc f8e1 	bl	800b288 <_printf_i>
 800f0c6:	e7e4      	b.n	800f092 <_vfiprintf_r+0x1e6>
 800f0c8:	0800fb69 	.word	0x0800fb69
 800f0cc:	0800fb73 	.word	0x0800fb73
 800f0d0:	0800ad59 	.word	0x0800ad59
 800f0d4:	0800ee89 	.word	0x0800ee89
 800f0d8:	0800fb6f 	.word	0x0800fb6f

0800f0dc <__swbuf_r>:
 800f0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0de:	460e      	mov	r6, r1
 800f0e0:	4614      	mov	r4, r2
 800f0e2:	4605      	mov	r5, r0
 800f0e4:	b118      	cbz	r0, 800f0ee <__swbuf_r+0x12>
 800f0e6:	6a03      	ldr	r3, [r0, #32]
 800f0e8:	b90b      	cbnz	r3, 800f0ee <__swbuf_r+0x12>
 800f0ea:	f7fc fc8d 	bl	800ba08 <__sinit>
 800f0ee:	69a3      	ldr	r3, [r4, #24]
 800f0f0:	60a3      	str	r3, [r4, #8]
 800f0f2:	89a3      	ldrh	r3, [r4, #12]
 800f0f4:	071a      	lsls	r2, r3, #28
 800f0f6:	d501      	bpl.n	800f0fc <__swbuf_r+0x20>
 800f0f8:	6923      	ldr	r3, [r4, #16]
 800f0fa:	b943      	cbnz	r3, 800f10e <__swbuf_r+0x32>
 800f0fc:	4621      	mov	r1, r4
 800f0fe:	4628      	mov	r0, r5
 800f100:	f000 f82a 	bl	800f158 <__swsetup_r>
 800f104:	b118      	cbz	r0, 800f10e <__swbuf_r+0x32>
 800f106:	f04f 37ff 	mov.w	r7, #4294967295
 800f10a:	4638      	mov	r0, r7
 800f10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f10e:	6823      	ldr	r3, [r4, #0]
 800f110:	6922      	ldr	r2, [r4, #16]
 800f112:	1a98      	subs	r0, r3, r2
 800f114:	6963      	ldr	r3, [r4, #20]
 800f116:	b2f6      	uxtb	r6, r6
 800f118:	4283      	cmp	r3, r0
 800f11a:	4637      	mov	r7, r6
 800f11c:	dc05      	bgt.n	800f12a <__swbuf_r+0x4e>
 800f11e:	4621      	mov	r1, r4
 800f120:	4628      	mov	r0, r5
 800f122:	f7ff fa53 	bl	800e5cc <_fflush_r>
 800f126:	2800      	cmp	r0, #0
 800f128:	d1ed      	bne.n	800f106 <__swbuf_r+0x2a>
 800f12a:	68a3      	ldr	r3, [r4, #8]
 800f12c:	3b01      	subs	r3, #1
 800f12e:	60a3      	str	r3, [r4, #8]
 800f130:	6823      	ldr	r3, [r4, #0]
 800f132:	1c5a      	adds	r2, r3, #1
 800f134:	6022      	str	r2, [r4, #0]
 800f136:	701e      	strb	r6, [r3, #0]
 800f138:	6962      	ldr	r2, [r4, #20]
 800f13a:	1c43      	adds	r3, r0, #1
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d004      	beq.n	800f14a <__swbuf_r+0x6e>
 800f140:	89a3      	ldrh	r3, [r4, #12]
 800f142:	07db      	lsls	r3, r3, #31
 800f144:	d5e1      	bpl.n	800f10a <__swbuf_r+0x2e>
 800f146:	2e0a      	cmp	r6, #10
 800f148:	d1df      	bne.n	800f10a <__swbuf_r+0x2e>
 800f14a:	4621      	mov	r1, r4
 800f14c:	4628      	mov	r0, r5
 800f14e:	f7ff fa3d 	bl	800e5cc <_fflush_r>
 800f152:	2800      	cmp	r0, #0
 800f154:	d0d9      	beq.n	800f10a <__swbuf_r+0x2e>
 800f156:	e7d6      	b.n	800f106 <__swbuf_r+0x2a>

0800f158 <__swsetup_r>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	4b29      	ldr	r3, [pc, #164]	@ (800f200 <__swsetup_r+0xa8>)
 800f15c:	4605      	mov	r5, r0
 800f15e:	6818      	ldr	r0, [r3, #0]
 800f160:	460c      	mov	r4, r1
 800f162:	b118      	cbz	r0, 800f16c <__swsetup_r+0x14>
 800f164:	6a03      	ldr	r3, [r0, #32]
 800f166:	b90b      	cbnz	r3, 800f16c <__swsetup_r+0x14>
 800f168:	f7fc fc4e 	bl	800ba08 <__sinit>
 800f16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f170:	0719      	lsls	r1, r3, #28
 800f172:	d422      	bmi.n	800f1ba <__swsetup_r+0x62>
 800f174:	06da      	lsls	r2, r3, #27
 800f176:	d407      	bmi.n	800f188 <__swsetup_r+0x30>
 800f178:	2209      	movs	r2, #9
 800f17a:	602a      	str	r2, [r5, #0]
 800f17c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f180:	81a3      	strh	r3, [r4, #12]
 800f182:	f04f 30ff 	mov.w	r0, #4294967295
 800f186:	e033      	b.n	800f1f0 <__swsetup_r+0x98>
 800f188:	0758      	lsls	r0, r3, #29
 800f18a:	d512      	bpl.n	800f1b2 <__swsetup_r+0x5a>
 800f18c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f18e:	b141      	cbz	r1, 800f1a2 <__swsetup_r+0x4a>
 800f190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f194:	4299      	cmp	r1, r3
 800f196:	d002      	beq.n	800f19e <__swsetup_r+0x46>
 800f198:	4628      	mov	r0, r5
 800f19a:	f7fd fc05 	bl	800c9a8 <_free_r>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1a2:	89a3      	ldrh	r3, [r4, #12]
 800f1a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f1a8:	81a3      	strh	r3, [r4, #12]
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	6063      	str	r3, [r4, #4]
 800f1ae:	6923      	ldr	r3, [r4, #16]
 800f1b0:	6023      	str	r3, [r4, #0]
 800f1b2:	89a3      	ldrh	r3, [r4, #12]
 800f1b4:	f043 0308 	orr.w	r3, r3, #8
 800f1b8:	81a3      	strh	r3, [r4, #12]
 800f1ba:	6923      	ldr	r3, [r4, #16]
 800f1bc:	b94b      	cbnz	r3, 800f1d2 <__swsetup_r+0x7a>
 800f1be:	89a3      	ldrh	r3, [r4, #12]
 800f1c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1c8:	d003      	beq.n	800f1d2 <__swsetup_r+0x7a>
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	f000 f883 	bl	800f2d8 <__smakebuf_r>
 800f1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1d6:	f013 0201 	ands.w	r2, r3, #1
 800f1da:	d00a      	beq.n	800f1f2 <__swsetup_r+0x9a>
 800f1dc:	2200      	movs	r2, #0
 800f1de:	60a2      	str	r2, [r4, #8]
 800f1e0:	6962      	ldr	r2, [r4, #20]
 800f1e2:	4252      	negs	r2, r2
 800f1e4:	61a2      	str	r2, [r4, #24]
 800f1e6:	6922      	ldr	r2, [r4, #16]
 800f1e8:	b942      	cbnz	r2, 800f1fc <__swsetup_r+0xa4>
 800f1ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f1ee:	d1c5      	bne.n	800f17c <__swsetup_r+0x24>
 800f1f0:	bd38      	pop	{r3, r4, r5, pc}
 800f1f2:	0799      	lsls	r1, r3, #30
 800f1f4:	bf58      	it	pl
 800f1f6:	6962      	ldrpl	r2, [r4, #20]
 800f1f8:	60a2      	str	r2, [r4, #8]
 800f1fa:	e7f4      	b.n	800f1e6 <__swsetup_r+0x8e>
 800f1fc:	2000      	movs	r0, #0
 800f1fe:	e7f7      	b.n	800f1f0 <__swsetup_r+0x98>
 800f200:	20000020 	.word	0x20000020

0800f204 <_raise_r>:
 800f204:	291f      	cmp	r1, #31
 800f206:	b538      	push	{r3, r4, r5, lr}
 800f208:	4605      	mov	r5, r0
 800f20a:	460c      	mov	r4, r1
 800f20c:	d904      	bls.n	800f218 <_raise_r+0x14>
 800f20e:	2316      	movs	r3, #22
 800f210:	6003      	str	r3, [r0, #0]
 800f212:	f04f 30ff 	mov.w	r0, #4294967295
 800f216:	bd38      	pop	{r3, r4, r5, pc}
 800f218:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f21a:	b112      	cbz	r2, 800f222 <_raise_r+0x1e>
 800f21c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f220:	b94b      	cbnz	r3, 800f236 <_raise_r+0x32>
 800f222:	4628      	mov	r0, r5
 800f224:	f000 f830 	bl	800f288 <_getpid_r>
 800f228:	4622      	mov	r2, r4
 800f22a:	4601      	mov	r1, r0
 800f22c:	4628      	mov	r0, r5
 800f22e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f232:	f000 b817 	b.w	800f264 <_kill_r>
 800f236:	2b01      	cmp	r3, #1
 800f238:	d00a      	beq.n	800f250 <_raise_r+0x4c>
 800f23a:	1c59      	adds	r1, r3, #1
 800f23c:	d103      	bne.n	800f246 <_raise_r+0x42>
 800f23e:	2316      	movs	r3, #22
 800f240:	6003      	str	r3, [r0, #0]
 800f242:	2001      	movs	r0, #1
 800f244:	e7e7      	b.n	800f216 <_raise_r+0x12>
 800f246:	2100      	movs	r1, #0
 800f248:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f24c:	4620      	mov	r0, r4
 800f24e:	4798      	blx	r3
 800f250:	2000      	movs	r0, #0
 800f252:	e7e0      	b.n	800f216 <_raise_r+0x12>

0800f254 <raise>:
 800f254:	4b02      	ldr	r3, [pc, #8]	@ (800f260 <raise+0xc>)
 800f256:	4601      	mov	r1, r0
 800f258:	6818      	ldr	r0, [r3, #0]
 800f25a:	f7ff bfd3 	b.w	800f204 <_raise_r>
 800f25e:	bf00      	nop
 800f260:	20000020 	.word	0x20000020

0800f264 <_kill_r>:
 800f264:	b538      	push	{r3, r4, r5, lr}
 800f266:	4d07      	ldr	r5, [pc, #28]	@ (800f284 <_kill_r+0x20>)
 800f268:	2300      	movs	r3, #0
 800f26a:	4604      	mov	r4, r0
 800f26c:	4608      	mov	r0, r1
 800f26e:	4611      	mov	r1, r2
 800f270:	602b      	str	r3, [r5, #0]
 800f272:	f7f4 fd53 	bl	8003d1c <_kill>
 800f276:	1c43      	adds	r3, r0, #1
 800f278:	d102      	bne.n	800f280 <_kill_r+0x1c>
 800f27a:	682b      	ldr	r3, [r5, #0]
 800f27c:	b103      	cbz	r3, 800f280 <_kill_r+0x1c>
 800f27e:	6023      	str	r3, [r4, #0]
 800f280:	bd38      	pop	{r3, r4, r5, pc}
 800f282:	bf00      	nop
 800f284:	20005238 	.word	0x20005238

0800f288 <_getpid_r>:
 800f288:	f7f4 bd40 	b.w	8003d0c <_getpid>

0800f28c <__swhatbuf_r>:
 800f28c:	b570      	push	{r4, r5, r6, lr}
 800f28e:	460c      	mov	r4, r1
 800f290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f294:	2900      	cmp	r1, #0
 800f296:	b096      	sub	sp, #88	@ 0x58
 800f298:	4615      	mov	r5, r2
 800f29a:	461e      	mov	r6, r3
 800f29c:	da0d      	bge.n	800f2ba <__swhatbuf_r+0x2e>
 800f29e:	89a3      	ldrh	r3, [r4, #12]
 800f2a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f2a4:	f04f 0100 	mov.w	r1, #0
 800f2a8:	bf14      	ite	ne
 800f2aa:	2340      	movne	r3, #64	@ 0x40
 800f2ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	6031      	str	r1, [r6, #0]
 800f2b4:	602b      	str	r3, [r5, #0]
 800f2b6:	b016      	add	sp, #88	@ 0x58
 800f2b8:	bd70      	pop	{r4, r5, r6, pc}
 800f2ba:	466a      	mov	r2, sp
 800f2bc:	f000 f848 	bl	800f350 <_fstat_r>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	dbec      	blt.n	800f29e <__swhatbuf_r+0x12>
 800f2c4:	9901      	ldr	r1, [sp, #4]
 800f2c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f2ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f2ce:	4259      	negs	r1, r3
 800f2d0:	4159      	adcs	r1, r3
 800f2d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f2d6:	e7eb      	b.n	800f2b0 <__swhatbuf_r+0x24>

0800f2d8 <__smakebuf_r>:
 800f2d8:	898b      	ldrh	r3, [r1, #12]
 800f2da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2dc:	079d      	lsls	r5, r3, #30
 800f2de:	4606      	mov	r6, r0
 800f2e0:	460c      	mov	r4, r1
 800f2e2:	d507      	bpl.n	800f2f4 <__smakebuf_r+0x1c>
 800f2e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f2e8:	6023      	str	r3, [r4, #0]
 800f2ea:	6123      	str	r3, [r4, #16]
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	6163      	str	r3, [r4, #20]
 800f2f0:	b003      	add	sp, #12
 800f2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2f4:	ab01      	add	r3, sp, #4
 800f2f6:	466a      	mov	r2, sp
 800f2f8:	f7ff ffc8 	bl	800f28c <__swhatbuf_r>
 800f2fc:	9f00      	ldr	r7, [sp, #0]
 800f2fe:	4605      	mov	r5, r0
 800f300:	4639      	mov	r1, r7
 800f302:	4630      	mov	r0, r6
 800f304:	f7fd fbc4 	bl	800ca90 <_malloc_r>
 800f308:	b948      	cbnz	r0, 800f31e <__smakebuf_r+0x46>
 800f30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f30e:	059a      	lsls	r2, r3, #22
 800f310:	d4ee      	bmi.n	800f2f0 <__smakebuf_r+0x18>
 800f312:	f023 0303 	bic.w	r3, r3, #3
 800f316:	f043 0302 	orr.w	r3, r3, #2
 800f31a:	81a3      	strh	r3, [r4, #12]
 800f31c:	e7e2      	b.n	800f2e4 <__smakebuf_r+0xc>
 800f31e:	89a3      	ldrh	r3, [r4, #12]
 800f320:	6020      	str	r0, [r4, #0]
 800f322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f326:	81a3      	strh	r3, [r4, #12]
 800f328:	9b01      	ldr	r3, [sp, #4]
 800f32a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f32e:	b15b      	cbz	r3, 800f348 <__smakebuf_r+0x70>
 800f330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f334:	4630      	mov	r0, r6
 800f336:	f000 f81d 	bl	800f374 <_isatty_r>
 800f33a:	b128      	cbz	r0, 800f348 <__smakebuf_r+0x70>
 800f33c:	89a3      	ldrh	r3, [r4, #12]
 800f33e:	f023 0303 	bic.w	r3, r3, #3
 800f342:	f043 0301 	orr.w	r3, r3, #1
 800f346:	81a3      	strh	r3, [r4, #12]
 800f348:	89a3      	ldrh	r3, [r4, #12]
 800f34a:	431d      	orrs	r5, r3
 800f34c:	81a5      	strh	r5, [r4, #12]
 800f34e:	e7cf      	b.n	800f2f0 <__smakebuf_r+0x18>

0800f350 <_fstat_r>:
 800f350:	b538      	push	{r3, r4, r5, lr}
 800f352:	4d07      	ldr	r5, [pc, #28]	@ (800f370 <_fstat_r+0x20>)
 800f354:	2300      	movs	r3, #0
 800f356:	4604      	mov	r4, r0
 800f358:	4608      	mov	r0, r1
 800f35a:	4611      	mov	r1, r2
 800f35c:	602b      	str	r3, [r5, #0]
 800f35e:	f7f4 fd3d 	bl	8003ddc <_fstat>
 800f362:	1c43      	adds	r3, r0, #1
 800f364:	d102      	bne.n	800f36c <_fstat_r+0x1c>
 800f366:	682b      	ldr	r3, [r5, #0]
 800f368:	b103      	cbz	r3, 800f36c <_fstat_r+0x1c>
 800f36a:	6023      	str	r3, [r4, #0]
 800f36c:	bd38      	pop	{r3, r4, r5, pc}
 800f36e:	bf00      	nop
 800f370:	20005238 	.word	0x20005238

0800f374 <_isatty_r>:
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	4d06      	ldr	r5, [pc, #24]	@ (800f390 <_isatty_r+0x1c>)
 800f378:	2300      	movs	r3, #0
 800f37a:	4604      	mov	r4, r0
 800f37c:	4608      	mov	r0, r1
 800f37e:	602b      	str	r3, [r5, #0]
 800f380:	f7f4 fd3c 	bl	8003dfc <_isatty>
 800f384:	1c43      	adds	r3, r0, #1
 800f386:	d102      	bne.n	800f38e <_isatty_r+0x1a>
 800f388:	682b      	ldr	r3, [r5, #0]
 800f38a:	b103      	cbz	r3, 800f38e <_isatty_r+0x1a>
 800f38c:	6023      	str	r3, [r4, #0]
 800f38e:	bd38      	pop	{r3, r4, r5, pc}
 800f390:	20005238 	.word	0x20005238

0800f394 <_init>:
 800f394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f396:	bf00      	nop
 800f398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f39a:	bc08      	pop	{r3}
 800f39c:	469e      	mov	lr, r3
 800f39e:	4770      	bx	lr

0800f3a0 <_fini>:
 800f3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a2:	bf00      	nop
 800f3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3a6:	bc08      	pop	{r3}
 800f3a8:	469e      	mov	lr, r3
 800f3aa:	4770      	bx	lr
